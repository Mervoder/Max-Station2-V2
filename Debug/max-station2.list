
max-station2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080118a0  080118a0  000128a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d78  08011d78  000132e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011d78  08011d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d80  08011d80  000132e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d80  08011d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d84  08011d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08011d88  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f4  200002e8  08012070  000132e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025dc  08012070  000135dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217b7  00000000  00000000  00013318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c58  00000000  00000000  00034acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00039728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001657  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002980f  00000000  00000000  0003ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000273f6  00000000  00000000  0006624e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea054  00000000  00000000  0008d644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ed0  00000000  00000000  001776dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001805ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011888 	.word	0x08011888

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002ec 	.word	0x200002ec
 800020c:	08011888 	.word	0x08011888

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00c ff18 	bl	800df1c <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00d fe4e 	bl	800ee66 <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00d fe44 	bl	800ee66 <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00d fe35 	bl	800ee66 <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00d fe2b 	bl	800ee66 <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00d fe1c 	bl	800ee66 <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00d fe12 	bl	800ee66 <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00d fe03 	bl	800ee66 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00d fdf9 	bl	800ee66 <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	080118a0 	.word	0x080118a0
 80014b0:	080118a8 	.word	0x080118a8
 80014b4:	080118b0 	.word	0x080118b0
 80014b8:	080118b8 	.word	0x080118b8
 80014bc:	080118c0 	.word	0x080118c0
 80014c0:	080118c8 	.word	0x080118c8
 80014c4:	080118d0 	.word	0x080118d0
 80014c8:	080118d8 	.word	0x080118d8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00d fb5c 	bl	800ef9a <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00d fa70 	bl	800ee56 <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00d fa57 	bl	800ee56 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <E220_write_register>:
//{
//	counthalf++;
//}

int8_t E220_write_register(uint8_t reg,uint8_t parameter)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2101      	movs	r1, #1
 8001b14:	481c      	ldr	r0, [pc, #112]	@ (8001b88 <E220_write_register+0x88>)
 8001b16:	f002 ff87 	bl	8004a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <E220_write_register+0x88>)
 8001b20:	f002 ff82 	bl	8004a28 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001b24:	200a      	movs	r0, #10
 8001b26:	f001 fcad 	bl	8003484 <HAL_Delay>

	uint8_t send_data[4]={CMD_SET_REG,reg,1,parameter};
 8001b2a:	23c0      	movs	r3, #192	@ 0xc0
 8001b2c:	733b      	strb	r3, [r7, #12]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	737b      	strb	r3, [r7, #13]
 8001b32:	2301      	movs	r3, #1
 8001b34:	73bb      	strb	r3, [r7, #14]
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[4]={0};
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart3,send_data ,4, 100);
 8001b3e:	f107 010c 	add.w	r1, r7, #12
 8001b42:	2364      	movs	r3, #100	@ 0x64
 8001b44:	2204      	movs	r2, #4
 8001b46:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <E220_write_register+0x8c>)
 8001b48:	f006 f83b 	bl	8007bc2 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 8001b4c:	f107 0108 	add.w	r1, r7, #8
 8001b50:	2364      	movs	r3, #100	@ 0x64
 8001b52:	2204      	movs	r2, #4
 8001b54:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <E220_write_register+0x8c>)
 8001b56:	f006 f8c6 	bl	8007ce6 <HAL_UART_Receive>


	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1 && receive_data[3] == parameter)
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	2bc1      	cmp	r3, #193	@ 0xc1
 8001b5e:	d10d      	bne.n	8001b7c <E220_write_register+0x7c>
 8001b60:	7a7b      	ldrb	r3, [r7, #9]
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d109      	bne.n	8001b7c <E220_write_register+0x7c>
 8001b68:	7abb      	ldrb	r3, [r7, #10]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d106      	bne.n	8001b7c <E220_write_register+0x7c>
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	79ba      	ldrb	r2, [r7, #6]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d102      	bne.n	8001b7c <E220_write_register+0x7c>
		return receive_data[3];
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	e001      	b.n	8001b80 <E220_write_register+0x80>
	else
		return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	200004c8 	.word	0x200004c8

08001b90 <E220_read_register>:
int8_t E220_read_register(uint8_t reg)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]


	uint8_t send_data[3]={CMD_READ_REG,reg,1};
 8001b9a:	23c1      	movs	r3, #193	@ 0xc1
 8001b9c:	733b      	strb	r3, [r7, #12]
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	737b      	strb	r3, [r7, #13]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73bb      	strb	r3, [r7, #14]
	uint8_t receive_data[4]={0};
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart3,send_data ,3, 100);
 8001baa:	f107 010c 	add.w	r1, r7, #12
 8001bae:	2364      	movs	r3, #100	@ 0x64
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	480e      	ldr	r0, [pc, #56]	@ (8001bec <E220_read_register+0x5c>)
 8001bb4:	f006 f805 	bl	8007bc2 <HAL_UART_Transmit>



	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 8001bb8:	f107 0108 	add.w	r1, r7, #8
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	480a      	ldr	r0, [pc, #40]	@ (8001bec <E220_read_register+0x5c>)
 8001bc2:	f006 f890 	bl	8007ce6 <HAL_UART_Receive>

	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1)
 8001bc6:	7a3b      	ldrb	r3, [r7, #8]
 8001bc8:	2bc1      	cmp	r3, #193	@ 0xc1
 8001bca:	d109      	bne.n	8001be0 <E220_read_register+0x50>
 8001bcc:	7a7b      	ldrb	r3, [r7, #9]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d105      	bne.n	8001be0 <E220_read_register+0x50>
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <E220_read_register+0x50>
		return receive_data[3];
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	e001      	b.n	8001be4 <E220_read_register+0x54>
	else
		return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200004c8 	.word	0x200004c8

08001bf0 <HAL_UART_RxCpltCallback>:
	return 1;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d11e      	bne.n	8001c3e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d00f      	beq.n	8001c28 <HAL_UART_RxCpltCallback+0x38>
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b47      	cmp	r3, #71	@ 0x47
 8001c0e:	d80b      	bhi.n	8001c28 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8001c10:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	b2d1      	uxtb	r1, r2
 8001c18:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c1a:	7011      	strb	r1, [r2, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8001c20:	7819      	ldrb	r1, [r3, #0]
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_UART_RxCpltCallback+0xbc>)
 8001c24:	5499      	strb	r1, [r3, r2]
 8001c26:	e005      	b.n	8001c34 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8001c34:	2201      	movs	r2, #1
 8001c36:	491b      	ldr	r1, [pc, #108]	@ (8001ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8001c38:	4819      	ldr	r0, [pc, #100]	@ (8001ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8001c3a:	f006 f8f6 	bl	8007e2a <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
//	}



	if(huart == &huart2) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d127      	bne.n	8001c96 <HAL_UART_RxCpltCallback+0xa6>
			if( rx_data != '\n'&& rx_index < RX_BUFFER_SIZE) {
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d010      	beq.n	8001c70 <HAL_UART_RxCpltCallback+0x80>
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0b      	blt.n	8001c70 <HAL_UART_RxCpltCallback+0x80>
				gps_rx_buffer[rx_index++] = rx_data;
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	b2d1      	uxtb	r1, r2
 8001c60:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c62:	7011      	strb	r1, [r2, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c68:	7819      	ldrb	r1, [r3, #0]
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <HAL_UART_RxCpltCallback+0xcc>)
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	e00d      	b.n	8001c8c <HAL_UART_RxCpltCallback+0x9c>
			} else {
				lwgps_process(&gps, gps_rx_buffer, rx_index+1);
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	461a      	mov	r2, r3
 8001c78:	4910      	ldr	r1, [pc, #64]	@ (8001cbc <HAL_UART_RxCpltCallback+0xcc>)
 8001c7a:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <HAL_UART_RxCpltCallback+0xd0>)
 8001c7c:	f7ff fe80 	bl	8001980 <lwgps_process>
				rx_index = 0;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_UART_RxCpltCallback+0xc8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4909      	ldr	r1, [pc, #36]	@ (8001cb4 <HAL_UART_RxCpltCallback+0xc4>)
 8001c90:	4807      	ldr	r0, [pc, #28]	@ (8001cb0 <HAL_UART_RxCpltCallback+0xc0>)
 8001c92:	f006 f8ca 	bl	8007e2a <HAL_UART_Receive_IT>
		}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200004c8 	.word	0x200004c8
 8001ca4:	20000659 	.word	0x20000659
 8001ca8:	20000658 	.word	0x20000658
 8001cac:	20000610 	.word	0x20000610
 8001cb0:	20000484 	.word	0x20000484
 8001cb4:	2000072d 	.word	0x2000072d
 8001cb8:	2000072c 	.word	0x2000072c
 8001cbc:	200006ac 	.word	0x200006ac
 8001cc0:	200007b8 	.word	0x200007b8

08001cc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x16>
   adc_flag=1;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]

	}


}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200003f8 	.word	0x200003f8
 8001cec:	200007ac 	.word	0x200007ac

08001cf0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_ADC_ConvCpltCallback+0x30>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d109      	bne.n	8001d16 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8001d02:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <HAL_ADC_ConvCpltCallback+0x34>)
 8001d04:	f001 fe14 	bl	8003930 <HAL_ADC_GetValue>
 8001d08:	ee07 0a90 	vmov	s15, r0
 8001d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_ADC_ConvCpltCallback+0x38>)
 8001d12:	edc3 7a00 	vstr	s15, [r3]


		//adc_flag = 1;
	}
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012000 	.word	0x40012000
 8001d24:	20000304 	.word	0x20000304
 8001d28:	200007a4 	.word	0x200007a4
 8001d2c:	00000000 	.word	0x00000000

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	@ 0x38
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f001 fb33 	bl	80033a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 fb0b 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fd2d 	bl	800279c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d42:	f000 fcf5 	bl	8002730 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d46:	f000 fb71 	bl	800242c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d4a:	f000 fbc1 	bl	80024d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d4e:	f000 fbed 	bl	800252c <MX_SPI1_Init>
  MX_UART4_Init();
 8001d52:	f000 fc45 	bl	80025e0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001d56:	f000 fc6d 	bl	8002634 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001d5a:	f000 fc95 	bl	8002688 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001d5e:	f008 fc45 	bl	800a5ec <MX_FATFS_Init>
  MX_TIM11_Init();
 8001d62:	f000 fc19 	bl	8002598 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001d66:	f00a fcb1 	bl	800c6cc <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 8001d6a:	f000 fcb7 	bl	80026dc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001d6e:	2064      	movs	r0, #100	@ 0x64
 8001d70:	f001 fb88 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x62);
 8001d74:	2162      	movs	r1, #98	@ 0x62
 8001d76:	2002      	movs	r0, #2
 8001d78:	f7ff fec2 	bl	8001b00 <E220_write_register>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4bc7      	ldr	r3, [pc, #796]	@ (80020a0 <main+0x370>)
 8001d82:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001d84:	2064      	movs	r0, #100	@ 0x64
 8001d86:	f001 fb7d 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x3, 0x40);
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f7ff feb7 	bl	8001b00 <E220_write_register>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4bc2      	ldr	r3, [pc, #776]	@ (80020a0 <main+0x370>)
 8001d98:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001d9a:	2064      	movs	r0, #100	@ 0x64
 8001d9c:	f001 fb72 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x4, 0x10); // ch
 8001da0:	2110      	movs	r1, #16
 8001da2:	2004      	movs	r0, #4
 8001da4:	f7ff feac 	bl	8001b00 <E220_write_register>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4bbc      	ldr	r3, [pc, #752]	@ (80020a0 <main+0x370>)
 8001dae:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001db0:	2064      	movs	r0, #100	@ 0x64
 8001db2:	f001 fb67 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x5, 0x40);
 8001db6:	2140      	movs	r1, #64	@ 0x40
 8001db8:	2005      	movs	r0, #5
 8001dba:	f7ff fea1 	bl	8001b00 <E220_write_register>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4bb7      	ldr	r3, [pc, #732]	@ (80020a0 <main+0x370>)
 8001dc4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001dc6:	2064      	movs	r0, #100	@ 0x64
 8001dc8:	f001 fb5c 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x6, 0x00);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2006      	movs	r0, #6
 8001dd0:	f7ff fe96 	bl	8001b00 <E220_write_register>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80020a0 <main+0x370>)
 8001dda:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	@ 0x64
 8001dde:	f001 fb51 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0x7, 0x00);
 8001de2:	2100      	movs	r1, #0
 8001de4:	2007      	movs	r0, #7
 8001de6:	f7ff fe8b 	bl	8001b00 <E220_write_register>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4bac      	ldr	r3, [pc, #688]	@ (80020a0 <main+0x370>)
 8001df0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001df2:	2064      	movs	r0, #100	@ 0x64
 8001df4:	f001 fb46 	bl	8003484 <HAL_Delay>
  receive_data =E220_write_register(0, 0x09); // h 0x09
 8001df8:	2109      	movs	r1, #9
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fe80 	bl	8001b00 <E220_write_register>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4ba6      	ldr	r3, [pc, #664]	@ (80020a0 <main+0x370>)
 8001e06:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001e08:	2064      	movs	r0, #100	@ 0x64
 8001e0a:	f001 fb3b 	bl	8003484 <HAL_Delay>

  receive_data =E220_write_register(0x1, 0x02); // low 0x02
 8001e0e:	2102      	movs	r1, #2
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff fe75 	bl	8001b00 <E220_write_register>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4ba1      	ldr	r3, [pc, #644]	@ (80020a0 <main+0x370>)
 8001e1c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8001e1e:	20c8      	movs	r0, #200	@ 0xc8
 8001e20:	f001 fb30 	bl	8003484 <HAL_Delay>

  receive_data = E220_read_register(0);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff feb3 	bl	8001b90 <E220_read_register>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80020a0 <main+0x370>)
 8001e30:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001e32:	2064      	movs	r0, #100	@ 0x64
 8001e34:	f001 fb26 	bl	8003484 <HAL_Delay>
  receive_data = E220_read_register(1);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fea9 	bl	8001b90 <E220_read_register>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b97      	ldr	r3, [pc, #604]	@ (80020a0 <main+0x370>)
 8001e44:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001e46:	2064      	movs	r0, #100	@ 0x64
 8001e48:	f001 fb1c 	bl	8003484 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);//m0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4894      	ldr	r0, [pc, #592]	@ (80020a4 <main+0x374>)
 8001e52:	f002 fde9 	bl	8004a28 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001e56:	2064      	movs	r0, #100	@ 0x64
 8001e58:	f001 fb14 	bl	8003484 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET); //m1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4890      	ldr	r0, [pc, #576]	@ (80020a4 <main+0x374>)
 8001e62:	f002 fde1 	bl	8004a28 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001e66:	2064      	movs	r0, #100	@ 0x64
 8001e68:	f001 fb0c 	bl	8003484 <HAL_Delay>

 // E220_CONFIG(0x8,0x2F,0x20,1); //0x7 0x2b 0x12 1
  lwgps_init(&gps);
 8001e6c:	488e      	ldr	r0, [pc, #568]	@ (80020a8 <main+0x378>)
 8001e6e:	f7ff fd79 	bl	8001964 <lwgps_init>

  HAL_ADC_Start_IT(&hadc1);
 8001e72:	488e      	ldr	r0, [pc, #568]	@ (80020ac <main+0x37c>)
 8001e74:	f001 fb6e 	bl	8003554 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001e78:	488d      	ldr	r0, [pc, #564]	@ (80020b0 <main+0x380>)
 8001e7a:	f005 fc01 	bl	8007680 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8001e7e:	2110      	movs	r1, #16
 8001e80:	488c      	ldr	r0, [pc, #560]	@ (80020b4 <main+0x384>)
 8001e82:	f002 fdea 	bl	8004a5a <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8001e86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e8a:	f001 fafb 	bl	8003484 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8001e8e:	2110      	movs	r1, #16
 8001e90:	4888      	ldr	r0, [pc, #544]	@ (80020b4 <main+0x384>)
 8001e92:	f002 fde2 	bl	8004a5a <HAL_GPIO_TogglePin>

  tim1=HAL_GetTick();
 8001e96:	f001 fae9 	bl	800346c <HAL_GetTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a86      	ldr	r2, [pc, #536]	@ (80020b8 <main+0x388>)
 8001e9e:	6013      	str	r3, [r2, #0]
//  receive_data =E220_write_register(0, 0x09); // h 0x09



  //HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
  HAL_UART_Receive_IT(&huart3,&rx_data_lora, 1);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4986      	ldr	r1, [pc, #536]	@ (80020bc <main+0x38c>)
 8001ea4:	4886      	ldr	r0, [pc, #536]	@ (80020c0 <main+0x390>)
 8001ea6:	f005 ffc0 	bl	8007e2a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4985      	ldr	r1, [pc, #532]	@ (80020c4 <main+0x394>)
 8001eae:	4886      	ldr	r0, [pc, #536]	@ (80020c8 <main+0x398>)
 8001eb0:	f005 ffbb 	bl	8007e2a <HAL_UART_Receive_IT>
	//  HAL_UART_Receive(&huart4, nextion_rx_data, 5 , 1000);




	   if(lora_rx_buffer[0]==1 && lora_rx_buffer[47]==0x32){
 8001eb4:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <main+0x39c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 81a6 	bne.w	800220a <main+0x4da>
 8001ebe:	4b83      	ldr	r3, [pc, #524]	@ (80020cc <main+0x39c>)
 8001ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001ec4:	2b32      	cmp	r3, #50	@ 0x32
 8001ec6:	f040 81a0 	bne.w	800220a <main+0x4da>

		  Booster.satsinview=lora_rx_buffer[1];
 8001eca:	4b80      	ldr	r3, [pc, #512]	@ (80020cc <main+0x39c>)
 8001ecc:	785a      	ldrb	r2, [r3, #1]
 8001ece:	4b80      	ldr	r3, [pc, #512]	@ (80020d0 <main+0x3a0>)
 8001ed0:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001ed8:	e019      	b.n	8001f0e <main+0x1de>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+2];
 8001eda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ede:	1c9a      	adds	r2, r3, #2
 8001ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ee4:	4979      	ldr	r1, [pc, #484]	@ (80020cc <main+0x39c>)
 8001ee6:	5c8a      	ldrb	r2, [r1, r2]
 8001ee8:	3338      	adds	r3, #56	@ 0x38
 8001eea:	443b      	add	r3, r7
 8001eec:	f803 2c10 	strb.w	r2, [r3, #-16]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8001ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ef4:	1d5a      	adds	r2, r3, #5
 8001ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001efa:	3322      	adds	r3, #34	@ 0x22
 8001efc:	4973      	ldr	r1, [pc, #460]	@ (80020cc <main+0x39c>)
 8001efe:	5c89      	ldrb	r1, [r1, r2]
 8001f00:	4a74      	ldr	r2, [pc, #464]	@ (80020d4 <main+0x3a4>)
 8001f02:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001f04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d9e1      	bls.n	8001eda <main+0x1aa>
				 }
				 Booster.gpsaltitude=f2u8_bgpsalt.fVal;
 8001f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f18:	4a6d      	ldr	r2, [pc, #436]	@ (80020d0 <main+0x3a0>)
 8001f1a:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001f22:	e01a      	b.n	8001f5a <main+0x22a>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+6];
 8001f24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f28:	1d9a      	adds	r2, r3, #6
 8001f2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f2e:	4967      	ldr	r1, [pc, #412]	@ (80020cc <main+0x39c>)
 8001f30:	5c8a      	ldrb	r2, [r1, r2]
 8001f32:	3338      	adds	r3, #56	@ 0x38
 8001f34:	443b      	add	r3, r7
 8001f36:	f803 2c14 	strb.w	r2, [r3, #-20]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8001f3a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f3e:	f103 0209 	add.w	r2, r3, #9
 8001f42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f46:	3326      	adds	r3, #38	@ 0x26
 8001f48:	4960      	ldr	r1, [pc, #384]	@ (80020cc <main+0x39c>)
 8001f4a:	5c89      	ldrb	r1, [r1, r2]
 8001f4c:	4a61      	ldr	r2, [pc, #388]	@ (80020d4 <main+0x3a4>)
 8001f4e:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001f50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f54:	3301      	adds	r3, #1
 8001f56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001f5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d9e0      	bls.n	8001f24 <main+0x1f4>
				 }
				 Booster.gpslatitude=f2u8_blatitude.fVal;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	4a5a      	ldr	r2, [pc, #360]	@ (80020d0 <main+0x3a0>)
 8001f66:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001f6e:	e01b      	b.n	8001fa8 <main+0x278>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+10];
 8001f70:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f74:	f103 020a 	add.w	r2, r3, #10
 8001f78:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f7c:	4953      	ldr	r1, [pc, #332]	@ (80020cc <main+0x39c>)
 8001f7e:	5c8a      	ldrb	r2, [r1, r2]
 8001f80:	3338      	adds	r3, #56	@ 0x38
 8001f82:	443b      	add	r3, r7
 8001f84:	f803 2c18 	strb.w	r2, [r3, #-24]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8001f88:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f8c:	f103 020d 	add.w	r2, r3, #13
 8001f90:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f94:	332a      	adds	r3, #42	@ 0x2a
 8001f96:	494d      	ldr	r1, [pc, #308]	@ (80020cc <main+0x39c>)
 8001f98:	5c89      	ldrb	r1, [r1, r2]
 8001f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80020d4 <main+0x3a4>)
 8001f9c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001f9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001fa8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d9df      	bls.n	8001f70 <main+0x240>
				 }
				 Booster.gpslongitude=f2u8_blongitude.fVal;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	@ (80020d0 <main+0x3a0>)
 8001fb4:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001fbc:	e010      	b.n	8001fe0 <main+0x2b0>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+14];
 8001fbe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fc2:	f103 020e 	add.w	r2, r3, #14
 8001fc6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fca:	4940      	ldr	r1, [pc, #256]	@ (80020cc <main+0x39c>)
 8001fcc:	5c8a      	ldrb	r2, [r1, r2]
 8001fce:	3338      	adds	r3, #56	@ 0x38
 8001fd0:	443b      	add	r3, r7
 8001fd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
				 for(uint8_t i=0;i<4;i++)
 8001fd6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001fe0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9ea      	bls.n	8001fbe <main+0x28e>
				 }
				 Booster.altitude=f2u8_baltitude.fVal;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4a39      	ldr	r2, [pc, #228]	@ (80020d0 <main+0x3a0>)
 8001fec:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001ff4:	e010      	b.n	8002018 <main+0x2e8>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+18];
 8001ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ffa:	f103 0212 	add.w	r2, r3, #18
 8001ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002002:	4932      	ldr	r1, [pc, #200]	@ (80020cc <main+0x39c>)
 8002004:	5c8a      	ldrb	r2, [r1, r2]
 8002006:	3338      	adds	r3, #56	@ 0x38
 8002008:	443b      	add	r3, r7
 800200a:	f803 2c20 	strb.w	r2, [r3, #-32]
				 for(uint8_t i=0;i<4;i++)
 800200e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002012:	3301      	adds	r3, #1
 8002014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002018:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800201c:	2b03      	cmp	r3, #3
 800201e:	d9ea      	bls.n	8001ff6 <main+0x2c6>
				 }
				 Booster.speed=f2u8_bspeed.fVal;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4a2b      	ldr	r2, [pc, #172]	@ (80020d0 <main+0x3a0>)
 8002024:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800202c:	e010      	b.n	8002050 <main+0x320>
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+22];
 800202e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002032:	f103 0216 	add.w	r2, r3, #22
 8002036:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800203a:	4924      	ldr	r1, [pc, #144]	@ (80020cc <main+0x39c>)
 800203c:	5c8a      	ldrb	r2, [r1, r2]
 800203e:	3338      	adds	r3, #56	@ 0x38
 8002040:	443b      	add	r3, r7
 8002042:	f803 2c24 	strb.w	r2, [r3, #-36]
				 for(uint8_t i=0;i<4;i++)
 8002046:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800204a:	3301      	adds	r3, #1
 800204c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002050:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002054:	2b03      	cmp	r3, #3
 8002056:	d9ea      	bls.n	800202e <main+0x2fe>
				 }
				 Booster.temperature=f2u8_btemp.fVal;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <main+0x3a0>)
 800205c:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002064:	e010      	b.n	8002088 <main+0x358>
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+26];
 8002066:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800206a:	f103 021a 	add.w	r2, r3, #26
 800206e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002072:	4916      	ldr	r1, [pc, #88]	@ (80020cc <main+0x39c>)
 8002074:	5c8a      	ldrb	r2, [r1, r2]
 8002076:	3338      	adds	r3, #56	@ 0x38
 8002078:	443b      	add	r3, r7
 800207a:	f803 2c28 	strb.w	r2, [r3, #-40]
				 for(uint8_t i=0;i<4;i++)
 800207e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002082:	3301      	adds	r3, #1
 8002084:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002088:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800208c:	2b03      	cmp	r3, #3
 800208e:	d9ea      	bls.n	8002066 <main+0x336>
				 }
				 Booster.accx=f2u8_baccx.fVal;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4a0f      	ldr	r2, [pc, #60]	@ (80020d0 <main+0x3a0>)
 8002094:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800209c:	e02d      	b.n	80020fa <main+0x3ca>
 800209e:	bf00      	nop
 80020a0:	200007a0 	.word	0x200007a0
 80020a4:	40020400 	.word	0x40020400
 80020a8:	200007b8 	.word	0x200007b8
 80020ac:	20000304 	.word	0x20000304
 80020b0:	200003f8 	.word	0x200003f8
 80020b4:	40020800 	.word	0x40020800
 80020b8:	200007b0 	.word	0x200007b0
 80020bc:	20000659 	.word	0x20000659
 80020c0:	200004c8 	.word	0x200004c8
 80020c4:	2000072d 	.word	0x2000072d
 80020c8:	20000484 	.word	0x20000484
 80020cc:	20000610 	.word	0x20000610
 80020d0:	20000768 	.word	0x20000768
 80020d4:	2000065c 	.word	0x2000065c
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+30];
 80020d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020dc:	f103 021e 	add.w	r2, r3, #30
 80020e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020e4:	498e      	ldr	r1, [pc, #568]	@ (8002320 <main+0x5f0>)
 80020e6:	5c8a      	ldrb	r2, [r1, r2]
 80020e8:	3338      	adds	r3, #56	@ 0x38
 80020ea:	443b      	add	r3, r7
 80020ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
				 for(uint8_t i=0;i<4;i++)
 80020f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80020fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d9ea      	bls.n	80020d8 <main+0x3a8>
				 }
				 Booster.accy=f2u8_baccy.fVal;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a87      	ldr	r2, [pc, #540]	@ (8002324 <main+0x5f4>)
 8002106:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8002108:	2300      	movs	r3, #0
 800210a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800210e:	e010      	b.n	8002132 <main+0x402>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+34];
 8002110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002114:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002118:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800211c:	4980      	ldr	r1, [pc, #512]	@ (8002320 <main+0x5f0>)
 800211e:	5c8a      	ldrb	r2, [r1, r2]
 8002120:	3338      	adds	r3, #56	@ 0x38
 8002122:	443b      	add	r3, r7
 8002124:	f803 2c30 	strb.w	r2, [r3, #-48]
			      for(uint8_t i=0;i<4;i++)
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800212c:	3301      	adds	r3, #1
 800212e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002132:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002136:	2b03      	cmp	r3, #3
 8002138:	d9ea      	bls.n	8002110 <main+0x3e0>
				 }
			      Booster.accz=f2u8_baccz.fVal;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a79      	ldr	r2, [pc, #484]	@ (8002324 <main+0x5f4>)
 800213e:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002146:	e010      	b.n	800216a <main+0x43a>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+38];
 8002148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800214c:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002150:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002154:	4972      	ldr	r1, [pc, #456]	@ (8002320 <main+0x5f0>)
 8002156:	5c8a      	ldrb	r2, [r1, r2]
 8002158:	3338      	adds	r3, #56	@ 0x38
 800215a:	443b      	add	r3, r7
 800215c:	f803 2c34 	strb.w	r2, [r3, #-52]
				  for(uint8_t i=0;i<4;i++)
 8002160:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002164:	3301      	adds	r3, #1
 8002166:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800216a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800216e:	2b03      	cmp	r3, #3
 8002170:	d9ea      	bls.n	8002148 <main+0x418>
				 }
				  Booster.normal=f2u8_broll.fVal;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a6b      	ldr	r2, [pc, #428]	@ (8002324 <main+0x5f4>)
 8002176:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 8002178:	2300      	movs	r3, #0
 800217a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800217e:	e010      	b.n	80021a2 <main+0x472>
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+42];
 8002180:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002184:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002188:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800218c:	4964      	ldr	r1, [pc, #400]	@ (8002320 <main+0x5f0>)
 800218e:	5c8a      	ldrb	r2, [r1, r2]
 8002190:	3338      	adds	r3, #56	@ 0x38
 8002192:	443b      	add	r3, r7
 8002194:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for(uint8_t i=0;i<4;i++)
 8002198:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800219c:	3301      	adds	r3, #1
 800219e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80021a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d9ea      	bls.n	8002180 <main+0x450>
				 }
				  Booster.pitch=f2u8_bpitch.fVal;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002324 <main+0x5f4>)
 80021ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Booster.battery=lora_rx_buffer[46];
 80021b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002320 <main+0x5f0>)
 80021b2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80021b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002324 <main+0x5f4>)
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Booster.mod=lora_rx_buffer[70];
 80021bc:	4b58      	ldr	r3, [pc, #352]	@ (8002320 <main+0x5f0>)
 80021be:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80021c2:	4b58      	ldr	r3, [pc, #352]	@ (8002324 <main+0x5f4>)
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Booster.communication=lora_rx_buffer[48];
 80021c8:	4b55      	ldr	r3, [pc, #340]	@ (8002320 <main+0x5f0>)
 80021ca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80021ce:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <main+0x5f4>)
 80021d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

				  f2u8_baltitude.array[0] = lora_rx_buffer[66];
 80021d4:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <main+0x5f0>)
 80021d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021da:	773b      	strb	r3, [r7, #28]
				  f2u8_baltitude.array[1] = lora_rx_buffer[67];
 80021dc:	4b50      	ldr	r3, [pc, #320]	@ (8002320 <main+0x5f0>)
 80021de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021e2:	777b      	strb	r3, [r7, #29]
				  f2u8_baltitude.array[2] = lora_rx_buffer[68];
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <main+0x5f0>)
 80021e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021ea:	77bb      	strb	r3, [r7, #30]
				  f2u8_baltitude.array[3] = lora_rx_buffer[69];
 80021ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002320 <main+0x5f0>)
 80021ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021f2:	77fb      	strb	r3, [r7, #31]
				  Booster.maxAltitude = f2u8_baltitude.fVal;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002324 <main+0x5f4>)
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30

				  HAL_UART_Transmit(&huart6, lora_rx_buffer, 75,1000);
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	224b      	movs	r2, #75	@ 0x4b
 8002200:	4947      	ldr	r1, [pc, #284]	@ (8002320 <main+0x5f0>)
 8002202:	4849      	ldr	r0, [pc, #292]	@ (8002328 <main+0x5f8>)
 8002204:	f005 fcdd 	bl	8007bc2 <HAL_UART_Transmit>
	   if(lora_rx_buffer[0]==1 && lora_rx_buffer[47]==0x32){
 8002208:	e027      	b.n	800225a <main+0x52a>
	  	  }

	     else if(lora_rx_buffer[0]==3 && lora_rx_buffer[47]==0x33)
 800220a:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <main+0x5f0>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d123      	bne.n	800225a <main+0x52a>
 8002212:	4b43      	ldr	r3, [pc, #268]	@ (8002320 <main+0x5f0>)
 8002214:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002218:	2b33      	cmp	r3, #51	@ 0x33
 800221a:	d11e      	bne.n	800225a <main+0x52a>
		  {

		  Payload.satsinview=lora_rx_buffer[4];
 800221c:	4b40      	ldr	r3, [pc, #256]	@ (8002320 <main+0x5f0>)
 800221e:	791a      	ldrb	r2, [r3, #4]
 8002220:	4b42      	ldr	r3, [pc, #264]	@ (800232c <main+0x5fc>)
 8002222:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8002224:	f000 fb66 	bl	80028f4 <Payload_union_converter>

		  Payload.battery=lora_rx_buffer[46];
 8002228:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <main+0x5f0>)
 800222a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800222e:	4b3f      	ldr	r3, [pc, #252]	@ (800232c <main+0x5fc>)
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=lora_rx_buffer[70];
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <main+0x5f0>)
 8002236:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800223a:	4b3c      	ldr	r3, [pc, #240]	@ (800232c <main+0x5fc>)
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=lora_rx_buffer[48];
 8002240:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <main+0x5f0>)
 8002242:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002246:	4b39      	ldr	r3, [pc, #228]	@ (800232c <main+0x5fc>)
 8002248:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	        // payload ekran

		  HAL_UART_Transmit(&huart6, lora_rx_buffer, 75,1000);
 800224c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002250:	224b      	movs	r2, #75	@ 0x4b
 8002252:	4933      	ldr	r1, [pc, #204]	@ (8002320 <main+0x5f0>)
 8002254:	4834      	ldr	r0, [pc, #208]	@ (8002328 <main+0x5f8>)
 8002256:	f005 fcb4 	bl	8007bc2 <HAL_UART_Transmit>

		  }



if(adc_flag ==1)
 800225a:	4b35      	ldr	r3, [pc, #212]	@ (8002330 <main+0x600>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	f47f ae28 	bne.w	8001eb4 <main+0x184>
	  {
		  if(adc > 2476) adc = 2234;
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <main+0x604>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002338 <main+0x608>
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	dd02      	ble.n	800227e <main+0x54e>
 8002278:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <main+0x604>)
 800227a:	4a30      	ldr	r2, [pc, #192]	@ (800233c <main+0x60c>)
 800227c:	601a      	str	r2, [r3, #0]
		  if(adc < 1755) adc = 1755;
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <main+0x604>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002340 <main+0x610>
 8002288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	d502      	bpl.n	8002298 <main+0x568>
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <main+0x604>)
 8002294:	4a2b      	ldr	r2, [pc, #172]	@ (8002344 <main+0x614>)
 8002296:	601a      	str	r2, [r3, #0]
		  // 6V = 1755 adc val 1,41V
		  // 8.4V = 2476 adc val 1,99V 0,58V
		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <main+0x604>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002348 <main+0x618>
 80022a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022a6:	ee16 0a90 	vmov	r0, s13
 80022aa:	f7fe f96d 	bl	8000588 <__aeabi_f2d>
 80022ae:	a316      	add	r3, pc, #88	@ (adr r3, 8002308 <main+0x5d8>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fe f9c0 	bl	8000638 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	a313      	add	r3, pc, #76	@ (adr r3, 8002310 <main+0x5e0>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fd ffff 	bl	80002c8 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	a311      	add	r3, pc, #68	@ (adr r3, 8002318 <main+0x5e8>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe fad8 	bl	800088c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fca0 	bl	8000c28 <__aeabi_d2f>
 80022e8:	ee07 0a10 	vmov	s14, r0
 80022ec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800234c <main+0x61c>
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <main+0x620>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
		 // adc_pil_val = (adc-1755)/(2746-1755)*100;
		  adc_flag=0;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <main+0x600>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
	   if(lora_rx_buffer[0]==1 && lora_rx_buffer[47]==0x32){
 8002300:	e5d8      	b.n	8001eb4 <main+0x184>
 8002302:	bf00      	nop
 8002304:	f3af 8000 	nop.w
 8002308:	66666666 	.word	0x66666666
 800230c:	400a6666 	.word	0x400a6666
 8002310:	28f5c28f 	.word	0x28f5c28f
 8002314:	3ff68f5c 	.word	0x3ff68f5c
 8002318:	28f5c290 	.word	0x28f5c290
 800231c:	3fe28f5c 	.word	0x3fe28f5c
 8002320:	20000610 	.word	0x20000610
 8002324:	20000768 	.word	0x20000768
 8002328:	2000050c 	.word	0x2000050c
 800232c:	20000730 	.word	0x20000730
 8002330:	200007ac 	.word	0x200007ac
 8002334:	200007a4 	.word	0x200007a4
 8002338:	451ac000 	.word	0x451ac000
 800233c:	450ba000 	.word	0x450ba000
 8002340:	44db6000 	.word	0x44db6000
 8002344:	44db6000 	.word	0x44db6000
 8002348:	457ff000 	.word	0x457ff000
 800234c:	42c80000 	.word	0x42c80000
 8002350:	200007a8 	.word	0x200007a8

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	@ 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	2234      	movs	r2, #52	@ 0x34
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f00c fd77 	bl	800ee56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b29      	ldr	r3, [pc, #164]	@ (8002424 <SystemClock_Config+0xd0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	4a28      	ldr	r2, [pc, #160]	@ (8002424 <SystemClock_Config+0xd0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	@ 0x40
 8002388:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <SystemClock_Config+0xd0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <SystemClock_Config+0xd4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <SystemClock_Config+0xd4>)
 800239e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <SystemClock_Config+0xd4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ba:	2302      	movs	r3, #2
 80023bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023c4:	2304      	movs	r3, #4
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c8:	23a8      	movs	r3, #168	@ 0xa8
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023d0:	2307      	movs	r3, #7
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 fdd9 	bl	8006f94 <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80023e8:	f000 fb9e 	bl	8002b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80023f0:	2303      	movs	r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002402:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	2105      	movs	r1, #5
 800240a:	4618      	mov	r0, r3
 800240c:	f003 ff4e 	bl	80062ac <HAL_RCC_ClockConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002416:	f000 fb87 	bl	8002b28 <Error_Handler>
  }
}
 800241a:	bf00      	nop
 800241c:	3750      	adds	r7, #80	@ 0x50
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40007000 	.word	0x40007000

0800242c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	463b      	mov	r3, r7
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <MX_ADC1_Init+0x9c>)
 8002442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002446:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800244a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <MX_ADC1_Init+0x98>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002458:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <MX_ADC1_Init+0x98>)
 800245a:	2201      	movs	r2, #1
 800245c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002468:	2200      	movs	r2, #0
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <MX_ADC1_Init+0x98>)
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <MX_ADC1_Init+0xa0>)
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <MX_ADC1_Init+0x98>)
 800247a:	2201      	movs	r2, #1
 800247c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002486:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <MX_ADC1_Init+0x98>)
 8002488:	2201      	movs	r2, #1
 800248a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800248c:	480d      	ldr	r0, [pc, #52]	@ (80024c4 <MX_ADC1_Init+0x98>)
 800248e:	f001 f81d 	bl	80034cc <HAL_ADC_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002498:	f000 fb46 	bl	8002b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800249c:	230c      	movs	r3, #12
 800249e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <MX_ADC1_Init+0x98>)
 80024ae:	f001 fa61 	bl	8003974 <HAL_ADC_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024b8:	f000 fb36 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000304 	.word	0x20000304
 80024c8:	40012000 	.word	0x40012000
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <MX_I2C1_Init+0x54>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024dc:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <MX_I2C1_Init+0x58>)
 80024de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <MX_I2C1_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <MX_I2C1_Init+0x50>)
 800250e:	f002 fabf 	bl	8004a90 <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 fb06 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000034c 	.word	0x2000034c
 8002524:	40005400 	.word	0x40005400
 8002528:	000186a0 	.word	0x000186a0

0800252c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002530:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002532:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <MX_SPI1_Init+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002538:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800253c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800253e:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800254a:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <MX_SPI1_Init+0x64>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800255c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002560:	2220      	movs	r2, #32
 8002562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <MX_SPI1_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <MX_SPI1_Init+0x64>)
 8002578:	220a      	movs	r2, #10
 800257a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	@ (8002590 <MX_SPI1_Init+0x64>)
 800257e:	f004 ffa7 	bl	80074d0 <HAL_SPI_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002588:	f000 face 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200003a0 	.word	0x200003a0
 8002594:	40013000 	.word	0x40013000

08002598 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <MX_TIM11_Init+0x40>)
 800259e:	4a0f      	ldr	r2, [pc, #60]	@ (80025dc <MX_TIM11_Init+0x44>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025a4:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 80025a8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15000-1;
 80025b0:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025b2:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80025b6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025c4:	4804      	ldr	r0, [pc, #16]	@ (80025d8 <MX_TIM11_Init+0x40>)
 80025c6:	f005 f80c 	bl	80075e2 <HAL_TIM_Base_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80025d0:	f000 faaa 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200003f8 	.word	0x200003f8
 80025dc:	40014800 	.word	0x40014800

080025e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <MX_UART4_Init+0x4c>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <MX_UART4_Init+0x50>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <MX_UART4_Init+0x4c>)
 80025ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <MX_UART4_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <MX_UART4_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <MX_UART4_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <MX_UART4_Init+0x4c>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <MX_UART4_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <MX_UART4_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002616:	4805      	ldr	r0, [pc, #20]	@ (800262c <MX_UART4_Init+0x4c>)
 8002618:	f005 fa86 	bl	8007b28 <HAL_UART_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002622:	f000 fa81 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000440 	.word	0x20000440
 8002630:	40004c00 	.word	0x40004c00

08002634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 800263a:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <MX_USART2_UART_Init+0x50>)
 800263c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 8002640:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 800265a:	220c      	movs	r2, #12
 800265c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800266a:	4805      	ldr	r0, [pc, #20]	@ (8002680 <MX_USART2_UART_Init+0x4c>)
 800266c:	f005 fa5c 	bl	8007b28 <HAL_UART_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002676:	f000 fa57 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000484 	.word	0x20000484
 8002684:	40004400 	.word	0x40004400

08002688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <MX_USART3_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 8002694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <MX_USART3_UART_Init+0x4c>)
 80026c0:	f005 fa32 	bl	8007b28 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f000 fa2d 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200004c8 	.word	0x200004c8
 80026d8:	40004800 	.word	0x40004800

080026dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <MX_USART6_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002714:	f005 fa08 	bl	8007b28 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800271e:	f000 fa03 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000050c 	.word	0x2000050c
 800272c:	40011400 	.word	0x40011400

08002730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <MX_DMA_Init+0x68>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a16      	ldr	r2, [pc, #88]	@ (8002798 <MX_DMA_Init+0x68>)
 8002740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <MX_DMA_Init+0x68>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <MX_DMA_Init+0x68>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a0f      	ldr	r2, [pc, #60]	@ (8002798 <MX_DMA_Init+0x68>)
 800275c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <MX_DMA_Init+0x68>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	200c      	movs	r0, #12
 8002774:	f001 fc11 	bl	8003f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002778:	200c      	movs	r0, #12
 800277a:	f001 fc2a 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2045      	movs	r0, #69	@ 0x45
 8002784:	f001 fc09 	bl	8003f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002788:	2045      	movs	r0, #69	@ 0x45
 800278a:	f001 fc22 	bl	8003fd2 <HAL_NVIC_EnableIRQ>

}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a4b      	ldr	r2, [pc, #300]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b49      	ldr	r3, [pc, #292]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a44      	ldr	r2, [pc, #272]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b3e      	ldr	r3, [pc, #248]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a3d      	ldr	r2, [pc, #244]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b3b      	ldr	r3, [pc, #236]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a36      	ldr	r2, [pc, #216]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <MX_GPIO_Init+0x14c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	f640 4112 	movw	r1, #3090	@ 0xc12
 8002828:	4830      	ldr	r0, [pc, #192]	@ (80028ec <MX_GPIO_Init+0x150>)
 800282a:	f002 f8fd 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 800282e:	2200      	movs	r2, #0
 8002830:	f246 011f 	movw	r1, #24607	@ 0x601f
 8002834:	482e      	ldr	r0, [pc, #184]	@ (80028f0 <MX_GPIO_Init+0x154>)
 8002836:	f002 f8f7 	bl	8004a28 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800283a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4827      	ldr	r0, [pc, #156]	@ (80028ec <MX_GPIO_Init+0x150>)
 8002850:	f001 ff56 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 8002854:	f640 4312 	movw	r3, #3090	@ 0xc12
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	481f      	ldr	r0, [pc, #124]	@ (80028ec <MX_GPIO_Init+0x150>)
 800286e:	f001 ff47 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8002872:	f246 031f 	movw	r3, #24607	@ 0x601f
 8002876:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	2301      	movs	r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4819      	ldr	r0, [pc, #100]	@ (80028f0 <MX_GPIO_Init+0x154>)
 800288c:	f001 ff38 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8002890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4812      	ldr	r0, [pc, #72]	@ (80028f0 <MX_GPIO_Init+0x154>)
 80028a6:	f001 ff2b 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80028aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4619      	mov	r1, r3
 80028be:	480b      	ldr	r0, [pc, #44]	@ (80028ec <MX_GPIO_Init+0x150>)
 80028c0:	f001 ff1e 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 80028c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <MX_GPIO_Init+0x154>)
 80028dc:	f001 ff10 	bl	8004700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	@ 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020400 	.word	0x40020400

080028f4 <Payload_union_converter>:
	HYI_BUFFER[77]= 0x0A;


}
void Payload_union_converter(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e013      	b.n	8002928 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+2];
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	1c9a      	adds	r2, r3, #2
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	4985      	ldr	r1, [pc, #532]	@ (8002b1c <Payload_union_converter+0x228>)
 8002908:	5c8a      	ldrb	r2, [r1, r2]
 800290a:	3310      	adds	r3, #16
 800290c:	443b      	add	r3, r7
 800290e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	1d5a      	adds	r2, r3, #5
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	3316      	adds	r3, #22
 800291a:	4980      	ldr	r1, [pc, #512]	@ (8002b1c <Payload_union_converter+0x228>)
 800291c:	5c89      	ldrb	r1, [r1, r2]
 800291e:	4a80      	ldr	r2, [pc, #512]	@ (8002b20 <Payload_union_converter+0x22c>)
 8002920:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3301      	adds	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d9e8      	bls.n	8002900 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <Payload_union_converter+0x230>)
 8002932:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8002934:	2300      	movs	r3, #0
 8002936:	73bb      	strb	r3, [r7, #14]
 8002938:	e014      	b.n	8002964 <Payload_union_converter+0x70>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+6];
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	1d9a      	adds	r2, r3, #6
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	4976      	ldr	r1, [pc, #472]	@ (8002b1c <Payload_union_converter+0x228>)
 8002942:	5c8a      	ldrb	r2, [r1, r2]
 8002944:	3310      	adds	r3, #16
 8002946:	443b      	add	r3, r7
 8002948:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	f103 0209 	add.w	r2, r3, #9
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	331a      	adds	r3, #26
 8002956:	4971      	ldr	r1, [pc, #452]	@ (8002b1c <Payload_union_converter+0x228>)
 8002958:	5c89      	ldrb	r1, [r1, r2]
 800295a:	4a71      	ldr	r2, [pc, #452]	@ (8002b20 <Payload_union_converter+0x22c>)
 800295c:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	3301      	adds	r3, #1
 8002962:	73bb      	strb	r3, [r7, #14]
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d9e7      	bls.n	800293a <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a6d      	ldr	r2, [pc, #436]	@ (8002b24 <Payload_union_converter+0x230>)
 800296e:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
 8002974:	e015      	b.n	80029a2 <Payload_union_converter+0xae>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+10];
 8002976:	7b7b      	ldrb	r3, [r7, #13]
 8002978:	f103 020a 	add.w	r2, r3, #10
 800297c:	7b7b      	ldrb	r3, [r7, #13]
 800297e:	4967      	ldr	r1, [pc, #412]	@ (8002b1c <Payload_union_converter+0x228>)
 8002980:	5c8a      	ldrb	r2, [r1, r2]
 8002982:	3310      	adds	r3, #16
 8002984:	443b      	add	r3, r7
 8002986:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	f103 020d 	add.w	r2, r3, #13
 8002990:	7b7b      	ldrb	r3, [r7, #13]
 8002992:	331e      	adds	r3, #30
 8002994:	4961      	ldr	r1, [pc, #388]	@ (8002b1c <Payload_union_converter+0x228>)
 8002996:	5c89      	ldrb	r1, [r1, r2]
 8002998:	4a61      	ldr	r2, [pc, #388]	@ (8002b20 <Payload_union_converter+0x22c>)
 800299a:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 800299c:	7b7b      	ldrb	r3, [r7, #13]
 800299e:	3301      	adds	r3, #1
 80029a0:	737b      	strb	r3, [r7, #13]
 80029a2:	7b7b      	ldrb	r3, [r7, #13]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d9e6      	bls.n	8002976 <Payload_union_converter+0x82>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002b24 <Payload_union_converter+0x230>)
 80029ac:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	733b      	strb	r3, [r7, #12]
 80029b2:	e00c      	b.n	80029ce <Payload_union_converter+0xda>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+14];
 80029b4:	7b3b      	ldrb	r3, [r7, #12]
 80029b6:	f103 020e 	add.w	r2, r3, #14
 80029ba:	7b3b      	ldrb	r3, [r7, #12]
 80029bc:	4957      	ldr	r1, [pc, #348]	@ (8002b1c <Payload_union_converter+0x228>)
 80029be:	5c8a      	ldrb	r2, [r1, r2]
 80029c0:	3310      	adds	r3, #16
 80029c2:	443b      	add	r3, r7
 80029c4:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80029c8:	7b3b      	ldrb	r3, [r7, #12]
 80029ca:	3301      	adds	r3, #1
 80029cc:	733b      	strb	r3, [r7, #12]
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d9ef      	bls.n	80029b4 <Payload_union_converter+0xc0>
			 }
			 Payload.altitude=f2u8.fVal;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4a53      	ldr	r2, [pc, #332]	@ (8002b24 <Payload_union_converter+0x230>)
 80029d8:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	72fb      	strb	r3, [r7, #11]
 80029de:	e00c      	b.n	80029fa <Payload_union_converter+0x106>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+18];
 80029e0:	7afb      	ldrb	r3, [r7, #11]
 80029e2:	f103 0212 	add.w	r2, r3, #18
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	494c      	ldr	r1, [pc, #304]	@ (8002b1c <Payload_union_converter+0x228>)
 80029ea:	5c8a      	ldrb	r2, [r1, r2]
 80029ec:	3310      	adds	r3, #16
 80029ee:	443b      	add	r3, r7
 80029f0:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	3301      	adds	r3, #1
 80029f8:	72fb      	strb	r3, [r7, #11]
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d9ef      	bls.n	80029e0 <Payload_union_converter+0xec>
			 }
			 Payload.speed=f2u8.fVal;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <Payload_union_converter+0x230>)
 8002a04:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	72bb      	strb	r3, [r7, #10]
 8002a0a:	e00c      	b.n	8002a26 <Payload_union_converter+0x132>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+22];
 8002a0c:	7abb      	ldrb	r3, [r7, #10]
 8002a0e:	f103 0216 	add.w	r2, r3, #22
 8002a12:	7abb      	ldrb	r3, [r7, #10]
 8002a14:	4941      	ldr	r1, [pc, #260]	@ (8002b1c <Payload_union_converter+0x228>)
 8002a16:	5c8a      	ldrb	r2, [r1, r2]
 8002a18:	3310      	adds	r3, #16
 8002a1a:	443b      	add	r3, r7
 8002a1c:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002a20:	7abb      	ldrb	r3, [r7, #10]
 8002a22:	3301      	adds	r3, #1
 8002a24:	72bb      	strb	r3, [r7, #10]
 8002a26:	7abb      	ldrb	r3, [r7, #10]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d9ef      	bls.n	8002a0c <Payload_union_converter+0x118>
			 }
			 Payload.temperature=f2u8.fVal;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <Payload_union_converter+0x230>)
 8002a30:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	727b      	strb	r3, [r7, #9]
 8002a36:	e00c      	b.n	8002a52 <Payload_union_converter+0x15e>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+26];
 8002a38:	7a7b      	ldrb	r3, [r7, #9]
 8002a3a:	f103 021a 	add.w	r2, r3, #26
 8002a3e:	7a7b      	ldrb	r3, [r7, #9]
 8002a40:	4936      	ldr	r1, [pc, #216]	@ (8002b1c <Payload_union_converter+0x228>)
 8002a42:	5c8a      	ldrb	r2, [r1, r2]
 8002a44:	3310      	adds	r3, #16
 8002a46:	443b      	add	r3, r7
 8002a48:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002a4c:	7a7b      	ldrb	r3, [r7, #9]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	727b      	strb	r3, [r7, #9]
 8002a52:	7a7b      	ldrb	r3, [r7, #9]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d9ef      	bls.n	8002a38 <Payload_union_converter+0x144>
			 }
			 Payload.accx=f2u8.fVal;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4a32      	ldr	r2, [pc, #200]	@ (8002b24 <Payload_union_converter+0x230>)
 8002a5c:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	723b      	strb	r3, [r7, #8]
 8002a62:	e00c      	b.n	8002a7e <Payload_union_converter+0x18a>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+30];
 8002a64:	7a3b      	ldrb	r3, [r7, #8]
 8002a66:	f103 021e 	add.w	r2, r3, #30
 8002a6a:	7a3b      	ldrb	r3, [r7, #8]
 8002a6c:	492b      	ldr	r1, [pc, #172]	@ (8002b1c <Payload_union_converter+0x228>)
 8002a6e:	5c8a      	ldrb	r2, [r1, r2]
 8002a70:	3310      	adds	r3, #16
 8002a72:	443b      	add	r3, r7
 8002a74:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002a78:	7a3b      	ldrb	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	723b      	strb	r3, [r7, #8]
 8002a7e:	7a3b      	ldrb	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d9ef      	bls.n	8002a64 <Payload_union_converter+0x170>
			 }
			 Payload.accy=f2u8.fVal;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4a27      	ldr	r2, [pc, #156]	@ (8002b24 <Payload_union_converter+0x230>)
 8002a88:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	e00c      	b.n	8002aaa <Payload_union_converter+0x1b6>
			 {
		    	  f2u8.array[i]=lora_rx_buffer[i+34];
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4920      	ldr	r1, [pc, #128]	@ (8002b1c <Payload_union_converter+0x228>)
 8002a9a:	5c8a      	ldrb	r2, [r1, r2]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	443b      	add	r3, r7
 8002aa0:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	71fb      	strb	r3, [r7, #7]
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d9ef      	bls.n	8002a90 <Payload_union_converter+0x19c>
			 }
		      Payload.accz=f2u8.fVal;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <Payload_union_converter+0x230>)
 8002ab4:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	71bb      	strb	r3, [r7, #6]
 8002aba:	e00c      	b.n	8002ad6 <Payload_union_converter+0x1e2>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+38];
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	4915      	ldr	r1, [pc, #84]	@ (8002b1c <Payload_union_converter+0x228>)
 8002ac6:	5c8a      	ldrb	r2, [r1, r2]
 8002ac8:	3310      	adds	r3, #16
 8002aca:	443b      	add	r3, r7
 8002acc:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002ad0:	79bb      	ldrb	r3, [r7, #6]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	71bb      	strb	r3, [r7, #6]
 8002ad6:	79bb      	ldrb	r3, [r7, #6]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d9ef      	bls.n	8002abc <Payload_union_converter+0x1c8>
			 }
			  Payload.normal=f2u8.fVal;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <Payload_union_converter+0x230>)
 8002ae0:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	717b      	strb	r3, [r7, #5]
 8002ae6:	e00c      	b.n	8002b02 <Payload_union_converter+0x20e>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+42];
 8002ae8:	797b      	ldrb	r3, [r7, #5]
 8002aea:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <Payload_union_converter+0x228>)
 8002af2:	5c8a      	ldrb	r2, [r1, r2]
 8002af4:	3310      	adds	r3, #16
 8002af6:	443b      	add	r3, r7
 8002af8:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	3301      	adds	r3, #1
 8002b00:	717b      	strb	r3, [r7, #5]
 8002b02:	797b      	ldrb	r3, [r7, #5]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d9ef      	bls.n	8002ae8 <Payload_union_converter+0x1f4>
			 }
			  Payload.pitch=f2u8.fVal;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <Payload_union_converter+0x230>)
 8002b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000610 	.word	0x20000610
 8002b20:	2000065c 	.word	0x2000065c
 8002b24:	20000730 	.word	0x20000730

08002b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <Error_Handler+0x8>

08002b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_MspInit+0x4c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800

08002b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_ADC_MspInit+0x8c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12f      	bne.n	8002c06 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb6:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_ADC_MspInit+0x90>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8002bde:	2304      	movs	r3, #4
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be2:	2303      	movs	r3, #3
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4809      	ldr	r0, [pc, #36]	@ (8002c18 <HAL_ADC_MspInit+0x94>)
 8002bf2:	f001 fd85 	bl	8004700 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2012      	movs	r0, #18
 8002bfc:	f001 f9cd 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c00:	2012      	movs	r0, #18
 8002c02:	f001 f9e6 	bl	8003fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40012000 	.word	0x40012000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020800 	.word	0x40020800

08002c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_I2C_MspInit+0x84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12b      	bne.n	8002c96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c5a:	23c0      	movs	r3, #192	@ 0xc0
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5e:	2312      	movs	r3, #18
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <HAL_I2C_MspInit+0x8c>)
 8002c76:	f001 fd43 	bl	8004700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_I2C_MspInit+0x88>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	@ 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40005400 	.word	0x40005400
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020400 	.word	0x40020400

08002cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <HAL_SPI_MspInit+0x84>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12b      	bne.n	8002d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a10      	ldr	r2, [pc, #64]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <HAL_SPI_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d06:	23e0      	movs	r3, #224	@ 0xe0
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d16:	2305      	movs	r3, #5
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <HAL_SPI_MspInit+0x8c>)
 8002d22:	f001 fced 	bl	8004700 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	@ 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40013000 	.word	0x40013000
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020000 	.word	0x40020000

08002d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <HAL_TIM_Base_MspInit+0x48>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d115      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <HAL_TIM_Base_MspInit+0x4c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	4a0c      	ldr	r2, [pc, #48]	@ (8002d88 <HAL_TIM_Base_MspInit+0x4c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_TIM_Base_MspInit+0x4c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	201a      	movs	r0, #26
 8002d70:	f001 f913 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d74:	201a      	movs	r0, #26
 8002d76:	f001 f92c 	bl	8003fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40014800 	.word	0x40014800
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b090      	sub	sp, #64	@ 0x40
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a78      	ldr	r2, [pc, #480]	@ (8002f8c <HAL_UART_MspInit+0x200>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12c      	bne.n	8002e08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db2:	4b77      	ldr	r3, [pc, #476]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a76      	ldr	r2, [pc, #472]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b74      	ldr	r3, [pc, #464]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dce:	4b70      	ldr	r3, [pc, #448]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002de6:	2303      	movs	r3, #3
 8002de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002df6:	2308      	movs	r3, #8
 8002df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4864      	ldr	r0, [pc, #400]	@ (8002f94 <HAL_UART_MspInit+0x208>)
 8002e02:	f001 fc7d 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e06:	e13a      	b.n	800307e <HAL_UART_MspInit+0x2f2>
  else if(huart->Instance==USART2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a62      	ldr	r2, [pc, #392]	@ (8002f98 <HAL_UART_MspInit+0x20c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d134      	bne.n	8002e7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	4b5e      	ldr	r3, [pc, #376]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e22:	4b5b      	ldr	r3, [pc, #364]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	4b57      	ldr	r3, [pc, #348]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3e:	4b54      	ldr	r3, [pc, #336]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e62:	4619      	mov	r1, r3
 8002e64:	484b      	ldr	r0, [pc, #300]	@ (8002f94 <HAL_UART_MspInit+0x208>)
 8002e66:	f001 fc4b 	bl	8004700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	2026      	movs	r0, #38	@ 0x26
 8002e70:	f001 f893 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e74:	2026      	movs	r0, #38	@ 0x26
 8002e76:	f001 f8ac 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
}
 8002e7a:	e100      	b.n	800307e <HAL_UART_MspInit+0x2f2>
  else if(huart->Instance==USART3)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a46      	ldr	r2, [pc, #280]	@ (8002f9c <HAL_UART_MspInit+0x210>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	f040 8094 	bne.w	8002fb0 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	4a3f      	ldr	r2, [pc, #252]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e98:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	4a38      	ldr	r2, [pc, #224]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb4:	4b36      	ldr	r3, [pc, #216]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	4b32      	ldr	r3, [pc, #200]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	4a31      	ldr	r2, [pc, #196]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f90 <HAL_UART_MspInit+0x204>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8002edc:	2320      	movs	r3, #32
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eec:	2307      	movs	r3, #7
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	482a      	ldr	r0, [pc, #168]	@ (8002fa0 <HAL_UART_MspInit+0x214>)
 8002ef8:	f001 fc02 	bl	8004700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8002efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f0e:	2307      	movs	r3, #7
 8002f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8002f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f16:	4619      	mov	r1, r3
 8002f18:	4822      	ldr	r0, [pc, #136]	@ (8002fa4 <HAL_UART_MspInit+0x218>)
 8002f1a:	f001 fbf1 	bl	8004700 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f1e:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_UART_MspInit+0x220>)
 8002f22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f46:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f5e:	4812      	ldr	r0, [pc, #72]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f60:	f001 f852 	bl	8004008 <HAL_DMA_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8002f6a:	f7ff fddd 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f74:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa8 <HAL_UART_MspInit+0x21c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2027      	movs	r0, #39	@ 0x27
 8002f80:	f001 f80b 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f84:	2027      	movs	r0, #39	@ 0x27
 8002f86:	f001 f824 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
}
 8002f8a:	e078      	b.n	800307e <HAL_UART_MspInit+0x2f2>
 8002f8c:	40004c00 	.word	0x40004c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40004400 	.word	0x40004400
 8002f9c:	40004800 	.word	0x40004800
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	20000550 	.word	0x20000550
 8002fac:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a34      	ldr	r2, [pc, #208]	@ (8003088 <HAL_UART_MspInit+0x2fc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d161      	bne.n	800307e <HAL_UART_MspInit+0x2f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b33      	ldr	r3, [pc, #204]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	4a32      	ldr	r2, [pc, #200]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fca:	4b30      	ldr	r3, [pc, #192]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b2c      	ldr	r3, [pc, #176]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a2b      	ldr	r2, [pc, #172]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <HAL_UART_MspInit+0x300>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff2:	23c0      	movs	r3, #192	@ 0xc0
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003002:	2308      	movs	r3, #8
 8003004:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	4820      	ldr	r0, [pc, #128]	@ (8003090 <HAL_UART_MspInit+0x304>)
 800300e:	f001 fb77 	bl	8004700 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003012:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_UART_MspInit+0x30c>)
 8003016:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003018:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_UART_MspInit+0x308>)
 800301a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800301e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003020:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003022:	2240      	movs	r2, #64	@ 0x40
 8003024:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_UART_MspInit+0x308>)
 800302e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003032:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_UART_MspInit+0x308>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003040:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_UART_MspInit+0x308>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003052:	4810      	ldr	r0, [pc, #64]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003054:	f000 ffd8 	bl	8004008 <HAL_DMA_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 800305e:	f7ff fd63 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0b      	ldr	r2, [pc, #44]	@ (8003094 <HAL_UART_MspInit+0x308>)
 8003066:	635a      	str	r2, [r3, #52]	@ 0x34
 8003068:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <HAL_UART_MspInit+0x308>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2047      	movs	r0, #71	@ 0x47
 8003074:	f000 ff91 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003078:	2047      	movs	r0, #71	@ 0x47
 800307a:	f000 ffaa 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3740      	adds	r7, #64	@ 0x40
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40011400 	.word	0x40011400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020800 	.word	0x40020800
 8003094:	200005b0 	.word	0x200005b0
 8003098:	400264a0 	.word	0x400264a0

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <NMI_Handler+0x4>

080030a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <MemManage_Handler+0x4>

080030b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f2:	f000 f9a7 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <DMA1_Stream1_IRQHandler+0x10>)
 8003102:	f001 f8c1 	bl	8004288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000550 	.word	0x20000550

08003110 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <ADC_IRQHandler+0x10>)
 8003116:	f000 fafb 	bl	8003710 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000304 	.word	0x20000304

08003124 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800312a:	f004 fb19 	bl	8007760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200003f8 	.word	0x200003f8

08003138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <USART2_IRQHandler+0x10>)
 800313e:	f004 fea5 	bl	8007e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000484 	.word	0x20000484

0800314c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003150:	4802      	ldr	r0, [pc, #8]	@ (800315c <USART3_IRQHandler+0x10>)
 8003152:	f004 fe9b 	bl	8007e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200004c8 	.word	0x200004c8

08003160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003164:	4802      	ldr	r0, [pc, #8]	@ (8003170 <OTG_FS_IRQHandler+0x10>)
 8003166:	f001 ff2e 	bl	8004fc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20001d64 	.word	0x20001d64

08003174 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003178:	4802      	ldr	r0, [pc, #8]	@ (8003184 <DMA2_Stream6_IRQHandler+0x10>)
 800317a:	f001 f885 	bl	8004288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200005b0 	.word	0x200005b0

08003188 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800318c:	4802      	ldr	r0, [pc, #8]	@ (8003198 <USART6_IRQHandler+0x10>)
 800318e:	f004 fe7d 	bl	8007e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000050c 	.word	0x2000050c

0800319c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_kill>:

int _kill(int pid, int sig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b6:	f00b fec3 	bl	800ef40 <__errno>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2216      	movs	r2, #22
 80031be:	601a      	str	r2, [r3, #0]
  return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_exit>:

void _exit (int status)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffe7 	bl	80031ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <_exit+0x12>

080031e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e00a      	b.n	800320a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f4:	f3af 8000 	nop.w
 80031f8:	4601      	mov	r1, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	b2ca      	uxtb	r2, r1
 8003202:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dbf0      	blt.n	80031f4 <_read+0x12>
  }

  return len;
 8003212:	687b      	ldr	r3, [r7, #4]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e009      	b.n	8003242 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60ba      	str	r2, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbf1      	blt.n	800322e <_write+0x12>
  }
  return len;
 800324a:	687b      	ldr	r3, [r7, #4]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_close>:

int _close(int file)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800327c:	605a      	str	r2, [r3, #4]
  return 0;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_isatty>:

int _isatty(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f00b fe28 	bl	800ef40 <__errno>
 80032f0:	4603      	mov	r3, r0
 80032f2:	220c      	movs	r2, #12
 80032f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20020000 	.word	0x20020000
 800331c:	00000400 	.word	0x00000400
 8003320:	20000868 	.word	0x20000868
 8003324:	200025e0 	.word	0x200025e0

08003328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003350:	480d      	ldr	r0, [pc, #52]	@ (8003388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003352:	490e      	ldr	r1, [pc, #56]	@ (800338c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003354:	4a0e      	ldr	r2, [pc, #56]	@ (8003390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003358:	e002      	b.n	8003360 <LoopCopyDataInit>

0800335a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335e:	3304      	adds	r3, #4

08003360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003364:	d3f9      	bcc.n	800335a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003366:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003368:	4c0b      	ldr	r4, [pc, #44]	@ (8003398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800336c:	e001      	b.n	8003372 <LoopFillZerobss>

0800336e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003370:	3204      	adds	r2, #4

08003372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003374:	d3fb      	bcc.n	800336e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003376:	f7ff ffd7 	bl	8003328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337a:	f00b fde7 	bl	800ef4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800337e:	f7fe fcd7 	bl	8001d30 <main>
  bx  lr    
 8003382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8003390:	08011d88 	.word	0x08011d88
  ldr r2, =_sbss
 8003394:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8003398:	200025dc 	.word	0x200025dc

0800339c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800339c:	e7fe      	b.n	800339c <CAN1_RX0_IRQHandler>
	...

080033a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <HAL_Init+0x40>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <HAL_Init+0x40>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a07      	ldr	r2, [pc, #28]	@ (80033e0 <HAL_Init+0x40>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 fddb 	bl	8003f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ce:	200f      	movs	r0, #15
 80033d0:	f000 f808 	bl	80033e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d4:	f7ff fbae 	bl	8002b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_InitTick+0x54>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_InitTick+0x58>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fdf3 	bl	8003fee <HAL_SYSTICK_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00e      	b.n	8003430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d80a      	bhi.n	800342e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003418:	2200      	movs	r2, #0
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f000 fdbb 	bl	8003f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003424:	4a06      	ldr	r2, [pc, #24]	@ (8003440 <HAL_InitTick+0x5c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000000 	.word	0x20000000
 800343c:	20000008 	.word	0x20000008
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_IncTick+0x20>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_IncTick+0x24>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_IncTick+0x24>)
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000008 	.word	0x20000008
 8003468:	2000086c 	.word	0x2000086c

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000086c 	.word	0x2000086c

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d005      	beq.n	80034aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349e:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_Delay+0x44>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034aa:	bf00      	nop
 80034ac:	f7ff ffde 	bl	800346c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d8f7      	bhi.n	80034ac <HAL_Delay+0x28>
  {
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e033      	b.n	800354a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fb4a 	bl	8002b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003512:	f023 0302 	bic.w	r3, r3, #2
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fb5a 	bl	8003bd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
 800353a:	e001      	b.n	8003540 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_ADC_Start_IT+0x1a>
 800356a:	2302      	movs	r3, #2
 800356c:	e0bd      	b.n	80036ea <HAL_ADC_Start_IT+0x196>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d018      	beq.n	80035b6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003594:	4b58      	ldr	r3, [pc, #352]	@ (80036f8 <HAL_ADC_Start_IT+0x1a4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <HAL_ADC_Start_IT+0x1a8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9a      	lsrs	r2, r3, #18
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 8085 	bne.w	80036d0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003604:	d106      	bne.n	8003614 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	f023 0206 	bic.w	r2, r3, #6
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
 8003612:	e002      	b.n	800361a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003622:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <HAL_ADC_Start_IT+0x1ac>)
 8003624:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800362e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12a      	bne.n	80036a6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <HAL_ADC_Start_IT+0x1b0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d015      	beq.n	8003686 <HAL_ADC_Start_IT+0x132>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2a      	ldr	r2, [pc, #168]	@ (8003708 <HAL_ADC_Start_IT+0x1b4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d105      	bne.n	8003670 <HAL_ADC_Start_IT+0x11c>
 8003664:	4b26      	ldr	r3, [pc, #152]	@ (8003700 <HAL_ADC_Start_IT+0x1ac>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a25      	ldr	r2, [pc, #148]	@ (800370c <HAL_ADC_Start_IT+0x1b8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d136      	bne.n	80036e8 <HAL_ADC_Start_IT+0x194>
 800367a:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <HAL_ADC_Start_IT+0x1ac>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d130      	bne.n	80036e8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d129      	bne.n	80036e8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e020      	b.n	80036e8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_ADC_Start_IT+0x1b0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d11b      	bne.n	80036e8 <HAL_ADC_Start_IT+0x194>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d114      	bne.n	80036e8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	e00b      	b.n	80036e8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	f043 0210 	orr.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000000 	.word	0x20000000
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	40012300 	.word	0x40012300
 8003704:	40012000 	.word	0x40012000
 8003708:	40012100 	.word	0x40012100
 800370c:	40012200 	.word	0x40012200

08003710 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d049      	beq.n	80037da <HAL_ADC_IRQHandler+0xca>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d046      	beq.n	80037da <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12b      	bne.n	80037ca <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d127      	bne.n	80037ca <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0220 	bic.w	r2, r2, #32
 80037a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fa90 	bl	8001cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0212 	mvn.w	r2, #18
 80037d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d057      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x190>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d054      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d139      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003834:	2b00      	cmp	r3, #0
 8003836:	d12b      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	d124      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003858:	2b00      	cmp	r3, #0
 800385a:	d119      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800386a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa9d 	bl	8003dd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f06f 020c 	mvn.w	r2, #12
 800389e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x1d6>
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d014      	beq.n	80038e6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10d      	bne.n	80038e6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f837 	bl	800394a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038f4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_ADC_IRQHandler+0x218>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0220 	mvn.w	r2, #32
 8003916:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f820 	bl	800395e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0220 	mvn.w	r2, #32
 8003926:	601a      	str	r2, [r3, #0]
  }
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1c>
 800398c:	2302      	movs	r3, #2
 800398e:	e113      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x244>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b09      	cmp	r3, #9
 800399e:	d925      	bls.n	80039ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1e      	subs	r3, #30
 80039b6:	2207      	movs	r2, #7
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43da      	mvns	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	400a      	ands	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68d9      	ldr	r1, [r3, #12]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4403      	add	r3, r0
 80039de:	3b1e      	subs	r3, #30
 80039e0:	409a      	lsls	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e022      	b.n	8003a32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6919      	ldr	r1, [r3, #16]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	2207      	movs	r2, #7
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6919      	ldr	r1, [r3, #16]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4618      	mov	r0, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4403      	add	r3, r0
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d824      	bhi.n	8003a84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b05      	subs	r3, #5
 8003a4c:	221f      	movs	r2, #31
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	3b05      	subs	r3, #5
 8003a76:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a82:	e04c      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d824      	bhi.n	8003ad6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b23      	subs	r3, #35	@ 0x23
 8003a9e:	221f      	movs	r2, #31
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b23      	subs	r3, #35	@ 0x23
 8003ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ad4:	e023      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b41      	subs	r3, #65	@ 0x41
 8003ae8:	221f      	movs	r2, #31
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	400a      	ands	r2, r1
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4618      	mov	r0, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	3b41      	subs	r3, #65	@ 0x41
 8003b12:	fa00 f203 	lsl.w	r2, r0, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b1e:	4b29      	ldr	r3, [pc, #164]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x250>)
 8003b20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a28      	ldr	r2, [pc, #160]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x254>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10f      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1d8>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b12      	cmp	r3, #18
 8003b32:	d10b      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x254>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12b      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x23a>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_ADC_ConfigChannel+0x258>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <HAL_ADC_ConfigChannel+0x1f4>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b11      	cmp	r3, #17
 8003b66:	d122      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <HAL_ADC_ConfigChannel+0x258>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d111      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x25c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a11      	ldr	r2, [pc, #68]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x260>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	0c9a      	lsrs	r2, r3, #18
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ba0:	e002      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f9      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40012300 	.word	0x40012300
 8003bc8:	40012000 	.word	0x40012000
 8003bcc:	10000012 	.word	0x10000012
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	431bde83 	.word	0x431bde83

08003bd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be0:	4b79      	ldr	r3, [pc, #484]	@ (8003dc8 <ADC_Init+0x1f0>)
 8003be2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6899      	ldr	r1, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	4a58      	ldr	r2, [pc, #352]	@ (8003dcc <ADC_Init+0x1f4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6899      	ldr	r1, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e00f      	b.n	8003cd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0202 	bic.w	r2, r2, #2
 8003ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7e1b      	ldrb	r3, [r3, #24]
 8003cf0:	005a      	lsls	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	035a      	lsls	r2, r3, #13
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e007      	b.n	8003d4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	051a      	lsls	r2, r3, #20
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d8e:	025a      	lsls	r2, r3, #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	029a      	lsls	r2, r3, #10
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40012300 	.word	0x40012300
 8003dcc:	0f000001 	.word	0x0f000001

08003dd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	@ (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <__NVIC_GetPriorityGrouping+0x18>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 0307 	and.w	r3, r3, #7
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db0b      	blt.n	8003e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4907      	ldr	r1, [pc, #28]	@ (8003e80 <__NVIC_EnableIRQ+0x38>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2001      	movs	r0, #1
 8003e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	@ (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	@ (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
         );
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f50:	d301      	bcc.n	8003f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00f      	b.n	8003f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f56:	4a0a      	ldr	r2, [pc, #40]	@ (8003f80 <SysTick_Config+0x40>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f5e:	210f      	movs	r1, #15
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f7ff ff8e 	bl	8003e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <SysTick_Config+0x40>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <SysTick_Config+0x40>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010

08003f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff29 	bl	8003de4 <__NVIC_SetPriorityGrouping>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fac:	f7ff ff3e 	bl	8003e2c <__NVIC_GetPriorityGrouping>
 8003fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ff8e 	bl	8003ed8 <NVIC_EncodePriority>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff5d 	bl	8003e84 <__NVIC_SetPriority>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff31 	bl	8003e48 <__NVIC_EnableIRQ>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffa2 	bl	8003f40 <SysTick_Config>
 8003ffc:	4603      	mov	r3, r0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7ff fa2a 	bl	800346c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e099      	b.n	8004158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004044:	e00f      	b.n	8004066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004046:	f7ff fa11 	bl	800346c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b05      	cmp	r3, #5
 8004052:	d908      	bls.n	8004066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e078      	b.n	8004158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e8      	bne.n	8004046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4b38      	ldr	r3, [pc, #224]	@ (8004160 <HAL_DMA_Init+0x158>)
 8004080:	4013      	ands	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d107      	bne.n	80040d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	4313      	orrs	r3, r2
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d117      	bne.n	800412a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa7b 	bl	8004608 <DMA_CheckFifoParam>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2240      	movs	r2, #64	@ 0x40
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004126:	2301      	movs	r3, #1
 8004128:	e016      	b.n	8004158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa32 	bl	800459c <DMA_CalcBaseAndBitshift>
 8004138:	4603      	mov	r3, r0
 800413a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004140:	223f      	movs	r2, #63	@ 0x3f
 8004142:	409a      	lsls	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	f010803f 	.word	0xf010803f

08004164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004172:	f7ff f97b 	bl	800346c <HAL_GetTick>
 8004176:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d008      	beq.n	8004196 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2280      	movs	r2, #128	@ 0x80
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e052      	b.n	800423c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0216 	bic.w	r2, r2, #22
 80041a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_DMA_Abort+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0208 	bic.w	r2, r2, #8
 80041d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e6:	e013      	b.n	8004210 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e8:	f7ff f940 	bl	800346c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d90c      	bls.n	8004210 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e015      	b.n	800423c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e4      	bne.n	80041e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	223f      	movs	r2, #63	@ 0x3f
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d004      	beq.n	8004262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	@ 0x80
 800425c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00c      	b.n	800427c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2205      	movs	r2, #5
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004294:	4b8e      	ldr	r3, [pc, #568]	@ (80044d0 <HAL_DMA_IRQHandler+0x248>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a8e      	ldr	r2, [pc, #568]	@ (80044d4 <HAL_DMA_IRQHandler+0x24c>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	2208      	movs	r2, #8
 80042e2:	409a      	lsls	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432e:	2204      	movs	r2, #4
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	2204      	movs	r2, #4
 800434e:	409a      	lsls	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	2210      	movs	r2, #16
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d043      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03c      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	2210      	movs	r2, #16
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d018      	beq.n	80043ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d024      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
 80043b6:	e01f      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e016      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0208 	bic.w	r2, r2, #8
 80043e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	2220      	movs	r2, #32
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 808f 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8087 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	2220      	movs	r2, #32
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b05      	cmp	r3, #5
 8004430:	d136      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0216 	bic.w	r2, r2, #22
 8004440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_DMA_IRQHandler+0x1da>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0208 	bic.w	r2, r2, #8
 8004470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	223f      	movs	r2, #63	@ 0x3f
 8004478:	409a      	lsls	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07e      	beq.n	8004594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
        }
        return;
 800449e:	e079      	b.n	8004594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01d      	beq.n	80044ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d031      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
 80044cc:	e02c      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
 80044ce:	bf00      	nop
 80044d0:	20000000 	.word	0x20000000
 80044d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
 80044e8:	e01e      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10f      	bne.n	8004518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0210 	bic.w	r2, r2, #16
 8004506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d032      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2205      	movs	r2, #5
 8004540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d307      	bcc.n	8004570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f2      	bne.n	8004554 <HAL_DMA_IRQHandler+0x2cc>
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004594:	bf00      	nop
    }
  }
}
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3b10      	subs	r3, #16
 80045ac:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <DMA_CalcBaseAndBitshift+0x64>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <DMA_CalcBaseAndBitshift+0x68>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d909      	bls.n	80045de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	659a      	str	r2, [r3, #88]	@ 0x58
 80045dc:	e007      	b.n	80045ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	aaaaaaab 	.word	0xaaaaaaab
 8004604:	08011940 	.word	0x08011940

08004608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d856      	bhi.n	80046d6 <DMA_CheckFifoParam+0xce>
 8004628:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <DMA_CheckFifoParam+0x28>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004641 	.word	0x08004641
 8004634:	08004653 	.word	0x08004653
 8004638:	08004641 	.word	0x08004641
 800463c:	080046d7 	.word	0x080046d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d046      	beq.n	80046da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004650:	e043      	b.n	80046da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800465a:	d140      	bne.n	80046de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004660:	e03d      	b.n	80046de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466a:	d121      	bne.n	80046b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d837      	bhi.n	80046e2 <DMA_CheckFifoParam+0xda>
 8004672:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <DMA_CheckFifoParam+0x70>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	08004689 	.word	0x08004689
 800467c:	0800468f 	.word	0x0800468f
 8004680:	08004689 	.word	0x08004689
 8004684:	080046a1 	.word	0x080046a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e030      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d025      	beq.n	80046e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469e:	e022      	b.n	80046e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046a8:	d11f      	bne.n	80046ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ae:	e01c      	b.n	80046ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d903      	bls.n	80046be <DMA_CheckFifoParam+0xb6>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d003      	beq.n	80046c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046bc:	e018      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
      break;
 80046c2:	e015      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e00b      	b.n	80046ee <DMA_CheckFifoParam+0xe6>
      break;
 80046d6:	bf00      	nop
 80046d8:	e00a      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046da:	bf00      	nop
 80046dc:	e008      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046de:	bf00      	nop
 80046e0:	e006      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046e2:	bf00      	nop
 80046e4:	e004      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ee:	bf00      	nop
    }
  } 
  
  return status; 
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e165      	b.n	80049e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800471c:	2201      	movs	r2, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	f040 8154 	bne.w	80049e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d005      	beq.n	8004752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800474e:	2b02      	cmp	r3, #2
 8004750:	d130      	bne.n	80047b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004788:	2201      	movs	r2, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 0201 	and.w	r2, r3, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d017      	beq.n	80047f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d123      	bne.n	8004844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	08da      	lsrs	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3208      	adds	r2, #8
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	220f      	movs	r2, #15
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0203 	and.w	r2, r3, #3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80ae 	beq.w	80049e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a00 <HAL_GPIO_Init+0x300>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a00 <HAL_GPIO_Init+0x300>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004894:	6453      	str	r3, [r2, #68]	@ 0x44
 8004896:	4b5a      	ldr	r3, [pc, #360]	@ (8004a00 <HAL_GPIO_Init+0x300>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a2:	4a58      	ldr	r2, [pc, #352]	@ (8004a04 <HAL_GPIO_Init+0x304>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a08 <HAL_GPIO_Init+0x308>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d025      	beq.n	800491a <HAL_GPIO_Init+0x21a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4e      	ldr	r2, [pc, #312]	@ (8004a0c <HAL_GPIO_Init+0x30c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <HAL_GPIO_Init+0x216>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004a10 <HAL_GPIO_Init+0x310>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d019      	beq.n	8004912 <HAL_GPIO_Init+0x212>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004a14 <HAL_GPIO_Init+0x314>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_GPIO_Init+0x20e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a18 <HAL_GPIO_Init+0x318>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00d      	beq.n	800490a <HAL_GPIO_Init+0x20a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4a      	ldr	r2, [pc, #296]	@ (8004a1c <HAL_GPIO_Init+0x31c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <HAL_GPIO_Init+0x206>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a49      	ldr	r2, [pc, #292]	@ (8004a20 <HAL_GPIO_Init+0x320>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_GPIO_Init+0x202>
 80048fe:	2306      	movs	r3, #6
 8004900:	e00c      	b.n	800491c <HAL_GPIO_Init+0x21c>
 8004902:	2307      	movs	r3, #7
 8004904:	e00a      	b.n	800491c <HAL_GPIO_Init+0x21c>
 8004906:	2305      	movs	r3, #5
 8004908:	e008      	b.n	800491c <HAL_GPIO_Init+0x21c>
 800490a:	2304      	movs	r3, #4
 800490c:	e006      	b.n	800491c <HAL_GPIO_Init+0x21c>
 800490e:	2303      	movs	r3, #3
 8004910:	e004      	b.n	800491c <HAL_GPIO_Init+0x21c>
 8004912:	2302      	movs	r3, #2
 8004914:	e002      	b.n	800491c <HAL_GPIO_Init+0x21c>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_GPIO_Init+0x21c>
 800491a:	2300      	movs	r3, #0
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	f002 0203 	and.w	r2, r2, #3
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	4093      	lsls	r3, r2
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800492c:	4935      	ldr	r1, [pc, #212]	@ (8004a04 <HAL_GPIO_Init+0x304>)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3302      	adds	r3, #2
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800495e:	4a31      	ldr	r2, [pc, #196]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004964:	4b2f      	ldr	r3, [pc, #188]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004988:	4a26      	ldr	r2, [pc, #152]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800498e:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049dc:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <HAL_GPIO_Init+0x324>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	f67f ae96 	bls.w	800471c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3724      	adds	r7, #36	@ 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40020800 	.word	0x40020800
 8004a14:	40020c00 	.word	0x40020c00
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40021400 	.word	0x40021400
 8004a20:	40021800 	.word	0x40021800
 8004a24:	40013c00 	.word	0x40013c00

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4013      	ands	r3, r2
 8004a72:	041a      	lsls	r2, r3, #16
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43d9      	mvns	r1, r3
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe f8b0 	bl	8002c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	@ 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f001 fccc 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	@ (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	@ (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	@ (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	@ (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	@ (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1a:	b08f      	sub	sp, #60	@ 0x3c
 8004d1c:	af0a      	add	r7, sp, #40	@ 0x28
 8004d1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e116      	b.n	8004f58 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f007 feb3 	bl	800cab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 f90c 	bl	8008f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	687e      	ldr	r6, [r7, #4]
 8004d76:	466d      	mov	r5, sp
 8004d78:	f106 0410 	add.w	r4, r6, #16
 8004d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d88:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d8c:	1d33      	adds	r3, r6, #4
 8004d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f003 ffe3 	bl	8008d5c <USB_CoreInit>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0d7      	b.n	8004f58 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 f8fa 	bl	8008fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e04a      	b.n	8004e50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	333d      	adds	r3, #61	@ 0x3d
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	333c      	adds	r3, #60	@ 0x3c
 8004dde:	7bfa      	ldrb	r2, [r7, #15]
 8004de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	b298      	uxth	r0, r3
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3344      	adds	r3, #68	@ 0x44
 8004df6:	4602      	mov	r2, r0
 8004df8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3340      	adds	r3, #64	@ 0x40
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3348      	adds	r3, #72	@ 0x48
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	334c      	adds	r3, #76	@ 0x4c
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	3354      	adds	r3, #84	@ 0x54
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3af      	bcc.n	8004dba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e044      	b.n	8004eea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3b5      	bcc.n	8004e60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	687e      	ldr	r6, [r7, #4]
 8004efc:	466d      	mov	r5, sp
 8004efe:	f106 0410 	add.w	r4, r6, #16
 8004f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f12:	1d33      	adds	r3, r6, #4
 8004f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f16:	6838      	ldr	r0, [r7, #0]
 8004f18:	f004 f892 	bl	8009040 <USB_DevInit>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e014      	b.n	8004f58 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d102      	bne.n	8004f4c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 f98c 	bl	8006264 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f005 f9d4 	bl	800a2fe <USB_DevDisconnect>

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_PCD_Start+0x1c>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e020      	b.n	8004fbe <HAL_PCD_Start+0x5e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d109      	bne.n	8004fa0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 ffdd 	bl	8008f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f005 f984 	bl	800a2bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b08d      	sub	sp, #52	@ 0x34
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f005 fa42 	bl	800a466 <USB_GetMode>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 84b7 	bne.w	8005958 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 f9a6 	bl	800a340 <USB_ReadInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 84ad 	beq.w	8005956 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f005 f993 	bl	800a340 <USB_ReadInterrupts>
 800501a:	4603      	mov	r3, r0
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d107      	bne.n	8005034 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f002 0202 	and.w	r2, r2, #2
 8005032:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f005 f981 	bl	800a340 <USB_ReadInterrupts>
 800503e:	4603      	mov	r3, r0
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d161      	bne.n	800510c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0210 	bic.w	r2, r2, #16
 8005056:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	0c5b      	lsrs	r3, r3, #17
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2b02      	cmp	r3, #2
 8005082:	d124      	bne.n	80050ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d035      	beq.n	80050fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800509a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6a38      	ldr	r0, [r7, #32]
 80050a4:	f004 ffb8 	bl	800a018 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050b4:	441a      	add	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c6:	441a      	add	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
 80050cc:	e016      	b.n	80050fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	0c5b      	lsrs	r3, r3, #17
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d110      	bne.n	80050fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80050e0:	2208      	movs	r2, #8
 80050e2:	4619      	mov	r1, r3
 80050e4:	6a38      	ldr	r0, [r7, #32]
 80050e6:	f004 ff97 	bl	800a018 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f6:	441a      	add	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0210 	orr.w	r2, r2, #16
 800510a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f005 f915 	bl	800a340 <USB_ReadInterrupts>
 8005116:	4603      	mov	r3, r0
 8005118:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800511c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005120:	f040 80a7 	bne.w	8005272 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f005 f91a 	bl	800a366 <USB_ReadDevAllOutEpInterrupt>
 8005132:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005134:	e099      	b.n	800526a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 808e 	beq.w	800525e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f005 f93e 	bl	800a3ce <USB_ReadDevOutEPInterrupt>
 8005152:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	2301      	movs	r3, #1
 800516e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fef0 	bl	8005f58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	2308      	movs	r3, #8
 8005192:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005194:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 ffc6 	bl	8006128 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b2:	461a      	mov	r2, r3
 80051b4:	2310      	movs	r3, #16
 80051b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d030      	beq.n	8005224 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ca:	2b80      	cmp	r3, #128	@ 0x80
 80051cc:	d109      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d108      	bne.n	8005212 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f007 fd6b 	bl	800cce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	2302      	movs	r3, #2
 8005222:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	461a      	mov	r2, r3
 800523c:	2320      	movs	r3, #32
 800523e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800525c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	3301      	adds	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f af62 	bne.w	8005136 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f005 f862 	bl	800a340 <USB_ReadInterrupts>
 800527c:	4603      	mov	r3, r0
 800527e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005286:	f040 80db 	bne.w	8005440 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f005 f883 	bl	800a39a <USB_ReadDevAllInEpInterrupt>
 8005294:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800529a:	e0cd      	b.n	8005438 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80c2 	beq.w	800542c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 f8a9 	bl	800a40a <USB_ReadDevInEPInterrupt>
 80052b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d057      	beq.n	8005374 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2201      	movs	r2, #1
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	43db      	mvns	r3, r3
 80052de:	69f9      	ldr	r1, [r7, #28]
 80052e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052e4:	4013      	ands	r3, r2
 80052e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	461a      	mov	r2, r3
 80052f6:	2301      	movs	r3, #1
 80052f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d132      	bne.n	8005368 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	334c      	adds	r3, #76	@ 0x4c
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4403      	add	r3, r0
 8005322:	3348      	adds	r3, #72	@ 0x48
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4419      	add	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4403      	add	r3, r0
 8005336:	334c      	adds	r3, #76	@ 0x4c
 8005338:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d113      	bne.n	8005368 <HAL_PCD_IRQHandler+0x3a2>
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	3354      	adds	r3, #84	@ 0x54
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d108      	bne.n	8005368 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005360:	461a      	mov	r2, r3
 8005362:	2101      	movs	r1, #1
 8005364:	f005 f8b0 	bl	800a4c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	b2db      	uxtb	r3, r3
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f007 fc35 	bl	800cbde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	461a      	mov	r2, r3
 800538c:	2308      	movs	r3, #8
 800538e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a6:	461a      	mov	r2, r3
 80053a8:	2310      	movs	r3, #16
 80053aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c2:	461a      	mov	r2, r3
 80053c4:	2340      	movs	r3, #64	@ 0x40
 80053c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d023      	beq.n	800541a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053d4:	6a38      	ldr	r0, [r7, #32]
 80053d6:	f003 ff91 	bl	80092fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	3338      	adds	r3, #56	@ 0x38
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4413      	add	r3, r2
 80053ea:	3304      	adds	r3, #4
 80053ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	78db      	ldrb	r3, [r3, #3]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d108      	bne.n	8005408 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f007 fc82 	bl	800cd0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	461a      	mov	r2, r3
 8005416:	2302      	movs	r3, #2
 8005418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd08 	bl	8005e3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	3301      	adds	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	f47f af2e 	bne.w	800529c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f004 ff7b 	bl	800a340 <USB_ReadInterrupts>
 800544a:	4603      	mov	r3, r0
 800544c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005454:	d122      	bne.n	800549c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005470:	2b01      	cmp	r3, #1
 8005472:	d108      	bne.n	8005486 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800547c:	2100      	movs	r1, #0
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f007 fdfc 	bl	800d07c <HAL_PCDEx_LPM_Callback>
 8005484:	e002      	b.n	800548c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f007 fc20 	bl	800cccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800549a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 ff4d 	bl	800a340 <USB_ReadInterrupts>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b0:	d112      	bne.n	80054d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f007 fbdc 	bl	800cc80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054d6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f004 ff2f 	bl	800a340 <USB_ReadInterrupts>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ec:	d121      	bne.n	8005532 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80054fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d111      	bne.n	800552c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005522:	2101      	movs	r1, #1
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f007 fda9 	bl	800d07c <HAL_PCDEx_LPM_Callback>
 800552a:	e002      	b.n	8005532 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 fba7 	bl	800cc80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f004 ff02 	bl	800a340 <USB_ReadInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	f040 80b7 	bne.w	80056b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2110      	movs	r1, #16
 8005564:	4618      	mov	r0, r3
 8005566:	f003 fec9 	bl	80092fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556a:	2300      	movs	r3, #0
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800556e:	e046      	b.n	80055fe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005582:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	3301      	adds	r3, #1
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d3b3      	bcc.n	8005570 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005616:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800561a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	d016      	beq.n	8005652 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005634:	f043 030b 	orr.w	r3, r3, #11
 8005638:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800564a:	f043 030b 	orr.w	r3, r3, #11
 800564e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005650:	e015      	b.n	800567e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005664:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005668:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005678:	f043 030b 	orr.w	r3, r3, #11
 800567c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800568c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005690:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f004 ff10 	bl	800a4c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80056b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 fe3f 	bl	800a340 <USB_ReadInterrupts>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d124      	bne.n	8005718 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f004 fed5 	bl	800a482 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 fe8a 	bl	80093f6 <USB_GetDevSpeed>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681c      	ldr	r4, [r3, #0]
 80056ee:	f000 fec3 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 80056f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	4620      	mov	r0, r4
 80056fe:	f003 fb8f 	bl	8008e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f007 fa93 	bl	800cc2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005716:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fe0f 	bl	800a340 <USB_ReadInterrupts>
 8005722:	4603      	mov	r3, r0
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b08      	cmp	r3, #8
 800572a:	d10a      	bne.n	8005742 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f007 fa70 	bl	800cc12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f002 0208 	and.w	r2, r2, #8
 8005740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f004 fdfa 	bl	800a340 <USB_ReadInterrupts>
 800574c:	4603      	mov	r3, r0
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	2b80      	cmp	r3, #128	@ 0x80
 8005754:	d122      	bne.n	800579c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005762:	2301      	movs	r3, #1
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e014      	b.n	8005792 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fb27 	bl	8005dda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005798:	429a      	cmp	r2, r3
 800579a:	d3e5      	bcc.n	8005768 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 fdcd 	bl	800a340 <USB_ReadInterrupts>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057b0:	d13b      	bne.n	800582a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057b2:	2301      	movs	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b6:	e02b      	b.n	8005810 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3340      	adds	r3, #64	@ 0x40
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d115      	bne.n	800580a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da12      	bge.n	800580a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	333f      	adds	r3, #63	@ 0x3f
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005800:	b2db      	uxtb	r3, r3
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fae8 	bl	8005dda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	3301      	adds	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005816:	429a      	cmp	r2, r3
 8005818:	d3ce      	bcc.n	80057b8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f004 fd86 	bl	800a340 <USB_ReadInterrupts>
 8005834:	4603      	mov	r3, r0
 8005836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800583e:	d155      	bne.n	80058ec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005840:	2301      	movs	r3, #1
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
 8005844:	e045      	b.n	80058d2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d12e      	bne.n	80058cc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800586e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005870:	2b00      	cmp	r3, #0
 8005872:	da2b      	bge.n	80058cc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005880:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005884:	429a      	cmp	r2, r3
 8005886:	d121      	bne.n	80058cc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058c8:	6053      	str	r3, [r2, #4]
            break;
 80058ca:	e007      	b.n	80058dc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	3301      	adds	r3, #1
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3b4      	bcc.n	8005846 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695a      	ldr	r2, [r3, #20]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f004 fd25 	bl	800a340 <USB_ReadInterrupts>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005900:	d10a      	bne.n	8005918 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f007 fa14 	bl	800cd30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f004 fd0f 	bl	800a340 <USB_ReadInterrupts>
 8005922:	4603      	mov	r3, r0
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d115      	bne.n	8005958 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f007 fa04 	bl	800cd4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	430a      	orrs	r2, r1
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	e000      	b.n	8005958 <HAL_PCD_IRQHandler+0x992>
      return;
 8005956:	bf00      	nop
    }
  }
}
 8005958:	3734      	adds	r7, #52	@ 0x34
 800595a:	46bd      	mov	sp, r7
 800595c:	bd90      	pop	{r4, r7, pc}

0800595e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_PCD_SetAddress+0x1a>
 8005974:	2302      	movs	r3, #2
 8005976:	e013      	b.n	80059a0 <HAL_PCD_SetAddress+0x42>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f004 fc6d 	bl	800a270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	70fb      	strb	r3, [r7, #3]
 80059ba:	460b      	mov	r3, r1
 80059bc:	803b      	strh	r3, [r7, #0]
 80059be:	4613      	mov	r3, r2
 80059c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da0f      	bge.n	80059ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	3338      	adds	r3, #56	@ 0x38
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	3304      	adds	r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	705a      	strb	r2, [r3, #1]
 80059ec:	e00f      	b.n	8005a0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	4413      	add	r3, r2
 8005a04:	3304      	adds	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a1a:	883a      	ldrh	r2, [r7, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	78ba      	ldrb	r2, [r7, #2]
 8005a24:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a38:	78bb      	ldrb	r3, [r7, #2]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d102      	bne.n	8005a44 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_PCD_EP_Open+0xaa>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e00e      	b.n	8005a70 <HAL_PCD_EP_Open+0xc8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f003 fced 	bl	8009440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0f      	bge.n	8005aac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3338      	adds	r3, #56	@ 0x38
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	705a      	strb	r2, [r3, #1]
 8005aaa:	e00f      	b.n	8005acc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_PCD_EP_Close+0x6e>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e00e      	b.n	8005b04 <HAL_PCD_EP_Close+0x8c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f003 fd2b 	bl	8009550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2200      	movs	r2, #0
 8005b46:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d102      	bne.n	8005b68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	f004 f80a 	bl	8009b98 <USB_EP0StartXfer>
 8005b84:	e008      	b.n	8005b98 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6979      	ldr	r1, [r7, #20]
 8005b94:	f003 fdb8 	bl	8009708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8005bc4:	681b      	ldr	r3, [r3, #0]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	460b      	mov	r3, r1
 8005be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	3338      	adds	r3, #56	@ 0x38
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6979      	ldr	r1, [r7, #20]
 8005c44:	f003 ffa8 	bl	8009b98 <USB_EP0StartXfer>
 8005c48:	e008      	b.n	8005c5c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	f003 fd56 	bl	8009708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d901      	bls.n	8005c84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e050      	b.n	8005d26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	da0f      	bge.n	8005cac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	3338      	adds	r3, #56	@ 0x38
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	705a      	strb	r2, [r3, #1]
 8005caa:	e00d      	b.n	8005cc8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_PCD_EP_SetStall+0x82>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e01e      	b.n	8005d26 <HAL_PCD_EP_SetStall+0xc0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 f9e6 	bl	800a0c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	b2d9      	uxtb	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005d16:	461a      	mov	r2, r3
 8005d18:	f004 fbd6 	bl	800a4c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d901      	bls.n	8005d4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e042      	b.n	8005dd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0f      	bge.n	8005d74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 020f 	and.w	r2, r3, #15
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	3338      	adds	r3, #56	@ 0x38
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	705a      	strb	r2, [r3, #1]
 8005d72:	e00f      	b.n	8005d94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 020f 	and.w	r2, r3, #15
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_PCD_EP_ClrStall+0x86>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e00e      	b.n	8005dd2 <HAL_PCD_EP_ClrStall+0xa4>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 f9ee 	bl	800a1a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0c      	bge.n	8005e08 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3338      	adds	r3, #56	@ 0x38
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e00c      	b.n	8005e22 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3304      	adds	r3, #4
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f004 f80d 	bl	8009e48 <USB_EPStopXfer>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e32:	7afb      	ldrb	r3, [r7, #11]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	@ 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	3338      	adds	r3, #56	@ 0x38
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	4413      	add	r3, r2
 8005e60:	3304      	adds	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d901      	bls.n	8005e74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e06c      	b.n	8005f4e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d902      	bls.n	8005e90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3303      	adds	r3, #3
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e98:	e02b      	b.n	8005ef2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3303      	adds	r3, #3
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6919      	ldr	r1, [r3, #16]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	6978      	ldr	r0, [r7, #20]
 8005ed6:	f004 f861 	bl	8009f9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1a      	ldr	r2, [r3, #32]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d809      	bhi.n	8005f1c <PCD_WriteEmptyTxFifo+0xe0>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1a      	ldr	r2, [r3, #32]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d203      	bcs.n	8005f1c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1be      	bne.n	8005e9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d811      	bhi.n	8005f4c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	6939      	ldr	r1, [r7, #16]
 8005f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f48:	4013      	ands	r3, r2
 8005f4a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	333c      	adds	r3, #60	@ 0x3c
 8005f70:	3304      	adds	r3, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d17b      	bne.n	8006086 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d015      	beq.n	8005fc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4a61      	ldr	r2, [pc, #388]	@ (8006120 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	f240 80b9 	bls.w	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80b3 	beq.w	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc0:	6093      	str	r3, [r2, #8]
 8005fc2:	e0a7      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2320      	movs	r3, #32
 8005fde:	6093      	str	r3, [r2, #8]
 8005fe0:	e098      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 8093 	bne.w	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8006120 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d90f      	bls.n	8006016 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006012:	6093      	str	r3, [r2, #8]
 8006014:	e07e      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	3304      	adds	r3, #4
 800602a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	0159      	lsls	r1, r3, #5
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	440b      	add	r3, r1
 8006038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d114      	bne.n	8006078 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006060:	461a      	mov	r2, r3
 8006062:	2101      	movs	r1, #1
 8006064:	f004 fa30 	bl	800a4c8 <USB_EP0_OutStart>
 8006068:	e006      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f006 fd92 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
 8006084:	e046      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4a26      	ldr	r2, [pc, #152]	@ (8006124 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d124      	bne.n	80060d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060aa:	6093      	str	r3, [r2, #8]
 80060ac:	e032      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c4:	461a      	mov	r2, r3
 80060c6:	2320      	movs	r3, #32
 80060c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f006 fd69 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
 80060d6:	e01d      	b.n	8006114 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d114      	bne.n	8006108 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d108      	bne.n	8006108 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006100:	461a      	mov	r2, r3
 8006102:	2100      	movs	r1, #0
 8006104:	f004 f9e0 	bl	800a4c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f006 fd4a 	bl	800cba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	4f54300a 	.word	0x4f54300a
 8006124:	4f54310a 	.word	0x4f54310a

08006128 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	333c      	adds	r3, #60	@ 0x3c
 8006140:	3304      	adds	r3, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d90e      	bls.n	800617c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f006 fd01 	bl	800cb84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a0a      	ldr	r2, [pc, #40]	@ (80061b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d90c      	bls.n	80061a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d108      	bne.n	80061a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800619c:	461a      	mov	r2, r3
 800619e:	2101      	movs	r1, #1
 80061a0:	f004 f992 	bl	800a4c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	4f54300a 	.word	0x4f54300a

080061b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
 80061c0:	4613      	mov	r3, r2
 80061c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061d2:	883b      	ldrh	r3, [r7, #0]
 80061d4:	0419      	lsls	r1, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	430a      	orrs	r2, r1
 80061de:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e0:	e028      	b.n	8006234 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	4413      	add	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e00d      	b.n	8006212 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	3340      	adds	r3, #64	@ 0x40
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	3301      	adds	r3, #1
 8006210:	73fb      	strb	r3, [r7, #15]
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	3b01      	subs	r3, #1
 8006218:	429a      	cmp	r2, r3
 800621a:	d3ec      	bcc.n	80061f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800621c:	883b      	ldrh	r3, [r7, #0]
 800621e:	0418      	lsls	r0, r3, #16
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	3b01      	subs	r3, #1
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	4302      	orrs	r2, r0
 800622c:	3340      	adds	r3, #64	@ 0x40
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006296:	f043 0303 	orr.w	r3, r3, #3
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0cc      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062c0:	4b68      	ldr	r3, [pc, #416]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d90c      	bls.n	80062e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ce:	4b65      	ldr	r3, [pc, #404]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b63      	ldr	r3, [pc, #396]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d001      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0b8      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006300:	4b59      	ldr	r3, [pc, #356]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4a58      	ldr	r2, [pc, #352]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800630a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006318:	4b53      	ldr	r3, [pc, #332]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a52      	ldr	r2, [pc, #328]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006324:	4b50      	ldr	r3, [pc, #320]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	494d      	ldr	r1, [pc, #308]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d044      	beq.n	80063cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d107      	bne.n	800635a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d119      	bne.n	800638a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e07f      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d003      	beq.n	800636a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006366:	2b03      	cmp	r3, #3
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636a:	4b3f      	ldr	r3, [pc, #252]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e06f      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637a:	4b3b      	ldr	r3, [pc, #236]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e067      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800638a:	4b37      	ldr	r3, [pc, #220]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f023 0203 	bic.w	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4934      	ldr	r1, [pc, #208]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	4313      	orrs	r3, r2
 800639a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800639c:	f7fd f866 	bl	800346c <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a2:	e00a      	b.n	80063ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a4:	f7fd f862 	bl	800346c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e04f      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 020c 	and.w	r2, r3, #12
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d1eb      	bne.n	80063a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063cc:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d20c      	bcs.n	80063f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b22      	ldr	r3, [pc, #136]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e2:	4b20      	ldr	r3, [pc, #128]	@ (8006464 <HAL_RCC_ClockConfig+0x1b8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e032      	b.n	800645a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006400:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4916      	ldr	r1, [pc, #88]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	4313      	orrs	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800641e:	4b12      	ldr	r3, [pc, #72]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	490e      	ldr	r1, [pc, #56]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	4313      	orrs	r3, r2
 8006430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006432:	f000 fb7f 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006436:	4602      	mov	r2, r0
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	490a      	ldr	r1, [pc, #40]	@ (800646c <HAL_RCC_ClockConfig+0x1c0>)
 8006444:	5ccb      	ldrb	r3, [r1, r3]
 8006446:	fa22 f303 	lsr.w	r3, r2, r3
 800644a:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <HAL_RCC_ClockConfig+0x1c4>)
 800644c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800644e:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <HAL_RCC_ClockConfig+0x1c8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7fc ffc6 	bl	80033e4 <HAL_InitTick>

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40023c00 	.word	0x40023c00
 8006468:	40023800 	.word	0x40023800
 800646c:	08011928 	.word	0x08011928
 8006470:	20000000 	.word	0x20000000
 8006474:	20000004 	.word	0x20000004

08006478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800647c:	4b03      	ldr	r3, [pc, #12]	@ (800648c <HAL_RCC_GetHCLKFreq+0x14>)
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000000 	.word	0x20000000

08006490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006494:	f7ff fff0 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	0a9b      	lsrs	r3, r3, #10
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4903      	ldr	r1, [pc, #12]	@ (80064b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800
 80064b4:	08011938 	.word	0x08011938

080064b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064bc:	f7ff ffdc 	bl	8006478 <HAL_RCC_GetHCLKFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b05      	ldr	r3, [pc, #20]	@ (80064d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	0b5b      	lsrs	r3, r3, #13
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	4903      	ldr	r1, [pc, #12]	@ (80064dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40023800 	.word	0x40023800
 80064dc:	08011938 	.word	0x08011938

080064e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	@ 0x30
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006518:	4b6f      	ldr	r3, [pc, #444]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800651a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800651e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	496c      	ldr	r1, [pc, #432]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006536:	2301      	movs	r3, #1
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006546:	4b64      	ldr	r3, [pc, #400]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006554:	4960      	ldr	r1, [pc, #384]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006564:	2301      	movs	r3, #1
 8006566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006574:	4b58      	ldr	r3, [pc, #352]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800657a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	4955      	ldr	r1, [pc, #340]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006592:	d101      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006594:	2301      	movs	r3, #1
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065b0:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065be:	4946      	ldr	r1, [pc, #280]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ce:	d101      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80065dc:	2301      	movs	r3, #1
 80065de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 808a 	beq.w	8006702 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	4b39      	ldr	r3, [pc, #228]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	4a38      	ldr	r2, [pc, #224]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065fe:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800660a:	4b34      	ldr	r3, [pc, #208]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a33      	ldr	r2, [pc, #204]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006616:	f7fc ff29 	bl	800346c <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fc ff25 	bl	800346c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e278      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006630:	4b2a      	ldr	r3, [pc, #168]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800663c:	4b26      	ldr	r3, [pc, #152]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800663e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006644:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d02f      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006654:	6a3a      	ldr	r2, [r7, #32]
 8006656:	429a      	cmp	r2, r3
 8006658:	d028      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800665a:	4b1f      	ldr	r3, [pc, #124]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006662:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006664:	4b1e      	ldr	r3, [pc, #120]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800666a:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006670:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006676:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b01      	cmp	r3, #1
 8006680:	d114      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006682:	f7fc fef3 	bl	800346c <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006688:	e00a      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668a:	f7fc feef 	bl	800346c <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e240      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a0:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ee      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066b8:	d114      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80066ba:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ce:	4902      	ldr	r1, [pc, #8]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	608b      	str	r3, [r1, #8]
 80066d4:	e00c      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40007000 	.word	0x40007000
 80066e0:	42470e40 	.word	0x42470e40
 80066e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a49      	ldr	r2, [pc, #292]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066ee:	6093      	str	r3, [r2, #8]
 80066f0:	4b47      	ldr	r3, [pc, #284]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fc:	4944      	ldr	r1, [pc, #272]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006714:	4b3f      	ldr	r3, [pc, #252]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006716:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006724:	4b3a      	ldr	r3, [pc, #232]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800672a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006732:	4937      	ldr	r1, [pc, #220]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006746:	4b32      	ldr	r3, [pc, #200]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800674c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006754:	492e      	ldr	r1, [pc, #184]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006768:	4b29      	ldr	r3, [pc, #164]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800676a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	4926      	ldr	r1, [pc, #152]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006786:	d101      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006788:	2301      	movs	r3, #1
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006798:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800679a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800679e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	491a      	ldr	r1, [pc, #104]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80067ba:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	4911      	ldr	r1, [pc, #68]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d8:	d101      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80067da:	2301      	movs	r3, #1
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d005      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ec:	f040 80ff 	bne.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067f0:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fc fe39 	bl	800346c <HAL_GetTick>
 80067fa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067fc:	e00e      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067fe:	f7fc fe35 	bl	800346c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d907      	bls.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e188      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006810:	40023800 	.word	0x40023800
 8006814:	424711e0 	.word	0x424711e0
 8006818:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800681c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ea      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d028      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d124      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006850:	4b71      	ldr	r3, [pc, #452]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	3301      	adds	r3, #1
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006862:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006868:	0e1b      	lsrs	r3, r3, #24
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	019b      	lsls	r3, r3, #6
 800687a:	431a      	orrs	r2, r3
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	3b01      	subs	r3, #1
 8006882:	041b      	lsls	r3, r3, #16
 8006884:	431a      	orrs	r2, r3
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	4961      	ldr	r1, [pc, #388]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d035      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068c4:	d130      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80068c6:	4b54      	ldr	r3, [pc, #336]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	3301      	adds	r3, #1
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068de:	0f1b      	lsrs	r3, r3, #28
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	019b      	lsls	r3, r3, #6
 80068f0:	431a      	orrs	r2, r3
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	3b01      	subs	r3, #1
 80068f8:	041b      	lsls	r3, r3, #16
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	431a      	orrs	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	071b      	lsls	r3, r3, #28
 8006908:	4943      	ldr	r1, [pc, #268]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006910:	4b41      	ldr	r3, [pc, #260]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006916:	f023 021f 	bic.w	r2, r3, #31
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	493d      	ldr	r1, [pc, #244]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006930:	2b00      	cmp	r3, #0
 8006932:	d029      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693c:	d124      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800693e:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	3301      	adds	r3, #1
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006950:	4b31      	ldr	r3, [pc, #196]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006956:	0f1b      	lsrs	r3, r3, #28
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	019b      	lsls	r3, r3, #6
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	3b01      	subs	r3, #1
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	431a      	orrs	r2, r3
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	431a      	orrs	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	071b      	lsls	r3, r3, #28
 8006980:	4925      	ldr	r1, [pc, #148]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006990:	2b00      	cmp	r3, #0
 8006992:	d016      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	3b01      	subs	r3, #1
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	4917      	ldr	r1, [pc, #92]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069c2:	4b16      	ldr	r3, [pc, #88]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069c8:	f7fc fd50 	bl	800346c <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069d0:	f7fc fd4c 	bl	800346c <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e09f      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 8095 	bne.w	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069fc:	f7fc fd36 	bl	800346c <HAL_GetTick>
 8006a00:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a02:	e00f      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a04:	f7fc fd32 	bl	800346c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d908      	bls.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e085      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	42470068 	.word	0x42470068
 8006a20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a24:	4b41      	ldr	r3, [pc, #260]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a30:	d0e8      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d02b      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d127      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006a5a:	4b34      	ldr	r3, [pc, #208]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	3301      	adds	r3, #1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	431a      	orrs	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	4928      	ldr	r1, [pc, #160]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a90:	4b26      	ldr	r3, [pc, #152]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a96:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	4922      	ldr	r1, [pc, #136]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d01d      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006abe:	d118      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	019b      	lsls	r3, r3, #6
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	4910      	ldr	r1, [pc, #64]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006af2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006af8:	f7fc fcb8 	bl	800346c <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b00:	f7fc fcb4 	bl	800346c <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e007      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b1e:	d1ef      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3730      	adds	r7, #48	@ 0x30
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	42470070 	.word	0x42470070

08006b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b38:	b0ae      	sub	sp, #184	@ 0xb8
 8006b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b5a:	4bcb      	ldr	r3, [pc, #812]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	f200 8206 	bhi.w	8006f74 <HAL_RCC_GetSysClockFreq+0x440>
 8006b68:	a201      	add	r2, pc, #4	@ (adr r2, 8006b70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006ba5 	.word	0x08006ba5
 8006b74:	08006f75 	.word	0x08006f75
 8006b78:	08006f75 	.word	0x08006f75
 8006b7c:	08006f75 	.word	0x08006f75
 8006b80:	08006bad 	.word	0x08006bad
 8006b84:	08006f75 	.word	0x08006f75
 8006b88:	08006f75 	.word	0x08006f75
 8006b8c:	08006f75 	.word	0x08006f75
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006f75 	.word	0x08006f75
 8006b98:	08006f75 	.word	0x08006f75
 8006b9c:	08006f75 	.word	0x08006f75
 8006ba0:	08006da5 	.word	0x08006da5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba4:	4bb9      	ldr	r3, [pc, #740]	@ (8006e8c <HAL_RCC_GetSysClockFreq+0x358>)
 8006ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006baa:	e1e7      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bac:	4bb8      	ldr	r3, [pc, #736]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bb2:	e1e3      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb4:	4bb4      	ldr	r3, [pc, #720]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bc0:	4bb1      	ldr	r3, [pc, #708]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d071      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bcc:	4bae      	ldr	r3, [pc, #696]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	099b      	lsrs	r3, r3, #6
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bd8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	f04f 0000 	mov.w	r0, #0
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	0159      	lsls	r1, r3, #5
 8006c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c04:	0150      	lsls	r0, r2, #5
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	1a51      	subs	r1, r2, r1
 8006c0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006c10:	4629      	mov	r1, r5
 8006c12:	eb63 0301 	sbc.w	r3, r3, r1
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006c24:	4649      	mov	r1, r9
 8006c26:	018b      	lsls	r3, r1, #6
 8006c28:	4641      	mov	r1, r8
 8006c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c2e:	4641      	mov	r1, r8
 8006c30:	018a      	lsls	r2, r1, #6
 8006c32:	4641      	mov	r1, r8
 8006c34:	1a51      	subs	r1, r2, r1
 8006c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c38:	4649      	mov	r1, r9
 8006c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	00cb      	lsls	r3, r1, #3
 8006c50:	4641      	mov	r1, r8
 8006c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c56:	4641      	mov	r1, r8
 8006c58:	00ca      	lsls	r2, r1, #3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4622      	mov	r2, r4
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c66:	462b      	mov	r3, r5
 8006c68:	460a      	mov	r2, r1
 8006c6a:	eb42 0303 	adc.w	r3, r2, r3
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	024b      	lsls	r3, r1, #9
 8006c80:	4621      	mov	r1, r4
 8006c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c86:	4621      	mov	r1, r4
 8006c88:	024a      	lsls	r2, r1, #9
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ca0:	f7fa f812 	bl	8000cc8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4613      	mov	r3, r2
 8006caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cae:	e067      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb0:	4b75      	ldr	r3, [pc, #468]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cbc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cca:	2300      	movs	r3, #0
 8006ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	f04f 0000 	mov.w	r0, #0
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	0159      	lsls	r1, r3, #5
 8006ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce4:	0150      	lsls	r0, r2, #5
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4621      	mov	r1, r4
 8006cec:	1a51      	subs	r1, r2, r1
 8006cee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006d04:	4649      	mov	r1, r9
 8006d06:	018b      	lsls	r3, r1, #6
 8006d08:	4641      	mov	r1, r8
 8006d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d0e:	4641      	mov	r1, r8
 8006d10:	018a      	lsls	r2, r1, #6
 8006d12:	4641      	mov	r1, r8
 8006d14:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d18:	4649      	mov	r1, r9
 8006d1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d32:	4692      	mov	sl, r2
 8006d34:	469b      	mov	fp, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	eb1a 0303 	adds.w	r3, sl, r3
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	462b      	mov	r3, r5
 8006d40:	eb4b 0303 	adc.w	r3, fp, r3
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006d52:	4629      	mov	r1, r5
 8006d54:	028b      	lsls	r3, r1, #10
 8006d56:	4621      	mov	r1, r4
 8006d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	028a      	lsls	r2, r1, #10
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d68:	2200      	movs	r2, #0
 8006d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006d72:	f7f9 ffa9 	bl	8000cc8 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d80:	4b41      	ldr	r3, [pc, #260]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8006d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006da2:	e0eb      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da4:	4b38      	ldr	r3, [pc, #224]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006db0:	4b35      	ldr	r3, [pc, #212]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d06b      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dbc:	4b32      	ldr	r3, [pc, #200]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	099b      	lsrs	r3, r3, #6
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f04f 0000 	mov.w	r0, #0
 8006de0:	f04f 0100 	mov.w	r1, #0
 8006de4:	0159      	lsls	r1, r3, #5
 8006de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dea:	0150      	lsls	r0, r2, #5
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4621      	mov	r1, r4
 8006df2:	1a51      	subs	r1, r2, r1
 8006df4:	61b9      	str	r1, [r7, #24]
 8006df6:	4629      	mov	r1, r5
 8006df8:	eb63 0301 	sbc.w	r3, r3, r1
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e0a:	4659      	mov	r1, fp
 8006e0c:	018b      	lsls	r3, r1, #6
 8006e0e:	4651      	mov	r1, sl
 8006e10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e14:	4651      	mov	r1, sl
 8006e16:	018a      	lsls	r2, r1, #6
 8006e18:	4651      	mov	r1, sl
 8006e1a:	ebb2 0801 	subs.w	r8, r2, r1
 8006e1e:	4659      	mov	r1, fp
 8006e20:	eb63 0901 	sbc.w	r9, r3, r1
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e38:	4690      	mov	r8, r2
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	eb18 0303 	adds.w	r3, r8, r3
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	462b      	mov	r3, r5
 8006e46:	eb49 0303 	adc.w	r3, r9, r3
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006e58:	4629      	mov	r1, r5
 8006e5a:	024b      	lsls	r3, r1, #9
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e62:	4621      	mov	r1, r4
 8006e64:	024a      	lsls	r2, r1, #9
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6e:	2200      	movs	r2, #0
 8006e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e78:	f7f9 ff26 	bl	8000cc8 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4613      	mov	r3, r2
 8006e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e86:	e065      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x420>
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	00f42400 	.word	0x00f42400
 8006e90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e94:	4b3d      	ldr	r3, [pc, #244]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006eae:	4642      	mov	r2, r8
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f04f 0100 	mov.w	r1, #0
 8006eba:	0159      	lsls	r1, r3, #5
 8006ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec0:	0150      	lsls	r0, r2, #5
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	1a51      	subs	r1, r2, r1
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	4649      	mov	r1, r9
 8006ece:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	018b      	lsls	r3, r1, #6
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eea:	4651      	mov	r1, sl
 8006eec:	018a      	lsls	r2, r1, #6
 8006eee:	4651      	mov	r1, sl
 8006ef0:	1a54      	subs	r4, r2, r1
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	eb63 0501 	sbc.w	r5, r3, r1
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	00eb      	lsls	r3, r5, #3
 8006f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f06:	00e2      	lsls	r2, r4, #3
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	4643      	mov	r3, r8
 8006f0e:	18e3      	adds	r3, r4, r3
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	464b      	mov	r3, r9
 8006f14:	eb45 0303 	adc.w	r3, r5, r3
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f26:	4629      	mov	r1, r5
 8006f28:	028b      	lsls	r3, r1, #10
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f30:	4621      	mov	r1, r4
 8006f32:	028a      	lsls	r2, r1, #10
 8006f34:	4610      	mov	r0, r2
 8006f36:	4619      	mov	r1, r3
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f46:	f7f9 febf 	bl	8000cc8 <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4613      	mov	r3, r2
 8006f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006f54:	4b0d      	ldr	r3, [pc, #52]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	0f1b      	lsrs	r3, r3, #28
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f72:	e003      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	37b8      	adds	r7, #184	@ 0xb8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	00f42400 	.word	0x00f42400

08006f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e28d      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8083 	beq.w	80070ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fb4:	4b94      	ldr	r3, [pc, #592]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d019      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fc0:	4b91      	ldr	r3, [pc, #580]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d106      	bne.n	8006fda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fda:	4b8b      	ldr	r3, [pc, #556]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	d112      	bne.n	800700c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fe6:	4b88      	ldr	r3, [pc, #544]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ff2:	d10b      	bne.n	800700c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff4:	4b84      	ldr	r3, [pc, #528]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05b      	beq.n	80070b8 <HAL_RCC_OscConfig+0x124>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d157      	bne.n	80070b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e25a      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d106      	bne.n	8007024 <HAL_RCC_OscConfig+0x90>
 8007016:	4b7c      	ldr	r3, [pc, #496]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a7b      	ldr	r2, [pc, #492]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e01d      	b.n	8007060 <HAL_RCC_OscConfig+0xcc>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0xb4>
 800702e:	4b76      	ldr	r3, [pc, #472]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a75      	ldr	r2, [pc, #468]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b73      	ldr	r3, [pc, #460]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a72      	ldr	r2, [pc, #456]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	e00b      	b.n	8007060 <HAL_RCC_OscConfig+0xcc>
 8007048:	4b6f      	ldr	r3, [pc, #444]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6e      	ldr	r2, [pc, #440]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800704e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	4b6c      	ldr	r3, [pc, #432]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6b      	ldr	r2, [pc, #428]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800705a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800705e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d013      	beq.n	8007090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7fc fa00 	bl	800346c <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007070:	f7fc f9fc 	bl	800346c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	@ 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e21f      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007082:	4b61      	ldr	r3, [pc, #388]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCC_OscConfig+0xdc>
 800708e:	e014      	b.n	80070ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fc f9ec 	bl	800346c <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007098:	f7fc f9e8 	bl	800346c <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	@ 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e20b      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070aa:	4b57      	ldr	r3, [pc, #348]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0x104>
 80070b6:	e000      	b.n	80070ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d06f      	beq.n	80071a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070c6:	4b50      	ldr	r3, [pc, #320]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d017      	beq.n	8007102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070d2:	4b4d      	ldr	r3, [pc, #308]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d105      	bne.n	80070ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070de:	4b4a      	ldr	r3, [pc, #296]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ea:	4b47      	ldr	r3, [pc, #284]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070f2:	2b0c      	cmp	r3, #12
 80070f4:	d11c      	bne.n	8007130 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b44      	ldr	r3, [pc, #272]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d116      	bne.n	8007130 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	4b41      	ldr	r3, [pc, #260]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCC_OscConfig+0x186>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d001      	beq.n	800711a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e1d3      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711a:	4b3b      	ldr	r3, [pc, #236]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4937      	ldr	r1, [pc, #220]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712e:	e03a      	b.n	80071a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d020      	beq.n	800717a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007138:	4b34      	ldr	r3, [pc, #208]	@ (800720c <HAL_RCC_OscConfig+0x278>)
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fc f995 	bl	800346c <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007146:	f7fc f991 	bl	800346c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e1b4      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007158:	4b2b      	ldr	r3, [pc, #172]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007164:	4b28      	ldr	r3, [pc, #160]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4925      	ldr	r1, [pc, #148]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 8007174:	4313      	orrs	r3, r2
 8007176:	600b      	str	r3, [r1, #0]
 8007178:	e015      	b.n	80071a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800717a:	4b24      	ldr	r3, [pc, #144]	@ (800720c <HAL_RCC_OscConfig+0x278>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fc f974 	bl	800346c <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007188:	f7fc f970 	bl	800346c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e193      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d036      	beq.n	8007220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ba:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <HAL_RCC_OscConfig+0x27c>)
 80071bc:	2201      	movs	r2, #1
 80071be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c0:	f7fc f954 	bl	800346c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c8:	f7fc f950 	bl	800346c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e173      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_RCC_OscConfig+0x274>)
 80071dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0x234>
 80071e6:	e01b      	b.n	8007220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e8:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <HAL_RCC_OscConfig+0x27c>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fc f93d 	bl	800346c <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f4:	e00e      	b.n	8007214 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fc f939 	bl	800346c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d907      	bls.n	8007214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e15c      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
 8007208:	40023800 	.word	0x40023800
 800720c:	42470000 	.word	0x42470000
 8007210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	4b8a      	ldr	r3, [pc, #552]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1ea      	bne.n	80071f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8097 	beq.w	800735c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007232:	4b83      	ldr	r3, [pc, #524]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10f      	bne.n	800725e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	4b7f      	ldr	r3, [pc, #508]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	4a7e      	ldr	r2, [pc, #504]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800724c:	6413      	str	r3, [r2, #64]	@ 0x40
 800724e:	4b7c      	ldr	r3, [pc, #496]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800725e:	4b79      	ldr	r3, [pc, #484]	@ (8007444 <HAL_RCC_OscConfig+0x4b0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d118      	bne.n	800729c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800726a:	4b76      	ldr	r3, [pc, #472]	@ (8007444 <HAL_RCC_OscConfig+0x4b0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a75      	ldr	r2, [pc, #468]	@ (8007444 <HAL_RCC_OscConfig+0x4b0>)
 8007270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007276:	f7fc f8f9 	bl	800346c <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727e:	f7fc f8f5 	bl	800346c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e118      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007290:	4b6c      	ldr	r3, [pc, #432]	@ (8007444 <HAL_RCC_OscConfig+0x4b0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d106      	bne.n	80072b2 <HAL_RCC_OscConfig+0x31e>
 80072a4:	4b66      	ldr	r3, [pc, #408]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a8:	4a65      	ldr	r2, [pc, #404]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b0:	e01c      	b.n	80072ec <HAL_RCC_OscConfig+0x358>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x340>
 80072ba:	4b61      	ldr	r3, [pc, #388]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	4a60      	ldr	r2, [pc, #384]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072c0:	f043 0304 	orr.w	r3, r3, #4
 80072c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	4a5d      	ldr	r2, [pc, #372]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0x358>
 80072d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d8:	4a59      	ldr	r2, [pc, #356]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e0:	4b57      	ldr	r3, [pc, #348]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	4a56      	ldr	r2, [pc, #344]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80072e6:	f023 0304 	bic.w	r3, r3, #4
 80072ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d015      	beq.n	8007320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fc f8ba 	bl	800346c <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	e00a      	b.n	8007312 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072fc:	f7fc f8b6 	bl	800346c <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800730a:	4293      	cmp	r3, r2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e0d7      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007312:	4b4b      	ldr	r3, [pc, #300]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ee      	beq.n	80072fc <HAL_RCC_OscConfig+0x368>
 800731e:	e014      	b.n	800734a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fc f8a4 	bl	800346c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007326:	e00a      	b.n	800733e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007328:	f7fc f8a0 	bl	800346c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e0c1      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800733e:	4b40      	ldr	r3, [pc, #256]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ee      	bne.n	8007328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b3b      	ldr	r3, [pc, #236]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	4a3a      	ldr	r2, [pc, #232]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80ad 	beq.w	80074c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007366:	4b36      	ldr	r3, [pc, #216]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 030c 	and.w	r3, r3, #12
 800736e:	2b08      	cmp	r3, #8
 8007370:	d060      	beq.n	8007434 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d145      	bne.n	8007406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737a:	4b33      	ldr	r3, [pc, #204]	@ (8007448 <HAL_RCC_OscConfig+0x4b4>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fc f874 	bl	800346c <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007388:	f7fc f870 	bl	800346c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e093      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	4b29      	ldr	r3, [pc, #164]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69da      	ldr	r2, [r3, #28]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	019b      	lsls	r3, r3, #6
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	3b01      	subs	r3, #1
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	061b      	lsls	r3, r3, #24
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	071b      	lsls	r3, r3, #28
 80073d2:	491b      	ldr	r1, [pc, #108]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007448 <HAL_RCC_OscConfig+0x4b4>)
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073de:	f7fc f845 	bl	800346c <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073e6:	f7fc f841 	bl	800346c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e064      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f8:	4b11      	ldr	r3, [pc, #68]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <HAL_RCC_OscConfig+0x452>
 8007404:	e05c      	b.n	80074c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007406:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <HAL_RCC_OscConfig+0x4b4>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fc f82e 	bl	800346c <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007414:	f7fc f82a 	bl	800346c <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e04d      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007426:	4b06      	ldr	r3, [pc, #24]	@ (8007440 <HAL_RCC_OscConfig+0x4ac>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x480>
 8007432:	e045      	b.n	80074c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e040      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
 8007440:	40023800 	.word	0x40023800
 8007444:	40007000 	.word	0x40007000
 8007448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800744c:	4b1f      	ldr	r3, [pc, #124]	@ (80074cc <HAL_RCC_OscConfig+0x538>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d030      	beq.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007464:	429a      	cmp	r2, r3
 8007466:	d129      	bne.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d122      	bne.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007484:	4293      	cmp	r3, r2
 8007486:	d119      	bne.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	3b01      	subs	r3, #1
 8007496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d10f      	bne.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023800 	.word	0x40023800

080074d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e07b      	b.n	80075da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d108      	bne.n	80074fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074f2:	d009      	beq.n	8007508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	61da      	str	r2, [r3, #28]
 80074fa:	e005      	b.n	8007508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fbc2 	bl	8002cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800753e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758c:	ea42 0103 	orr.w	r1, r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	f003 0104 	and.w	r1, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	f003 0210 	and.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e041      	b.n	8007678 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fb fb97 	bl	8002d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f000 f9cd 	bl	80079c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e04e      	b.n	8007736 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a23      	ldr	r2, [pc, #140]	@ (8007744 <HAL_TIM_Base_Start_IT+0xc4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c2:	d01d      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007748 <HAL_TIM_Base_Start_IT+0xc8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1e      	ldr	r2, [pc, #120]	@ (800774c <HAL_TIM_Base_Start_IT+0xcc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007750 <HAL_TIM_Base_Start_IT+0xd0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007754 <HAL_TIM_Base_Start_IT+0xd4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <HAL_TIM_Base_Start_IT+0xd8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a18      	ldr	r2, [pc, #96]	@ (800775c <HAL_TIM_Base_Start_IT+0xdc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d111      	bne.n	8007724 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b06      	cmp	r3, #6
 8007710:	d010      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	e007      	b.n	8007734 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	40010000 	.word	0x40010000
 8007748:	40000400 	.word	0x40000400
 800774c:	40000800 	.word	0x40000800
 8007750:	40000c00 	.word	0x40000c00
 8007754:	40010400 	.word	0x40010400
 8007758:	40014000 	.word	0x40014000
 800775c:	40001800 	.word	0x40001800

08007760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d122      	bne.n	80077bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b02      	cmp	r3, #2
 8007782:	d11b      	bne.n	80077bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0202 	mvn.w	r2, #2
 800778c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8ee 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 80077a8:	e005      	b.n	80077b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8e0 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f8f1 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d122      	bne.n	8007810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d11b      	bne.n	8007810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0204 	mvn.w	r2, #4
 80077e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8c4 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 80077fc:	e005      	b.n	800780a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8b6 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8c7 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b08      	cmp	r3, #8
 800781c:	d122      	bne.n	8007864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b08      	cmp	r3, #8
 800782a:	d11b      	bne.n	8007864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0208 	mvn.w	r2, #8
 8007834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2204      	movs	r2, #4
 800783a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f89a 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 8007850:	e005      	b.n	800785e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f88c 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f89d 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d122      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b10      	cmp	r3, #16
 800787e:	d11b      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0210 	mvn.w	r2, #16
 8007888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2208      	movs	r2, #8
 800788e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f870 	bl	8007984 <HAL_TIM_IC_CaptureCallback>
 80078a4:	e005      	b.n	80078b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f862 	bl	8007970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f873 	bl	8007998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0201 	mvn.w	r2, #1
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa f9f0 	bl	8001cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ee:	2b80      	cmp	r3, #128	@ 0x80
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fc:	2b80      	cmp	r3, #128	@ 0x80
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f902 	bl	8007b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f838 	bl	80079ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b20      	cmp	r3, #32
 8007948:	d10e      	bne.n	8007968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b20      	cmp	r3, #32
 8007956:	d107      	bne.n	8007968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0220 	mvn.w	r2, #32
 8007960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8cc 	bl	8007b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a40      	ldr	r2, [pc, #256]	@ (8007ad4 <TIM_Base_SetConfig+0x114>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079de:	d00f      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a3d      	ldr	r2, [pc, #244]	@ (8007ad8 <TIM_Base_SetConfig+0x118>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a3c      	ldr	r2, [pc, #240]	@ (8007adc <TIM_Base_SetConfig+0x11c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a3b      	ldr	r2, [pc, #236]	@ (8007ae0 <TIM_Base_SetConfig+0x120>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3a      	ldr	r2, [pc, #232]	@ (8007ae4 <TIM_Base_SetConfig+0x124>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d108      	bne.n	8007a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad4 <TIM_Base_SetConfig+0x114>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a20:	d027      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad8 <TIM_Base_SetConfig+0x118>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d023      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8007adc <TIM_Base_SetConfig+0x11c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01f      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae0 <TIM_Base_SetConfig+0x120>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a29      	ldr	r2, [pc, #164]	@ (8007ae4 <TIM_Base_SetConfig+0x124>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d017      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a28      	ldr	r2, [pc, #160]	@ (8007ae8 <TIM_Base_SetConfig+0x128>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a27      	ldr	r2, [pc, #156]	@ (8007aec <TIM_Base_SetConfig+0x12c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00f      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a26      	ldr	r2, [pc, #152]	@ (8007af0 <TIM_Base_SetConfig+0x130>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a25      	ldr	r2, [pc, #148]	@ (8007af4 <TIM_Base_SetConfig+0x134>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a24      	ldr	r2, [pc, #144]	@ (8007af8 <TIM_Base_SetConfig+0x138>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a23      	ldr	r2, [pc, #140]	@ (8007afc <TIM_Base_SetConfig+0x13c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad4 <TIM_Base_SetConfig+0x114>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_Base_SetConfig+0xf8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae4 <TIM_Base_SetConfig+0x124>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d103      	bne.n	8007ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40000c00 	.word	0x40000c00
 8007ae4:	40010400 	.word	0x40010400
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40014400 	.word	0x40014400
 8007af0:	40014800 	.word	0x40014800
 8007af4:	40001800 	.word	0x40001800
 8007af8:	40001c00 	.word	0x40001c00
 8007afc:	40002000 	.word	0x40002000

08007b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e03f      	b.n	8007bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb f91c 	bl	8002d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	@ 0x24
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fe81 	bl	8008874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08a      	sub	sp, #40	@ 0x28
 8007bc6:	af02      	add	r7, sp, #8
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d17c      	bne.n	8007cdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HAL_UART_Transmit+0x2c>
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e075      	b.n	8007cde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_UART_Transmit+0x3e>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e06e      	b.n	8007cde <HAL_UART_Transmit+0x11c>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2221      	movs	r2, #33	@ 0x21
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c16:	f7fb fc29 	bl	800346c <HAL_GetTick>
 8007c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	88fa      	ldrh	r2, [r7, #6]
 8007c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c30:	d108      	bne.n	8007c44 <HAL_UART_Transmit+0x82>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e003      	b.n	8007c4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007c54:	e02a      	b.n	8007cac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2180      	movs	r1, #128	@ 0x80
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fbc1 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e036      	b.n	8007cde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	3302      	adds	r3, #2
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	e007      	b.n	8007c9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1cf      	bne.n	8007c56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2140      	movs	r1, #64	@ 0x40
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fb91 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e006      	b.n	8007cde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e000      	b.n	8007cde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08a      	sub	sp, #40	@ 0x28
 8007cea:	af02      	add	r7, sp, #8
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	603b      	str	r3, [r7, #0]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	f040 808c 	bne.w	8007e20 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <HAL_UART_Receive+0x2e>
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e084      	b.n	8007e22 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Receive+0x40>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e07d      	b.n	8007e22 <HAL_UART_Receive+0x13c>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2222      	movs	r2, #34	@ 0x22
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d42:	f7fb fb93 	bl	800346c <HAL_GetTick>
 8007d46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	88fa      	ldrh	r2, [r7, #6]
 8007d4c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	88fa      	ldrh	r2, [r7, #6]
 8007d52:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d5c:	d108      	bne.n	8007d70 <HAL_UART_Receive+0x8a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	e003      	b.n	8007d78 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007d80:	e043      	b.n	8007e0a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2120      	movs	r1, #32
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fb2b 	bl	80083e8 <UART_WaitOnFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e042      	b.n	8007e22 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10c      	bne.n	8007dbc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	3302      	adds	r3, #2
 8007db8:	61bb      	str	r3, [r7, #24]
 8007dba:	e01f      	b.n	8007dfc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc4:	d007      	beq.n	8007dd6 <HAL_UART_Receive+0xf0>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <HAL_UART_Receive+0xfe>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e008      	b.n	8007df6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1b6      	bne.n	8007d82 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e000      	b.n	8007e22 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007e20:	2302      	movs	r3, #2
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3720      	adds	r7, #32
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	4613      	mov	r3, r2
 8007e36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d11d      	bne.n	8007e80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_UART_Receive_IT+0x26>
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e016      	b.n	8007e82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d101      	bne.n	8007e62 <HAL_UART_Receive_IT+0x38>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e00f      	b.n	8007e82 <HAL_UART_Receive_IT+0x58>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	461a      	mov	r2, r3
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fb24 	bl	80084c4 <UART_Start_Receive_IT>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	e000      	b.n	8007e82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10f      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x66>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fc07 	bl	80086fe <UART_Receive_IT>
      return;
 8007ef0:	e256      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80de 	beq.w	80080b8 <HAL_UART_IRQHandler+0x22c>
 8007efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80d1 	beq.w	80080b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <HAL_UART_IRQHandler+0xae>
 8007f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <HAL_UART_IRQHandler+0xd2>
 8007f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f56:	f043 0202 	orr.w	r2, r3, #2
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <HAL_UART_IRQHandler+0xf6>
 8007f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d011      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x126>
 8007f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	f043 0208 	orr.w	r2, r3, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 81ed 	beq.w	8008396 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_UART_IRQHandler+0x14e>
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb92 	bl	80086fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe4:	2b40      	cmp	r3, #64	@ 0x40
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <HAL_UART_IRQHandler+0x17a>
 8007ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d04f      	beq.n	80080a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa9a 	bl	8008540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b40      	cmp	r3, #64	@ 0x40
 8008018:	d141      	bne.n	800809e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3314      	adds	r3, #20
 8008020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3314      	adds	r3, #20
 8008042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800804a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800805e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d9      	bne.n	800801a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008072:	4a7d      	ldr	r2, [pc, #500]	@ (8008268 <HAL_UART_IRQHandler+0x3dc>)
 8008074:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc f8e2 	bl	8004244 <HAL_DMA_Abort_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008094:	e00e      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f990 	bl	80083bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	e00a      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f98c 	bl	80083bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	e006      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f988 	bl	80083bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80080b2:	e170      	b.n	8008396 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	bf00      	nop
    return;
 80080b6:	e16e      	b.n	8008396 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 814a 	bne.w	8008356 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8143 	beq.w	8008356 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 813c 	beq.w	8008356 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fe:	2b40      	cmp	r3, #64	@ 0x40
 8008100:	f040 80b4 	bne.w	800826c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8140 	beq.w	800839a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800811e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008122:	429a      	cmp	r2, r3
 8008124:	f080 8139 	bcs.w	800839a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800812e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800813a:	f000 8088 	beq.w	800824e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800815c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800816a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800816e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d9      	bne.n	800813e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800819a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e1      	bne.n	800818a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3314      	adds	r3, #20
 80081cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3314      	adds	r3, #20
 80081e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e3      	bne.n	80081c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800821c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821e:	f023 0310 	bic.w	r3, r3, #16
 8008222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	330c      	adds	r3, #12
 800822c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008230:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008232:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800823e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e3      	bne.n	800820c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	4618      	mov	r0, r3
 800824a:	f7fb ff8b 	bl	8004164 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008256:	b29b      	uxth	r3, r3
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	b29b      	uxth	r3, r3
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8b6 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008264:	e099      	b.n	800839a <HAL_UART_IRQHandler+0x50e>
 8008266:	bf00      	nop
 8008268:	08008607 	.word	0x08008607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008274:	b29b      	uxth	r3, r3
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 808b 	beq.w	800839e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8086 	beq.w	800839e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80082b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80082b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e3      	bne.n	8008292 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3314      	adds	r3, #20
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	623b      	str	r3, [r7, #32]
   return(result);
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3314      	adds	r3, #20
 80082ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80082f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e3      	bne.n	80082ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	330c      	adds	r3, #12
 8008330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008334:	61fa      	str	r2, [r7, #28]
 8008336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	617b      	str	r3, [r7, #20]
   return(result);
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e3      	bne.n	8008310 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f83e 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008354:	e023      	b.n	800839e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_UART_IRQHandler+0x4ea>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f95d 	bl	800862e <UART_Transmit_IT>
    return;
 8008374:	e014      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00e      	beq.n	80083a0 <HAL_UART_IRQHandler+0x514>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d008      	beq.n	80083a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f99d 	bl	80086ce <UART_EndTransmit_IT>
    return;
 8008394:	e004      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
    return;
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
      return;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
      return;
 800839e:	bf00      	nop
  }
}
 80083a0:	37e8      	adds	r7, #232	@ 0xe8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop

080083a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b090      	sub	sp, #64	@ 0x40
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	4613      	mov	r3, r2
 80083f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f8:	e050      	b.n	800849c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d04c      	beq.n	800849c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008404:	2b00      	cmp	r3, #0
 8008406:	d007      	beq.n	8008418 <UART_WaitOnFlagUntilTimeout+0x30>
 8008408:	f7fb f830 	bl	800346c <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008414:	429a      	cmp	r2, r3
 8008416:	d241      	bcs.n	800849c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	330c      	adds	r3, #12
 800841e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008438:	637a      	str	r2, [r7, #52]	@ 0x34
 800843a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800843e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e5      	bne.n	8008418 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3314      	adds	r3, #20
 8008452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	613b      	str	r3, [r7, #16]
   return(result);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3314      	adds	r3, #20
 800846a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800846c:	623a      	str	r2, [r7, #32]
 800846e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	6a3a      	ldr	r2, [r7, #32]
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	61bb      	str	r3, [r7, #24]
   return(result);
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e5      	bne.n	800844c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e00f      	b.n	80084bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	4013      	ands	r3, r2
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	bf0c      	ite	eq
 80084ac:	2301      	moveq	r3, #1
 80084ae:	2300      	movne	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d09f      	beq.n	80083fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3740      	adds	r7, #64	@ 0x40
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	88fa      	ldrh	r2, [r7, #6]
 80084dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	88fa      	ldrh	r2, [r7, #6]
 80084e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2222      	movs	r2, #34	@ 0x22
 80084ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008510:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0201 	orr.w	r2, r2, #1
 8008520:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0220 	orr.w	r2, r2, #32
 8008530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008540:	b480      	push	{r7}
 8008542:	b095      	sub	sp, #84	@ 0x54
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800855e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008568:	643a      	str	r2, [r7, #64]	@ 0x40
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800856e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3314      	adds	r3, #20
 8008582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	61fb      	str	r3, [r7, #28]
   return(result);
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3314      	adds	r3, #20
 800859a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800859c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800859e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e5      	bne.n	800857c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d119      	bne.n	80085ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	330c      	adds	r3, #12
 80085d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d8:	61ba      	str	r2, [r7, #24]
 80085da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	613b      	str	r3, [r7, #16]
   return(result);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e5      	bne.n	80085b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80085fa:	bf00      	nop
 80085fc:	3754      	adds	r7, #84	@ 0x54
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff fecb 	bl	80083bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b21      	cmp	r3, #33	@ 0x21
 8008640:	d13e      	bne.n	80086c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864a:	d114      	bne.n	8008676 <UART_Transmit_IT+0x48>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d110      	bne.n	8008676 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	621a      	str	r2, [r3, #32]
 8008674:	e008      	b.n	8008688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	1c59      	adds	r1, r3, #1
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	6211      	str	r1, [r2, #32]
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29b      	uxth	r3, r3
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4619      	mov	r1, r3
 8008696:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10f      	bne.n	80086bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	e000      	b.n	80086c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fe5a 	bl	80083a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b08c      	sub	sp, #48	@ 0x30
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b22      	cmp	r3, #34	@ 0x22
 8008710:	f040 80ab 	bne.w	800886a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800871c:	d117      	bne.n	800874e <UART_Receive_IT+0x50>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d113      	bne.n	800874e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b29b      	uxth	r3, r3
 8008738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873c:	b29a      	uxth	r2, r3
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008746:	1c9a      	adds	r2, r3, #2
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	@ 0x28
 800874c:	e026      	b.n	800879c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008754:	2300      	movs	r3, #0
 8008756:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008760:	d007      	beq.n	8008772 <UART_Receive_IT+0x74>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <UART_Receive_IT+0x82>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e008      	b.n	8008792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800878c:	b2da      	uxtb	r2, r3
 800878e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4619      	mov	r1, r3
 80087aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d15a      	bne.n	8008866 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0220 	bic.w	r2, r2, #32
 80087be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d135      	bne.n	800885c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	613b      	str	r3, [r7, #16]
   return(result);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f023 0310 	bic.w	r3, r3, #16
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008816:	623a      	str	r2, [r7, #32]
 8008818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	69f9      	ldr	r1, [r7, #28]
 800881c:	6a3a      	ldr	r2, [r7, #32]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	61bb      	str	r3, [r7, #24]
   return(result);
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0310 	and.w	r3, r3, #16
 8008834:	2b10      	cmp	r3, #16
 8008836:	d10a      	bne.n	800884e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff fdbb 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 800885a:	e002      	b.n	8008862 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7f9 f9c7 	bl	8001bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e002      	b.n	800886c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	e000      	b.n	800886c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800886a:	2302      	movs	r3, #2
  }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3730      	adds	r7, #48	@ 0x30
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008878:	b0c0      	sub	sp, #256	@ 0x100
 800887a:	af00      	add	r7, sp, #0
 800887c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008890:	68d9      	ldr	r1, [r3, #12]
 8008892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	ea40 0301 	orr.w	r3, r0, r1
 800889c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800889e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088cc:	f021 010c 	bic.w	r1, r1, #12
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088da:	430b      	orrs	r3, r1
 80088dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ee:	6999      	ldr	r1, [r3, #24]
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	ea40 0301 	orr.w	r3, r0, r1
 80088fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b8f      	ldr	r3, [pc, #572]	@ (8008b40 <UART_SetConfig+0x2cc>)
 8008904:	429a      	cmp	r2, r3
 8008906:	d005      	beq.n	8008914 <UART_SetConfig+0xa0>
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b44 <UART_SetConfig+0x2d0>)
 8008910:	429a      	cmp	r2, r3
 8008912:	d104      	bne.n	800891e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008914:	f7fd fdd0 	bl	80064b8 <HAL_RCC_GetPCLK2Freq>
 8008918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800891c:	e003      	b.n	8008926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800891e:	f7fd fdb7 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8008922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008930:	f040 810c 	bne.w	8008b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008938:	2200      	movs	r2, #0
 800893a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800893e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	1891      	adds	r1, r2, r2
 800894c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800894e:	415b      	adcs	r3, r3
 8008950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008956:	4621      	mov	r1, r4
 8008958:	eb12 0801 	adds.w	r8, r2, r1
 800895c:	4629      	mov	r1, r5
 800895e:	eb43 0901 	adc.w	r9, r3, r1
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800896e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008976:	4690      	mov	r8, r2
 8008978:	4699      	mov	r9, r3
 800897a:	4623      	mov	r3, r4
 800897c:	eb18 0303 	adds.w	r3, r8, r3
 8008980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008984:	462b      	mov	r3, r5
 8008986:	eb49 0303 	adc.w	r3, r9, r3
 800898a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800898e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800899a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800899e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089a2:	460b      	mov	r3, r1
 80089a4:	18db      	adds	r3, r3, r3
 80089a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80089a8:	4613      	mov	r3, r2
 80089aa:	eb42 0303 	adc.w	r3, r2, r3
 80089ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80089b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089b8:	f7f8 f986 	bl	8000cc8 <__aeabi_uldivmod>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4b61      	ldr	r3, [pc, #388]	@ (8008b48 <UART_SetConfig+0x2d4>)
 80089c2:	fba3 2302 	umull	r2, r3, r3, r2
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	011c      	lsls	r4, r3, #4
 80089ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	1891      	adds	r1, r2, r2
 80089e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089e4:	415b      	adcs	r3, r3
 80089e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089ec:	4641      	mov	r1, r8
 80089ee:	eb12 0a01 	adds.w	sl, r2, r1
 80089f2:	4649      	mov	r1, r9
 80089f4:	eb43 0b01 	adc.w	fp, r3, r1
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a0c:	4692      	mov	sl, r2
 8008a0e:	469b      	mov	fp, r3
 8008a10:	4643      	mov	r3, r8
 8008a12:	eb1a 0303 	adds.w	r3, sl, r3
 8008a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	18db      	adds	r3, r3, r3
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a3e:	4613      	mov	r3, r2
 8008a40:	eb42 0303 	adc.w	r3, r2, r3
 8008a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a4e:	f7f8 f93b 	bl	8000cc8 <__aeabi_uldivmod>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4611      	mov	r1, r2
 8008a58:	4b3b      	ldr	r3, [pc, #236]	@ (8008b48 <UART_SetConfig+0x2d4>)
 8008a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a5e:	095b      	lsrs	r3, r3, #5
 8008a60:	2264      	movs	r2, #100	@ 0x64
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	1acb      	subs	r3, r1, r3
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a6e:	4b36      	ldr	r3, [pc, #216]	@ (8008b48 <UART_SetConfig+0x2d4>)
 8008a70:	fba3 2302 	umull	r2, r3, r3, r2
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a7c:	441c      	add	r4, r3
 8008a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	1891      	adds	r1, r2, r2
 8008a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a98:	415b      	adcs	r3, r3
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	1851      	adds	r1, r2, r1
 8008aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	414b      	adcs	r3, r1
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ab8:	4659      	mov	r1, fp
 8008aba:	00cb      	lsls	r3, r1, #3
 8008abc:	4651      	mov	r1, sl
 8008abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ac2:	4651      	mov	r1, sl
 8008ac4:	00ca      	lsls	r2, r1, #3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	4642      	mov	r2, r8
 8008ace:	189b      	adds	r3, r3, r2
 8008ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	eb42 0303 	adc.w	r3, r2, r3
 8008adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008af4:	460b      	mov	r3, r1
 8008af6:	18db      	adds	r3, r3, r3
 8008af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008afa:	4613      	mov	r3, r2
 8008afc:	eb42 0303 	adc.w	r3, r2, r3
 8008b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b0a:	f7f8 f8dd 	bl	8000cc8 <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4b0d      	ldr	r3, [pc, #52]	@ (8008b48 <UART_SetConfig+0x2d4>)
 8008b14:	fba3 1302 	umull	r1, r3, r3, r2
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	2164      	movs	r1, #100	@ 0x64
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	3332      	adds	r3, #50	@ 0x32
 8008b26:	4a08      	ldr	r2, [pc, #32]	@ (8008b48 <UART_SetConfig+0x2d4>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	f003 0207 	and.w	r2, r3, #7
 8008b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4422      	add	r2, r4
 8008b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b3c:	e106      	b.n	8008d4c <UART_SetConfig+0x4d8>
 8008b3e:	bf00      	nop
 8008b40:	40011000 	.word	0x40011000
 8008b44:	40011400 	.word	0x40011400
 8008b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b5e:	4642      	mov	r2, r8
 8008b60:	464b      	mov	r3, r9
 8008b62:	1891      	adds	r1, r2, r2
 8008b64:	6239      	str	r1, [r7, #32]
 8008b66:	415b      	adcs	r3, r3
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b6e:	4641      	mov	r1, r8
 8008b70:	1854      	adds	r4, r2, r1
 8008b72:	4649      	mov	r1, r9
 8008b74:	eb43 0501 	adc.w	r5, r3, r1
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	f04f 0300 	mov.w	r3, #0
 8008b80:	00eb      	lsls	r3, r5, #3
 8008b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b86:	00e2      	lsls	r2, r4, #3
 8008b88:	4614      	mov	r4, r2
 8008b8a:	461d      	mov	r5, r3
 8008b8c:	4643      	mov	r3, r8
 8008b8e:	18e3      	adds	r3, r4, r3
 8008b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b94:	464b      	mov	r3, r9
 8008b96:	eb45 0303 	adc.w	r3, r5, r3
 8008b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bba:	4629      	mov	r1, r5
 8008bbc:	008b      	lsls	r3, r1, #2
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	008a      	lsls	r2, r1, #2
 8008bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bcc:	f7f8 f87c 	bl	8000cc8 <__aeabi_uldivmod>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4b60      	ldr	r3, [pc, #384]	@ (8008d58 <UART_SetConfig+0x4e4>)
 8008bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	011c      	lsls	r4, r3, #4
 8008bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	61b9      	str	r1, [r7, #24]
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	61fb      	str	r3, [r7, #28]
 8008bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c00:	4641      	mov	r1, r8
 8008c02:	1851      	adds	r1, r2, r1
 8008c04:	6139      	str	r1, [r7, #16]
 8008c06:	4649      	mov	r1, r9
 8008c08:	414b      	adcs	r3, r1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c18:	4659      	mov	r1, fp
 8008c1a:	00cb      	lsls	r3, r1, #3
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c22:	4651      	mov	r1, sl
 8008c24:	00ca      	lsls	r2, r1, #3
 8008c26:	4610      	mov	r0, r2
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	189b      	adds	r3, r3, r2
 8008c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c34:	464b      	mov	r3, r9
 8008c36:	460a      	mov	r2, r1
 8008c38:	eb42 0303 	adc.w	r3, r2, r3
 8008c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c58:	4649      	mov	r1, r9
 8008c5a:	008b      	lsls	r3, r1, #2
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c62:	4641      	mov	r1, r8
 8008c64:	008a      	lsls	r2, r1, #2
 8008c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c6a:	f7f8 f82d 	bl	8000cc8 <__aeabi_uldivmod>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	4b38      	ldr	r3, [pc, #224]	@ (8008d58 <UART_SetConfig+0x4e4>)
 8008c76:	fba3 2301 	umull	r2, r3, r3, r1
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	2264      	movs	r2, #100	@ 0x64
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	1acb      	subs	r3, r1, r3
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	3332      	adds	r3, #50	@ 0x32
 8008c88:	4a33      	ldr	r2, [pc, #204]	@ (8008d58 <UART_SetConfig+0x4e4>)
 8008c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c94:	441c      	add	r4, r3
 8008c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	1891      	adds	r1, r2, r2
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	415b      	adcs	r3, r3
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cb4:	4641      	mov	r1, r8
 8008cb6:	1851      	adds	r1, r2, r1
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	4649      	mov	r1, r9
 8008cbc:	414b      	adcs	r3, r1
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	f04f 0300 	mov.w	r3, #0
 8008cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ccc:	4659      	mov	r1, fp
 8008cce:	00cb      	lsls	r3, r1, #3
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cd6:	4651      	mov	r1, sl
 8008cd8:	00ca      	lsls	r2, r1, #3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	189b      	adds	r3, r3, r2
 8008ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ce6:	464b      	mov	r3, r9
 8008ce8:	460a      	mov	r2, r1
 8008cea:	eb42 0303 	adc.w	r3, r2, r3
 8008cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d08:	4649      	mov	r1, r9
 8008d0a:	008b      	lsls	r3, r1, #2
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d12:	4641      	mov	r1, r8
 8008d14:	008a      	lsls	r2, r1, #2
 8008d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d1a:	f7f7 ffd5 	bl	8000cc8 <__aeabi_uldivmod>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4b0d      	ldr	r3, [pc, #52]	@ (8008d58 <UART_SetConfig+0x4e4>)
 8008d24:	fba3 1302 	umull	r1, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	2164      	movs	r1, #100	@ 0x64
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	3332      	adds	r3, #50	@ 0x32
 8008d36:	4a08      	ldr	r2, [pc, #32]	@ (8008d58 <UART_SetConfig+0x4e4>)
 8008d38:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f003 020f 	and.w	r2, r3, #15
 8008d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4422      	add	r2, r4
 8008d4a:	609a      	str	r2, [r3, #8]
}
 8008d4c:	bf00      	nop
 8008d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d52:	46bd      	mov	sp, r7
 8008d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d58:	51eb851f 	.word	0x51eb851f

08008d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	f107 001c 	add.w	r0, r7, #28
 8008d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d122      	bne.n	8008dba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fbe8 	bl	800a584 <USB_CoreReset>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
 8008db8:	e01a      	b.n	8008df0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fbdc 	bl	800a584 <USB_CoreReset>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008de2:	e005      	b.n	8008df0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d10b      	bne.n	8008e0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f043 0206 	orr.w	r2, r3, #6
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f043 0220 	orr.w	r2, r3, #32
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e1a:	b004      	add	sp, #16
 8008e1c:	4770      	bx	lr
	...

08008e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d165      	bne.n	8008f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4a41      	ldr	r2, [pc, #260]	@ (8008f3c <USB_SetTurnaroundTime+0x11c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d906      	bls.n	8008e4a <USB_SetTurnaroundTime+0x2a>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4a40      	ldr	r2, [pc, #256]	@ (8008f40 <USB_SetTurnaroundTime+0x120>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d202      	bcs.n	8008e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e44:	230f      	movs	r3, #15
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	e062      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f40 <USB_SetTurnaroundTime+0x120>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d306      	bcc.n	8008e60 <USB_SetTurnaroundTime+0x40>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	4a3b      	ldr	r2, [pc, #236]	@ (8008f44 <USB_SetTurnaroundTime+0x124>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d202      	bcs.n	8008e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e5a:	230e      	movs	r3, #14
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	e057      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4a38      	ldr	r2, [pc, #224]	@ (8008f44 <USB_SetTurnaroundTime+0x124>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d306      	bcc.n	8008e76 <USB_SetTurnaroundTime+0x56>
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	4a37      	ldr	r2, [pc, #220]	@ (8008f48 <USB_SetTurnaroundTime+0x128>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d202      	bcs.n	8008e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e70:	230d      	movs	r3, #13
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e04c      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4a33      	ldr	r2, [pc, #204]	@ (8008f48 <USB_SetTurnaroundTime+0x128>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d306      	bcc.n	8008e8c <USB_SetTurnaroundTime+0x6c>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	4a32      	ldr	r2, [pc, #200]	@ (8008f4c <USB_SetTurnaroundTime+0x12c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d802      	bhi.n	8008e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e86:	230c      	movs	r3, #12
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	e041      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008f4c <USB_SetTurnaroundTime+0x12c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d906      	bls.n	8008ea2 <USB_SetTurnaroundTime+0x82>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4a2e      	ldr	r2, [pc, #184]	@ (8008f50 <USB_SetTurnaroundTime+0x130>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d802      	bhi.n	8008ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e9c:	230b      	movs	r3, #11
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e036      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f50 <USB_SetTurnaroundTime+0x130>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d906      	bls.n	8008eb8 <USB_SetTurnaroundTime+0x98>
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4a29      	ldr	r2, [pc, #164]	@ (8008f54 <USB_SetTurnaroundTime+0x134>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d802      	bhi.n	8008eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008eb2:	230a      	movs	r3, #10
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e02b      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4a26      	ldr	r2, [pc, #152]	@ (8008f54 <USB_SetTurnaroundTime+0x134>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d906      	bls.n	8008ece <USB_SetTurnaroundTime+0xae>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4a25      	ldr	r2, [pc, #148]	@ (8008f58 <USB_SetTurnaroundTime+0x138>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d202      	bcs.n	8008ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ec8:	2309      	movs	r3, #9
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e020      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4a21      	ldr	r2, [pc, #132]	@ (8008f58 <USB_SetTurnaroundTime+0x138>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d306      	bcc.n	8008ee4 <USB_SetTurnaroundTime+0xc4>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	4a20      	ldr	r2, [pc, #128]	@ (8008f5c <USB_SetTurnaroundTime+0x13c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d802      	bhi.n	8008ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ede:	2308      	movs	r3, #8
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	e015      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f5c <USB_SetTurnaroundTime+0x13c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d906      	bls.n	8008efa <USB_SetTurnaroundTime+0xda>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4a1c      	ldr	r2, [pc, #112]	@ (8008f60 <USB_SetTurnaroundTime+0x140>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d202      	bcs.n	8008efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ef4:	2307      	movs	r3, #7
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e00a      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008efa:	2306      	movs	r3, #6
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	e007      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f06:	2309      	movs	r3, #9
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	e001      	b.n	8008f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f0c:	2309      	movs	r3, #9
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	00d8acbf 	.word	0x00d8acbf
 8008f40:	00e4e1c0 	.word	0x00e4e1c0
 8008f44:	00f42400 	.word	0x00f42400
 8008f48:	01067380 	.word	0x01067380
 8008f4c:	011a499f 	.word	0x011a499f
 8008f50:	01312cff 	.word	0x01312cff
 8008f54:	014ca43f 	.word	0x014ca43f
 8008f58:	016e3600 	.word	0x016e3600
 8008f5c:	01a6ab1f 	.word	0x01a6ab1f
 8008f60:	01e84800 	.word	0x01e84800

08008f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f043 0201 	orr.w	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f023 0201 	bic.w	r2, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d115      	bne.n	8008ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	f7fa fa54 	bl	8003484 <HAL_Delay>
      ms++;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fa3f 	bl	800a466 <USB_GetMode>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d01e      	beq.n	800902c <USB_SetCurrentMode+0x84>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b31      	cmp	r3, #49	@ 0x31
 8008ff2:	d9f0      	bls.n	8008fd6 <USB_SetCurrentMode+0x2e>
 8008ff4:	e01a      	b.n	800902c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d115      	bne.n	8009028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009008:	2001      	movs	r0, #1
 800900a:	f7fa fa3b 	bl	8003484 <HAL_Delay>
      ms++;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fa26 	bl	800a466 <USB_GetMode>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d005      	beq.n	800902c <USB_SetCurrentMode+0x84>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b31      	cmp	r3, #49	@ 0x31
 8009024:	d9f0      	bls.n	8009008 <USB_SetCurrentMode+0x60>
 8009026:	e001      	b.n	800902c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e005      	b.n	8009038 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b32      	cmp	r3, #50	@ 0x32
 8009030:	d101      	bne.n	8009036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009040:	b084      	sub	sp, #16
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800904e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800905a:	2300      	movs	r3, #0
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	e009      	b.n	8009074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3340      	adds	r3, #64	@ 0x40
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3301      	adds	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b0e      	cmp	r3, #14
 8009078:	d9f2      	bls.n	8009060 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800907a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d11c      	bne.n	80090ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800908e:	f043 0302 	orr.w	r3, r3, #2
 8009092:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009098:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	e005      	b.n	80090c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090cc:	461a      	mov	r2, r3
 80090ce:	2300      	movs	r3, #0
 80090d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d8:	4619      	mov	r1, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090e0:	461a      	mov	r2, r3
 80090e2:	680b      	ldr	r3, [r1, #0]
 80090e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10c      	bne.n	8009106 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f965 	bl	80093c4 <USB_SetDevSpeed>
 80090fa:	e008      	b.n	800910e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090fc:	2101      	movs	r1, #1
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f960 	bl	80093c4 <USB_SetDevSpeed>
 8009104:	e003      	b.n	800910e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009106:	2103      	movs	r1, #3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f95b 	bl	80093c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800910e:	2110      	movs	r1, #16
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f8f3 	bl	80092fc <USB_FlushTxFifo>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f91f 	bl	8009364 <USB_FlushRxFifo>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009136:	461a      	mov	r2, r3
 8009138:	2300      	movs	r3, #0
 800913a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009142:	461a      	mov	r2, r3
 8009144:	2300      	movs	r3, #0
 8009146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914e:	461a      	mov	r2, r3
 8009150:	2300      	movs	r3, #0
 8009152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009154:	2300      	movs	r3, #0
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	e043      	b.n	80091e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800916c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009170:	d118      	bne.n	80091a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	461a      	mov	r2, r3
 8009186:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	e013      	b.n	80091b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800919a:	461a      	mov	r2, r3
 800919c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e008      	b.n	80091b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c2:	461a      	mov	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	461a      	mov	r2, r3
 80091d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3301      	adds	r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d3b7      	bcc.n	800915a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]
 80091ee:	e043      	b.n	8009278 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009206:	d118      	bne.n	800923a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800921a:	461a      	mov	r2, r3
 800921c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e013      	b.n	800924c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009230:	461a      	mov	r2, r3
 8009232:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	e008      	b.n	800924c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	2300      	movs	r3, #0
 800924a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009258:	461a      	mov	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926a:	461a      	mov	r2, r3
 800926c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3301      	adds	r3, #1
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d3b7      	bcc.n	80091f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800928e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80092a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	f043 0210 	orr.w	r2, r3, #16
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	4b0f      	ldr	r3, [pc, #60]	@ (80092f8 <USB_DevInit+0x2b8>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	f043 0208 	orr.w	r2, r3, #8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d107      	bne.n	80092e8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092e0:	f043 0304 	orr.w	r3, r3, #4
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092f4:	b004      	add	sp, #16
 80092f6:	4770      	bx	lr
 80092f8:	803c3800 	.word	0x803c3800

080092fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4a13      	ldr	r2, [pc, #76]	@ (8009360 <USB_FlushTxFifo+0x64>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d901      	bls.n	800931c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e01b      	b.n	8009354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	daf2      	bge.n	800930a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	019b      	lsls	r3, r3, #6
 800932c:	f043 0220 	orr.w	r2, r3, #32
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a08      	ldr	r2, [pc, #32]	@ (8009360 <USB_FlushTxFifo+0x64>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d901      	bls.n	8009346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e006      	b.n	8009354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b20      	cmp	r3, #32
 8009350:	d0f0      	beq.n	8009334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	00030d40 	.word	0x00030d40

08009364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a11      	ldr	r2, [pc, #68]	@ (80093c0 <USB_FlushRxFifo+0x5c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d901      	bls.n	8009382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e018      	b.n	80093b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	daf2      	bge.n	8009370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2210      	movs	r2, #16
 8009392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3301      	adds	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4a08      	ldr	r2, [pc, #32]	@ (80093c0 <USB_FlushRxFifo+0x5c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e006      	b.n	80093b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d0f0      	beq.n	8009394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	00030d40 	.word	0x00030d40

080093c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	68f9      	ldr	r1, [r7, #12]
 80093e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b087      	sub	sp, #28
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0306 	and.w	r3, r3, #6
 800940e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]
 800941a:	e00a      	b.n	8009432 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d002      	beq.n	8009428 <USB_GetDevSpeed+0x32>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b06      	cmp	r3, #6
 8009426:	d102      	bne.n	800942e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009428:	2302      	movs	r3, #2
 800942a:	75fb      	strb	r3, [r7, #23]
 800942c:	e001      	b.n	8009432 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800942e:	230f      	movs	r3, #15
 8009430:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
}
 8009434:	4618      	mov	r0, r3
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	785b      	ldrb	r3, [r3, #1]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d13a      	bne.n	80094d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009462:	69da      	ldr	r2, [r3, #28]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 030f 	and.w	r3, r3, #15
 800946c:	2101      	movs	r1, #1
 800946e:	fa01 f303 	lsl.w	r3, r1, r3
 8009472:	b29b      	uxth	r3, r3
 8009474:	68f9      	ldr	r1, [r7, #12]
 8009476:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800947a:	4313      	orrs	r3, r2
 800947c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d155      	bne.n	8009540 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	791b      	ldrb	r3, [r3, #4]
 80094ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	059b      	lsls	r3, r3, #22
 80094b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094b8:	4313      	orrs	r3, r2
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	0151      	lsls	r1, r2, #5
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	440a      	add	r2, r1
 80094c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e036      	b.n	8009540 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d8:	69da      	ldr	r2, [r3, #28]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	2101      	movs	r1, #1
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094f0:	4313      	orrs	r3, r2
 80094f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d11a      	bne.n	8009540 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	791b      	ldrb	r3, [r3, #4]
 8009524:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009526:	430b      	orrs	r3, r1
 8009528:	4313      	orrs	r3, r2
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	440a      	add	r2, r1
 8009532:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800953a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800953e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
	...

08009550 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d161      	bne.n	8009630 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800957e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009582:	d11f      	bne.n	80095c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	440a      	add	r2, r1
 800959a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800959e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	0151      	lsls	r1, r2, #5
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	440a      	add	r2, r1
 80095ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	2101      	movs	r1, #1
 80095d6:	fa01 f303 	lsl.w	r3, r1, r3
 80095da:	b29b      	uxth	r3, r3
 80095dc:	43db      	mvns	r3, r3
 80095de:	68f9      	ldr	r1, [r7, #12]
 80095e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095e4:	4013      	ands	r3, r2
 80095e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ee:	69da      	ldr	r2, [r3, #28]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	2101      	movs	r1, #1
 80095fa:	fa01 f303 	lsl.w	r3, r1, r3
 80095fe:	b29b      	uxth	r3, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009608:	4013      	ands	r3, r2
 800960a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	0159      	lsls	r1, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	440b      	add	r3, r1
 8009622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009626:	4619      	mov	r1, r3
 8009628:	4b35      	ldr	r3, [pc, #212]	@ (8009700 <USB_DeactivateEndpoint+0x1b0>)
 800962a:	4013      	ands	r3, r2
 800962c:	600b      	str	r3, [r1, #0]
 800962e:	e060      	b.n	80096f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009646:	d11f      	bne.n	8009688 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009662:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009666:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009682:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	2101      	movs	r1, #1
 800969a:	fa01 f303 	lsl.w	r3, r1, r3
 800969e:	041b      	lsls	r3, r3, #16
 80096a0:	43db      	mvns	r3, r3
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096a8:	4013      	ands	r3, r2
 80096aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	2101      	movs	r1, #1
 80096be:	fa01 f303 	lsl.w	r3, r1, r3
 80096c2:	041b      	lsls	r3, r3, #16
 80096c4:	43db      	mvns	r3, r3
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096cc:	4013      	ands	r3, r2
 80096ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	0159      	lsls	r1, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	440b      	add	r3, r1
 80096e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ea:	4619      	mov	r1, r3
 80096ec:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <USB_DeactivateEndpoint+0x1b4>)
 80096ee:	4013      	ands	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	ec337800 	.word	0xec337800
 8009704:	eff37800 	.word	0xeff37800

08009708 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	@ 0x28
 800970c:	af02      	add	r7, sp, #8
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b01      	cmp	r3, #1
 8009726:	f040 815c 	bne.w	80099e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d132      	bne.n	8009798 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	69fa      	ldr	r2, [r7, #28]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800974c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009750:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	69fa      	ldr	r2, [r7, #28]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009770:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009790:	0cdb      	lsrs	r3, r3, #19
 8009792:	04db      	lsls	r3, r3, #19
 8009794:	6113      	str	r3, [r2, #16]
 8009796:	e074      	b.n	8009882 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097b2:	0cdb      	lsrs	r3, r3, #19
 80097b4:	04db      	lsls	r3, r3, #19
 80097b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6999      	ldr	r1, [r3, #24]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	440b      	add	r3, r1
 80097f4:	1e59      	subs	r1, r3, #1
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80097fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009800:	4b9d      	ldr	r3, [pc, #628]	@ (8009a78 <USB_EPStartXfer+0x370>)
 8009802:	400b      	ands	r3, r1
 8009804:	69b9      	ldr	r1, [r7, #24]
 8009806:	0148      	lsls	r0, r1, #5
 8009808:	69f9      	ldr	r1, [r7, #28]
 800980a:	4401      	add	r1, r0
 800980c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009810:	4313      	orrs	r3, r2
 8009812:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800982a:	69b9      	ldr	r1, [r7, #24]
 800982c:	0148      	lsls	r0, r1, #5
 800982e:	69f9      	ldr	r1, [r7, #28]
 8009830:	4401      	add	r1, r0
 8009832:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009836:	4313      	orrs	r3, r2
 8009838:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	791b      	ldrb	r3, [r3, #4]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d11f      	bne.n	8009882 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	440a      	add	r2, r1
 8009858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800985c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009860:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	69fa      	ldr	r2, [r7, #28]
 8009876:	440a      	add	r2, r1
 8009878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800987c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009880:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d14b      	bne.n	8009920 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989c:	461a      	mov	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	791b      	ldrb	r3, [r3, #4]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d128      	bne.n	80098fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d110      	bne.n	80098de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	e00f      	b.n	80098fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	0151      	lsls	r1, r2, #5
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	440a      	add	r2, r1
 80098f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009918:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	e133      	b.n	8009b88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	0151      	lsls	r1, r2, #5
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	440a      	add	r2, r1
 8009936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800993a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800993e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	791b      	ldrb	r3, [r3, #4]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d015      	beq.n	8009974 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 811b 	beq.w	8009b88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	2101      	movs	r1, #1
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	69f9      	ldr	r1, [r7, #28]
 800996a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800996e:	4313      	orrs	r3, r2
 8009970:	634b      	str	r3, [r1, #52]	@ 0x34
 8009972:	e109      	b.n	8009b88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d110      	bne.n	80099a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800999e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e00f      	b.n	80099c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6919      	ldr	r1, [r3, #16]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	b298      	uxth	r0, r3
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4603      	mov	r3, r0
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fade 	bl	8009f9c <USB_WritePacket>
 80099e0:	e0d2      	b.n	8009b88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099fc:	0cdb      	lsrs	r3, r3, #19
 80099fe:	04db      	lsls	r3, r3, #19
 8009a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	0151      	lsls	r1, r2, #5
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	440a      	add	r2, r1
 8009a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d126      	bne.n	8009a7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	0148      	lsls	r0, r1, #5
 8009a48:	69f9      	ldr	r1, [r7, #28]
 8009a4a:	4401      	add	r1, r0
 8009a4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a50:	4313      	orrs	r3, r2
 8009a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	0151      	lsls	r1, r2, #5
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	440a      	add	r2, r1
 8009a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a72:	6113      	str	r3, [r2, #16]
 8009a74:	e03a      	b.n	8009aec <USB_EPStartXfer+0x3e4>
 8009a76:	bf00      	nop
 8009a78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	699a      	ldr	r2, [r3, #24]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	4413      	add	r3, r2
 8009a86:	1e5a      	subs	r2, r3, #1
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	8afa      	ldrh	r2, [r7, #22]
 8009a98:	fb03 f202 	mul.w	r2, r3, r2
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	8afb      	ldrh	r3, [r7, #22]
 8009ab0:	04d9      	lsls	r1, r3, #19
 8009ab2:	4b38      	ldr	r3, [pc, #224]	@ (8009b94 <USB_EPStartXfer+0x48c>)
 8009ab4:	400b      	ands	r3, r1
 8009ab6:	69b9      	ldr	r1, [r7, #24]
 8009ab8:	0148      	lsls	r0, r1, #5
 8009aba:	69f9      	ldr	r1, [r7, #28]
 8009abc:	4401      	add	r1, r0
 8009abe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	0148      	lsls	r0, r1, #5
 8009ae0:	69f9      	ldr	r1, [r7, #28]
 8009ae2:	4401      	add	r1, r0
 8009ae4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d10d      	bne.n	8009b0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d009      	beq.n	8009b0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6919      	ldr	r1, [r3, #16]
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b0a:	460a      	mov	r2, r1
 8009b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d128      	bne.n	8009b68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d110      	bne.n	8009b48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	e00f      	b.n	8009b68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	1ff80000 	.word	0x1ff80000

08009b98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	f040 80ce 	bne.w	8009d56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d132      	bne.n	8009c28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bdc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009be0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	0151      	lsls	r1, r2, #5
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c20:	0cdb      	lsrs	r3, r3, #19
 8009c22:	04db      	lsls	r3, r3, #19
 8009c24:	6113      	str	r3, [r2, #16]
 8009c26:	e04e      	b.n	8009cc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c42:	0cdb      	lsrs	r3, r3, #19
 8009c44:	04db      	lsls	r3, r3, #19
 8009c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	0151      	lsls	r1, r2, #5
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	440a      	add	r2, r1
 8009c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	699a      	ldr	r2, [r3, #24]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d903      	bls.n	8009c80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb6:	6939      	ldr	r1, [r7, #16]
 8009cb8:	0148      	lsls	r0, r1, #5
 8009cba:	6979      	ldr	r1, [r7, #20]
 8009cbc:	4401      	add	r1, r0
 8009cbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d11e      	bne.n	8009d0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e097      	b.n	8009e3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	0151      	lsls	r1, r2, #5
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	440a      	add	r2, r1
 8009d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 8083 	beq.w	8009e3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	2101      	movs	r1, #1
 8009d46:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4a:	6979      	ldr	r1, [r7, #20]
 8009d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d50:	4313      	orrs	r3, r2
 8009d52:	634b      	str	r3, [r1, #52]	@ 0x34
 8009d54:	e071      	b.n	8009e3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	0151      	lsls	r1, r2, #5
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	440a      	add	r2, r1
 8009d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d70:	0cdb      	lsrs	r3, r3, #19
 8009d72:	04db      	lsls	r3, r3, #19
 8009d74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	0151      	lsls	r1, r2, #5
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de8:	6939      	ldr	r1, [r7, #16]
 8009dea:	0148      	lsls	r0, r1, #5
 8009dec:	6979      	ldr	r1, [r7, #20]
 8009dee:	4401      	add	r1, r0
 8009df0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009df4:	4313      	orrs	r3, r2
 8009df6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d10d      	bne.n	8009e1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6919      	ldr	r1, [r3, #16]
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e16:	460a      	mov	r2, r1
 8009e18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d14a      	bne.n	8009efc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e7e:	f040 8086 	bne.w	8009f8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ea0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ea4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	0151      	lsls	r1, r2, #5
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	440a      	add	r2, r1
 8009ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d902      	bls.n	8009ee0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ede:	e056      	b.n	8009f8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef8:	d0e7      	beq.n	8009eca <USB_EPStopXfer+0x82>
 8009efa:	e048      	b.n	8009f8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f14:	d13b      	bne.n	8009f8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	0151      	lsls	r1, r2, #5
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	440a      	add	r2, r1
 8009f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d902      	bls.n	8009f74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
          break;
 8009f72:	e00c      	b.n	8009f8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f8c:	d0e7      	beq.n	8009f5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	371c      	adds	r7, #28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b089      	sub	sp, #36	@ 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	460b      	mov	r3, r1
 8009fac:	71fb      	strb	r3, [r7, #7]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d123      	bne.n	800a00a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fc2:	88bb      	ldrh	r3, [r7, #4]
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	089b      	lsrs	r3, r3, #2
 8009fc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	e018      	b.n	800a002 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	031a      	lsls	r2, r3, #12
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fdc:	461a      	mov	r2, r3
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	3301      	adds	r3, #1
 8009fee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	3301      	adds	r3, #1
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	429a      	cmp	r2, r3
 800a008:	d3e2      	bcc.n	8009fd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3724      	adds	r7, #36	@ 0x24
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a018:	b480      	push	{r7}
 800a01a:	b08b      	sub	sp, #44	@ 0x2c
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a02e:	88fb      	ldrh	r3, [r7, #6]
 800a030:	089b      	lsrs	r3, r3, #2
 800a032:	b29b      	uxth	r3, r3
 800a034:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a03e:	2300      	movs	r3, #0
 800a040:	623b      	str	r3, [r7, #32]
 800a042:	e014      	b.n	800a06e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	3301      	adds	r3, #1
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	3301      	adds	r3, #1
 800a05a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	3301      	adds	r3, #1
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	3301      	adds	r3, #1
 800a066:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	3301      	adds	r3, #1
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	6a3a      	ldr	r2, [r7, #32]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3e6      	bcc.n	800a044 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a076:	8bfb      	ldrh	r3, [r7, #30]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01e      	beq.n	800a0ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a086:	461a      	mov	r2, r3
 800a088:	f107 0310 	add.w	r3, r7, #16
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	701a      	strb	r2, [r3, #0]
      i++;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a0ae:	8bfb      	ldrh	r3, [r7, #30]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0b4:	8bfb      	ldrh	r3, [r7, #30]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1ea      	bne.n	800a090 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	372c      	adds	r7, #44	@ 0x2c
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d12c      	bne.n	800a13e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	db12      	blt.n	800a11c <USB_EPSetStall+0x54>
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00f      	beq.n	800a11c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	0151      	lsls	r1, r2, #5
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	440a      	add	r2, r1
 800a112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a116:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a11a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	440a      	add	r2, r1
 800a132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a136:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	e02b      	b.n	800a196 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	db12      	blt.n	800a176 <USB_EPSetStall+0xae>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00f      	beq.n	800a176 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a170:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a174:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	785b      	ldrb	r3, [r3, #1]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d128      	bne.n	800a212 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	015a      	lsls	r2, r3, #5
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	0151      	lsls	r1, r2, #5
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d003      	beq.n	800a1f0 <USB_EPClearStall+0x4c>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	791b      	ldrb	r3, [r3, #4]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d138      	bne.n	800a262 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	0151      	lsls	r1, r2, #5
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	440a      	add	r2, r1
 800a206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a20a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	e027      	b.n	800a262 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	0151      	lsls	r1, r2, #5
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	440a      	add	r2, r1
 800a228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a22c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a230:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b03      	cmp	r3, #3
 800a238:	d003      	beq.n	800a242 <USB_EPClearStall+0x9e>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	791b      	ldrb	r3, [r3, #4]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d10f      	bne.n	800a262 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a25c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a260:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a28e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a292:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a2a4:	68f9      	ldr	r1, [r7, #12]
 800a2a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2ea:	f023 0302 	bic.w	r3, r3, #2
 800a2ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b085      	sub	sp, #20
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a318:	f023 0303 	bic.w	r3, r3, #3
 800a31c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4013      	ands	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a358:	68fb      	ldr	r3, [r7, #12]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	4013      	ands	r3, r2
 800a388:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	0c1b      	lsrs	r3, r3, #16
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	b29b      	uxth	r3, r3
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b087      	sub	sp, #28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f003 030f 	and.w	r3, r3, #15
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	fa22 f303 	lsr.w	r3, r2, r3
 800a43a:	01db      	lsls	r3, r3, #7
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4313      	orrs	r3, r2
 800a442:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4013      	ands	r3, r2
 800a456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a458:	68bb      	ldr	r3, [r7, #8]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	f003 0301 	and.w	r3, r3, #1
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a49c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a4a0:	f023 0307 	bic.w	r3, r3, #7
 800a4a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	333c      	adds	r3, #60	@ 0x3c
 800a4de:	3304      	adds	r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	4a26      	ldr	r2, [pc, #152]	@ (800a580 <USB_EP0_OutStart+0xb8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d90a      	bls.n	800a502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4fc:	d101      	bne.n	800a502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e037      	b.n	800a572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a508:	461a      	mov	r2, r3
 800a50a:	2300      	movs	r3, #0
 800a50c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a51c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a530:	f043 0318 	orr.w	r3, r3, #24
 800a534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a544:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a54a:	7afb      	ldrb	r3, [r7, #11]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d10f      	bne.n	800a570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a556:	461a      	mov	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a56a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a56e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	4f54300a 	.word	0x4f54300a

0800a584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3301      	adds	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4a13      	ldr	r2, [pc, #76]	@ (800a5e8 <USB_CoreReset+0x64>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d901      	bls.n	800a5a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e01b      	b.n	800a5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	daf2      	bge.n	800a590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f043 0201 	orr.w	r2, r3, #1
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a09      	ldr	r2, [pc, #36]	@ (800a5e8 <USB_CoreReset+0x64>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d901      	bls.n	800a5cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e006      	b.n	800a5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d0f0      	beq.n	800a5ba <USB_CoreReset+0x36>

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	00030d40 	.word	0x00030d40

0800a5ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a5f0:	4904      	ldr	r1, [pc, #16]	@ (800a604 <MX_FATFS_Init+0x18>)
 800a5f2:	4805      	ldr	r0, [pc, #20]	@ (800a608 <MX_FATFS_Init+0x1c>)
 800a5f4:	f002 f85a 	bl	800c6ac <FATFS_LinkDriver>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4b03      	ldr	r3, [pc, #12]	@ (800a60c <MX_FATFS_Init+0x20>)
 800a5fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a600:	bf00      	nop
 800a602:	bd80      	pop	{r7, pc}
 800a604:	20000874 	.word	0x20000874
 800a608:	2000000c 	.word	0x2000000c
 800a60c:	20000870 	.word	0x20000870

0800a610 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a61a:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <USER_initialize+0x24>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a620:	4b04      	ldr	r3, [pc, #16]	@ (800a634 <USER_initialize+0x24>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000009 	.word	0x20000009

0800a638 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a642:	4b06      	ldr	r3, [pc, #24]	@ (800a65c <USER_status+0x24>)
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a648:	4b04      	ldr	r3, [pc, #16]	@ (800a65c <USER_status+0x24>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000009 	.word	0x20000009

0800a660 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a670:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a67e:	b480      	push	{r7}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a68e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	603a      	str	r2, [r7, #0]
 800a6a6:	71fb      	strb	r3, [r7, #7]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
    return res;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a6d0:	f002 fd22 	bl	800d118 <USBD_static_malloc>
 800a6d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	32b0      	adds	r2, #176	@ 0xb0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e0d4      	b.n	800a89a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a6f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f004 fbad 	bl	800ee56 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	32b0      	adds	r2, #176	@ 0xb0
 800a706:	68f9      	ldr	r1, [r7, #12]
 800a708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	32b0      	adds	r2, #176	@ 0xb0
 800a716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7c1b      	ldrb	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d138      	bne.n	800a79a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a728:	4b5e      	ldr	r3, [pc, #376]	@ (800a8a4 <USBD_CDC_Init+0x1e4>)
 800a72a:	7819      	ldrb	r1, [r3, #0]
 800a72c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a730:	2202      	movs	r2, #2
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f002 fb7f 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a738:	4b5a      	ldr	r3, [pc, #360]	@ (800a8a4 <USBD_CDC_Init+0x1e4>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	f003 020f 	and.w	r2, r3, #15
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	440b      	add	r3, r1
 800a74c:	3324      	adds	r3, #36	@ 0x24
 800a74e:	2201      	movs	r2, #1
 800a750:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a752:	4b55      	ldr	r3, [pc, #340]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a754:	7819      	ldrb	r1, [r3, #0]
 800a756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a75a:	2202      	movs	r2, #2
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f002 fb6a 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a762:	4b51      	ldr	r3, [pc, #324]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 020f 	and.w	r2, r3, #15
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	4613      	mov	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	440b      	add	r3, r1
 800a776:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a77a:	2201      	movs	r2, #1
 800a77c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a77e:	4b4b      	ldr	r3, [pc, #300]	@ (800a8ac <USBD_CDC_Init+0x1ec>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	f003 020f 	and.w	r2, r3, #15
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	3326      	adds	r3, #38	@ 0x26
 800a794:	2210      	movs	r2, #16
 800a796:	801a      	strh	r2, [r3, #0]
 800a798:	e035      	b.n	800a806 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a79a:	4b42      	ldr	r3, [pc, #264]	@ (800a8a4 <USBD_CDC_Init+0x1e4>)
 800a79c:	7819      	ldrb	r1, [r3, #0]
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f002 fb47 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a4 <USBD_CDC_Init+0x1e4>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 020f 	and.w	r2, r3, #15
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	3324      	adds	r3, #36	@ 0x24
 800a7be:	2201      	movs	r2, #1
 800a7c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7c2:	4b39      	ldr	r3, [pc, #228]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a7c4:	7819      	ldrb	r1, [r3, #0]
 800a7c6:	2340      	movs	r3, #64	@ 0x40
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f002 fb33 	bl	800ce36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7d0:	4b35      	ldr	r3, [pc, #212]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	f003 020f 	and.w	r2, r3, #15
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a7ec:	4b2f      	ldr	r3, [pc, #188]	@ (800a8ac <USBD_CDC_Init+0x1ec>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 020f 	and.w	r2, r3, #15
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	440b      	add	r3, r1
 800a800:	3326      	adds	r3, #38	@ 0x26
 800a802:	2210      	movs	r2, #16
 800a804:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a806:	4b29      	ldr	r3, [pc, #164]	@ (800a8ac <USBD_CDC_Init+0x1ec>)
 800a808:	7819      	ldrb	r1, [r3, #0]
 800a80a:	2308      	movs	r3, #8
 800a80c:	2203      	movs	r2, #3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f002 fb11 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a814:	4b25      	ldr	r3, [pc, #148]	@ (800a8ac <USBD_CDC_Init+0x1ec>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f003 020f 	and.w	r2, r3, #15
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	3324      	adds	r3, #36	@ 0x24
 800a82a:	2201      	movs	r2, #1
 800a82c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	33b0      	adds	r3, #176	@ 0xb0
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a864:	2302      	movs	r3, #2
 800a866:	e018      	b.n	800a89a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7c1b      	ldrb	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a870:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a872:	7819      	ldrb	r1, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a87a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f002 fbc8 	bl	800d014 <USBD_LL_PrepareReceive>
 800a884:	e008      	b.n	800a898 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a886:	4b08      	ldr	r3, [pc, #32]	@ (800a8a8 <USBD_CDC_Init+0x1e8>)
 800a888:	7819      	ldrb	r1, [r3, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a890:	2340      	movs	r3, #64	@ 0x40
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f002 fbbe 	bl	800d014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200000a7 	.word	0x200000a7
 800a8a8:	200000a8 	.word	0x200000a8
 800a8ac:	200000a9 	.word	0x200000a9

0800a8b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8bc:	4b3a      	ldr	r3, [pc, #232]	@ (800a9a8 <USBD_CDC_DeInit+0xf8>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f002 fadd 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8c8:	4b37      	ldr	r3, [pc, #220]	@ (800a9a8 <USBD_CDC_DeInit+0xf8>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 020f 	and.w	r2, r3, #15
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	3324      	adds	r3, #36	@ 0x24
 800a8de:	2200      	movs	r2, #0
 800a8e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a8e2:	4b32      	ldr	r3, [pc, #200]	@ (800a9ac <USBD_CDC_DeInit+0xfc>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f002 faca 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ac <USBD_CDC_DeInit+0xfc>)
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	f003 020f 	and.w	r2, r3, #15
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a90a:	4b29      	ldr	r3, [pc, #164]	@ (800a9b0 <USBD_CDC_DeInit+0x100>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f002 fab6 	bl	800ce82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a916:	4b26      	ldr	r3, [pc, #152]	@ (800a9b0 <USBD_CDC_DeInit+0x100>)
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	f003 020f 	and.w	r2, r3, #15
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	440b      	add	r3, r1
 800a92a:	3324      	adds	r3, #36	@ 0x24
 800a92c:	2200      	movs	r2, #0
 800a92e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a930:	4b1f      	ldr	r3, [pc, #124]	@ (800a9b0 <USBD_CDC_DeInit+0x100>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	3326      	adds	r3, #38	@ 0x26
 800a946:	2200      	movs	r2, #0
 800a948:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32b0      	adds	r2, #176	@ 0xb0
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01f      	beq.n	800a99c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	33b0      	adds	r3, #176	@ 0xb0
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	32b0      	adds	r2, #176	@ 0xb0
 800a97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 fbd8 	bl	800d134 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32b0      	adds	r2, #176	@ 0xb0
 800a98e:	2100      	movs	r1, #0
 800a990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200000a7 	.word	0x200000a7
 800a9ac:	200000a8 	.word	0x200000a8
 800a9b0:	200000a9 	.word	0x200000a9

0800a9b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	32b0      	adds	r2, #176	@ 0xb0
 800a9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	e0bf      	b.n	800ab64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d050      	beq.n	800aa92 <USBD_CDC_Setup+0xde>
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	f040 80af 	bne.w	800ab54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	88db      	ldrh	r3, [r3, #6]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d03a      	beq.n	800aa74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	da1b      	bge.n	800aa40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	33b0      	adds	r3, #176	@ 0xb0
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	88d2      	ldrh	r2, [r2, #6]
 800aa24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	88db      	ldrh	r3, [r3, #6]
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	bf28      	it	cs
 800aa2e:	2307      	movcs	r3, #7
 800aa30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	89fa      	ldrh	r2, [r7, #14]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 fd6b 	bl	800c514 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa3e:	e090      	b.n	800ab62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	785a      	ldrb	r2, [r3, #1]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	88db      	ldrh	r3, [r3, #6]
 800aa4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800aa50:	d803      	bhi.n	800aa5a <USBD_CDC_Setup+0xa6>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	e000      	b.n	800aa5c <USBD_CDC_Setup+0xa8>
 800aa5a:	2240      	movs	r2, #64	@ 0x40
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa62:	6939      	ldr	r1, [r7, #16]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 fd7d 	bl	800c56c <USBD_CtlPrepareRx>
      break;
 800aa72:	e076      	b.n	800ab62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	33b0      	adds	r3, #176	@ 0xb0
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	7850      	ldrb	r0, [r2, #1]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	4798      	blx	r3
      break;
 800aa90:	e067      	b.n	800ab62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	2b0b      	cmp	r3, #11
 800aa98:	d851      	bhi.n	800ab3e <USBD_CDC_Setup+0x18a>
 800aa9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa0 <USBD_CDC_Setup+0xec>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aad1 	.word	0x0800aad1
 800aaa4:	0800ab4d 	.word	0x0800ab4d
 800aaa8:	0800ab3f 	.word	0x0800ab3f
 800aaac:	0800ab3f 	.word	0x0800ab3f
 800aab0:	0800ab3f 	.word	0x0800ab3f
 800aab4:	0800ab3f 	.word	0x0800ab3f
 800aab8:	0800ab3f 	.word	0x0800ab3f
 800aabc:	0800ab3f 	.word	0x0800ab3f
 800aac0:	0800ab3f 	.word	0x0800ab3f
 800aac4:	0800ab3f 	.word	0x0800ab3f
 800aac8:	0800aafb 	.word	0x0800aafb
 800aacc:	0800ab25 	.word	0x0800ab25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d107      	bne.n	800aaec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aadc:	f107 030a 	add.w	r3, r7, #10
 800aae0:	2202      	movs	r2, #2
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 fd15 	bl	800c514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaea:	e032      	b.n	800ab52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 fc9f 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	75fb      	strb	r3, [r7, #23]
          break;
 800aaf8:	e02b      	b.n	800ab52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d107      	bne.n	800ab16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab06:	f107 030d 	add.w	r3, r7, #13
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 fd00 	bl	800c514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab14:	e01d      	b.n	800ab52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 fc8a 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	75fb      	strb	r3, [r7, #23]
          break;
 800ab22:	e016      	b.n	800ab52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d00f      	beq.n	800ab50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 fc7d 	bl	800c432 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab3c:	e008      	b.n	800ab50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 fc76 	bl	800c432 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab46:	2303      	movs	r3, #3
 800ab48:	75fb      	strb	r3, [r7, #23]
          break;
 800ab4a:	e002      	b.n	800ab52 <USBD_CDC_Setup+0x19e>
          break;
 800ab4c:	bf00      	nop
 800ab4e:	e008      	b.n	800ab62 <USBD_CDC_Setup+0x1ae>
          break;
 800ab50:	bf00      	nop
      }
      break;
 800ab52:	e006      	b.n	800ab62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fc6b 	bl	800c432 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab60:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32b0      	adds	r2, #176	@ 0xb0
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e065      	b.n	800ac62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32b0      	adds	r2, #176	@ 0xb0
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	f003 020f 	and.w	r2, r3, #15
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	3318      	adds	r3, #24
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02f      	beq.n	800ac20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	f003 020f 	and.w	r2, r3, #15
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	440b      	add	r3, r1
 800abd2:	3318      	adds	r3, #24
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	f003 010f 	and.w	r1, r3, #15
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	460b      	mov	r3, r1
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	440b      	add	r3, r1
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4403      	add	r3, r0
 800abe8:	3348      	adds	r3, #72	@ 0x48
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	fbb2 f1f3 	udiv	r1, r2, r3
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d112      	bne.n	800ac20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3318      	adds	r3, #24
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac12:	78f9      	ldrb	r1, [r7, #3]
 800ac14:	2300      	movs	r3, #0
 800ac16:	2200      	movs	r2, #0
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f002 f9da 	bl	800cfd2 <USBD_LL_Transmit>
 800ac1e:	e01f      	b.n	800ac60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	33b0      	adds	r3, #176	@ 0xb0
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d010      	beq.n	800ac60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	33b0      	adds	r3, #176	@ 0xb0
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	32b0      	adds	r2, #176	@ 0xb0
 800ac80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	32b0      	adds	r2, #176	@ 0xb0
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e01a      	b.n	800acd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac9c:	78fb      	ldrb	r3, [r7, #3]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f002 f9d8 	bl	800d056 <USBD_LL_GetRxDataSize>
 800aca6:	4602      	mov	r2, r0
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	33b0      	adds	r3, #176	@ 0xb0
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800accc:	4611      	mov	r1, r2
 800acce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32b0      	adds	r2, #176	@ 0xb0
 800acec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e024      	b.n	800ad46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	33b0      	adds	r3, #176	@ 0xb0
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d019      	beq.n	800ad44 <USBD_CDC_EP0_RxReady+0x6a>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ad16:	2bff      	cmp	r3, #255	@ 0xff
 800ad18:	d014      	beq.n	800ad44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	33b0      	adds	r3, #176	@ 0xb0
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	22ff      	movs	r2, #255	@ 0xff
 800ad40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad58:	2182      	movs	r1, #130	@ 0x82
 800ad5a:	4818      	ldr	r0, [pc, #96]	@ (800adbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad5c:	f000 fd09 	bl	800b772 <USBD_GetEpDesc>
 800ad60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad62:	2101      	movs	r1, #1
 800ad64:	4815      	ldr	r0, [pc, #84]	@ (800adbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad66:	f000 fd04 	bl	800b772 <USBD_GetEpDesc>
 800ad6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad6c:	2181      	movs	r1, #129	@ 0x81
 800ad6e:	4813      	ldr	r0, [pc, #76]	@ (800adbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad70:	f000 fcff 	bl	800b772 <USBD_GetEpDesc>
 800ad74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2210      	movs	r2, #16
 800ad80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d006      	beq.n	800ad96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad90:	711a      	strb	r2, [r3, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada4:	711a      	strb	r2, [r3, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2243      	movs	r2, #67	@ 0x43
 800adae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adb0:	4b02      	ldr	r3, [pc, #8]	@ (800adbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000064 	.word	0x20000064

0800adc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adc8:	2182      	movs	r1, #130	@ 0x82
 800adca:	4818      	ldr	r0, [pc, #96]	@ (800ae2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adcc:	f000 fcd1 	bl	800b772 <USBD_GetEpDesc>
 800add0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800add2:	2101      	movs	r1, #1
 800add4:	4815      	ldr	r0, [pc, #84]	@ (800ae2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800add6:	f000 fccc 	bl	800b772 <USBD_GetEpDesc>
 800adda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800addc:	2181      	movs	r1, #129	@ 0x81
 800adde:	4813      	ldr	r0, [pc, #76]	@ (800ae2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ade0:	f000 fcc7 	bl	800b772 <USBD_GetEpDesc>
 800ade4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2210      	movs	r2, #16
 800adf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d006      	beq.n	800ae06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	2200      	movs	r2, #0
 800adfc:	711a      	strb	r2, [r3, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f042 0202 	orr.w	r2, r2, #2
 800ae04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	711a      	strb	r2, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f042 0202 	orr.w	r2, r2, #2
 800ae18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2243      	movs	r2, #67	@ 0x43
 800ae1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae20:	4b02      	ldr	r3, [pc, #8]	@ (800ae2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000064 	.word	0x20000064

0800ae30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae38:	2182      	movs	r1, #130	@ 0x82
 800ae3a:	4818      	ldr	r0, [pc, #96]	@ (800ae9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae3c:	f000 fc99 	bl	800b772 <USBD_GetEpDesc>
 800ae40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae42:	2101      	movs	r1, #1
 800ae44:	4815      	ldr	r0, [pc, #84]	@ (800ae9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae46:	f000 fc94 	bl	800b772 <USBD_GetEpDesc>
 800ae4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae4c:	2181      	movs	r1, #129	@ 0x81
 800ae4e:	4813      	ldr	r0, [pc, #76]	@ (800ae9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae50:	f000 fc8f 	bl	800b772 <USBD_GetEpDesc>
 800ae54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2210      	movs	r2, #16
 800ae60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d006      	beq.n	800ae76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae70:	711a      	strb	r2, [r3, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d006      	beq.n	800ae8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae84:	711a      	strb	r2, [r3, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2243      	movs	r2, #67	@ 0x43
 800ae8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae90:	4b02      	ldr	r3, [pc, #8]	@ (800ae9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20000064 	.word	0x20000064

0800aea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	220a      	movs	r2, #10
 800aeac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aeae:	4b03      	ldr	r3, [pc, #12]	@ (800aebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	20000020 	.word	0x20000020

0800aec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e009      	b.n	800aee8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	33b0      	adds	r3, #176	@ 0xb0
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	32b0      	adds	r2, #176	@ 0xb0
 800af0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af16:	2303      	movs	r3, #3
 800af18:	e008      	b.n	800af2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	32b0      	adds	r2, #176	@ 0xb0
 800af4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af58:	2303      	movs	r3, #3
 800af5a:	e004      	b.n	800af66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
	...

0800af74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32b0      	adds	r2, #176	@ 0xb0
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	32b0      	adds	r2, #176	@ 0xb0
 800af96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e018      	b.n	800afd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7c1b      	ldrb	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afaa:	4b0c      	ldr	r3, [pc, #48]	@ (800afdc <USBD_CDC_ReceivePacket+0x68>)
 800afac:	7819      	ldrb	r1, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f002 f82b 	bl	800d014 <USBD_LL_PrepareReceive>
 800afbe:	e008      	b.n	800afd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afc0:	4b06      	ldr	r3, [pc, #24]	@ (800afdc <USBD_CDC_ReceivePacket+0x68>)
 800afc2:	7819      	ldrb	r1, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afca:	2340      	movs	r3, #64	@ 0x40
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f002 f821 	bl	800d014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	200000a8 	.word	0x200000a8

0800afe0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e01f      	b.n	800b038 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	79fa      	ldrb	r2, [r7, #7]
 800b02a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f001 fe9b 	bl	800cd68 <USBD_LL_Init>
 800b032:	4603      	mov	r3, r0
 800b034:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b036:	7dfb      	ldrb	r3, [r7, #23]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	e025      	b.n	800b0a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	32ae      	adds	r2, #174	@ 0xae
 800b06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00f      	beq.n	800b094 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	32ae      	adds	r2, #174	@ 0xae
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b084:	f107 020e 	add.w	r2, r7, #14
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
 800b08c:	4602      	mov	r2, r0
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 fea3 	bl	800ce00 <USBD_LL_Start>
 800b0ba:	4603      	mov	r3, r0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	4611      	mov	r1, r2
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b108:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	4611      	mov	r1, r2
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b138:	2303      	movs	r3, #3
 800b13a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	4618      	mov	r0, r3
 800b15a:	f001 f930 	bl	800c3be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b16c:	461a      	mov	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b17a:	f003 031f 	and.w	r3, r3, #31
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d01a      	beq.n	800b1b8 <USBD_LL_SetupStage+0x72>
 800b182:	2b02      	cmp	r3, #2
 800b184:	d822      	bhi.n	800b1cc <USBD_LL_SetupStage+0x86>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <USBD_LL_SetupStage+0x4a>
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d00a      	beq.n	800b1a4 <USBD_LL_SetupStage+0x5e>
 800b18e:	e01d      	b.n	800b1cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fb5d 	bl	800b858 <USBD_StdDevReq>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a2:	e020      	b.n	800b1e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fbc5 	bl	800b93c <USBD_StdItfReq>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b6:	e016      	b.n	800b1e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fc27 	bl	800ba14 <USBD_StdEPReq>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ca:	e00c      	b.n	800b1e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f001 fe70 	bl	800cec0 <USBD_LL_StallEP>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e4:	bf00      	nop
  }

  return ret;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b202:	7afb      	ldrb	r3, [r7, #11]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d16e      	bne.n	800b2e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b20e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b216:	2b03      	cmp	r3, #3
 800b218:	f040 8098 	bne.w	800b34c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	689a      	ldr	r2, [r3, #8]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	429a      	cmp	r2, r3
 800b226:	d913      	bls.n	800b250 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	689a      	ldr	r2, [r3, #8]
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	1ad2      	subs	r2, r2, r3
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	4293      	cmp	r3, r2
 800b240:	bf28      	it	cs
 800b242:	4613      	movcs	r3, r2
 800b244:	461a      	mov	r2, r3
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f001 f9ac 	bl	800c5a6 <USBD_CtlContinueRx>
 800b24e:	e07d      	b.n	800b34c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b256:	f003 031f 	and.w	r3, r3, #31
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d014      	beq.n	800b288 <USBD_LL_DataOutStage+0x98>
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d81d      	bhi.n	800b29e <USBD_LL_DataOutStage+0xae>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <USBD_LL_DataOutStage+0x7c>
 800b266:	2b01      	cmp	r3, #1
 800b268:	d003      	beq.n	800b272 <USBD_LL_DataOutStage+0x82>
 800b26a:	e018      	b.n	800b29e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75bb      	strb	r3, [r7, #22]
            break;
 800b270:	e018      	b.n	800b2a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	4619      	mov	r1, r3
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fa5e 	bl	800b73e <USBD_CoreFindIF>
 800b282:	4603      	mov	r3, r0
 800b284:	75bb      	strb	r3, [r7, #22]
            break;
 800b286:	e00d      	b.n	800b2a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	4619      	mov	r1, r3
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 fa60 	bl	800b758 <USBD_CoreFindEP>
 800b298:	4603      	mov	r3, r0
 800b29a:	75bb      	strb	r3, [r7, #22]
            break;
 800b29c:	e002      	b.n	800b2a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	75bb      	strb	r3, [r7, #22]
            break;
 800b2a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2a4:	7dbb      	ldrb	r3, [r7, #22]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d119      	bne.n	800b2de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d113      	bne.n	800b2de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	32ae      	adds	r2, #174	@ 0xae
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2c6:	7dba      	ldrb	r2, [r7, #22]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2ce:	7dba      	ldrb	r2, [r7, #22]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	32ae      	adds	r2, #174	@ 0xae
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f001 f972 	bl	800c5c8 <USBD_CtlSendStatus>
 800b2e4:	e032      	b.n	800b34c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2e6:	7afb      	ldrb	r3, [r7, #11]
 800b2e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 fa31 	bl	800b758 <USBD_CoreFindEP>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2fa:	7dbb      	ldrb	r3, [r7, #22]
 800b2fc:	2bff      	cmp	r3, #255	@ 0xff
 800b2fe:	d025      	beq.n	800b34c <USBD_LL_DataOutStage+0x15c>
 800b300:	7dbb      	ldrb	r3, [r7, #22]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d122      	bne.n	800b34c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d117      	bne.n	800b342 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b312:	7dba      	ldrb	r2, [r7, #22]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	32ae      	adds	r2, #174	@ 0xae
 800b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00f      	beq.n	800b342 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b322:	7dba      	ldrb	r2, [r7, #22]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b32a:	7dba      	ldrb	r2, [r7, #22]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	32ae      	adds	r2, #174	@ 0xae
 800b330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	7afa      	ldrb	r2, [r7, #11]
 800b338:	4611      	mov	r1, r2
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3
 800b33e:	4603      	mov	r3, r0
 800b340:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	e000      	b.n	800b34e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b086      	sub	sp, #24
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60f8      	str	r0, [r7, #12]
 800b35e:	460b      	mov	r3, r1
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d16f      	bne.n	800b44a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3314      	adds	r3, #20
 800b36e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b376:	2b02      	cmp	r3, #2
 800b378:	d15a      	bne.n	800b430 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	689a      	ldr	r2, [r3, #8]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	429a      	cmp	r2, r3
 800b384:	d914      	bls.n	800b3b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	689a      	ldr	r2, [r3, #8]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	1ad2      	subs	r2, r2, r3
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	461a      	mov	r2, r3
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f001 f8d4 	bl	800c54a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f001 fe33 	bl	800d014 <USBD_LL_PrepareReceive>
 800b3ae:	e03f      	b.n	800b430 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d11c      	bne.n	800b3f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d316      	bcc.n	800b3f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d20f      	bcs.n	800b3f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f001 f8b5 	bl	800c54a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f001 fe10 	bl	800d014 <USBD_LL_PrepareReceive>
 800b3f4:	e01c      	b.n	800b430 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d10f      	bne.n	800b422 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b422:	2180      	movs	r1, #128	@ 0x80
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f001 fd4b 	bl	800cec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f001 f8df 	bl	800c5ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d03a      	beq.n	800b4b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7ff fe42 	bl	800b0c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b448:	e032      	b.n	800b4b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b450:	b2db      	uxtb	r3, r3
 800b452:	4619      	mov	r1, r3
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 f97f 	bl	800b758 <USBD_CoreFindEP>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2bff      	cmp	r3, #255	@ 0xff
 800b462:	d025      	beq.n	800b4b0 <USBD_LL_DataInStage+0x15a>
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d122      	bne.n	800b4b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b03      	cmp	r3, #3
 800b474:	d11c      	bne.n	800b4b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b476:	7dfa      	ldrb	r2, [r7, #23]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	32ae      	adds	r2, #174	@ 0xae
 800b47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d014      	beq.n	800b4b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b486:	7dfa      	ldrb	r2, [r7, #23]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b48e:	7dfa      	ldrb	r2, [r7, #23]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	32ae      	adds	r2, #174	@ 0xae
 800b494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	7afa      	ldrb	r2, [r7, #11]
 800b49c:	4611      	mov	r1, r2
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	4798      	blx	r3
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4a6:	7dbb      	ldrb	r3, [r7, #22]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4ac:	7dbb      	ldrb	r3, [r7, #22]
 800b4ae:	e000      	b.n	800b4b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d014      	beq.n	800b520 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6852      	ldr	r2, [r2, #4]
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	4611      	mov	r1, r2
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b51c:	2303      	movs	r3, #3
 800b51e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b520:	2340      	movs	r3, #64	@ 0x40
 800b522:	2200      	movs	r2, #0
 800b524:	2100      	movs	r1, #0
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f001 fc85 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2240      	movs	r2, #64	@ 0x40
 800b538:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b53c:	2340      	movs	r3, #64	@ 0x40
 800b53e:	2200      	movs	r2, #0
 800b540:	2180      	movs	r1, #128	@ 0x80
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 fc77 	bl	800ce36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2240      	movs	r2, #64	@ 0x40
 800b552:	621a      	str	r2, [r3, #32]

  return ret;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2204      	movs	r2, #4
 800b598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d106      	bne.n	800b5cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b082      	sub	sp, #8
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d110      	bne.n	800b610 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	32ae      	adds	r2, #174	@ 0xae
 800b630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	e01c      	b.n	800b676 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b03      	cmp	r3, #3
 800b646:	d115      	bne.n	800b674 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	32ae      	adds	r2, #174	@ 0xae
 800b652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00b      	beq.n	800b674 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32ae      	adds	r2, #174	@ 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	32ae      	adds	r2, #174	@ 0xae
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e01c      	b.n	800b6da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d115      	bne.n	800b6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	32ae      	adds	r2, #174	@ 0xae
 800b6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	32ae      	adds	r2, #174	@ 0xae
 800b6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d0:	78fa      	ldrb	r2, [r7, #3]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00e      	beq.n	800b734 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6852      	ldr	r2, [r2, #4]
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	4611      	mov	r1, r2
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	4798      	blx	r3
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b730:	2303      	movs	r3, #3
 800b732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b73e:	b480      	push	{r7}
 800b740:	b083      	sub	sp, #12
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b74a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b086      	sub	sp, #24
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	7812      	ldrb	r2, [r2, #0]
 800b794:	4293      	cmp	r3, r2
 800b796:	d91f      	bls.n	800b7d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b79e:	e013      	b.n	800b7c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b7a0:	f107 030a 	add.w	r3, r7, #10
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f000 f81b 	bl	800b7e2 <USBD_GetNextDesc>
 800b7ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d108      	bne.n	800b7c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	789b      	ldrb	r3, [r3, #2]
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d008      	beq.n	800b7d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	885b      	ldrh	r3, [r3, #2]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	897b      	ldrh	r3, [r7, #10]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d8e5      	bhi.n	800b7a0 <USBD_GetEpDesc+0x2e>
 800b7d4:	e000      	b.n	800b7d8 <USBD_GetEpDesc+0x66>
          break;
 800b7d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7d8:	693b      	ldr	r3, [r7, #16]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b087      	sub	sp, #28
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	3301      	adds	r3, #1
 800b830:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b838:	8a3b      	ldrh	r3, [r7, #16]
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	b21a      	sxth	r2, r3
 800b83e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b842:	4313      	orrs	r3, r2
 800b844:	b21b      	sxth	r3, r3
 800b846:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b848:	89fb      	ldrh	r3, [r7, #14]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
	...

0800b858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b86e:	2b40      	cmp	r3, #64	@ 0x40
 800b870:	d005      	beq.n	800b87e <USBD_StdDevReq+0x26>
 800b872:	2b40      	cmp	r3, #64	@ 0x40
 800b874:	d857      	bhi.n	800b926 <USBD_StdDevReq+0xce>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <USBD_StdDevReq+0x42>
 800b87a:	2b20      	cmp	r3, #32
 800b87c:	d153      	bne.n	800b926 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	32ae      	adds	r2, #174	@ 0xae
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	4798      	blx	r3
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]
      break;
 800b898:	e04a      	b.n	800b930 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d83b      	bhi.n	800b91a <USBD_StdDevReq+0xc2>
 800b8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a8 <USBD_StdDevReq+0x50>)
 800b8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a8:	0800b8fd 	.word	0x0800b8fd
 800b8ac:	0800b911 	.word	0x0800b911
 800b8b0:	0800b91b 	.word	0x0800b91b
 800b8b4:	0800b907 	.word	0x0800b907
 800b8b8:	0800b91b 	.word	0x0800b91b
 800b8bc:	0800b8db 	.word	0x0800b8db
 800b8c0:	0800b8d1 	.word	0x0800b8d1
 800b8c4:	0800b91b 	.word	0x0800b91b
 800b8c8:	0800b8f3 	.word	0x0800b8f3
 800b8cc:	0800b8e5 	.word	0x0800b8e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fa3c 	bl	800bd50 <USBD_GetDescriptor>
          break;
 800b8d8:	e024      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fbcb 	bl	800c078 <USBD_SetAddress>
          break;
 800b8e2:	e01f      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fc0a 	bl	800c100 <USBD_SetConfig>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
          break;
 800b8f0:	e018      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fcad 	bl	800c254 <USBD_GetConfig>
          break;
 800b8fa:	e013      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fcde 	bl	800c2c0 <USBD_GetStatus>
          break;
 800b904:	e00e      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd0d 	bl	800c328 <USBD_SetFeature>
          break;
 800b90e:	e009      	b.n	800b924 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fd31 	bl	800c37a <USBD_ClrFeature>
          break;
 800b918:	e004      	b.n	800b924 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fd88 	bl	800c432 <USBD_CtlError>
          break;
 800b922:	bf00      	nop
      }
      break;
 800b924:	e004      	b.n	800b930 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fd82 	bl	800c432 <USBD_CtlError>
      break;
 800b92e:	bf00      	nop
  }

  return ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop

0800b93c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d005      	beq.n	800b962 <USBD_StdItfReq+0x26>
 800b956:	2b40      	cmp	r3, #64	@ 0x40
 800b958:	d852      	bhi.n	800ba00 <USBD_StdItfReq+0xc4>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <USBD_StdItfReq+0x26>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	d14e      	bne.n	800ba00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d840      	bhi.n	800b9f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	889b      	ldrh	r3, [r3, #4]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b01      	cmp	r3, #1
 800b978:	d836      	bhi.n	800b9e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	889b      	ldrh	r3, [r3, #4]
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fedb 	bl	800b73e <USBD_CoreFindIF>
 800b988:	4603      	mov	r3, r0
 800b98a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	2bff      	cmp	r3, #255	@ 0xff
 800b990:	d01d      	beq.n	800b9ce <USBD_StdItfReq+0x92>
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11a      	bne.n	800b9ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b998:	7bba      	ldrb	r2, [r7, #14]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32ae      	adds	r2, #174	@ 0xae
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00f      	beq.n	800b9c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b9a8:	7bba      	ldrb	r2, [r7, #14]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9b0:	7bba      	ldrb	r2, [r7, #14]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	32ae      	adds	r2, #174	@ 0xae
 800b9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9c6:	e004      	b.n	800b9d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9cc:	e001      	b.n	800b9d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	88db      	ldrh	r3, [r3, #6]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d110      	bne.n	800b9fc <USBD_StdItfReq+0xc0>
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10d      	bne.n	800b9fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fdf1 	bl	800c5c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9e6:	e009      	b.n	800b9fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd21 	bl	800c432 <USBD_CtlError>
          break;
 800b9f0:	e004      	b.n	800b9fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fd1c 	bl	800c432 <USBD_CtlError>
          break;
 800b9fa:	e000      	b.n	800b9fe <USBD_StdItfReq+0xc2>
          break;
 800b9fc:	bf00      	nop
      }
      break;
 800b9fe:	e004      	b.n	800ba0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fd15 	bl	800c432 <USBD_CtlError>
      break;
 800ba08:	bf00      	nop
  }

  return ret;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	889b      	ldrh	r3, [r3, #4]
 800ba26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba30:	2b40      	cmp	r3, #64	@ 0x40
 800ba32:	d007      	beq.n	800ba44 <USBD_StdEPReq+0x30>
 800ba34:	2b40      	cmp	r3, #64	@ 0x40
 800ba36:	f200 817f 	bhi.w	800bd38 <USBD_StdEPReq+0x324>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d02a      	beq.n	800ba94 <USBD_StdEPReq+0x80>
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	f040 817a 	bne.w	800bd38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fe85 	bl	800b758 <USBD_CoreFindEP>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba52:	7b7b      	ldrb	r3, [r7, #13]
 800ba54:	2bff      	cmp	r3, #255	@ 0xff
 800ba56:	f000 8174 	beq.w	800bd42 <USBD_StdEPReq+0x32e>
 800ba5a:	7b7b      	ldrb	r3, [r7, #13]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8170 	bne.w	800bd42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba62:	7b7a      	ldrb	r2, [r7, #13]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba6a:	7b7a      	ldrb	r2, [r7, #13]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	32ae      	adds	r2, #174	@ 0xae
 800ba70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8163 	beq.w	800bd42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba7c:	7b7a      	ldrb	r2, [r7, #13]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	32ae      	adds	r2, #174	@ 0xae
 800ba82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba92:	e156      	b.n	800bd42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d008      	beq.n	800baae <USBD_StdEPReq+0x9a>
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	f300 8145 	bgt.w	800bd2c <USBD_StdEPReq+0x318>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 809b 	beq.w	800bbde <USBD_StdEPReq+0x1ca>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d03c      	beq.n	800bb26 <USBD_StdEPReq+0x112>
 800baac:	e13e      	b.n	800bd2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d002      	beq.n	800bac0 <USBD_StdEPReq+0xac>
 800baba:	2b03      	cmp	r3, #3
 800babc:	d016      	beq.n	800baec <USBD_StdEPReq+0xd8>
 800babe:	e02c      	b.n	800bb1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00d      	beq.n	800bae2 <USBD_StdEPReq+0xce>
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	2b80      	cmp	r3, #128	@ 0x80
 800baca:	d00a      	beq.n	800bae2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 f9f5 	bl	800cec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad6:	2180      	movs	r1, #128	@ 0x80
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f001 f9f1 	bl	800cec0 <USBD_LL_StallEP>
 800bade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bae0:	e020      	b.n	800bb24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fca4 	bl	800c432 <USBD_CtlError>
              break;
 800baea:	e01b      	b.n	800bb24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	885b      	ldrh	r3, [r3, #2]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10e      	bne.n	800bb12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <USBD_StdEPReq+0xfe>
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	2b80      	cmp	r3, #128	@ 0x80
 800bafe:	d008      	beq.n	800bb12 <USBD_StdEPReq+0xfe>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	88db      	ldrh	r3, [r3, #6]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f9d7 	bl	800cec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fd58 	bl	800c5c8 <USBD_CtlSendStatus>

              break;
 800bb18:	e004      	b.n	800bb24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fc88 	bl	800c432 <USBD_CtlError>
              break;
 800bb22:	bf00      	nop
          }
          break;
 800bb24:	e107      	b.n	800bd36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d002      	beq.n	800bb38 <USBD_StdEPReq+0x124>
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d016      	beq.n	800bb64 <USBD_StdEPReq+0x150>
 800bb36:	e04b      	b.n	800bbd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00d      	beq.n	800bb5a <USBD_StdEPReq+0x146>
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	2b80      	cmp	r3, #128	@ 0x80
 800bb42:	d00a      	beq.n	800bb5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f001 f9b9 	bl	800cec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb4e:	2180      	movs	r1, #128	@ 0x80
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f001 f9b5 	bl	800cec0 <USBD_LL_StallEP>
 800bb56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb58:	e040      	b.n	800bbdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fc68 	bl	800c432 <USBD_CtlError>
              break;
 800bb62:	e03b      	b.n	800bbdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	885b      	ldrh	r3, [r3, #2]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d136      	bne.n	800bbda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 f9bf 	bl	800cefe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fd21 	bl	800c5c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fde4 	bl	800b758 <USBD_CoreFindEP>
 800bb90:	4603      	mov	r3, r0
 800bb92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb94:	7b7b      	ldrb	r3, [r7, #13]
 800bb96:	2bff      	cmp	r3, #255	@ 0xff
 800bb98:	d01f      	beq.n	800bbda <USBD_StdEPReq+0x1c6>
 800bb9a:	7b7b      	ldrb	r3, [r7, #13]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d11c      	bne.n	800bbda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bba0:	7b7a      	ldrb	r2, [r7, #13]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bba8:	7b7a      	ldrb	r2, [r7, #13]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	32ae      	adds	r2, #174	@ 0xae
 800bbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d010      	beq.n	800bbda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbb8:	7b7a      	ldrb	r2, [r7, #13]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	32ae      	adds	r2, #174	@ 0xae
 800bbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbce:	e004      	b.n	800bbda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fc2d 	bl	800c432 <USBD_CtlError>
              break;
 800bbd8:	e000      	b.n	800bbdc <USBD_StdEPReq+0x1c8>
              break;
 800bbda:	bf00      	nop
          }
          break;
 800bbdc:	e0ab      	b.n	800bd36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d002      	beq.n	800bbf0 <USBD_StdEPReq+0x1dc>
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d032      	beq.n	800bc54 <USBD_StdEPReq+0x240>
 800bbee:	e097      	b.n	800bd20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <USBD_StdEPReq+0x1f2>
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	2b80      	cmp	r3, #128	@ 0x80
 800bbfa:	d004      	beq.n	800bc06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fc17 	bl	800c432 <USBD_CtlError>
                break;
 800bc04:	e091      	b.n	800bd2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da0b      	bge.n	800bc26 <USBD_StdEPReq+0x212>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	3310      	adds	r3, #16
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	e00b      	b.n	800bc3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fc61 	bl	800c514 <USBD_CtlSendData>
              break;
 800bc52:	e06a      	b.n	800bd2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da11      	bge.n	800bc80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	f003 020f 	and.w	r2, r3, #15
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	3324      	adds	r3, #36	@ 0x24
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d117      	bne.n	800bca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fbda 	bl	800c432 <USBD_CtlError>
                  break;
 800bc7e:	e054      	b.n	800bd2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	f003 020f 	and.w	r2, r3, #15
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d104      	bne.n	800bca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fbc7 	bl	800c432 <USBD_CtlError>
                  break;
 800bca4:	e041      	b.n	800bd2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da0b      	bge.n	800bcc6 <USBD_StdEPReq+0x2b2>
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	3310      	adds	r3, #16
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	e00b      	b.n	800bcde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	4413      	add	r3, r2
 800bcdc:	3304      	adds	r3, #4
 800bcde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <USBD_StdEPReq+0x2d8>
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b80      	cmp	r3, #128	@ 0x80
 800bcea:	d103      	bne.n	800bcf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e00e      	b.n	800bd12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 f91f 	bl	800cf3c <USBD_LL_IsStallEP>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e002      	b.n	800bd12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	2202      	movs	r2, #2
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fbfb 	bl	800c514 <USBD_CtlSendData>
              break;
 800bd1e:	e004      	b.n	800bd2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fb85 	bl	800c432 <USBD_CtlError>
              break;
 800bd28:	bf00      	nop
          }
          break;
 800bd2a:	e004      	b.n	800bd36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fb7f 	bl	800c432 <USBD_CtlError>
          break;
 800bd34:	bf00      	nop
      }
      break;
 800bd36:	e005      	b.n	800bd44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fb79 	bl	800c432 <USBD_CtlError>
      break;
 800bd40:	e000      	b.n	800bd44 <USBD_StdEPReq+0x330>
      break;
 800bd42:	bf00      	nop
  }

  return ret;
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	885b      	ldrh	r3, [r3, #2]
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	2b0e      	cmp	r3, #14
 800bd72:	f200 8152 	bhi.w	800c01a <USBD_GetDescriptor+0x2ca>
 800bd76:	a201      	add	r2, pc, #4	@ (adr r2, 800bd7c <USBD_GetDescriptor+0x2c>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bded 	.word	0x0800bded
 800bd80:	0800be05 	.word	0x0800be05
 800bd84:	0800be45 	.word	0x0800be45
 800bd88:	0800c01b 	.word	0x0800c01b
 800bd8c:	0800c01b 	.word	0x0800c01b
 800bd90:	0800bfbb 	.word	0x0800bfbb
 800bd94:	0800bfe7 	.word	0x0800bfe7
 800bd98:	0800c01b 	.word	0x0800c01b
 800bd9c:	0800c01b 	.word	0x0800c01b
 800bda0:	0800c01b 	.word	0x0800c01b
 800bda4:	0800c01b 	.word	0x0800c01b
 800bda8:	0800c01b 	.word	0x0800c01b
 800bdac:	0800c01b 	.word	0x0800c01b
 800bdb0:	0800c01b 	.word	0x0800c01b
 800bdb4:	0800bdb9 	.word	0x0800bdb9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7c12      	ldrb	r2, [r2, #16]
 800bdd0:	f107 0108 	add.w	r1, r7, #8
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdda:	e126      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fb27 	bl	800c432 <USBD_CtlError>
        err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
      break;
 800bdea:	e11e      	b.n	800c02a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	7c12      	ldrb	r2, [r2, #16]
 800bdf8:	f107 0108 	add.w	r1, r7, #8
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	60f8      	str	r0, [r7, #12]
      break;
 800be02:	e112      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7c1b      	ldrb	r3, [r3, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10d      	bne.n	800be28 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be14:	f107 0208 	add.w	r2, r7, #8
 800be18:	4610      	mov	r0, r2
 800be1a:	4798      	blx	r3
 800be1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3301      	adds	r3, #1
 800be22:	2202      	movs	r2, #2
 800be24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be26:	e100      	b.n	800c02a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be30:	f107 0208 	add.w	r2, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3301      	adds	r3, #1
 800be3e:	2202      	movs	r2, #2
 800be40:	701a      	strb	r2, [r3, #0]
      break;
 800be42:	e0f2      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	885b      	ldrh	r3, [r3, #2]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b05      	cmp	r3, #5
 800be4c:	f200 80ac 	bhi.w	800bfa8 <USBD_GetDescriptor+0x258>
 800be50:	a201      	add	r2, pc, #4	@ (adr r2, 800be58 <USBD_GetDescriptor+0x108>)
 800be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be56:	bf00      	nop
 800be58:	0800be71 	.word	0x0800be71
 800be5c:	0800bea5 	.word	0x0800bea5
 800be60:	0800bed9 	.word	0x0800bed9
 800be64:	0800bf0d 	.word	0x0800bf0d
 800be68:	0800bf41 	.word	0x0800bf41
 800be6c:	0800bf75 	.word	0x0800bf75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e091      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 facb 	bl	800c432 <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e089      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	7c12      	ldrb	r2, [r2, #16]
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec6:	e077      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fab1 	bl	800c432 <USBD_CtlError>
            err++;
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	3301      	adds	r3, #1
 800bed4:	72fb      	strb	r3, [r7, #11]
          break;
 800bed6:	e06f      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e05d      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa97 	bl	800c432 <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e055      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e043      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa7d 	bl	800c432 <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e03b      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e029      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa63 	bl	800c432 <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e021      	b.n	800bfb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e00f      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa49 	bl	800c432 <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e007      	b.n	800bfb8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fa41 	bl	800c432 <USBD_CtlError>
          err++;
 800bfb0:	7afb      	ldrb	r3, [r7, #11]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bfb6:	bf00      	nop
      }
      break;
 800bfb8:	e037      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7c1b      	ldrb	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d109      	bne.n	800bfd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfca:	f107 0208 	add.w	r2, r7, #8
 800bfce:	4610      	mov	r0, r2
 800bfd0:	4798      	blx	r3
 800bfd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfd4:	e029      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fa2a 	bl	800c432 <USBD_CtlError>
        err++;
 800bfde:	7afb      	ldrb	r3, [r7, #11]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfe4:	e021      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	7c1b      	ldrb	r3, [r3, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10d      	bne.n	800c00a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff6:	f107 0208 	add.w	r2, r7, #8
 800bffa:	4610      	mov	r0, r2
 800bffc:	4798      	blx	r3
 800bffe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3301      	adds	r3, #1
 800c004:	2207      	movs	r2, #7
 800c006:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c008:	e00f      	b.n	800c02a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fa10 	bl	800c432 <USBD_CtlError>
        err++;
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	3301      	adds	r3, #1
 800c016:	72fb      	strb	r3, [r7, #11]
      break;
 800c018:	e007      	b.n	800c02a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa08 	bl	800c432 <USBD_CtlError>
      err++;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	3301      	adds	r3, #1
 800c026:	72fb      	strb	r3, [r7, #11]
      break;
 800c028:	bf00      	nop
  }

  if (err != 0U)
 800c02a:	7afb      	ldrb	r3, [r7, #11]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d11e      	bne.n	800c06e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	88db      	ldrh	r3, [r3, #6]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d016      	beq.n	800c066 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c038:	893b      	ldrh	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00e      	beq.n	800c05c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	88da      	ldrh	r2, [r3, #6]
 800c042:	893b      	ldrh	r3, [r7, #8]
 800c044:	4293      	cmp	r3, r2
 800c046:	bf28      	it	cs
 800c048:	4613      	movcs	r3, r2
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c04e:	893b      	ldrh	r3, [r7, #8]
 800c050:	461a      	mov	r2, r3
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa5d 	bl	800c514 <USBD_CtlSendData>
 800c05a:	e009      	b.n	800c070 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9e7 	bl	800c432 <USBD_CtlError>
 800c064:	e004      	b.n	800c070 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 faae 	bl	800c5c8 <USBD_CtlSendStatus>
 800c06c:	e000      	b.n	800c070 <USBD_GetDescriptor+0x320>
    return;
 800c06e:	bf00      	nop
  }
}
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop

0800c078 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	889b      	ldrh	r3, [r3, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d131      	bne.n	800c0ee <USBD_SetAddress+0x76>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	88db      	ldrh	r3, [r3, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d12d      	bne.n	800c0ee <USBD_SetAddress+0x76>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	885b      	ldrh	r3, [r3, #2]
 800c096:	2b7f      	cmp	r3, #127	@ 0x7f
 800c098:	d829      	bhi.n	800c0ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d104      	bne.n	800c0bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f9bc 	bl	800c432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ba:	e01d      	b.n	800c0f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7bfa      	ldrb	r2, [r7, #15]
 800c0c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 ff63 	bl	800cf94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa7a 	bl	800c5c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e2:	e009      	b.n	800c0f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ec:	e004      	b.n	800c0f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f99e 	bl	800c432 <USBD_CtlError>
  }
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	b2da      	uxtb	r2, r3
 800c114:	4b4e      	ldr	r3, [pc, #312]	@ (800c250 <USBD_SetConfig+0x150>)
 800c116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c118:	4b4d      	ldr	r3, [pc, #308]	@ (800c250 <USBD_SetConfig+0x150>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d905      	bls.n	800c12c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f985 	bl	800c432 <USBD_CtlError>
    return USBD_FAIL;
 800c128:	2303      	movs	r3, #3
 800c12a:	e08c      	b.n	800c246 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	d002      	beq.n	800c13e <USBD_SetConfig+0x3e>
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d029      	beq.n	800c190 <USBD_SetConfig+0x90>
 800c13c:	e075      	b.n	800c22a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c13e:	4b44      	ldr	r3, [pc, #272]	@ (800c250 <USBD_SetConfig+0x150>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d020      	beq.n	800c188 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c146:	4b42      	ldr	r3, [pc, #264]	@ (800c250 <USBD_SetConfig+0x150>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c150:	4b3f      	ldr	r3, [pc, #252]	@ (800c250 <USBD_SetConfig+0x150>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fe ffbf 	bl	800b0da <USBD_SetClassConfig>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c160:	7bfb      	ldrb	r3, [r7, #15]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d008      	beq.n	800c178 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f962 	bl	800c432 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2202      	movs	r2, #2
 800c172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c176:	e065      	b.n	800c244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa25 	bl	800c5c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2203      	movs	r2, #3
 800c182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c186:	e05d      	b.n	800c244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fa1d 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c18e:	e059      	b.n	800c244 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c190:	4b2f      	ldr	r3, [pc, #188]	@ (800c250 <USBD_SetConfig+0x150>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d112      	bne.n	800c1be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c1a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1aa:	4b29      	ldr	r3, [pc, #164]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe ffae 	bl	800b112 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa06 	bl	800c5c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1bc:	e042      	b.n	800c244 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1be:	4b24      	ldr	r3, [pc, #144]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d02a      	beq.n	800c222 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fe ff9c 	bl	800b112 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1da:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c250 <USBD_SetConfig+0x150>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fe ff75 	bl	800b0da <USBD_SetClassConfig>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00f      	beq.n	800c21a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f918 	bl	800c432 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7fe ff81 	bl	800b112 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c218:	e014      	b.n	800c244 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f9d4 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c220:	e010      	b.n	800c244 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f9d0 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c228:	e00c      	b.n	800c244 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f900 	bl	800c432 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c232:	4b07      	ldr	r3, [pc, #28]	@ (800c250 <USBD_SetConfig+0x150>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7fe ff6a 	bl	800b112 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c23e:	2303      	movs	r3, #3
 800c240:	73fb      	strb	r3, [r7, #15]
      break;
 800c242:	bf00      	nop
  }

  return ret;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000878 	.word	0x20000878

0800c254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	88db      	ldrh	r3, [r3, #6]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d004      	beq.n	800c270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f8e2 	bl	800c432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c26e:	e023      	b.n	800c2b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b02      	cmp	r3, #2
 800c27a:	dc02      	bgt.n	800c282 <USBD_GetConfig+0x2e>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dc03      	bgt.n	800c288 <USBD_GetConfig+0x34>
 800c280:	e015      	b.n	800c2ae <USBD_GetConfig+0x5a>
 800c282:	2b03      	cmp	r3, #3
 800c284:	d00b      	beq.n	800c29e <USBD_GetConfig+0x4a>
 800c286:	e012      	b.n	800c2ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3308      	adds	r3, #8
 800c292:	2201      	movs	r2, #1
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f93c 	bl	800c514 <USBD_CtlSendData>
        break;
 800c29c:	e00c      	b.n	800c2b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f934 	bl	800c514 <USBD_CtlSendData>
        break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f8be 	bl	800c432 <USBD_CtlError>
        break;
 800c2b6:	bf00      	nop
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d81e      	bhi.n	800c316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	88db      	ldrh	r3, [r3, #6]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d004      	beq.n	800c2ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f8a5 	bl	800c432 <USBD_CtlError>
        break;
 800c2e8:	e01a      	b.n	800c320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d005      	beq.n	800c306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	f043 0202 	orr.w	r2, r3, #2
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	330c      	adds	r3, #12
 800c30a:	2202      	movs	r2, #2
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f900 	bl	800c514 <USBD_CtlSendData>
      break;
 800c314:	e004      	b.n	800c320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f88a 	bl	800c432 <USBD_CtlError>
      break;
 800c31e:	bf00      	nop
  }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d107      	bne.n	800c34a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f940 	bl	800c5c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c348:	e013      	b.n	800c372 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d10b      	bne.n	800c36a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	889b      	ldrh	r3, [r3, #4]
 800c356:	0a1b      	lsrs	r3, r3, #8
 800c358:	b29b      	uxth	r3, r3
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f930 	bl	800c5c8 <USBD_CtlSendStatus>
}
 800c368:	e003      	b.n	800c372 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f860 	bl	800c432 <USBD_CtlError>
}
 800c372:	bf00      	nop
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d80b      	bhi.n	800c3aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	885b      	ldrh	r3, [r3, #2]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d10c      	bne.n	800c3b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f910 	bl	800c5c8 <USBD_CtlSendStatus>
      }
      break;
 800c3a8:	e004      	b.n	800c3b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f840 	bl	800c432 <USBD_CtlError>
      break;
 800c3b2:	e000      	b.n	800c3b6 <USBD_ClrFeature+0x3c>
      break;
 800c3b4:	bf00      	nop
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	781a      	ldrb	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	781a      	ldrb	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff fa16 	bl	800b81a <SWAPBYTE>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff fa09 	bl	800b81a <SWAPBYTE>
 800c408:	4603      	mov	r3, r0
 800c40a:	461a      	mov	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
 800c414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3301      	adds	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff f9fc 	bl	800b81a <SWAPBYTE>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	80da      	strh	r2, [r3, #6]
}
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c43c:	2180      	movs	r1, #128	@ 0x80
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fd3e 	bl	800cec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c444:	2100      	movs	r1, #0
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fd3a 	bl	800cec0 <USBD_LL_StallEP>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d036      	beq.n	800c4d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c46e:	6938      	ldr	r0, [r7, #16]
 800c470:	f000 f836 	bl	800c4e0 <USBD_GetLen>
 800c474:	4603      	mov	r3, r0
 800c476:	3301      	adds	r3, #1
 800c478:	b29b      	uxth	r3, r3
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	4413      	add	r3, r2
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7812      	ldrb	r2, [r2, #0]
 800c48c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	3301      	adds	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	2203      	movs	r2, #3
 800c49c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4a4:	e013      	b.n	800c4ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	7812      	ldrb	r2, [r2, #0]
 800c4b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	613b      	str	r3, [r7, #16]
    idx++;
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e7      	bne.n	800c4a6 <USBD_GetString+0x52>
 800c4d6:	e000      	b.n	800c4da <USBD_GetString+0x86>
    return;
 800c4d8:	bf00      	nop
  }
}
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4f0:	e005      	b.n	800c4fe <USBD_GetLen+0x1e>
  {
    len++;
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1f5      	bne.n	800c4f2 <USBD_GetLen+0x12>
  }

  return len;
 800c506:	7bfb      	ldrb	r3, [r7, #15]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2202      	movs	r2, #2
 800c524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	2100      	movs	r1, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f000 fd49 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	2100      	movs	r1, #0
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f000 fd38 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2203      	movs	r2, #3
 800c57c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	2100      	movs	r1, #0
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fd3c 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 fd2b 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fcf7 	bl	800cfd2 <USBD_LL_Transmit>

  return USBD_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2205      	movs	r2, #5
 800c5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5fe:	2300      	movs	r3, #0
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fd05 	bl	800d014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c622:	2301      	movs	r3, #1
 800c624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c62a:	4b1f      	ldr	r3, [pc, #124]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c62c:	7a5b      	ldrb	r3, [r3, #9]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b00      	cmp	r3, #0
 800c632:	d131      	bne.n	800c698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c634:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c636:	7a5b      	ldrb	r3, [r3, #9]
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	461a      	mov	r2, r3
 800c63c:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c63e:	2100      	movs	r1, #0
 800c640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c642:	4b19      	ldr	r3, [pc, #100]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c644:	7a5b      	ldrb	r3, [r3, #9]
 800c646:	b2db      	uxtb	r3, r3
 800c648:	4a17      	ldr	r2, [pc, #92]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c652:	4b15      	ldr	r3, [pc, #84]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c654:	7a5b      	ldrb	r3, [r3, #9]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	461a      	mov	r2, r3
 800c65a:	4b13      	ldr	r3, [pc, #76]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c65c:	4413      	add	r3, r2
 800c65e:	79fa      	ldrb	r2, [r7, #7]
 800c660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c662:	4b11      	ldr	r3, [pc, #68]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c664:	7a5b      	ldrb	r3, [r3, #9]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	b2d1      	uxtb	r1, r2
 800c66c:	4a0e      	ldr	r2, [pc, #56]	@ (800c6a8 <FATFS_LinkDriverEx+0x94>)
 800c66e:	7251      	strb	r1, [r2, #9]
 800c670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c672:	7dbb      	ldrb	r3, [r7, #22]
 800c674:	3330      	adds	r3, #48	@ 0x30
 800c676:	b2da      	uxtb	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	3301      	adds	r3, #1
 800c680:	223a      	movs	r2, #58	@ 0x3a
 800c682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	3302      	adds	r3, #2
 800c688:	222f      	movs	r2, #47	@ 0x2f
 800c68a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	3303      	adds	r3, #3
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	2000087c 	.word	0x2000087c

0800c6ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff ffaa 	bl	800c614 <FATFS_LinkDriverEx>
 800c6c0:	4603      	mov	r3, r0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4912      	ldr	r1, [pc, #72]	@ (800c71c <MX_USB_DEVICE_Init+0x50>)
 800c6d4:	4812      	ldr	r0, [pc, #72]	@ (800c720 <MX_USB_DEVICE_Init+0x54>)
 800c6d6:	f7fe fc83 	bl	800afe0 <USBD_Init>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6e0:	f7f6 fa22 	bl	8002b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6e4:	490f      	ldr	r1, [pc, #60]	@ (800c724 <MX_USB_DEVICE_Init+0x58>)
 800c6e6:	480e      	ldr	r0, [pc, #56]	@ (800c720 <MX_USB_DEVICE_Init+0x54>)
 800c6e8:	f7fe fcaa 	bl	800b040 <USBD_RegisterClass>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6f2:	f7f6 fa19 	bl	8002b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6f6:	490c      	ldr	r1, [pc, #48]	@ (800c728 <MX_USB_DEVICE_Init+0x5c>)
 800c6f8:	4809      	ldr	r0, [pc, #36]	@ (800c720 <MX_USB_DEVICE_Init+0x54>)
 800c6fa:	f7fe fbe1 	bl	800aec0 <USBD_CDC_RegisterInterface>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c704:	f7f6 fa10 	bl	8002b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c708:	4805      	ldr	r0, [pc, #20]	@ (800c720 <MX_USB_DEVICE_Init+0x54>)
 800c70a:	f7fe fccf 	bl	800b0ac <USBD_Start>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c714:	f7f6 fa08 	bl	8002b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c718:	bf00      	nop
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	200000c0 	.word	0x200000c0
 800c720:	20000888 	.word	0x20000888
 800c724:	2000002c 	.word	0x2000002c
 800c728:	200000ac 	.word	0x200000ac

0800c72c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c730:	2200      	movs	r2, #0
 800c732:	4905      	ldr	r1, [pc, #20]	@ (800c748 <CDC_Init_FS+0x1c>)
 800c734:	4805      	ldr	r0, [pc, #20]	@ (800c74c <CDC_Init_FS+0x20>)
 800c736:	f7fe fbdd 	bl	800aef4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c73a:	4905      	ldr	r1, [pc, #20]	@ (800c750 <CDC_Init_FS+0x24>)
 800c73c:	4803      	ldr	r0, [pc, #12]	@ (800c74c <CDC_Init_FS+0x20>)
 800c73e:	f7fe fbfb 	bl	800af38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c742:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c744:	4618      	mov	r0, r3
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20001364 	.word	0x20001364
 800c74c:	20000888 	.word	0x20000888
 800c750:	20000b64 	.word	0x20000b64

0800c754 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c754:	b480      	push	{r7}
 800c756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c758:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	6039      	str	r1, [r7, #0]
 800c76e:	71fb      	strb	r3, [r7, #7]
 800c770:	4613      	mov	r3, r2
 800c772:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b23      	cmp	r3, #35	@ 0x23
 800c778:	d84a      	bhi.n	800c810 <CDC_Control_FS+0xac>
 800c77a:	a201      	add	r2, pc, #4	@ (adr r2, 800c780 <CDC_Control_FS+0x1c>)
 800c77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c780:	0800c811 	.word	0x0800c811
 800c784:	0800c811 	.word	0x0800c811
 800c788:	0800c811 	.word	0x0800c811
 800c78c:	0800c811 	.word	0x0800c811
 800c790:	0800c811 	.word	0x0800c811
 800c794:	0800c811 	.word	0x0800c811
 800c798:	0800c811 	.word	0x0800c811
 800c79c:	0800c811 	.word	0x0800c811
 800c7a0:	0800c811 	.word	0x0800c811
 800c7a4:	0800c811 	.word	0x0800c811
 800c7a8:	0800c811 	.word	0x0800c811
 800c7ac:	0800c811 	.word	0x0800c811
 800c7b0:	0800c811 	.word	0x0800c811
 800c7b4:	0800c811 	.word	0x0800c811
 800c7b8:	0800c811 	.word	0x0800c811
 800c7bc:	0800c811 	.word	0x0800c811
 800c7c0:	0800c811 	.word	0x0800c811
 800c7c4:	0800c811 	.word	0x0800c811
 800c7c8:	0800c811 	.word	0x0800c811
 800c7cc:	0800c811 	.word	0x0800c811
 800c7d0:	0800c811 	.word	0x0800c811
 800c7d4:	0800c811 	.word	0x0800c811
 800c7d8:	0800c811 	.word	0x0800c811
 800c7dc:	0800c811 	.word	0x0800c811
 800c7e0:	0800c811 	.word	0x0800c811
 800c7e4:	0800c811 	.word	0x0800c811
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c811 	.word	0x0800c811
 800c7f4:	0800c811 	.word	0x0800c811
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c811 	.word	0x0800c811
 800c800:	0800c811 	.word	0x0800c811
 800c804:	0800c811 	.word	0x0800c811
 800c808:	0800c811 	.word	0x0800c811
 800c80c:	0800c811 	.word	0x0800c811
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c810:	bf00      	nop
  }

  return (USBD_OK);
 800c812:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c814:	4618      	mov	r0, r3
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4805      	ldr	r0, [pc, #20]	@ (800c844 <CDC_Receive_FS+0x24>)
 800c82e:	f7fe fb83 	bl	800af38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c832:	4804      	ldr	r0, [pc, #16]	@ (800c844 <CDC_Receive_FS+0x24>)
 800c834:	f7fe fb9e 	bl	800af74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c838:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20000888 	.word	0x20000888

0800c848 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c848:	b480      	push	{r7}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c85a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2212      	movs	r2, #18
 800c87c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c87e:	4b03      	ldr	r3, [pc, #12]	@ (800c88c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	200000e0 	.word	0x200000e0

0800c890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2204      	movs	r2, #4
 800c8a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8a2:	4b03      	ldr	r3, [pc, #12]	@ (800c8b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	20000100 	.word	0x20000100

0800c8b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8c0:	79fb      	ldrb	r3, [r7, #7]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d105      	bne.n	800c8d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	4907      	ldr	r1, [pc, #28]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8ca:	4808      	ldr	r0, [pc, #32]	@ (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8cc:	f7ff fdc2 	bl	800c454 <USBD_GetString>
 800c8d0:	e004      	b.n	800c8dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4904      	ldr	r1, [pc, #16]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8d6:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <USBD_FS_ProductStrDescriptor+0x38>)
 800c8d8:	f7ff fdbc 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8dc:	4b02      	ldr	r3, [pc, #8]	@ (800c8e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20001b64 	.word	0x20001b64
 800c8ec:	080118e0 	.word	0x080118e0

0800c8f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6039      	str	r1, [r7, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	4904      	ldr	r1, [pc, #16]	@ (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c900:	4804      	ldr	r0, [pc, #16]	@ (800c914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c902:	f7ff fda7 	bl	800c454 <USBD_GetString>
  return USBD_StrDesc;
 800c906:	4b02      	ldr	r3, [pc, #8]	@ (800c910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20001b64 	.word	0x20001b64
 800c914:	080118f8 	.word	0x080118f8

0800c918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	221a      	movs	r2, #26
 800c928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c92a:	f000 f855 	bl	800c9d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c92e:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20000104 	.word	0x20000104

0800c93c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	4907      	ldr	r1, [pc, #28]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c952:	4808      	ldr	r0, [pc, #32]	@ (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c954:	f7ff fd7e 	bl	800c454 <USBD_GetString>
 800c958:	e004      	b.n	800c964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	4904      	ldr	r1, [pc, #16]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c95e:	4805      	ldr	r0, [pc, #20]	@ (800c974 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c960:	f7ff fd78 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c964:	4b02      	ldr	r3, [pc, #8]	@ (800c970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20001b64 	.word	0x20001b64
 800c974:	0801190c 	.word	0x0801190c

0800c978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	4907      	ldr	r1, [pc, #28]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c98e:	4808      	ldr	r0, [pc, #32]	@ (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c990:	f7ff fd60 	bl	800c454 <USBD_GetString>
 800c994:	e004      	b.n	800c9a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4904      	ldr	r1, [pc, #16]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c99a:	4805      	ldr	r0, [pc, #20]	@ (800c9b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c99c:	f7ff fd5a 	bl	800c454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20001b64 	.word	0x20001b64
 800c9b0:	08011918 	.word	0x08011918

0800c9b4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	6039      	str	r1, [r7, #0]
 800c9be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	220c      	movs	r2, #12
 800c9c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c9c6:	4b03      	ldr	r3, [pc, #12]	@ (800c9d4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	200000f4 	.word	0x200000f4

0800c9d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ca1c <Get_SerialNum+0x44>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca20 <Get_SerialNum+0x48>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ca24 <Get_SerialNum+0x4c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d009      	beq.n	800ca12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9fe:	2208      	movs	r2, #8
 800ca00:	4909      	ldr	r1, [pc, #36]	@ (800ca28 <Get_SerialNum+0x50>)
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f814 	bl	800ca30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca08:	2204      	movs	r2, #4
 800ca0a:	4908      	ldr	r1, [pc, #32]	@ (800ca2c <Get_SerialNum+0x54>)
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f000 f80f 	bl	800ca30 <IntToUnicode>
  }
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	1fff7a10 	.word	0x1fff7a10
 800ca20:	1fff7a14 	.word	0x1fff7a14
 800ca24:	1fff7a18 	.word	0x1fff7a18
 800ca28:	20000106 	.word	0x20000106
 800ca2c:	20000116 	.word	0x20000116

0800ca30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	75fb      	strb	r3, [r7, #23]
 800ca46:	e027      	b.n	800ca98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	0f1b      	lsrs	r3, r3, #28
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	d80b      	bhi.n	800ca68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	0f1b      	lsrs	r3, r3, #28
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	440b      	add	r3, r1
 800ca60:	3230      	adds	r2, #48	@ 0x30
 800ca62:	b2d2      	uxtb	r2, r2
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	e00a      	b.n	800ca7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	0f1b      	lsrs	r3, r3, #28
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4619      	mov	r1, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	440b      	add	r3, r1
 800ca78:	3237      	adds	r2, #55	@ 0x37
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	3301      	adds	r3, #1
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	3301      	adds	r3, #1
 800ca96:	75fb      	strb	r3, [r7, #23]
 800ca98:	7dfa      	ldrb	r2, [r7, #23]
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d3d3      	bcc.n	800ca48 <IntToUnicode+0x18>
  }
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
	...

0800cab0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b0a0      	sub	sp, #128	@ 0x80
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cab8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cac8:	f107 0310 	add.w	r3, r7, #16
 800cacc:	225c      	movs	r2, #92	@ 0x5c
 800cace:	2100      	movs	r1, #0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f002 f9c0 	bl	800ee56 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cade:	d149      	bne.n	800cb74 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cae4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cae6:	2300      	movs	r3, #0
 800cae8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800caea:	f107 0310 	add.w	r3, r7, #16
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f9 fcf6 	bl	80064e0 <HAL_RCCEx_PeriphCLKConfig>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cafa:	f7f6 f815 	bl	8002b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	4b1e      	ldr	r3, [pc, #120]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb06:	4a1d      	ldr	r2, [pc, #116]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb08:	f043 0301 	orr.w	r3, r3, #1
 800cb0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb0e:	4b1b      	ldr	r3, [pc, #108]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cb1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb20:	2302      	movs	r3, #2
 800cb22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb28:	2303      	movs	r3, #3
 800cb2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb2c:	230a      	movs	r3, #10
 800cb2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cb34:	4619      	mov	r1, r3
 800cb36:	4812      	ldr	r0, [pc, #72]	@ (800cb80 <HAL_PCD_MspInit+0xd0>)
 800cb38:	f7f7 fde2 	bl	8004700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb3c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb40:	4a0e      	ldr	r2, [pc, #56]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb46:	6353      	str	r3, [r2, #52]	@ 0x34
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60bb      	str	r3, [r7, #8]
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb50:	4a0a      	ldr	r2, [pc, #40]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb56:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb58:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <HAL_PCD_MspInit+0xcc>)
 800cb5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb60:	60bb      	str	r3, [r7, #8]
 800cb62:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cb64:	2200      	movs	r2, #0
 800cb66:	2100      	movs	r1, #0
 800cb68:	2043      	movs	r0, #67	@ 0x43
 800cb6a:	f7f7 fa16 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb6e:	2043      	movs	r0, #67	@ 0x43
 800cb70:	f7f7 fa2f 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb74:	bf00      	nop
 800cb76:	3780      	adds	r7, #128	@ 0x80
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	40023800 	.word	0x40023800
 800cb80:	40020000 	.word	0x40020000

0800cb84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	f7fe fad3 	bl	800b146 <USBD_LL_SetupStage>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	440b      	add	r3, r1
 800cbc8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7fe fb0d 	bl	800b1f0 <USBD_LL_DataOutStage>
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800cbf0:	78fa      	ldrb	r2, [r7, #3]
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	440b      	add	r3, r1
 800cbfe:	334c      	adds	r3, #76	@ 0x4c
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	78fb      	ldrb	r3, [r7, #3]
 800cc04:	4619      	mov	r1, r3
 800cc06:	f7fe fba6 	bl	800b356 <USBD_LL_DataInStage>
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fcda 	bl	800b5da <USBD_LL_SOF>
}
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc36:	2301      	movs	r3, #1
 800cc38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
 800cc46:	e008      	b.n	800cc5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d102      	bne.n	800cc56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc50:	2301      	movs	r3, #1
 800cc52:	73fb      	strb	r3, [r7, #15]
 800cc54:	e001      	b.n	800cc5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc56:	f7f5 ff67 	bl	8002b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cc60:	7bfa      	ldrb	r2, [r7, #15]
 800cc62:	4611      	mov	r1, r2
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fc7a 	bl	800b55e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fc22 	bl	800b4ba <USBD_LL_Reset>
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fc75 	bl	800b57e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	6812      	ldr	r2, [r2, #0]
 800cca2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a1b      	ldr	r3, [r3, #32]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccb4:	4b04      	ldr	r3, [pc, #16]	@ (800ccc8 <HAL_PCD_SuspendCallback+0x48>)
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	4a03      	ldr	r2, [pc, #12]	@ (800ccc8 <HAL_PCD_SuspendCallback+0x48>)
 800ccba:	f043 0306 	orr.w	r3, r3, #6
 800ccbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	e000ed00 	.word	0xe000ed00

0800cccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fc65 	bl	800b5aa <USBD_LL_Resume>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fcbd 	bl	800b67e <USBD_LL_IsoOUTIncomplete>
}
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	460b      	mov	r3, r1
 800cd16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cd1e:	78fa      	ldrb	r2, [r7, #3]
 800cd20:	4611      	mov	r1, r2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe fc79 	bl	800b61a <USBD_LL_IsoINIncomplete>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fccf 	bl	800b6e2 <USBD_LL_DevConnected>
}
 800cd44:	bf00      	nop
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fccc 	bl	800b6f8 <USBD_LL_DevDisconnected>
}
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d13c      	bne.n	800cdf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cd78:	4a20      	ldr	r2, [pc, #128]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a1e      	ldr	r2, [pc, #120]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd88:	4b1c      	ldr	r3, [pc, #112]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cd8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cd90:	4b1a      	ldr	r3, [pc, #104]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd92:	2206      	movs	r2, #6
 800cd94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd96:	4b19      	ldr	r3, [pc, #100]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd98:	2202      	movs	r2, #2
 800cd9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd9c:	4b17      	ldr	r3, [pc, #92]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cda2:	4b16      	ldr	r3, [pc, #88]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cda4:	2202      	movs	r2, #2
 800cda6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cda8:	4b14      	ldr	r3, [pc, #80]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cdae:	4b13      	ldr	r3, [pc, #76]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cdb4:	4b11      	ldr	r3, [pc, #68]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cdba:	4b10      	ldr	r3, [pc, #64]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdc6:	480d      	ldr	r0, [pc, #52]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdc8:	f7f7 ffa6 	bl	8004d18 <HAL_PCD_Init>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cdd2:	f7f5 fea9 	bl	8002b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cdd6:	2180      	movs	r1, #128	@ 0x80
 800cdd8:	4808      	ldr	r0, [pc, #32]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdda:	f7f9 fa32 	bl	8006242 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cdde:	2240      	movs	r2, #64	@ 0x40
 800cde0:	2100      	movs	r1, #0
 800cde2:	4806      	ldr	r0, [pc, #24]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cde4:	f7f9 f9e6 	bl	80061b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cde8:	2280      	movs	r2, #128	@ 0x80
 800cdea:	2101      	movs	r1, #1
 800cdec:	4803      	ldr	r0, [pc, #12]	@ (800cdfc <USBD_LL_Init+0x94>)
 800cdee:	f7f9 f9e1 	bl	80061b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20001d64 	.word	0x20001d64

0800ce00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f8 f8a2 	bl	8004f60 <HAL_PCD_Start>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f990 	bl	800d148 <USBD_Get_USB_Status>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	461a      	mov	r2, r3
 800ce44:	4603      	mov	r3, r0
 800ce46:	70fb      	strb	r3, [r7, #3]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70bb      	strb	r3, [r7, #2]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce5e:	78bb      	ldrb	r3, [r7, #2]
 800ce60:	883a      	ldrh	r2, [r7, #0]
 800ce62:	78f9      	ldrb	r1, [r7, #3]
 800ce64:	f7f8 fda0 	bl	80059a8 <HAL_PCD_EP_Open>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 f96a 	bl	800d148 <USBD_Get_USB_Status>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce9c:	78fa      	ldrb	r2, [r7, #3]
 800ce9e:	4611      	mov	r1, r2
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f8 fde9 	bl	8005a78 <HAL_PCD_EP_Close>
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	4618      	mov	r0, r3
 800ceae:	f000 f94b 	bl	800d148 <USBD_Get_USB_Status>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f8 fec1 	bl	8005c66 <HAL_PCD_EP_SetStall>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f92c 	bl	800d148 <USBD_Get_USB_Status>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf18:	78fa      	ldrb	r2, [r7, #3]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f8 ff06 	bl	8005d2e <HAL_PCD_EP_ClrStall>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f90d 	bl	800d148 <USBD_Get_USB_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da0b      	bge.n	800cf70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf58:	78fb      	ldrb	r3, [r7, #3]
 800cf5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	4613      	mov	r3, r2
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	4413      	add	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	440b      	add	r3, r1
 800cf6a:	333e      	adds	r3, #62	@ 0x3e
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	e00b      	b.n	800cf88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800cf86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfae:	78fa      	ldrb	r2, [r7, #3]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f8 fcd3 	bl	800595e <HAL_PCD_SetAddress>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 f8c2 	bl	800d148 <USBD_Get_USB_Status>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
 800cfde:	460b      	mov	r3, r1
 800cfe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cff0:	7af9      	ldrb	r1, [r7, #11]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	f7f8 fdec 	bl	8005bd2 <HAL_PCD_EP_Transmit>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f8a1 	bl	800d148 <USBD_Get_USB_Status>
 800d006:	4603      	mov	r3, r0
 800d008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	607a      	str	r2, [r7, #4]
 800d01e:	603b      	str	r3, [r7, #0]
 800d020:	460b      	mov	r3, r1
 800d022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d032:	7af9      	ldrb	r1, [r7, #11]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	f7f8 fd68 	bl	8005b0c <HAL_PCD_EP_Receive>
 800d03c:	4603      	mov	r3, r0
 800d03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d040:	7dfb      	ldrb	r3, [r7, #23]
 800d042:	4618      	mov	r0, r3
 800d044:	f000 f880 	bl	800d148 <USBD_Get_USB_Status>
 800d048:	4603      	mov	r3, r0
 800d04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	460b      	mov	r3, r1
 800d060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d068:	78fa      	ldrb	r2, [r7, #3]
 800d06a:	4611      	mov	r1, r2
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f8 fd98 	bl	8005ba2 <HAL_PCD_EP_GetRxCount>
 800d072:	4603      	mov	r3, r0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <HAL_PCDEx_LPM_Callback+0x18>
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d01f      	beq.n	800d0d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d092:	e03b      	b.n	800d10c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d007      	beq.n	800d0ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d09c:	f7f5 f95a 	bl	8002354 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d114 <HAL_PCDEx_LPM_Callback+0x98>)
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d114 <HAL_PCDEx_LPM_Callback+0x98>)
 800d0a6:	f023 0306 	bic.w	r3, r3, #6
 800d0aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	6812      	ldr	r2, [r2, #0]
 800d0ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d0be:	f023 0301 	bic.w	r3, r3, #1
 800d0c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fe fa6d 	bl	800b5aa <USBD_LL_Resume>
    break;
 800d0d0:	e01c      	b.n	800d10c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	6812      	ldr	r2, [r2, #0]
 800d0e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d0e4:	f043 0301 	orr.w	r3, r3, #1
 800d0e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe fa44 	bl	800b57e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0fe:	4b05      	ldr	r3, [pc, #20]	@ (800d114 <HAL_PCDEx_LPM_Callback+0x98>)
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	4a04      	ldr	r2, [pc, #16]	@ (800d114 <HAL_PCDEx_LPM_Callback+0x98>)
 800d104:	f043 0306 	orr.w	r3, r3, #6
 800d108:	6113      	str	r3, [r2, #16]
    break;
 800d10a:	bf00      	nop
}
 800d10c:	bf00      	nop
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	e000ed00 	.word	0xe000ed00

0800d118 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d120:	4b03      	ldr	r3, [pc, #12]	@ (800d130 <USBD_static_malloc+0x18>)
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	20002270 	.word	0x20002270

0800d134 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]

}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	4603      	mov	r3, r0
 800d150:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d817      	bhi.n	800d18c <USBD_Get_USB_Status+0x44>
 800d15c:	a201      	add	r2, pc, #4	@ (adr r2, 800d164 <USBD_Get_USB_Status+0x1c>)
 800d15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d162:	bf00      	nop
 800d164:	0800d175 	.word	0x0800d175
 800d168:	0800d17b 	.word	0x0800d17b
 800d16c:	0800d181 	.word	0x0800d181
 800d170:	0800d187 	.word	0x0800d187
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
    break;
 800d178:	e00b      	b.n	800d192 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d17a:	2303      	movs	r3, #3
 800d17c:	73fb      	strb	r3, [r7, #15]
    break;
 800d17e:	e008      	b.n	800d192 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d180:	2301      	movs	r3, #1
 800d182:	73fb      	strb	r3, [r7, #15]
    break;
 800d184:	e005      	b.n	800d192 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d186:	2303      	movs	r3, #3
 800d188:	73fb      	strb	r3, [r7, #15]
    break;
 800d18a:	e002      	b.n	800d192 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d18c:	2303      	movs	r3, #3
 800d18e:	73fb      	strb	r3, [r7, #15]
    break;
 800d190:	bf00      	nop
  }
  return usb_status;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <malloc>:
 800d1a0:	4b02      	ldr	r3, [pc, #8]	@ (800d1ac <malloc+0xc>)
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	f000 b825 	b.w	800d1f4 <_malloc_r>
 800d1aa:	bf00      	nop
 800d1ac:	20000298 	.word	0x20000298

0800d1b0 <sbrk_aligned>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	4e0f      	ldr	r6, [pc, #60]	@ (800d1f0 <sbrk_aligned+0x40>)
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	6831      	ldr	r1, [r6, #0]
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	b911      	cbnz	r1, 800d1c2 <sbrk_aligned+0x12>
 800d1bc:	f001 fe9e 	bl	800eefc <_sbrk_r>
 800d1c0:	6030      	str	r0, [r6, #0]
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f001 fe99 	bl	800eefc <_sbrk_r>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	d103      	bne.n	800d1d6 <sbrk_aligned+0x26>
 800d1ce:	f04f 34ff 	mov.w	r4, #4294967295
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
 800d1d6:	1cc4      	adds	r4, r0, #3
 800d1d8:	f024 0403 	bic.w	r4, r4, #3
 800d1dc:	42a0      	cmp	r0, r4
 800d1de:	d0f8      	beq.n	800d1d2 <sbrk_aligned+0x22>
 800d1e0:	1a21      	subs	r1, r4, r0
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f001 fe8a 	bl	800eefc <_sbrk_r>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d1f2      	bne.n	800d1d2 <sbrk_aligned+0x22>
 800d1ec:	e7ef      	b.n	800d1ce <sbrk_aligned+0x1e>
 800d1ee:	bf00      	nop
 800d1f0:	20002490 	.word	0x20002490

0800d1f4 <_malloc_r>:
 800d1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f8:	1ccd      	adds	r5, r1, #3
 800d1fa:	f025 0503 	bic.w	r5, r5, #3
 800d1fe:	3508      	adds	r5, #8
 800d200:	2d0c      	cmp	r5, #12
 800d202:	bf38      	it	cc
 800d204:	250c      	movcc	r5, #12
 800d206:	2d00      	cmp	r5, #0
 800d208:	4606      	mov	r6, r0
 800d20a:	db01      	blt.n	800d210 <_malloc_r+0x1c>
 800d20c:	42a9      	cmp	r1, r5
 800d20e:	d904      	bls.n	800d21a <_malloc_r+0x26>
 800d210:	230c      	movs	r3, #12
 800d212:	6033      	str	r3, [r6, #0]
 800d214:	2000      	movs	r0, #0
 800d216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d21a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2f0 <_malloc_r+0xfc>
 800d21e:	f000 f869 	bl	800d2f4 <__malloc_lock>
 800d222:	f8d8 3000 	ldr.w	r3, [r8]
 800d226:	461c      	mov	r4, r3
 800d228:	bb44      	cbnz	r4, 800d27c <_malloc_r+0x88>
 800d22a:	4629      	mov	r1, r5
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff ffbf 	bl	800d1b0 <sbrk_aligned>
 800d232:	1c43      	adds	r3, r0, #1
 800d234:	4604      	mov	r4, r0
 800d236:	d158      	bne.n	800d2ea <_malloc_r+0xf6>
 800d238:	f8d8 4000 	ldr.w	r4, [r8]
 800d23c:	4627      	mov	r7, r4
 800d23e:	2f00      	cmp	r7, #0
 800d240:	d143      	bne.n	800d2ca <_malloc_r+0xd6>
 800d242:	2c00      	cmp	r4, #0
 800d244:	d04b      	beq.n	800d2de <_malloc_r+0xea>
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	4639      	mov	r1, r7
 800d24a:	4630      	mov	r0, r6
 800d24c:	eb04 0903 	add.w	r9, r4, r3
 800d250:	f001 fe54 	bl	800eefc <_sbrk_r>
 800d254:	4581      	cmp	r9, r0
 800d256:	d142      	bne.n	800d2de <_malloc_r+0xea>
 800d258:	6821      	ldr	r1, [r4, #0]
 800d25a:	1a6d      	subs	r5, r5, r1
 800d25c:	4629      	mov	r1, r5
 800d25e:	4630      	mov	r0, r6
 800d260:	f7ff ffa6 	bl	800d1b0 <sbrk_aligned>
 800d264:	3001      	adds	r0, #1
 800d266:	d03a      	beq.n	800d2de <_malloc_r+0xea>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	442b      	add	r3, r5
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	f8d8 3000 	ldr.w	r3, [r8]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	bb62      	cbnz	r2, 800d2d0 <_malloc_r+0xdc>
 800d276:	f8c8 7000 	str.w	r7, [r8]
 800d27a:	e00f      	b.n	800d29c <_malloc_r+0xa8>
 800d27c:	6822      	ldr	r2, [r4, #0]
 800d27e:	1b52      	subs	r2, r2, r5
 800d280:	d420      	bmi.n	800d2c4 <_malloc_r+0xd0>
 800d282:	2a0b      	cmp	r2, #11
 800d284:	d917      	bls.n	800d2b6 <_malloc_r+0xc2>
 800d286:	1961      	adds	r1, r4, r5
 800d288:	42a3      	cmp	r3, r4
 800d28a:	6025      	str	r5, [r4, #0]
 800d28c:	bf18      	it	ne
 800d28e:	6059      	strne	r1, [r3, #4]
 800d290:	6863      	ldr	r3, [r4, #4]
 800d292:	bf08      	it	eq
 800d294:	f8c8 1000 	streq.w	r1, [r8]
 800d298:	5162      	str	r2, [r4, r5]
 800d29a:	604b      	str	r3, [r1, #4]
 800d29c:	4630      	mov	r0, r6
 800d29e:	f000 f82f 	bl	800d300 <__malloc_unlock>
 800d2a2:	f104 000b 	add.w	r0, r4, #11
 800d2a6:	1d23      	adds	r3, r4, #4
 800d2a8:	f020 0007 	bic.w	r0, r0, #7
 800d2ac:	1ac2      	subs	r2, r0, r3
 800d2ae:	bf1c      	itt	ne
 800d2b0:	1a1b      	subne	r3, r3, r0
 800d2b2:	50a3      	strne	r3, [r4, r2]
 800d2b4:	e7af      	b.n	800d216 <_malloc_r+0x22>
 800d2b6:	6862      	ldr	r2, [r4, #4]
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	bf0c      	ite	eq
 800d2bc:	f8c8 2000 	streq.w	r2, [r8]
 800d2c0:	605a      	strne	r2, [r3, #4]
 800d2c2:	e7eb      	b.n	800d29c <_malloc_r+0xa8>
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	6864      	ldr	r4, [r4, #4]
 800d2c8:	e7ae      	b.n	800d228 <_malloc_r+0x34>
 800d2ca:	463c      	mov	r4, r7
 800d2cc:	687f      	ldr	r7, [r7, #4]
 800d2ce:	e7b6      	b.n	800d23e <_malloc_r+0x4a>
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d1fb      	bne.n	800d2d0 <_malloc_r+0xdc>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	6053      	str	r3, [r2, #4]
 800d2dc:	e7de      	b.n	800d29c <_malloc_r+0xa8>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	6033      	str	r3, [r6, #0]
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f000 f80c 	bl	800d300 <__malloc_unlock>
 800d2e8:	e794      	b.n	800d214 <_malloc_r+0x20>
 800d2ea:	6005      	str	r5, [r0, #0]
 800d2ec:	e7d6      	b.n	800d29c <_malloc_r+0xa8>
 800d2ee:	bf00      	nop
 800d2f0:	20002494 	.word	0x20002494

0800d2f4 <__malloc_lock>:
 800d2f4:	4801      	ldr	r0, [pc, #4]	@ (800d2fc <__malloc_lock+0x8>)
 800d2f6:	f001 be4e 	b.w	800ef96 <__retarget_lock_acquire_recursive>
 800d2fa:	bf00      	nop
 800d2fc:	200025d8 	.word	0x200025d8

0800d300 <__malloc_unlock>:
 800d300:	4801      	ldr	r0, [pc, #4]	@ (800d308 <__malloc_unlock+0x8>)
 800d302:	f001 be49 	b.w	800ef98 <__retarget_lock_release_recursive>
 800d306:	bf00      	nop
 800d308:	200025d8 	.word	0x200025d8

0800d30c <sulp>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	4604      	mov	r4, r0
 800d310:	460d      	mov	r5, r1
 800d312:	ec45 4b10 	vmov	d0, r4, r5
 800d316:	4616      	mov	r6, r2
 800d318:	f003 fbb4 	bl	8010a84 <__ulp>
 800d31c:	ec51 0b10 	vmov	r0, r1, d0
 800d320:	b17e      	cbz	r6, 800d342 <sulp+0x36>
 800d322:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d326:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	dd09      	ble.n	800d342 <sulp+0x36>
 800d32e:	051b      	lsls	r3, r3, #20
 800d330:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d334:	2400      	movs	r4, #0
 800d336:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d33a:	4622      	mov	r2, r4
 800d33c:	462b      	mov	r3, r5
 800d33e:	f7f3 f97b 	bl	8000638 <__aeabi_dmul>
 800d342:	ec41 0b10 	vmov	d0, r0, r1
 800d346:	bd70      	pop	{r4, r5, r6, pc}

0800d348 <_strtod_l>:
 800d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34c:	b09f      	sub	sp, #124	@ 0x7c
 800d34e:	460c      	mov	r4, r1
 800d350:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d352:	2200      	movs	r2, #0
 800d354:	921a      	str	r2, [sp, #104]	@ 0x68
 800d356:	9005      	str	r0, [sp, #20]
 800d358:	f04f 0a00 	mov.w	sl, #0
 800d35c:	f04f 0b00 	mov.w	fp, #0
 800d360:	460a      	mov	r2, r1
 800d362:	9219      	str	r2, [sp, #100]	@ 0x64
 800d364:	7811      	ldrb	r1, [r2, #0]
 800d366:	292b      	cmp	r1, #43	@ 0x2b
 800d368:	d04a      	beq.n	800d400 <_strtod_l+0xb8>
 800d36a:	d838      	bhi.n	800d3de <_strtod_l+0x96>
 800d36c:	290d      	cmp	r1, #13
 800d36e:	d832      	bhi.n	800d3d6 <_strtod_l+0x8e>
 800d370:	2908      	cmp	r1, #8
 800d372:	d832      	bhi.n	800d3da <_strtod_l+0x92>
 800d374:	2900      	cmp	r1, #0
 800d376:	d03b      	beq.n	800d3f0 <_strtod_l+0xa8>
 800d378:	2200      	movs	r2, #0
 800d37a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d37c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d37e:	782a      	ldrb	r2, [r5, #0]
 800d380:	2a30      	cmp	r2, #48	@ 0x30
 800d382:	f040 80b3 	bne.w	800d4ec <_strtod_l+0x1a4>
 800d386:	786a      	ldrb	r2, [r5, #1]
 800d388:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d38c:	2a58      	cmp	r2, #88	@ 0x58
 800d38e:	d16e      	bne.n	800d46e <_strtod_l+0x126>
 800d390:	9302      	str	r3, [sp, #8]
 800d392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	ab1a      	add	r3, sp, #104	@ 0x68
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	4a8e      	ldr	r2, [pc, #568]	@ (800d5d4 <_strtod_l+0x28c>)
 800d39c:	9805      	ldr	r0, [sp, #20]
 800d39e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d3a0:	a919      	add	r1, sp, #100	@ 0x64
 800d3a2:	f002 fd17 	bl	800fdd4 <__gethex>
 800d3a6:	f010 060f 	ands.w	r6, r0, #15
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	d005      	beq.n	800d3ba <_strtod_l+0x72>
 800d3ae:	2e06      	cmp	r6, #6
 800d3b0:	d128      	bne.n	800d404 <_strtod_l+0xbc>
 800d3b2:	3501      	adds	r5, #1
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 858e 	bne.w	800dede <_strtod_l+0xb96>
 800d3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3c4:	b1cb      	cbz	r3, 800d3fa <_strtod_l+0xb2>
 800d3c6:	4652      	mov	r2, sl
 800d3c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d3cc:	ec43 2b10 	vmov	d0, r2, r3
 800d3d0:	b01f      	add	sp, #124	@ 0x7c
 800d3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d6:	2920      	cmp	r1, #32
 800d3d8:	d1ce      	bne.n	800d378 <_strtod_l+0x30>
 800d3da:	3201      	adds	r2, #1
 800d3dc:	e7c1      	b.n	800d362 <_strtod_l+0x1a>
 800d3de:	292d      	cmp	r1, #45	@ 0x2d
 800d3e0:	d1ca      	bne.n	800d378 <_strtod_l+0x30>
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d3e6:	1c51      	adds	r1, r2, #1
 800d3e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d3ea:	7852      	ldrb	r2, [r2, #1]
 800d3ec:	2a00      	cmp	r2, #0
 800d3ee:	d1c5      	bne.n	800d37c <_strtod_l+0x34>
 800d3f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d3f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f040 8570 	bne.w	800deda <_strtod_l+0xb92>
 800d3fa:	4652      	mov	r2, sl
 800d3fc:	465b      	mov	r3, fp
 800d3fe:	e7e5      	b.n	800d3cc <_strtod_l+0x84>
 800d400:	2100      	movs	r1, #0
 800d402:	e7ef      	b.n	800d3e4 <_strtod_l+0x9c>
 800d404:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d406:	b13a      	cbz	r2, 800d418 <_strtod_l+0xd0>
 800d408:	2135      	movs	r1, #53	@ 0x35
 800d40a:	a81c      	add	r0, sp, #112	@ 0x70
 800d40c:	f003 fc34 	bl	8010c78 <__copybits>
 800d410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d412:	9805      	ldr	r0, [sp, #20]
 800d414:	f003 f802 	bl	801041c <_Bfree>
 800d418:	3e01      	subs	r6, #1
 800d41a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d41c:	2e04      	cmp	r6, #4
 800d41e:	d806      	bhi.n	800d42e <_strtod_l+0xe6>
 800d420:	e8df f006 	tbb	[pc, r6]
 800d424:	201d0314 	.word	0x201d0314
 800d428:	14          	.byte	0x14
 800d429:	00          	.byte	0x00
 800d42a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d42e:	05e1      	lsls	r1, r4, #23
 800d430:	bf48      	it	mi
 800d432:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d43a:	0d1b      	lsrs	r3, r3, #20
 800d43c:	051b      	lsls	r3, r3, #20
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1bb      	bne.n	800d3ba <_strtod_l+0x72>
 800d442:	f001 fd7d 	bl	800ef40 <__errno>
 800d446:	2322      	movs	r3, #34	@ 0x22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	e7b6      	b.n	800d3ba <_strtod_l+0x72>
 800d44c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d450:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d454:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d458:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d45c:	e7e7      	b.n	800d42e <_strtod_l+0xe6>
 800d45e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d5dc <_strtod_l+0x294>
 800d462:	e7e4      	b.n	800d42e <_strtod_l+0xe6>
 800d464:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d468:	f04f 3aff 	mov.w	sl, #4294967295
 800d46c:	e7df      	b.n	800d42e <_strtod_l+0xe6>
 800d46e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	9219      	str	r2, [sp, #100]	@ 0x64
 800d474:	785b      	ldrb	r3, [r3, #1]
 800d476:	2b30      	cmp	r3, #48	@ 0x30
 800d478:	d0f9      	beq.n	800d46e <_strtod_l+0x126>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d09d      	beq.n	800d3ba <_strtod_l+0x72>
 800d47e:	2301      	movs	r3, #1
 800d480:	9309      	str	r3, [sp, #36]	@ 0x24
 800d482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d484:	930c      	str	r3, [sp, #48]	@ 0x30
 800d486:	2300      	movs	r3, #0
 800d488:	9308      	str	r3, [sp, #32]
 800d48a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d48c:	461f      	mov	r7, r3
 800d48e:	220a      	movs	r2, #10
 800d490:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d492:	7805      	ldrb	r5, [r0, #0]
 800d494:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d498:	b2d9      	uxtb	r1, r3
 800d49a:	2909      	cmp	r1, #9
 800d49c:	d928      	bls.n	800d4f0 <_strtod_l+0x1a8>
 800d49e:	494e      	ldr	r1, [pc, #312]	@ (800d5d8 <_strtod_l+0x290>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f001 fce0 	bl	800ee66 <strncmp>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d032      	beq.n	800d510 <_strtod_l+0x1c8>
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	462a      	mov	r2, r5
 800d4ae:	4681      	mov	r9, r0
 800d4b0:	463d      	mov	r5, r7
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2a65      	cmp	r2, #101	@ 0x65
 800d4b6:	d001      	beq.n	800d4bc <_strtod_l+0x174>
 800d4b8:	2a45      	cmp	r2, #69	@ 0x45
 800d4ba:	d114      	bne.n	800d4e6 <_strtod_l+0x19e>
 800d4bc:	b91d      	cbnz	r5, 800d4c6 <_strtod_l+0x17e>
 800d4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c0:	4302      	orrs	r2, r0
 800d4c2:	d095      	beq.n	800d3f0 <_strtod_l+0xa8>
 800d4c4:	2500      	movs	r5, #0
 800d4c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d4c8:	1c62      	adds	r2, r4, #1
 800d4ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4cc:	7862      	ldrb	r2, [r4, #1]
 800d4ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800d4d0:	d077      	beq.n	800d5c2 <_strtod_l+0x27a>
 800d4d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d4d4:	d07b      	beq.n	800d5ce <_strtod_l+0x286>
 800d4d6:	f04f 0c00 	mov.w	ip, #0
 800d4da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d4de:	2909      	cmp	r1, #9
 800d4e0:	f240 8082 	bls.w	800d5e8 <_strtod_l+0x2a0>
 800d4e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d4e6:	f04f 0800 	mov.w	r8, #0
 800d4ea:	e0a2      	b.n	800d632 <_strtod_l+0x2ea>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e7c7      	b.n	800d480 <_strtod_l+0x138>
 800d4f0:	2f08      	cmp	r7, #8
 800d4f2:	bfd5      	itete	le
 800d4f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d4f6:	9908      	ldrgt	r1, [sp, #32]
 800d4f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d4fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d500:	f100 0001 	add.w	r0, r0, #1
 800d504:	bfd4      	ite	le
 800d506:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d508:	9308      	strgt	r3, [sp, #32]
 800d50a:	3701      	adds	r7, #1
 800d50c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d50e:	e7bf      	b.n	800d490 <_strtod_l+0x148>
 800d510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	9219      	str	r2, [sp, #100]	@ 0x64
 800d516:	785a      	ldrb	r2, [r3, #1]
 800d518:	b37f      	cbz	r7, 800d57a <_strtod_l+0x232>
 800d51a:	4681      	mov	r9, r0
 800d51c:	463d      	mov	r5, r7
 800d51e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d522:	2b09      	cmp	r3, #9
 800d524:	d912      	bls.n	800d54c <_strtod_l+0x204>
 800d526:	2301      	movs	r3, #1
 800d528:	e7c4      	b.n	800d4b4 <_strtod_l+0x16c>
 800d52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d530:	785a      	ldrb	r2, [r3, #1]
 800d532:	3001      	adds	r0, #1
 800d534:	2a30      	cmp	r2, #48	@ 0x30
 800d536:	d0f8      	beq.n	800d52a <_strtod_l+0x1e2>
 800d538:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d53c:	2b08      	cmp	r3, #8
 800d53e:	f200 84d3 	bhi.w	800dee8 <_strtod_l+0xba0>
 800d542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d544:	930c      	str	r3, [sp, #48]	@ 0x30
 800d546:	4681      	mov	r9, r0
 800d548:	2000      	movs	r0, #0
 800d54a:	4605      	mov	r5, r0
 800d54c:	3a30      	subs	r2, #48	@ 0x30
 800d54e:	f100 0301 	add.w	r3, r0, #1
 800d552:	d02a      	beq.n	800d5aa <_strtod_l+0x262>
 800d554:	4499      	add	r9, r3
 800d556:	eb00 0c05 	add.w	ip, r0, r5
 800d55a:	462b      	mov	r3, r5
 800d55c:	210a      	movs	r1, #10
 800d55e:	4563      	cmp	r3, ip
 800d560:	d10d      	bne.n	800d57e <_strtod_l+0x236>
 800d562:	1c69      	adds	r1, r5, #1
 800d564:	4401      	add	r1, r0
 800d566:	4428      	add	r0, r5
 800d568:	2808      	cmp	r0, #8
 800d56a:	dc16      	bgt.n	800d59a <_strtod_l+0x252>
 800d56c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d56e:	230a      	movs	r3, #10
 800d570:	fb03 2300 	mla	r3, r3, r0, r2
 800d574:	930a      	str	r3, [sp, #40]	@ 0x28
 800d576:	2300      	movs	r3, #0
 800d578:	e018      	b.n	800d5ac <_strtod_l+0x264>
 800d57a:	4638      	mov	r0, r7
 800d57c:	e7da      	b.n	800d534 <_strtod_l+0x1ec>
 800d57e:	2b08      	cmp	r3, #8
 800d580:	f103 0301 	add.w	r3, r3, #1
 800d584:	dc03      	bgt.n	800d58e <_strtod_l+0x246>
 800d586:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d588:	434e      	muls	r6, r1
 800d58a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d58c:	e7e7      	b.n	800d55e <_strtod_l+0x216>
 800d58e:	2b10      	cmp	r3, #16
 800d590:	bfde      	ittt	le
 800d592:	9e08      	ldrle	r6, [sp, #32]
 800d594:	434e      	mulle	r6, r1
 800d596:	9608      	strle	r6, [sp, #32]
 800d598:	e7e1      	b.n	800d55e <_strtod_l+0x216>
 800d59a:	280f      	cmp	r0, #15
 800d59c:	dceb      	bgt.n	800d576 <_strtod_l+0x22e>
 800d59e:	9808      	ldr	r0, [sp, #32]
 800d5a0:	230a      	movs	r3, #10
 800d5a2:	fb03 2300 	mla	r3, r3, r0, r2
 800d5a6:	9308      	str	r3, [sp, #32]
 800d5a8:	e7e5      	b.n	800d576 <_strtod_l+0x22e>
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5ae:	1c50      	adds	r0, r2, #1
 800d5b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d5b2:	7852      	ldrb	r2, [r2, #1]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	e7b1      	b.n	800d51e <_strtod_l+0x1d6>
 800d5ba:	f04f 0900 	mov.w	r9, #0
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e77d      	b.n	800d4be <_strtod_l+0x176>
 800d5c2:	f04f 0c00 	mov.w	ip, #0
 800d5c6:	1ca2      	adds	r2, r4, #2
 800d5c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5ca:	78a2      	ldrb	r2, [r4, #2]
 800d5cc:	e785      	b.n	800d4da <_strtod_l+0x192>
 800d5ce:	f04f 0c01 	mov.w	ip, #1
 800d5d2:	e7f8      	b.n	800d5c6 <_strtod_l+0x27e>
 800d5d4:	08011960 	.word	0x08011960
 800d5d8:	08011948 	.word	0x08011948
 800d5dc:	7ff00000 	.word	0x7ff00000
 800d5e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5e2:	1c51      	adds	r1, r2, #1
 800d5e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5e6:	7852      	ldrb	r2, [r2, #1]
 800d5e8:	2a30      	cmp	r2, #48	@ 0x30
 800d5ea:	d0f9      	beq.n	800d5e0 <_strtod_l+0x298>
 800d5ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d5f0:	2908      	cmp	r1, #8
 800d5f2:	f63f af78 	bhi.w	800d4e6 <_strtod_l+0x19e>
 800d5f6:	3a30      	subs	r2, #48	@ 0x30
 800d5f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d5fe:	f04f 080a 	mov.w	r8, #10
 800d602:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d604:	1c56      	adds	r6, r2, #1
 800d606:	9619      	str	r6, [sp, #100]	@ 0x64
 800d608:	7852      	ldrb	r2, [r2, #1]
 800d60a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d60e:	f1be 0f09 	cmp.w	lr, #9
 800d612:	d939      	bls.n	800d688 <_strtod_l+0x340>
 800d614:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d616:	1a76      	subs	r6, r6, r1
 800d618:	2e08      	cmp	r6, #8
 800d61a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d61e:	dc03      	bgt.n	800d628 <_strtod_l+0x2e0>
 800d620:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d622:	4588      	cmp	r8, r1
 800d624:	bfa8      	it	ge
 800d626:	4688      	movge	r8, r1
 800d628:	f1bc 0f00 	cmp.w	ip, #0
 800d62c:	d001      	beq.n	800d632 <_strtod_l+0x2ea>
 800d62e:	f1c8 0800 	rsb	r8, r8, #0
 800d632:	2d00      	cmp	r5, #0
 800d634:	d14e      	bne.n	800d6d4 <_strtod_l+0x38c>
 800d636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d638:	4308      	orrs	r0, r1
 800d63a:	f47f aebe 	bne.w	800d3ba <_strtod_l+0x72>
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f47f aed6 	bne.w	800d3f0 <_strtod_l+0xa8>
 800d644:	2a69      	cmp	r2, #105	@ 0x69
 800d646:	d028      	beq.n	800d69a <_strtod_l+0x352>
 800d648:	dc25      	bgt.n	800d696 <_strtod_l+0x34e>
 800d64a:	2a49      	cmp	r2, #73	@ 0x49
 800d64c:	d025      	beq.n	800d69a <_strtod_l+0x352>
 800d64e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d650:	f47f aece 	bne.w	800d3f0 <_strtod_l+0xa8>
 800d654:	499b      	ldr	r1, [pc, #620]	@ (800d8c4 <_strtod_l+0x57c>)
 800d656:	a819      	add	r0, sp, #100	@ 0x64
 800d658:	f002 fdde 	bl	8010218 <__match>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	f43f aec7 	beq.w	800d3f0 <_strtod_l+0xa8>
 800d662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	2b28      	cmp	r3, #40	@ 0x28
 800d668:	d12e      	bne.n	800d6c8 <_strtod_l+0x380>
 800d66a:	4997      	ldr	r1, [pc, #604]	@ (800d8c8 <_strtod_l+0x580>)
 800d66c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d66e:	a819      	add	r0, sp, #100	@ 0x64
 800d670:	f002 fde6 	bl	8010240 <__hexnan>
 800d674:	2805      	cmp	r0, #5
 800d676:	d127      	bne.n	800d6c8 <_strtod_l+0x380>
 800d678:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d67a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d67e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d682:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d686:	e698      	b.n	800d3ba <_strtod_l+0x72>
 800d688:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d68a:	fb08 2101 	mla	r1, r8, r1, r2
 800d68e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d692:	920e      	str	r2, [sp, #56]	@ 0x38
 800d694:	e7b5      	b.n	800d602 <_strtod_l+0x2ba>
 800d696:	2a6e      	cmp	r2, #110	@ 0x6e
 800d698:	e7da      	b.n	800d650 <_strtod_l+0x308>
 800d69a:	498c      	ldr	r1, [pc, #560]	@ (800d8cc <_strtod_l+0x584>)
 800d69c:	a819      	add	r0, sp, #100	@ 0x64
 800d69e:	f002 fdbb 	bl	8010218 <__match>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	f43f aea4 	beq.w	800d3f0 <_strtod_l+0xa8>
 800d6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6aa:	4989      	ldr	r1, [pc, #548]	@ (800d8d0 <_strtod_l+0x588>)
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	a819      	add	r0, sp, #100	@ 0x64
 800d6b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6b2:	f002 fdb1 	bl	8010218 <__match>
 800d6b6:	b910      	cbnz	r0, 800d6be <_strtod_l+0x376>
 800d6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d8e0 <_strtod_l+0x598>
 800d6c2:	f04f 0a00 	mov.w	sl, #0
 800d6c6:	e678      	b.n	800d3ba <_strtod_l+0x72>
 800d6c8:	4882      	ldr	r0, [pc, #520]	@ (800d8d4 <_strtod_l+0x58c>)
 800d6ca:	f001 fc75 	bl	800efb8 <nan>
 800d6ce:	ec5b ab10 	vmov	sl, fp, d0
 800d6d2:	e672      	b.n	800d3ba <_strtod_l+0x72>
 800d6d4:	eba8 0309 	sub.w	r3, r8, r9
 800d6d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6dc:	2f00      	cmp	r7, #0
 800d6de:	bf08      	it	eq
 800d6e0:	462f      	moveq	r7, r5
 800d6e2:	2d10      	cmp	r5, #16
 800d6e4:	462c      	mov	r4, r5
 800d6e6:	bfa8      	it	ge
 800d6e8:	2410      	movge	r4, #16
 800d6ea:	f7f2 ff2b 	bl	8000544 <__aeabi_ui2d>
 800d6ee:	2d09      	cmp	r5, #9
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	468b      	mov	fp, r1
 800d6f4:	dc13      	bgt.n	800d71e <_strtod_l+0x3d6>
 800d6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f43f ae5e 	beq.w	800d3ba <_strtod_l+0x72>
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	dd78      	ble.n	800d7f4 <_strtod_l+0x4ac>
 800d702:	2b16      	cmp	r3, #22
 800d704:	dc5f      	bgt.n	800d7c6 <_strtod_l+0x47e>
 800d706:	4974      	ldr	r1, [pc, #464]	@ (800d8d8 <_strtod_l+0x590>)
 800d708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	4652      	mov	r2, sl
 800d712:	465b      	mov	r3, fp
 800d714:	f7f2 ff90 	bl	8000638 <__aeabi_dmul>
 800d718:	4682      	mov	sl, r0
 800d71a:	468b      	mov	fp, r1
 800d71c:	e64d      	b.n	800d3ba <_strtod_l+0x72>
 800d71e:	4b6e      	ldr	r3, [pc, #440]	@ (800d8d8 <_strtod_l+0x590>)
 800d720:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d724:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d728:	f7f2 ff86 	bl	8000638 <__aeabi_dmul>
 800d72c:	4682      	mov	sl, r0
 800d72e:	9808      	ldr	r0, [sp, #32]
 800d730:	468b      	mov	fp, r1
 800d732:	f7f2 ff07 	bl	8000544 <__aeabi_ui2d>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4650      	mov	r0, sl
 800d73c:	4659      	mov	r1, fp
 800d73e:	f7f2 fdc5 	bl	80002cc <__adddf3>
 800d742:	2d0f      	cmp	r5, #15
 800d744:	4682      	mov	sl, r0
 800d746:	468b      	mov	fp, r1
 800d748:	ddd5      	ble.n	800d6f6 <_strtod_l+0x3ae>
 800d74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d74c:	1b2c      	subs	r4, r5, r4
 800d74e:	441c      	add	r4, r3
 800d750:	2c00      	cmp	r4, #0
 800d752:	f340 8096 	ble.w	800d882 <_strtod_l+0x53a>
 800d756:	f014 030f 	ands.w	r3, r4, #15
 800d75a:	d00a      	beq.n	800d772 <_strtod_l+0x42a>
 800d75c:	495e      	ldr	r1, [pc, #376]	@ (800d8d8 <_strtod_l+0x590>)
 800d75e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d762:	4652      	mov	r2, sl
 800d764:	465b      	mov	r3, fp
 800d766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d76a:	f7f2 ff65 	bl	8000638 <__aeabi_dmul>
 800d76e:	4682      	mov	sl, r0
 800d770:	468b      	mov	fp, r1
 800d772:	f034 040f 	bics.w	r4, r4, #15
 800d776:	d073      	beq.n	800d860 <_strtod_l+0x518>
 800d778:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d77c:	dd48      	ble.n	800d810 <_strtod_l+0x4c8>
 800d77e:	2400      	movs	r4, #0
 800d780:	46a0      	mov	r8, r4
 800d782:	940a      	str	r4, [sp, #40]	@ 0x28
 800d784:	46a1      	mov	r9, r4
 800d786:	9a05      	ldr	r2, [sp, #20]
 800d788:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d8e0 <_strtod_l+0x598>
 800d78c:	2322      	movs	r3, #34	@ 0x22
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	f04f 0a00 	mov.w	sl, #0
 800d794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d796:	2b00      	cmp	r3, #0
 800d798:	f43f ae0f 	beq.w	800d3ba <_strtod_l+0x72>
 800d79c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d79e:	9805      	ldr	r0, [sp, #20]
 800d7a0:	f002 fe3c 	bl	801041c <_Bfree>
 800d7a4:	9805      	ldr	r0, [sp, #20]
 800d7a6:	4649      	mov	r1, r9
 800d7a8:	f002 fe38 	bl	801041c <_Bfree>
 800d7ac:	9805      	ldr	r0, [sp, #20]
 800d7ae:	4641      	mov	r1, r8
 800d7b0:	f002 fe34 	bl	801041c <_Bfree>
 800d7b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d7b6:	9805      	ldr	r0, [sp, #20]
 800d7b8:	f002 fe30 	bl	801041c <_Bfree>
 800d7bc:	9805      	ldr	r0, [sp, #20]
 800d7be:	4621      	mov	r1, r4
 800d7c0:	f002 fe2c 	bl	801041c <_Bfree>
 800d7c4:	e5f9      	b.n	800d3ba <_strtod_l+0x72>
 800d7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	dbbc      	blt.n	800d74a <_strtod_l+0x402>
 800d7d0:	4c41      	ldr	r4, [pc, #260]	@ (800d8d8 <_strtod_l+0x590>)
 800d7d2:	f1c5 050f 	rsb	r5, r5, #15
 800d7d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d7da:	4652      	mov	r2, sl
 800d7dc:	465b      	mov	r3, fp
 800d7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e2:	f7f2 ff29 	bl	8000638 <__aeabi_dmul>
 800d7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e8:	1b5d      	subs	r5, r3, r5
 800d7ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d7ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d7f2:	e78f      	b.n	800d714 <_strtod_l+0x3cc>
 800d7f4:	3316      	adds	r3, #22
 800d7f6:	dba8      	blt.n	800d74a <_strtod_l+0x402>
 800d7f8:	4b37      	ldr	r3, [pc, #220]	@ (800d8d8 <_strtod_l+0x590>)
 800d7fa:	eba9 0808 	sub.w	r8, r9, r8
 800d7fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d802:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d806:	4650      	mov	r0, sl
 800d808:	4659      	mov	r1, fp
 800d80a:	f7f3 f83f 	bl	800088c <__aeabi_ddiv>
 800d80e:	e783      	b.n	800d718 <_strtod_l+0x3d0>
 800d810:	4b32      	ldr	r3, [pc, #200]	@ (800d8dc <_strtod_l+0x594>)
 800d812:	9308      	str	r3, [sp, #32]
 800d814:	2300      	movs	r3, #0
 800d816:	1124      	asrs	r4, r4, #4
 800d818:	4650      	mov	r0, sl
 800d81a:	4659      	mov	r1, fp
 800d81c:	461e      	mov	r6, r3
 800d81e:	2c01      	cmp	r4, #1
 800d820:	dc21      	bgt.n	800d866 <_strtod_l+0x51e>
 800d822:	b10b      	cbz	r3, 800d828 <_strtod_l+0x4e0>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	492c      	ldr	r1, [pc, #176]	@ (800d8dc <_strtod_l+0x594>)
 800d82a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d82e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d832:	4652      	mov	r2, sl
 800d834:	465b      	mov	r3, fp
 800d836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d83a:	f7f2 fefd 	bl	8000638 <__aeabi_dmul>
 800d83e:	4b28      	ldr	r3, [pc, #160]	@ (800d8e0 <_strtod_l+0x598>)
 800d840:	460a      	mov	r2, r1
 800d842:	400b      	ands	r3, r1
 800d844:	4927      	ldr	r1, [pc, #156]	@ (800d8e4 <_strtod_l+0x59c>)
 800d846:	428b      	cmp	r3, r1
 800d848:	4682      	mov	sl, r0
 800d84a:	d898      	bhi.n	800d77e <_strtod_l+0x436>
 800d84c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d850:	428b      	cmp	r3, r1
 800d852:	bf86      	itte	hi
 800d854:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d8e8 <_strtod_l+0x5a0>
 800d858:	f04f 3aff 	movhi.w	sl, #4294967295
 800d85c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d860:	2300      	movs	r3, #0
 800d862:	9308      	str	r3, [sp, #32]
 800d864:	e07a      	b.n	800d95c <_strtod_l+0x614>
 800d866:	07e2      	lsls	r2, r4, #31
 800d868:	d505      	bpl.n	800d876 <_strtod_l+0x52e>
 800d86a:	9b08      	ldr	r3, [sp, #32]
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	f7f2 fee2 	bl	8000638 <__aeabi_dmul>
 800d874:	2301      	movs	r3, #1
 800d876:	9a08      	ldr	r2, [sp, #32]
 800d878:	3208      	adds	r2, #8
 800d87a:	3601      	adds	r6, #1
 800d87c:	1064      	asrs	r4, r4, #1
 800d87e:	9208      	str	r2, [sp, #32]
 800d880:	e7cd      	b.n	800d81e <_strtod_l+0x4d6>
 800d882:	d0ed      	beq.n	800d860 <_strtod_l+0x518>
 800d884:	4264      	negs	r4, r4
 800d886:	f014 020f 	ands.w	r2, r4, #15
 800d88a:	d00a      	beq.n	800d8a2 <_strtod_l+0x55a>
 800d88c:	4b12      	ldr	r3, [pc, #72]	@ (800d8d8 <_strtod_l+0x590>)
 800d88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	f7f2 fff7 	bl	800088c <__aeabi_ddiv>
 800d89e:	4682      	mov	sl, r0
 800d8a0:	468b      	mov	fp, r1
 800d8a2:	1124      	asrs	r4, r4, #4
 800d8a4:	d0dc      	beq.n	800d860 <_strtod_l+0x518>
 800d8a6:	2c1f      	cmp	r4, #31
 800d8a8:	dd20      	ble.n	800d8ec <_strtod_l+0x5a4>
 800d8aa:	2400      	movs	r4, #0
 800d8ac:	46a0      	mov	r8, r4
 800d8ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800d8b0:	46a1      	mov	r9, r4
 800d8b2:	9a05      	ldr	r2, [sp, #20]
 800d8b4:	2322      	movs	r3, #34	@ 0x22
 800d8b6:	f04f 0a00 	mov.w	sl, #0
 800d8ba:	f04f 0b00 	mov.w	fp, #0
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	e768      	b.n	800d794 <_strtod_l+0x44c>
 800d8c2:	bf00      	nop
 800d8c4:	080119ad 	.word	0x080119ad
 800d8c8:	0801194c 	.word	0x0801194c
 800d8cc:	080119a5 	.word	0x080119a5
 800d8d0:	080119e4 	.word	0x080119e4
 800d8d4:	08011d75 	.word	0x08011d75
 800d8d8:	08011b60 	.word	0x08011b60
 800d8dc:	08011b38 	.word	0x08011b38
 800d8e0:	7ff00000 	.word	0x7ff00000
 800d8e4:	7ca00000 	.word	0x7ca00000
 800d8e8:	7fefffff 	.word	0x7fefffff
 800d8ec:	f014 0310 	ands.w	r3, r4, #16
 800d8f0:	bf18      	it	ne
 800d8f2:	236a      	movne	r3, #106	@ 0x6a
 800d8f4:	4ea9      	ldr	r6, [pc, #676]	@ (800db9c <_strtod_l+0x854>)
 800d8f6:	9308      	str	r3, [sp, #32]
 800d8f8:	4650      	mov	r0, sl
 800d8fa:	4659      	mov	r1, fp
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	07e2      	lsls	r2, r4, #31
 800d900:	d504      	bpl.n	800d90c <_strtod_l+0x5c4>
 800d902:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d906:	f7f2 fe97 	bl	8000638 <__aeabi_dmul>
 800d90a:	2301      	movs	r3, #1
 800d90c:	1064      	asrs	r4, r4, #1
 800d90e:	f106 0608 	add.w	r6, r6, #8
 800d912:	d1f4      	bne.n	800d8fe <_strtod_l+0x5b6>
 800d914:	b10b      	cbz	r3, 800d91a <_strtod_l+0x5d2>
 800d916:	4682      	mov	sl, r0
 800d918:	468b      	mov	fp, r1
 800d91a:	9b08      	ldr	r3, [sp, #32]
 800d91c:	b1b3      	cbz	r3, 800d94c <_strtod_l+0x604>
 800d91e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d922:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d926:	2b00      	cmp	r3, #0
 800d928:	4659      	mov	r1, fp
 800d92a:	dd0f      	ble.n	800d94c <_strtod_l+0x604>
 800d92c:	2b1f      	cmp	r3, #31
 800d92e:	dd55      	ble.n	800d9dc <_strtod_l+0x694>
 800d930:	2b34      	cmp	r3, #52	@ 0x34
 800d932:	bfde      	ittt	le
 800d934:	f04f 33ff 	movle.w	r3, #4294967295
 800d938:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d93c:	4093      	lslle	r3, r2
 800d93e:	f04f 0a00 	mov.w	sl, #0
 800d942:	bfcc      	ite	gt
 800d944:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d948:	ea03 0b01 	andle.w	fp, r3, r1
 800d94c:	2200      	movs	r2, #0
 800d94e:	2300      	movs	r3, #0
 800d950:	4650      	mov	r0, sl
 800d952:	4659      	mov	r1, fp
 800d954:	f7f3 f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d1a6      	bne.n	800d8aa <_strtod_l+0x562>
 800d95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d962:	9805      	ldr	r0, [sp, #20]
 800d964:	462b      	mov	r3, r5
 800d966:	463a      	mov	r2, r7
 800d968:	f002 fdc0 	bl	80104ec <__s2b>
 800d96c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d96e:	2800      	cmp	r0, #0
 800d970:	f43f af05 	beq.w	800d77e <_strtod_l+0x436>
 800d974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d976:	2a00      	cmp	r2, #0
 800d978:	eba9 0308 	sub.w	r3, r9, r8
 800d97c:	bfa8      	it	ge
 800d97e:	2300      	movge	r3, #0
 800d980:	9312      	str	r3, [sp, #72]	@ 0x48
 800d982:	2400      	movs	r4, #0
 800d984:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d988:	9316      	str	r3, [sp, #88]	@ 0x58
 800d98a:	46a0      	mov	r8, r4
 800d98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d98e:	9805      	ldr	r0, [sp, #20]
 800d990:	6859      	ldr	r1, [r3, #4]
 800d992:	f002 fd03 	bl	801039c <_Balloc>
 800d996:	4681      	mov	r9, r0
 800d998:	2800      	cmp	r0, #0
 800d99a:	f43f aef4 	beq.w	800d786 <_strtod_l+0x43e>
 800d99e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9a0:	691a      	ldr	r2, [r3, #16]
 800d9a2:	3202      	adds	r2, #2
 800d9a4:	f103 010c 	add.w	r1, r3, #12
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	300c      	adds	r0, #12
 800d9ac:	f001 faf5 	bl	800ef9a <memcpy>
 800d9b0:	ec4b ab10 	vmov	d0, sl, fp
 800d9b4:	9805      	ldr	r0, [sp, #20]
 800d9b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d9b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d9ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d9be:	f003 f8d1 	bl	8010b64 <__d2b>
 800d9c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f43f aede 	beq.w	800d786 <_strtod_l+0x43e>
 800d9ca:	9805      	ldr	r0, [sp, #20]
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	f002 fe23 	bl	8010618 <__i2b>
 800d9d2:	4680      	mov	r8, r0
 800d9d4:	b948      	cbnz	r0, 800d9ea <_strtod_l+0x6a2>
 800d9d6:	f04f 0800 	mov.w	r8, #0
 800d9da:	e6d4      	b.n	800d786 <_strtod_l+0x43e>
 800d9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e4:	ea03 0a0a 	and.w	sl, r3, sl
 800d9e8:	e7b0      	b.n	800d94c <_strtod_l+0x604>
 800d9ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d9ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d9ee:	2d00      	cmp	r5, #0
 800d9f0:	bfab      	itete	ge
 800d9f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d9f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d9f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d9f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d9fa:	bfac      	ite	ge
 800d9fc:	18ef      	addge	r7, r5, r3
 800d9fe:	1b5e      	sublt	r6, r3, r5
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	1aed      	subs	r5, r5, r3
 800da04:	4415      	add	r5, r2
 800da06:	4b66      	ldr	r3, [pc, #408]	@ (800dba0 <_strtod_l+0x858>)
 800da08:	3d01      	subs	r5, #1
 800da0a:	429d      	cmp	r5, r3
 800da0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800da10:	da50      	bge.n	800dab4 <_strtod_l+0x76c>
 800da12:	1b5b      	subs	r3, r3, r5
 800da14:	2b1f      	cmp	r3, #31
 800da16:	eba2 0203 	sub.w	r2, r2, r3
 800da1a:	f04f 0101 	mov.w	r1, #1
 800da1e:	dc3d      	bgt.n	800da9c <_strtod_l+0x754>
 800da20:	fa01 f303 	lsl.w	r3, r1, r3
 800da24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da26:	2300      	movs	r3, #0
 800da28:	9310      	str	r3, [sp, #64]	@ 0x40
 800da2a:	18bd      	adds	r5, r7, r2
 800da2c:	9b08      	ldr	r3, [sp, #32]
 800da2e:	42af      	cmp	r7, r5
 800da30:	4416      	add	r6, r2
 800da32:	441e      	add	r6, r3
 800da34:	463b      	mov	r3, r7
 800da36:	bfa8      	it	ge
 800da38:	462b      	movge	r3, r5
 800da3a:	42b3      	cmp	r3, r6
 800da3c:	bfa8      	it	ge
 800da3e:	4633      	movge	r3, r6
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfc2      	ittt	gt
 800da44:	1aed      	subgt	r5, r5, r3
 800da46:	1af6      	subgt	r6, r6, r3
 800da48:	1aff      	subgt	r7, r7, r3
 800da4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dd16      	ble.n	800da7e <_strtod_l+0x736>
 800da50:	4641      	mov	r1, r8
 800da52:	9805      	ldr	r0, [sp, #20]
 800da54:	461a      	mov	r2, r3
 800da56:	f002 fe9f 	bl	8010798 <__pow5mult>
 800da5a:	4680      	mov	r8, r0
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d0ba      	beq.n	800d9d6 <_strtod_l+0x68e>
 800da60:	4601      	mov	r1, r0
 800da62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800da64:	9805      	ldr	r0, [sp, #20]
 800da66:	f002 fded 	bl	8010644 <__multiply>
 800da6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f43f ae8a 	beq.w	800d786 <_strtod_l+0x43e>
 800da72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da74:	9805      	ldr	r0, [sp, #20]
 800da76:	f002 fcd1 	bl	801041c <_Bfree>
 800da7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800da7e:	2d00      	cmp	r5, #0
 800da80:	dc1d      	bgt.n	800dabe <_strtod_l+0x776>
 800da82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	dd23      	ble.n	800dad0 <_strtod_l+0x788>
 800da88:	4649      	mov	r1, r9
 800da8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800da8c:	9805      	ldr	r0, [sp, #20]
 800da8e:	f002 fe83 	bl	8010798 <__pow5mult>
 800da92:	4681      	mov	r9, r0
 800da94:	b9e0      	cbnz	r0, 800dad0 <_strtod_l+0x788>
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	e674      	b.n	800d786 <_strtod_l+0x43e>
 800da9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800daa0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800daa4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800daa8:	35e2      	adds	r5, #226	@ 0xe2
 800daaa:	fa01 f305 	lsl.w	r3, r1, r5
 800daae:	9310      	str	r3, [sp, #64]	@ 0x40
 800dab0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dab2:	e7ba      	b.n	800da2a <_strtod_l+0x6e2>
 800dab4:	2300      	movs	r3, #0
 800dab6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dab8:	2301      	movs	r3, #1
 800daba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dabc:	e7b5      	b.n	800da2a <_strtod_l+0x6e2>
 800dabe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dac0:	9805      	ldr	r0, [sp, #20]
 800dac2:	462a      	mov	r2, r5
 800dac4:	f002 fec2 	bl	801084c <__lshift>
 800dac8:	901a      	str	r0, [sp, #104]	@ 0x68
 800daca:	2800      	cmp	r0, #0
 800dacc:	d1d9      	bne.n	800da82 <_strtod_l+0x73a>
 800dace:	e65a      	b.n	800d786 <_strtod_l+0x43e>
 800dad0:	2e00      	cmp	r6, #0
 800dad2:	dd07      	ble.n	800dae4 <_strtod_l+0x79c>
 800dad4:	4649      	mov	r1, r9
 800dad6:	9805      	ldr	r0, [sp, #20]
 800dad8:	4632      	mov	r2, r6
 800dada:	f002 feb7 	bl	801084c <__lshift>
 800dade:	4681      	mov	r9, r0
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d0d8      	beq.n	800da96 <_strtod_l+0x74e>
 800dae4:	2f00      	cmp	r7, #0
 800dae6:	dd08      	ble.n	800dafa <_strtod_l+0x7b2>
 800dae8:	4641      	mov	r1, r8
 800daea:	9805      	ldr	r0, [sp, #20]
 800daec:	463a      	mov	r2, r7
 800daee:	f002 fead 	bl	801084c <__lshift>
 800daf2:	4680      	mov	r8, r0
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f43f ae46 	beq.w	800d786 <_strtod_l+0x43e>
 800dafa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dafc:	9805      	ldr	r0, [sp, #20]
 800dafe:	464a      	mov	r2, r9
 800db00:	f002 ff2c 	bl	801095c <__mdiff>
 800db04:	4604      	mov	r4, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	f43f ae3d 	beq.w	800d786 <_strtod_l+0x43e>
 800db0c:	68c3      	ldr	r3, [r0, #12]
 800db0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db10:	2300      	movs	r3, #0
 800db12:	60c3      	str	r3, [r0, #12]
 800db14:	4641      	mov	r1, r8
 800db16:	f002 ff05 	bl	8010924 <__mcmp>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	da46      	bge.n	800dbac <_strtod_l+0x864>
 800db1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db20:	ea53 030a 	orrs.w	r3, r3, sl
 800db24:	d16c      	bne.n	800dc00 <_strtod_l+0x8b8>
 800db26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d168      	bne.n	800dc00 <_strtod_l+0x8b8>
 800db2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db32:	0d1b      	lsrs	r3, r3, #20
 800db34:	051b      	lsls	r3, r3, #20
 800db36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800db3a:	d961      	bls.n	800dc00 <_strtod_l+0x8b8>
 800db3c:	6963      	ldr	r3, [r4, #20]
 800db3e:	b913      	cbnz	r3, 800db46 <_strtod_l+0x7fe>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	2b01      	cmp	r3, #1
 800db44:	dd5c      	ble.n	800dc00 <_strtod_l+0x8b8>
 800db46:	4621      	mov	r1, r4
 800db48:	2201      	movs	r2, #1
 800db4a:	9805      	ldr	r0, [sp, #20]
 800db4c:	f002 fe7e 	bl	801084c <__lshift>
 800db50:	4641      	mov	r1, r8
 800db52:	4604      	mov	r4, r0
 800db54:	f002 fee6 	bl	8010924 <__mcmp>
 800db58:	2800      	cmp	r0, #0
 800db5a:	dd51      	ble.n	800dc00 <_strtod_l+0x8b8>
 800db5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db60:	9a08      	ldr	r2, [sp, #32]
 800db62:	0d1b      	lsrs	r3, r3, #20
 800db64:	051b      	lsls	r3, r3, #20
 800db66:	2a00      	cmp	r2, #0
 800db68:	d06b      	beq.n	800dc42 <_strtod_l+0x8fa>
 800db6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800db6e:	d868      	bhi.n	800dc42 <_strtod_l+0x8fa>
 800db70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800db74:	f67f ae9d 	bls.w	800d8b2 <_strtod_l+0x56a>
 800db78:	4b0a      	ldr	r3, [pc, #40]	@ (800dba4 <_strtod_l+0x85c>)
 800db7a:	4650      	mov	r0, sl
 800db7c:	4659      	mov	r1, fp
 800db7e:	2200      	movs	r2, #0
 800db80:	f7f2 fd5a 	bl	8000638 <__aeabi_dmul>
 800db84:	4b08      	ldr	r3, [pc, #32]	@ (800dba8 <_strtod_l+0x860>)
 800db86:	400b      	ands	r3, r1
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f47f ae05 	bne.w	800d79c <_strtod_l+0x454>
 800db92:	9a05      	ldr	r2, [sp, #20]
 800db94:	2322      	movs	r3, #34	@ 0x22
 800db96:	6013      	str	r3, [r2, #0]
 800db98:	e600      	b.n	800d79c <_strtod_l+0x454>
 800db9a:	bf00      	nop
 800db9c:	08011978 	.word	0x08011978
 800dba0:	fffffc02 	.word	0xfffffc02
 800dba4:	39500000 	.word	0x39500000
 800dba8:	7ff00000 	.word	0x7ff00000
 800dbac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dbb0:	d165      	bne.n	800dc7e <_strtod_l+0x936>
 800dbb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dbb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbb8:	b35a      	cbz	r2, 800dc12 <_strtod_l+0x8ca>
 800dbba:	4a9f      	ldr	r2, [pc, #636]	@ (800de38 <_strtod_l+0xaf0>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d12b      	bne.n	800dc18 <_strtod_l+0x8d0>
 800dbc0:	9b08      	ldr	r3, [sp, #32]
 800dbc2:	4651      	mov	r1, sl
 800dbc4:	b303      	cbz	r3, 800dc08 <_strtod_l+0x8c0>
 800dbc6:	4b9d      	ldr	r3, [pc, #628]	@ (800de3c <_strtod_l+0xaf4>)
 800dbc8:	465a      	mov	r2, fp
 800dbca:	4013      	ands	r3, r2
 800dbcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd4:	d81b      	bhi.n	800dc0e <_strtod_l+0x8c6>
 800dbd6:	0d1b      	lsrs	r3, r3, #20
 800dbd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe0:	4299      	cmp	r1, r3
 800dbe2:	d119      	bne.n	800dc18 <_strtod_l+0x8d0>
 800dbe4:	4b96      	ldr	r3, [pc, #600]	@ (800de40 <_strtod_l+0xaf8>)
 800dbe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d102      	bne.n	800dbf2 <_strtod_l+0x8aa>
 800dbec:	3101      	adds	r1, #1
 800dbee:	f43f adca 	beq.w	800d786 <_strtod_l+0x43e>
 800dbf2:	4b92      	ldr	r3, [pc, #584]	@ (800de3c <_strtod_l+0xaf4>)
 800dbf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbf6:	401a      	ands	r2, r3
 800dbf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dbfc:	f04f 0a00 	mov.w	sl, #0
 800dc00:	9b08      	ldr	r3, [sp, #32]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1b8      	bne.n	800db78 <_strtod_l+0x830>
 800dc06:	e5c9      	b.n	800d79c <_strtod_l+0x454>
 800dc08:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0c:	e7e8      	b.n	800dbe0 <_strtod_l+0x898>
 800dc0e:	4613      	mov	r3, r2
 800dc10:	e7e6      	b.n	800dbe0 <_strtod_l+0x898>
 800dc12:	ea53 030a 	orrs.w	r3, r3, sl
 800dc16:	d0a1      	beq.n	800db5c <_strtod_l+0x814>
 800dc18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc1a:	b1db      	cbz	r3, 800dc54 <_strtod_l+0x90c>
 800dc1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc1e:	4213      	tst	r3, r2
 800dc20:	d0ee      	beq.n	800dc00 <_strtod_l+0x8b8>
 800dc22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc24:	9a08      	ldr	r2, [sp, #32]
 800dc26:	4650      	mov	r0, sl
 800dc28:	4659      	mov	r1, fp
 800dc2a:	b1bb      	cbz	r3, 800dc5c <_strtod_l+0x914>
 800dc2c:	f7ff fb6e 	bl	800d30c <sulp>
 800dc30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc34:	ec53 2b10 	vmov	r2, r3, d0
 800dc38:	f7f2 fb48 	bl	80002cc <__adddf3>
 800dc3c:	4682      	mov	sl, r0
 800dc3e:	468b      	mov	fp, r1
 800dc40:	e7de      	b.n	800dc00 <_strtod_l+0x8b8>
 800dc42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc4e:	f04f 3aff 	mov.w	sl, #4294967295
 800dc52:	e7d5      	b.n	800dc00 <_strtod_l+0x8b8>
 800dc54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dc56:	ea13 0f0a 	tst.w	r3, sl
 800dc5a:	e7e1      	b.n	800dc20 <_strtod_l+0x8d8>
 800dc5c:	f7ff fb56 	bl	800d30c <sulp>
 800dc60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc64:	ec53 2b10 	vmov	r2, r3, d0
 800dc68:	f7f2 fb2e 	bl	80002c8 <__aeabi_dsub>
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2300      	movs	r3, #0
 800dc70:	4682      	mov	sl, r0
 800dc72:	468b      	mov	fp, r1
 800dc74:	f7f2 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d0c1      	beq.n	800dc00 <_strtod_l+0x8b8>
 800dc7c:	e619      	b.n	800d8b2 <_strtod_l+0x56a>
 800dc7e:	4641      	mov	r1, r8
 800dc80:	4620      	mov	r0, r4
 800dc82:	f002 ffc7 	bl	8010c14 <__ratio>
 800dc86:	ec57 6b10 	vmov	r6, r7, d0
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 ff4c 	bl	8000b30 <__aeabi_dcmple>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d06f      	beq.n	800dd7c <_strtod_l+0xa34>
 800dc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d17a      	bne.n	800dd98 <_strtod_l+0xa50>
 800dca2:	f1ba 0f00 	cmp.w	sl, #0
 800dca6:	d158      	bne.n	800dd5a <_strtod_l+0xa12>
 800dca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d15a      	bne.n	800dd68 <_strtod_l+0xa20>
 800dcb2:	4b64      	ldr	r3, [pc, #400]	@ (800de44 <_strtod_l+0xafc>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d159      	bne.n	800dd76 <_strtod_l+0xa2e>
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	4b60      	ldr	r3, [pc, #384]	@ (800de48 <_strtod_l+0xb00>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f7f2 fcb5 	bl	8000638 <__aeabi_dmul>
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460f      	mov	r7, r1
 800dcd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dcd6:	9606      	str	r6, [sp, #24]
 800dcd8:	9307      	str	r3, [sp, #28]
 800dcda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dcde:	4d57      	ldr	r5, [pc, #348]	@ (800de3c <_strtod_l+0xaf4>)
 800dce0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dce6:	401d      	ands	r5, r3
 800dce8:	4b58      	ldr	r3, [pc, #352]	@ (800de4c <_strtod_l+0xb04>)
 800dcea:	429d      	cmp	r5, r3
 800dcec:	f040 80b2 	bne.w	800de54 <_strtod_l+0xb0c>
 800dcf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dcf6:	ec4b ab10 	vmov	d0, sl, fp
 800dcfa:	f002 fec3 	bl	8010a84 <__ulp>
 800dcfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd02:	ec51 0b10 	vmov	r0, r1, d0
 800dd06:	f7f2 fc97 	bl	8000638 <__aeabi_dmul>
 800dd0a:	4652      	mov	r2, sl
 800dd0c:	465b      	mov	r3, fp
 800dd0e:	f7f2 fadd 	bl	80002cc <__adddf3>
 800dd12:	460b      	mov	r3, r1
 800dd14:	4949      	ldr	r1, [pc, #292]	@ (800de3c <_strtod_l+0xaf4>)
 800dd16:	4a4e      	ldr	r2, [pc, #312]	@ (800de50 <_strtod_l+0xb08>)
 800dd18:	4019      	ands	r1, r3
 800dd1a:	4291      	cmp	r1, r2
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	d942      	bls.n	800dda6 <_strtod_l+0xa5e>
 800dd20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd22:	4b47      	ldr	r3, [pc, #284]	@ (800de40 <_strtod_l+0xaf8>)
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d103      	bne.n	800dd30 <_strtod_l+0x9e8>
 800dd28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	f43f ad2b 	beq.w	800d786 <_strtod_l+0x43e>
 800dd30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800de40 <_strtod_l+0xaf8>
 800dd34:	f04f 3aff 	mov.w	sl, #4294967295
 800dd38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd3a:	9805      	ldr	r0, [sp, #20]
 800dd3c:	f002 fb6e 	bl	801041c <_Bfree>
 800dd40:	9805      	ldr	r0, [sp, #20]
 800dd42:	4649      	mov	r1, r9
 800dd44:	f002 fb6a 	bl	801041c <_Bfree>
 800dd48:	9805      	ldr	r0, [sp, #20]
 800dd4a:	4641      	mov	r1, r8
 800dd4c:	f002 fb66 	bl	801041c <_Bfree>
 800dd50:	9805      	ldr	r0, [sp, #20]
 800dd52:	4621      	mov	r1, r4
 800dd54:	f002 fb62 	bl	801041c <_Bfree>
 800dd58:	e618      	b.n	800d98c <_strtod_l+0x644>
 800dd5a:	f1ba 0f01 	cmp.w	sl, #1
 800dd5e:	d103      	bne.n	800dd68 <_strtod_l+0xa20>
 800dd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f43f ada5 	beq.w	800d8b2 <_strtod_l+0x56a>
 800dd68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800de18 <_strtod_l+0xad0>
 800dd6c:	4f35      	ldr	r7, [pc, #212]	@ (800de44 <_strtod_l+0xafc>)
 800dd6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dd72:	2600      	movs	r6, #0
 800dd74:	e7b1      	b.n	800dcda <_strtod_l+0x992>
 800dd76:	4f34      	ldr	r7, [pc, #208]	@ (800de48 <_strtod_l+0xb00>)
 800dd78:	2600      	movs	r6, #0
 800dd7a:	e7aa      	b.n	800dcd2 <_strtod_l+0x98a>
 800dd7c:	4b32      	ldr	r3, [pc, #200]	@ (800de48 <_strtod_l+0xb00>)
 800dd7e:	4630      	mov	r0, r6
 800dd80:	4639      	mov	r1, r7
 800dd82:	2200      	movs	r2, #0
 800dd84:	f7f2 fc58 	bl	8000638 <__aeabi_dmul>
 800dd88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d09f      	beq.n	800dcd2 <_strtod_l+0x98a>
 800dd92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dd96:	e7a0      	b.n	800dcda <_strtod_l+0x992>
 800dd98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800de20 <_strtod_l+0xad8>
 800dd9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dda0:	ec57 6b17 	vmov	r6, r7, d7
 800dda4:	e799      	b.n	800dcda <_strtod_l+0x992>
 800dda6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ddaa:	9b08      	ldr	r3, [sp, #32]
 800ddac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1c1      	bne.n	800dd38 <_strtod_l+0x9f0>
 800ddb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddb8:	0d1b      	lsrs	r3, r3, #20
 800ddba:	051b      	lsls	r3, r3, #20
 800ddbc:	429d      	cmp	r5, r3
 800ddbe:	d1bb      	bne.n	800dd38 <_strtod_l+0x9f0>
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 ff98 	bl	8000cf8 <__aeabi_d2lz>
 800ddc8:	f7f2 fc08 	bl	80005dc <__aeabi_l2d>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	460b      	mov	r3, r1
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	4639      	mov	r1, r7
 800ddd4:	f7f2 fa78 	bl	80002c8 <__aeabi_dsub>
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4602      	mov	r2, r0
 800dddc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dde0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dde4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde6:	ea46 060a 	orr.w	r6, r6, sl
 800ddea:	431e      	orrs	r6, r3
 800ddec:	d06f      	beq.n	800dece <_strtod_l+0xb86>
 800ddee:	a30e      	add	r3, pc, #56	@ (adr r3, 800de28 <_strtod_l+0xae0>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	f7f2 fe92 	bl	8000b1c <__aeabi_dcmplt>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f47f accf 	bne.w	800d79c <_strtod_l+0x454>
 800ddfe:	a30c      	add	r3, pc, #48	@ (adr r3, 800de30 <_strtod_l+0xae8>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de08:	f7f2 fea6 	bl	8000b58 <__aeabi_dcmpgt>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d093      	beq.n	800dd38 <_strtod_l+0x9f0>
 800de10:	e4c4      	b.n	800d79c <_strtod_l+0x454>
 800de12:	bf00      	nop
 800de14:	f3af 8000 	nop.w
 800de18:	00000000 	.word	0x00000000
 800de1c:	bff00000 	.word	0xbff00000
 800de20:	00000000 	.word	0x00000000
 800de24:	3ff00000 	.word	0x3ff00000
 800de28:	94a03595 	.word	0x94a03595
 800de2c:	3fdfffff 	.word	0x3fdfffff
 800de30:	35afe535 	.word	0x35afe535
 800de34:	3fe00000 	.word	0x3fe00000
 800de38:	000fffff 	.word	0x000fffff
 800de3c:	7ff00000 	.word	0x7ff00000
 800de40:	7fefffff 	.word	0x7fefffff
 800de44:	3ff00000 	.word	0x3ff00000
 800de48:	3fe00000 	.word	0x3fe00000
 800de4c:	7fe00000 	.word	0x7fe00000
 800de50:	7c9fffff 	.word	0x7c9fffff
 800de54:	9b08      	ldr	r3, [sp, #32]
 800de56:	b323      	cbz	r3, 800dea2 <_strtod_l+0xb5a>
 800de58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800de5c:	d821      	bhi.n	800dea2 <_strtod_l+0xb5a>
 800de5e:	a328      	add	r3, pc, #160	@ (adr r3, 800df00 <_strtod_l+0xbb8>)
 800de60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de64:	4630      	mov	r0, r6
 800de66:	4639      	mov	r1, r7
 800de68:	f7f2 fe62 	bl	8000b30 <__aeabi_dcmple>
 800de6c:	b1a0      	cbz	r0, 800de98 <_strtod_l+0xb50>
 800de6e:	4639      	mov	r1, r7
 800de70:	4630      	mov	r0, r6
 800de72:	f7f2 feb9 	bl	8000be8 <__aeabi_d2uiz>
 800de76:	2801      	cmp	r0, #1
 800de78:	bf38      	it	cc
 800de7a:	2001      	movcc	r0, #1
 800de7c:	f7f2 fb62 	bl	8000544 <__aeabi_ui2d>
 800de80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	b9fb      	cbnz	r3, 800dec8 <_strtod_l+0xb80>
 800de88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de8c:	9014      	str	r0, [sp, #80]	@ 0x50
 800de8e:	9315      	str	r3, [sp, #84]	@ 0x54
 800de90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800de94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800de9e:	1b5b      	subs	r3, r3, r5
 800dea0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dea2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dea6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800deaa:	f002 fdeb 	bl	8010a84 <__ulp>
 800deae:	4650      	mov	r0, sl
 800deb0:	ec53 2b10 	vmov	r2, r3, d0
 800deb4:	4659      	mov	r1, fp
 800deb6:	f7f2 fbbf 	bl	8000638 <__aeabi_dmul>
 800deba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800debe:	f7f2 fa05 	bl	80002cc <__adddf3>
 800dec2:	4682      	mov	sl, r0
 800dec4:	468b      	mov	fp, r1
 800dec6:	e770      	b.n	800ddaa <_strtod_l+0xa62>
 800dec8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800decc:	e7e0      	b.n	800de90 <_strtod_l+0xb48>
 800dece:	a30e      	add	r3, pc, #56	@ (adr r3, 800df08 <_strtod_l+0xbc0>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 fe22 	bl	8000b1c <__aeabi_dcmplt>
 800ded8:	e798      	b.n	800de0c <_strtod_l+0xac4>
 800deda:	2300      	movs	r3, #0
 800dedc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dede:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	f7ff ba6d 	b.w	800d3c2 <_strtod_l+0x7a>
 800dee8:	2a65      	cmp	r2, #101	@ 0x65
 800deea:	f43f ab66 	beq.w	800d5ba <_strtod_l+0x272>
 800deee:	2a45      	cmp	r2, #69	@ 0x45
 800def0:	f43f ab63 	beq.w	800d5ba <_strtod_l+0x272>
 800def4:	2301      	movs	r3, #1
 800def6:	f7ff bb9e 	b.w	800d636 <_strtod_l+0x2ee>
 800defa:	bf00      	nop
 800defc:	f3af 8000 	nop.w
 800df00:	ffc00000 	.word	0xffc00000
 800df04:	41dfffff 	.word	0x41dfffff
 800df08:	94a03595 	.word	0x94a03595
 800df0c:	3fcfffff 	.word	0x3fcfffff

0800df10 <_strtod_r>:
 800df10:	4b01      	ldr	r3, [pc, #4]	@ (800df18 <_strtod_r+0x8>)
 800df12:	f7ff ba19 	b.w	800d348 <_strtod_l>
 800df16:	bf00      	nop
 800df18:	2000012c 	.word	0x2000012c

0800df1c <strtod>:
 800df1c:	460a      	mov	r2, r1
 800df1e:	4601      	mov	r1, r0
 800df20:	4802      	ldr	r0, [pc, #8]	@ (800df2c <strtod+0x10>)
 800df22:	4b03      	ldr	r3, [pc, #12]	@ (800df30 <strtod+0x14>)
 800df24:	6800      	ldr	r0, [r0, #0]
 800df26:	f7ff ba0f 	b.w	800d348 <_strtod_l>
 800df2a:	bf00      	nop
 800df2c:	20000298 	.word	0x20000298
 800df30:	2000012c 	.word	0x2000012c

0800df34 <__cvt>:
 800df34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df38:	ec57 6b10 	vmov	r6, r7, d0
 800df3c:	2f00      	cmp	r7, #0
 800df3e:	460c      	mov	r4, r1
 800df40:	4619      	mov	r1, r3
 800df42:	463b      	mov	r3, r7
 800df44:	bfbb      	ittet	lt
 800df46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800df4a:	461f      	movlt	r7, r3
 800df4c:	2300      	movge	r3, #0
 800df4e:	232d      	movlt	r3, #45	@ 0x2d
 800df50:	700b      	strb	r3, [r1, #0]
 800df52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800df58:	4691      	mov	r9, r2
 800df5a:	f023 0820 	bic.w	r8, r3, #32
 800df5e:	bfbc      	itt	lt
 800df60:	4632      	movlt	r2, r6
 800df62:	4616      	movlt	r6, r2
 800df64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df68:	d005      	beq.n	800df76 <__cvt+0x42>
 800df6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800df6e:	d100      	bne.n	800df72 <__cvt+0x3e>
 800df70:	3401      	adds	r4, #1
 800df72:	2102      	movs	r1, #2
 800df74:	e000      	b.n	800df78 <__cvt+0x44>
 800df76:	2103      	movs	r1, #3
 800df78:	ab03      	add	r3, sp, #12
 800df7a:	9301      	str	r3, [sp, #4]
 800df7c:	ab02      	add	r3, sp, #8
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	ec47 6b10 	vmov	d0, r6, r7
 800df84:	4653      	mov	r3, sl
 800df86:	4622      	mov	r2, r4
 800df88:	f001 f8ae 	bl	800f0e8 <_dtoa_r>
 800df8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800df90:	4605      	mov	r5, r0
 800df92:	d119      	bne.n	800dfc8 <__cvt+0x94>
 800df94:	f019 0f01 	tst.w	r9, #1
 800df98:	d00e      	beq.n	800dfb8 <__cvt+0x84>
 800df9a:	eb00 0904 	add.w	r9, r0, r4
 800df9e:	2200      	movs	r2, #0
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 800dfaa:	b108      	cbz	r0, 800dfb0 <__cvt+0x7c>
 800dfac:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfb0:	2230      	movs	r2, #48	@ 0x30
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	454b      	cmp	r3, r9
 800dfb6:	d31e      	bcc.n	800dff6 <__cvt+0xc2>
 800dfb8:	9b03      	ldr	r3, [sp, #12]
 800dfba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfbc:	1b5b      	subs	r3, r3, r5
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	6013      	str	r3, [r2, #0]
 800dfc2:	b004      	add	sp, #16
 800dfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dfcc:	eb00 0904 	add.w	r9, r0, r4
 800dfd0:	d1e5      	bne.n	800df9e <__cvt+0x6a>
 800dfd2:	7803      	ldrb	r3, [r0, #0]
 800dfd4:	2b30      	cmp	r3, #48	@ 0x30
 800dfd6:	d10a      	bne.n	800dfee <__cvt+0xba>
 800dfd8:	2200      	movs	r2, #0
 800dfda:	2300      	movs	r3, #0
 800dfdc:	4630      	mov	r0, r6
 800dfde:	4639      	mov	r1, r7
 800dfe0:	f7f2 fd92 	bl	8000b08 <__aeabi_dcmpeq>
 800dfe4:	b918      	cbnz	r0, 800dfee <__cvt+0xba>
 800dfe6:	f1c4 0401 	rsb	r4, r4, #1
 800dfea:	f8ca 4000 	str.w	r4, [sl]
 800dfee:	f8da 3000 	ldr.w	r3, [sl]
 800dff2:	4499      	add	r9, r3
 800dff4:	e7d3      	b.n	800df9e <__cvt+0x6a>
 800dff6:	1c59      	adds	r1, r3, #1
 800dff8:	9103      	str	r1, [sp, #12]
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	e7d9      	b.n	800dfb2 <__cvt+0x7e>

0800dffe <__exponent>:
 800dffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e000:	2900      	cmp	r1, #0
 800e002:	bfba      	itte	lt
 800e004:	4249      	neglt	r1, r1
 800e006:	232d      	movlt	r3, #45	@ 0x2d
 800e008:	232b      	movge	r3, #43	@ 0x2b
 800e00a:	2909      	cmp	r1, #9
 800e00c:	7002      	strb	r2, [r0, #0]
 800e00e:	7043      	strb	r3, [r0, #1]
 800e010:	dd29      	ble.n	800e066 <__exponent+0x68>
 800e012:	f10d 0307 	add.w	r3, sp, #7
 800e016:	461d      	mov	r5, r3
 800e018:	270a      	movs	r7, #10
 800e01a:	461a      	mov	r2, r3
 800e01c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e020:	fb07 1416 	mls	r4, r7, r6, r1
 800e024:	3430      	adds	r4, #48	@ 0x30
 800e026:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e02a:	460c      	mov	r4, r1
 800e02c:	2c63      	cmp	r4, #99	@ 0x63
 800e02e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e032:	4631      	mov	r1, r6
 800e034:	dcf1      	bgt.n	800e01a <__exponent+0x1c>
 800e036:	3130      	adds	r1, #48	@ 0x30
 800e038:	1e94      	subs	r4, r2, #2
 800e03a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e03e:	1c41      	adds	r1, r0, #1
 800e040:	4623      	mov	r3, r4
 800e042:	42ab      	cmp	r3, r5
 800e044:	d30a      	bcc.n	800e05c <__exponent+0x5e>
 800e046:	f10d 0309 	add.w	r3, sp, #9
 800e04a:	1a9b      	subs	r3, r3, r2
 800e04c:	42ac      	cmp	r4, r5
 800e04e:	bf88      	it	hi
 800e050:	2300      	movhi	r3, #0
 800e052:	3302      	adds	r3, #2
 800e054:	4403      	add	r3, r0
 800e056:	1a18      	subs	r0, r3, r0
 800e058:	b003      	add	sp, #12
 800e05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e05c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e060:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e064:	e7ed      	b.n	800e042 <__exponent+0x44>
 800e066:	2330      	movs	r3, #48	@ 0x30
 800e068:	3130      	adds	r1, #48	@ 0x30
 800e06a:	7083      	strb	r3, [r0, #2]
 800e06c:	70c1      	strb	r1, [r0, #3]
 800e06e:	1d03      	adds	r3, r0, #4
 800e070:	e7f1      	b.n	800e056 <__exponent+0x58>
	...

0800e074 <_printf_float>:
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	b08d      	sub	sp, #52	@ 0x34
 800e07a:	460c      	mov	r4, r1
 800e07c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e080:	4616      	mov	r6, r2
 800e082:	461f      	mov	r7, r3
 800e084:	4605      	mov	r5, r0
 800e086:	f000 ff01 	bl	800ee8c <_localeconv_r>
 800e08a:	6803      	ldr	r3, [r0, #0]
 800e08c:	9304      	str	r3, [sp, #16]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7f2 f90e 	bl	80002b0 <strlen>
 800e094:	2300      	movs	r3, #0
 800e096:	930a      	str	r3, [sp, #40]	@ 0x28
 800e098:	f8d8 3000 	ldr.w	r3, [r8]
 800e09c:	9005      	str	r0, [sp, #20]
 800e09e:	3307      	adds	r3, #7
 800e0a0:	f023 0307 	bic.w	r3, r3, #7
 800e0a4:	f103 0208 	add.w	r2, r3, #8
 800e0a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e0ac:	f8d4 b000 	ldr.w	fp, [r4]
 800e0b0:	f8c8 2000 	str.w	r2, [r8]
 800e0b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e0bc:	9307      	str	r3, [sp, #28]
 800e0be:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0ca:	4b9c      	ldr	r3, [pc, #624]	@ (800e33c <_printf_float+0x2c8>)
 800e0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d0:	f7f2 fd4c 	bl	8000b6c <__aeabi_dcmpun>
 800e0d4:	bb70      	cbnz	r0, 800e134 <_printf_float+0xc0>
 800e0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0da:	4b98      	ldr	r3, [pc, #608]	@ (800e33c <_printf_float+0x2c8>)
 800e0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e0:	f7f2 fd26 	bl	8000b30 <__aeabi_dcmple>
 800e0e4:	bb30      	cbnz	r0, 800e134 <_printf_float+0xc0>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fd15 	bl	8000b1c <__aeabi_dcmplt>
 800e0f2:	b110      	cbz	r0, 800e0fa <_printf_float+0x86>
 800e0f4:	232d      	movs	r3, #45	@ 0x2d
 800e0f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0fa:	4a91      	ldr	r2, [pc, #580]	@ (800e340 <_printf_float+0x2cc>)
 800e0fc:	4b91      	ldr	r3, [pc, #580]	@ (800e344 <_printf_float+0x2d0>)
 800e0fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e102:	bf94      	ite	ls
 800e104:	4690      	movls	r8, r2
 800e106:	4698      	movhi	r8, r3
 800e108:	2303      	movs	r3, #3
 800e10a:	6123      	str	r3, [r4, #16]
 800e10c:	f02b 0304 	bic.w	r3, fp, #4
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	f04f 0900 	mov.w	r9, #0
 800e116:	9700      	str	r7, [sp, #0]
 800e118:	4633      	mov	r3, r6
 800e11a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e11c:	4621      	mov	r1, r4
 800e11e:	4628      	mov	r0, r5
 800e120:	f000 f9d2 	bl	800e4c8 <_printf_common>
 800e124:	3001      	adds	r0, #1
 800e126:	f040 808d 	bne.w	800e244 <_printf_float+0x1d0>
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	b00d      	add	sp, #52	@ 0x34
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e134:	4642      	mov	r2, r8
 800e136:	464b      	mov	r3, r9
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7f2 fd16 	bl	8000b6c <__aeabi_dcmpun>
 800e140:	b140      	cbz	r0, 800e154 <_printf_float+0xe0>
 800e142:	464b      	mov	r3, r9
 800e144:	2b00      	cmp	r3, #0
 800e146:	bfbc      	itt	lt
 800e148:	232d      	movlt	r3, #45	@ 0x2d
 800e14a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e14e:	4a7e      	ldr	r2, [pc, #504]	@ (800e348 <_printf_float+0x2d4>)
 800e150:	4b7e      	ldr	r3, [pc, #504]	@ (800e34c <_printf_float+0x2d8>)
 800e152:	e7d4      	b.n	800e0fe <_printf_float+0x8a>
 800e154:	6863      	ldr	r3, [r4, #4]
 800e156:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e15a:	9206      	str	r2, [sp, #24]
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	d13b      	bne.n	800e1d8 <_printf_float+0x164>
 800e160:	2306      	movs	r3, #6
 800e162:	6063      	str	r3, [r4, #4]
 800e164:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e168:	2300      	movs	r3, #0
 800e16a:	6022      	str	r2, [r4, #0]
 800e16c:	9303      	str	r3, [sp, #12]
 800e16e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e170:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e174:	ab09      	add	r3, sp, #36	@ 0x24
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	6861      	ldr	r1, [r4, #4]
 800e17a:	ec49 8b10 	vmov	d0, r8, r9
 800e17e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e182:	4628      	mov	r0, r5
 800e184:	f7ff fed6 	bl	800df34 <__cvt>
 800e188:	9b06      	ldr	r3, [sp, #24]
 800e18a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e18c:	2b47      	cmp	r3, #71	@ 0x47
 800e18e:	4680      	mov	r8, r0
 800e190:	d129      	bne.n	800e1e6 <_printf_float+0x172>
 800e192:	1cc8      	adds	r0, r1, #3
 800e194:	db02      	blt.n	800e19c <_printf_float+0x128>
 800e196:	6863      	ldr	r3, [r4, #4]
 800e198:	4299      	cmp	r1, r3
 800e19a:	dd41      	ble.n	800e220 <_printf_float+0x1ac>
 800e19c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e1a0:	fa5f fa8a 	uxtb.w	sl, sl
 800e1a4:	3901      	subs	r1, #1
 800e1a6:	4652      	mov	r2, sl
 800e1a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e1ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1ae:	f7ff ff26 	bl	800dffe <__exponent>
 800e1b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1b4:	1813      	adds	r3, r2, r0
 800e1b6:	2a01      	cmp	r2, #1
 800e1b8:	4681      	mov	r9, r0
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	dc02      	bgt.n	800e1c4 <_printf_float+0x150>
 800e1be:	6822      	ldr	r2, [r4, #0]
 800e1c0:	07d2      	lsls	r2, r2, #31
 800e1c2:	d501      	bpl.n	800e1c8 <_printf_float+0x154>
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	6123      	str	r3, [r4, #16]
 800e1c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d0a2      	beq.n	800e116 <_printf_float+0xa2>
 800e1d0:	232d      	movs	r3, #45	@ 0x2d
 800e1d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1d6:	e79e      	b.n	800e116 <_printf_float+0xa2>
 800e1d8:	9a06      	ldr	r2, [sp, #24]
 800e1da:	2a47      	cmp	r2, #71	@ 0x47
 800e1dc:	d1c2      	bne.n	800e164 <_printf_float+0xf0>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1c0      	bne.n	800e164 <_printf_float+0xf0>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e7bd      	b.n	800e162 <_printf_float+0xee>
 800e1e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1ea:	d9db      	bls.n	800e1a4 <_printf_float+0x130>
 800e1ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e1f0:	d118      	bne.n	800e224 <_printf_float+0x1b0>
 800e1f2:	2900      	cmp	r1, #0
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	dd0b      	ble.n	800e210 <_printf_float+0x19c>
 800e1f8:	6121      	str	r1, [r4, #16]
 800e1fa:	b913      	cbnz	r3, 800e202 <_printf_float+0x18e>
 800e1fc:	6822      	ldr	r2, [r4, #0]
 800e1fe:	07d0      	lsls	r0, r2, #31
 800e200:	d502      	bpl.n	800e208 <_printf_float+0x194>
 800e202:	3301      	adds	r3, #1
 800e204:	440b      	add	r3, r1
 800e206:	6123      	str	r3, [r4, #16]
 800e208:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e20a:	f04f 0900 	mov.w	r9, #0
 800e20e:	e7db      	b.n	800e1c8 <_printf_float+0x154>
 800e210:	b913      	cbnz	r3, 800e218 <_printf_float+0x1a4>
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	07d2      	lsls	r2, r2, #31
 800e216:	d501      	bpl.n	800e21c <_printf_float+0x1a8>
 800e218:	3302      	adds	r3, #2
 800e21a:	e7f4      	b.n	800e206 <_printf_float+0x192>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e7f2      	b.n	800e206 <_printf_float+0x192>
 800e220:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e226:	4299      	cmp	r1, r3
 800e228:	db05      	blt.n	800e236 <_printf_float+0x1c2>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	6121      	str	r1, [r4, #16]
 800e22e:	07d8      	lsls	r0, r3, #31
 800e230:	d5ea      	bpl.n	800e208 <_printf_float+0x194>
 800e232:	1c4b      	adds	r3, r1, #1
 800e234:	e7e7      	b.n	800e206 <_printf_float+0x192>
 800e236:	2900      	cmp	r1, #0
 800e238:	bfd4      	ite	le
 800e23a:	f1c1 0202 	rsble	r2, r1, #2
 800e23e:	2201      	movgt	r2, #1
 800e240:	4413      	add	r3, r2
 800e242:	e7e0      	b.n	800e206 <_printf_float+0x192>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	055a      	lsls	r2, r3, #21
 800e248:	d407      	bmi.n	800e25a <_printf_float+0x1e6>
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	4642      	mov	r2, r8
 800e24e:	4631      	mov	r1, r6
 800e250:	4628      	mov	r0, r5
 800e252:	47b8      	blx	r7
 800e254:	3001      	adds	r0, #1
 800e256:	d12b      	bne.n	800e2b0 <_printf_float+0x23c>
 800e258:	e767      	b.n	800e12a <_printf_float+0xb6>
 800e25a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e25e:	f240 80dd 	bls.w	800e41c <_printf_float+0x3a8>
 800e262:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e266:	2200      	movs	r2, #0
 800e268:	2300      	movs	r3, #0
 800e26a:	f7f2 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d033      	beq.n	800e2da <_printf_float+0x266>
 800e272:	4a37      	ldr	r2, [pc, #220]	@ (800e350 <_printf_float+0x2dc>)
 800e274:	2301      	movs	r3, #1
 800e276:	4631      	mov	r1, r6
 800e278:	4628      	mov	r0, r5
 800e27a:	47b8      	blx	r7
 800e27c:	3001      	adds	r0, #1
 800e27e:	f43f af54 	beq.w	800e12a <_printf_float+0xb6>
 800e282:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e286:	4543      	cmp	r3, r8
 800e288:	db02      	blt.n	800e290 <_printf_float+0x21c>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	07d8      	lsls	r0, r3, #31
 800e28e:	d50f      	bpl.n	800e2b0 <_printf_float+0x23c>
 800e290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e294:	4631      	mov	r1, r6
 800e296:	4628      	mov	r0, r5
 800e298:	47b8      	blx	r7
 800e29a:	3001      	adds	r0, #1
 800e29c:	f43f af45 	beq.w	800e12a <_printf_float+0xb6>
 800e2a0:	f04f 0900 	mov.w	r9, #0
 800e2a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2a8:	f104 0a1a 	add.w	sl, r4, #26
 800e2ac:	45c8      	cmp	r8, r9
 800e2ae:	dc09      	bgt.n	800e2c4 <_printf_float+0x250>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	079b      	lsls	r3, r3, #30
 800e2b4:	f100 8103 	bmi.w	800e4be <_printf_float+0x44a>
 800e2b8:	68e0      	ldr	r0, [r4, #12]
 800e2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2bc:	4298      	cmp	r0, r3
 800e2be:	bfb8      	it	lt
 800e2c0:	4618      	movlt	r0, r3
 800e2c2:	e734      	b.n	800e12e <_printf_float+0xba>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	4652      	mov	r2, sl
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	47b8      	blx	r7
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	f43f af2b 	beq.w	800e12a <_printf_float+0xb6>
 800e2d4:	f109 0901 	add.w	r9, r9, #1
 800e2d8:	e7e8      	b.n	800e2ac <_printf_float+0x238>
 800e2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dc39      	bgt.n	800e354 <_printf_float+0x2e0>
 800e2e0:	4a1b      	ldr	r2, [pc, #108]	@ (800e350 <_printf_float+0x2dc>)
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f43f af1d 	beq.w	800e12a <_printf_float+0xb6>
 800e2f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e2f4:	ea59 0303 	orrs.w	r3, r9, r3
 800e2f8:	d102      	bne.n	800e300 <_printf_float+0x28c>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	07d9      	lsls	r1, r3, #31
 800e2fe:	d5d7      	bpl.n	800e2b0 <_printf_float+0x23c>
 800e300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e304:	4631      	mov	r1, r6
 800e306:	4628      	mov	r0, r5
 800e308:	47b8      	blx	r7
 800e30a:	3001      	adds	r0, #1
 800e30c:	f43f af0d 	beq.w	800e12a <_printf_float+0xb6>
 800e310:	f04f 0a00 	mov.w	sl, #0
 800e314:	f104 0b1a 	add.w	fp, r4, #26
 800e318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e31a:	425b      	negs	r3, r3
 800e31c:	4553      	cmp	r3, sl
 800e31e:	dc01      	bgt.n	800e324 <_printf_float+0x2b0>
 800e320:	464b      	mov	r3, r9
 800e322:	e793      	b.n	800e24c <_printf_float+0x1d8>
 800e324:	2301      	movs	r3, #1
 800e326:	465a      	mov	r2, fp
 800e328:	4631      	mov	r1, r6
 800e32a:	4628      	mov	r0, r5
 800e32c:	47b8      	blx	r7
 800e32e:	3001      	adds	r0, #1
 800e330:	f43f aefb 	beq.w	800e12a <_printf_float+0xb6>
 800e334:	f10a 0a01 	add.w	sl, sl, #1
 800e338:	e7ee      	b.n	800e318 <_printf_float+0x2a4>
 800e33a:	bf00      	nop
 800e33c:	7fefffff 	.word	0x7fefffff
 800e340:	080119a0 	.word	0x080119a0
 800e344:	080119a4 	.word	0x080119a4
 800e348:	080119a8 	.word	0x080119a8
 800e34c:	080119ac 	.word	0x080119ac
 800e350:	080119b0 	.word	0x080119b0
 800e354:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e356:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e35a:	4553      	cmp	r3, sl
 800e35c:	bfa8      	it	ge
 800e35e:	4653      	movge	r3, sl
 800e360:	2b00      	cmp	r3, #0
 800e362:	4699      	mov	r9, r3
 800e364:	dc36      	bgt.n	800e3d4 <_printf_float+0x360>
 800e366:	f04f 0b00 	mov.w	fp, #0
 800e36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e36e:	f104 021a 	add.w	r2, r4, #26
 800e372:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e374:	9306      	str	r3, [sp, #24]
 800e376:	eba3 0309 	sub.w	r3, r3, r9
 800e37a:	455b      	cmp	r3, fp
 800e37c:	dc31      	bgt.n	800e3e2 <_printf_float+0x36e>
 800e37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e380:	459a      	cmp	sl, r3
 800e382:	dc3a      	bgt.n	800e3fa <_printf_float+0x386>
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	07da      	lsls	r2, r3, #31
 800e388:	d437      	bmi.n	800e3fa <_printf_float+0x386>
 800e38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38c:	ebaa 0903 	sub.w	r9, sl, r3
 800e390:	9b06      	ldr	r3, [sp, #24]
 800e392:	ebaa 0303 	sub.w	r3, sl, r3
 800e396:	4599      	cmp	r9, r3
 800e398:	bfa8      	it	ge
 800e39a:	4699      	movge	r9, r3
 800e39c:	f1b9 0f00 	cmp.w	r9, #0
 800e3a0:	dc33      	bgt.n	800e40a <_printf_float+0x396>
 800e3a2:	f04f 0800 	mov.w	r8, #0
 800e3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3aa:	f104 0b1a 	add.w	fp, r4, #26
 800e3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b0:	ebaa 0303 	sub.w	r3, sl, r3
 800e3b4:	eba3 0309 	sub.w	r3, r3, r9
 800e3b8:	4543      	cmp	r3, r8
 800e3ba:	f77f af79 	ble.w	800e2b0 <_printf_float+0x23c>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	465a      	mov	r2, fp
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b8      	blx	r7
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	f43f aeae 	beq.w	800e12a <_printf_float+0xb6>
 800e3ce:	f108 0801 	add.w	r8, r8, #1
 800e3d2:	e7ec      	b.n	800e3ae <_printf_float+0x33a>
 800e3d4:	4642      	mov	r2, r8
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d1c2      	bne.n	800e366 <_printf_float+0x2f2>
 800e3e0:	e6a3      	b.n	800e12a <_printf_float+0xb6>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	4631      	mov	r1, r6
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	9206      	str	r2, [sp, #24]
 800e3ea:	47b8      	blx	r7
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	f43f ae9c 	beq.w	800e12a <_printf_float+0xb6>
 800e3f2:	9a06      	ldr	r2, [sp, #24]
 800e3f4:	f10b 0b01 	add.w	fp, fp, #1
 800e3f8:	e7bb      	b.n	800e372 <_printf_float+0x2fe>
 800e3fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3fe:	4631      	mov	r1, r6
 800e400:	4628      	mov	r0, r5
 800e402:	47b8      	blx	r7
 800e404:	3001      	adds	r0, #1
 800e406:	d1c0      	bne.n	800e38a <_printf_float+0x316>
 800e408:	e68f      	b.n	800e12a <_printf_float+0xb6>
 800e40a:	9a06      	ldr	r2, [sp, #24]
 800e40c:	464b      	mov	r3, r9
 800e40e:	4442      	add	r2, r8
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	47b8      	blx	r7
 800e416:	3001      	adds	r0, #1
 800e418:	d1c3      	bne.n	800e3a2 <_printf_float+0x32e>
 800e41a:	e686      	b.n	800e12a <_printf_float+0xb6>
 800e41c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e420:	f1ba 0f01 	cmp.w	sl, #1
 800e424:	dc01      	bgt.n	800e42a <_printf_float+0x3b6>
 800e426:	07db      	lsls	r3, r3, #31
 800e428:	d536      	bpl.n	800e498 <_printf_float+0x424>
 800e42a:	2301      	movs	r3, #1
 800e42c:	4642      	mov	r2, r8
 800e42e:	4631      	mov	r1, r6
 800e430:	4628      	mov	r0, r5
 800e432:	47b8      	blx	r7
 800e434:	3001      	adds	r0, #1
 800e436:	f43f ae78 	beq.w	800e12a <_printf_float+0xb6>
 800e43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e43e:	4631      	mov	r1, r6
 800e440:	4628      	mov	r0, r5
 800e442:	47b8      	blx	r7
 800e444:	3001      	adds	r0, #1
 800e446:	f43f ae70 	beq.w	800e12a <_printf_float+0xb6>
 800e44a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e44e:	2200      	movs	r2, #0
 800e450:	2300      	movs	r3, #0
 800e452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e456:	f7f2 fb57 	bl	8000b08 <__aeabi_dcmpeq>
 800e45a:	b9c0      	cbnz	r0, 800e48e <_printf_float+0x41a>
 800e45c:	4653      	mov	r3, sl
 800e45e:	f108 0201 	add.w	r2, r8, #1
 800e462:	4631      	mov	r1, r6
 800e464:	4628      	mov	r0, r5
 800e466:	47b8      	blx	r7
 800e468:	3001      	adds	r0, #1
 800e46a:	d10c      	bne.n	800e486 <_printf_float+0x412>
 800e46c:	e65d      	b.n	800e12a <_printf_float+0xb6>
 800e46e:	2301      	movs	r3, #1
 800e470:	465a      	mov	r2, fp
 800e472:	4631      	mov	r1, r6
 800e474:	4628      	mov	r0, r5
 800e476:	47b8      	blx	r7
 800e478:	3001      	adds	r0, #1
 800e47a:	f43f ae56 	beq.w	800e12a <_printf_float+0xb6>
 800e47e:	f108 0801 	add.w	r8, r8, #1
 800e482:	45d0      	cmp	r8, sl
 800e484:	dbf3      	blt.n	800e46e <_printf_float+0x3fa>
 800e486:	464b      	mov	r3, r9
 800e488:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e48c:	e6df      	b.n	800e24e <_printf_float+0x1da>
 800e48e:	f04f 0800 	mov.w	r8, #0
 800e492:	f104 0b1a 	add.w	fp, r4, #26
 800e496:	e7f4      	b.n	800e482 <_printf_float+0x40e>
 800e498:	2301      	movs	r3, #1
 800e49a:	4642      	mov	r2, r8
 800e49c:	e7e1      	b.n	800e462 <_printf_float+0x3ee>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	464a      	mov	r2, r9
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	f43f ae3e 	beq.w	800e12a <_printf_float+0xb6>
 800e4ae:	f108 0801 	add.w	r8, r8, #1
 800e4b2:	68e3      	ldr	r3, [r4, #12]
 800e4b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4b6:	1a5b      	subs	r3, r3, r1
 800e4b8:	4543      	cmp	r3, r8
 800e4ba:	dcf0      	bgt.n	800e49e <_printf_float+0x42a>
 800e4bc:	e6fc      	b.n	800e2b8 <_printf_float+0x244>
 800e4be:	f04f 0800 	mov.w	r8, #0
 800e4c2:	f104 0919 	add.w	r9, r4, #25
 800e4c6:	e7f4      	b.n	800e4b2 <_printf_float+0x43e>

0800e4c8 <_printf_common>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	4616      	mov	r6, r2
 800e4ce:	4698      	mov	r8, r3
 800e4d0:	688a      	ldr	r2, [r1, #8]
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfb8      	it	lt
 800e4dc:	4613      	movlt	r3, r2
 800e4de:	6033      	str	r3, [r6, #0]
 800e4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b10a      	cbz	r2, 800e4ee <_printf_common+0x26>
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	0699      	lsls	r1, r3, #26
 800e4f2:	bf42      	ittt	mi
 800e4f4:	6833      	ldrmi	r3, [r6, #0]
 800e4f6:	3302      	addmi	r3, #2
 800e4f8:	6033      	strmi	r3, [r6, #0]
 800e4fa:	6825      	ldr	r5, [r4, #0]
 800e4fc:	f015 0506 	ands.w	r5, r5, #6
 800e500:	d106      	bne.n	800e510 <_printf_common+0x48>
 800e502:	f104 0a19 	add.w	sl, r4, #25
 800e506:	68e3      	ldr	r3, [r4, #12]
 800e508:	6832      	ldr	r2, [r6, #0]
 800e50a:	1a9b      	subs	r3, r3, r2
 800e50c:	42ab      	cmp	r3, r5
 800e50e:	dc26      	bgt.n	800e55e <_printf_common+0x96>
 800e510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e514:	6822      	ldr	r2, [r4, #0]
 800e516:	3b00      	subs	r3, #0
 800e518:	bf18      	it	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	0692      	lsls	r2, r2, #26
 800e51e:	d42b      	bmi.n	800e578 <_printf_common+0xb0>
 800e520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e524:	4641      	mov	r1, r8
 800e526:	4638      	mov	r0, r7
 800e528:	47c8      	blx	r9
 800e52a:	3001      	adds	r0, #1
 800e52c:	d01e      	beq.n	800e56c <_printf_common+0xa4>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	6922      	ldr	r2, [r4, #16]
 800e532:	f003 0306 	and.w	r3, r3, #6
 800e536:	2b04      	cmp	r3, #4
 800e538:	bf02      	ittt	eq
 800e53a:	68e5      	ldreq	r5, [r4, #12]
 800e53c:	6833      	ldreq	r3, [r6, #0]
 800e53e:	1aed      	subeq	r5, r5, r3
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	bf0c      	ite	eq
 800e544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e548:	2500      	movne	r5, #0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	bfc4      	itt	gt
 800e54e:	1a9b      	subgt	r3, r3, r2
 800e550:	18ed      	addgt	r5, r5, r3
 800e552:	2600      	movs	r6, #0
 800e554:	341a      	adds	r4, #26
 800e556:	42b5      	cmp	r5, r6
 800e558:	d11a      	bne.n	800e590 <_printf_common+0xc8>
 800e55a:	2000      	movs	r0, #0
 800e55c:	e008      	b.n	800e570 <_printf_common+0xa8>
 800e55e:	2301      	movs	r3, #1
 800e560:	4652      	mov	r2, sl
 800e562:	4641      	mov	r1, r8
 800e564:	4638      	mov	r0, r7
 800e566:	47c8      	blx	r9
 800e568:	3001      	adds	r0, #1
 800e56a:	d103      	bne.n	800e574 <_printf_common+0xac>
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e574:	3501      	adds	r5, #1
 800e576:	e7c6      	b.n	800e506 <_printf_common+0x3e>
 800e578:	18e1      	adds	r1, r4, r3
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	2030      	movs	r0, #48	@ 0x30
 800e57e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e582:	4422      	add	r2, r4
 800e584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e58c:	3302      	adds	r3, #2
 800e58e:	e7c7      	b.n	800e520 <_printf_common+0x58>
 800e590:	2301      	movs	r3, #1
 800e592:	4622      	mov	r2, r4
 800e594:	4641      	mov	r1, r8
 800e596:	4638      	mov	r0, r7
 800e598:	47c8      	blx	r9
 800e59a:	3001      	adds	r0, #1
 800e59c:	d0e6      	beq.n	800e56c <_printf_common+0xa4>
 800e59e:	3601      	adds	r6, #1
 800e5a0:	e7d9      	b.n	800e556 <_printf_common+0x8e>
	...

0800e5a4 <_printf_i>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	7e0f      	ldrb	r7, [r1, #24]
 800e5aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5ac:	2f78      	cmp	r7, #120	@ 0x78
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	469a      	mov	sl, r3
 800e5b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5ba:	d807      	bhi.n	800e5cc <_printf_i+0x28>
 800e5bc:	2f62      	cmp	r7, #98	@ 0x62
 800e5be:	d80a      	bhi.n	800e5d6 <_printf_i+0x32>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	f000 80d2 	beq.w	800e76a <_printf_i+0x1c6>
 800e5c6:	2f58      	cmp	r7, #88	@ 0x58
 800e5c8:	f000 80b9 	beq.w	800e73e <_printf_i+0x19a>
 800e5cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5d4:	e03a      	b.n	800e64c <_printf_i+0xa8>
 800e5d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5da:	2b15      	cmp	r3, #21
 800e5dc:	d8f6      	bhi.n	800e5cc <_printf_i+0x28>
 800e5de:	a101      	add	r1, pc, #4	@ (adr r1, 800e5e4 <_printf_i+0x40>)
 800e5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e5cd 	.word	0x0800e5cd
 800e5f0:	0800e5cd 	.word	0x0800e5cd
 800e5f4:	0800e5cd 	.word	0x0800e5cd
 800e5f8:	0800e5cd 	.word	0x0800e5cd
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e5cd 	.word	0x0800e5cd
 800e604:	0800e5cd 	.word	0x0800e5cd
 800e608:	0800e5cd 	.word	0x0800e5cd
 800e60c:	0800e5cd 	.word	0x0800e5cd
 800e610:	0800e751 	.word	0x0800e751
 800e614:	0800e67b 	.word	0x0800e67b
 800e618:	0800e70b 	.word	0x0800e70b
 800e61c:	0800e5cd 	.word	0x0800e5cd
 800e620:	0800e5cd 	.word	0x0800e5cd
 800e624:	0800e773 	.word	0x0800e773
 800e628:	0800e5cd 	.word	0x0800e5cd
 800e62c:	0800e67b 	.word	0x0800e67b
 800e630:	0800e5cd 	.word	0x0800e5cd
 800e634:	0800e5cd 	.word	0x0800e5cd
 800e638:	0800e713 	.word	0x0800e713
 800e63c:	6833      	ldr	r3, [r6, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6032      	str	r2, [r6, #0]
 800e644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e64c:	2301      	movs	r3, #1
 800e64e:	e09d      	b.n	800e78c <_printf_i+0x1e8>
 800e650:	6833      	ldr	r3, [r6, #0]
 800e652:	6820      	ldr	r0, [r4, #0]
 800e654:	1d19      	adds	r1, r3, #4
 800e656:	6031      	str	r1, [r6, #0]
 800e658:	0606      	lsls	r6, r0, #24
 800e65a:	d501      	bpl.n	800e660 <_printf_i+0xbc>
 800e65c:	681d      	ldr	r5, [r3, #0]
 800e65e:	e003      	b.n	800e668 <_printf_i+0xc4>
 800e660:	0645      	lsls	r5, r0, #25
 800e662:	d5fb      	bpl.n	800e65c <_printf_i+0xb8>
 800e664:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e668:	2d00      	cmp	r5, #0
 800e66a:	da03      	bge.n	800e674 <_printf_i+0xd0>
 800e66c:	232d      	movs	r3, #45	@ 0x2d
 800e66e:	426d      	negs	r5, r5
 800e670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e674:	4859      	ldr	r0, [pc, #356]	@ (800e7dc <_printf_i+0x238>)
 800e676:	230a      	movs	r3, #10
 800e678:	e011      	b.n	800e69e <_printf_i+0xfa>
 800e67a:	6821      	ldr	r1, [r4, #0]
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	0608      	lsls	r0, r1, #24
 800e680:	f853 5b04 	ldr.w	r5, [r3], #4
 800e684:	d402      	bmi.n	800e68c <_printf_i+0xe8>
 800e686:	0649      	lsls	r1, r1, #25
 800e688:	bf48      	it	mi
 800e68a:	b2ad      	uxthmi	r5, r5
 800e68c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e68e:	4853      	ldr	r0, [pc, #332]	@ (800e7dc <_printf_i+0x238>)
 800e690:	6033      	str	r3, [r6, #0]
 800e692:	bf14      	ite	ne
 800e694:	230a      	movne	r3, #10
 800e696:	2308      	moveq	r3, #8
 800e698:	2100      	movs	r1, #0
 800e69a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e69e:	6866      	ldr	r6, [r4, #4]
 800e6a0:	60a6      	str	r6, [r4, #8]
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	bfa2      	ittt	ge
 800e6a6:	6821      	ldrge	r1, [r4, #0]
 800e6a8:	f021 0104 	bicge.w	r1, r1, #4
 800e6ac:	6021      	strge	r1, [r4, #0]
 800e6ae:	b90d      	cbnz	r5, 800e6b4 <_printf_i+0x110>
 800e6b0:	2e00      	cmp	r6, #0
 800e6b2:	d04b      	beq.n	800e74c <_printf_i+0x1a8>
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6ba:	fb03 5711 	mls	r7, r3, r1, r5
 800e6be:	5dc7      	ldrb	r7, [r0, r7]
 800e6c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6c4:	462f      	mov	r7, r5
 800e6c6:	42bb      	cmp	r3, r7
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	d9f4      	bls.n	800e6b6 <_printf_i+0x112>
 800e6cc:	2b08      	cmp	r3, #8
 800e6ce:	d10b      	bne.n	800e6e8 <_printf_i+0x144>
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	07df      	lsls	r7, r3, #31
 800e6d4:	d508      	bpl.n	800e6e8 <_printf_i+0x144>
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6861      	ldr	r1, [r4, #4]
 800e6da:	4299      	cmp	r1, r3
 800e6dc:	bfde      	ittt	le
 800e6de:	2330      	movle	r3, #48	@ 0x30
 800e6e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6e8:	1b92      	subs	r2, r2, r6
 800e6ea:	6122      	str	r2, [r4, #16]
 800e6ec:	f8cd a000 	str.w	sl, [sp]
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	aa03      	add	r2, sp, #12
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f7ff fee6 	bl	800e4c8 <_printf_common>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d14a      	bne.n	800e796 <_printf_i+0x1f2>
 800e700:	f04f 30ff 	mov.w	r0, #4294967295
 800e704:	b004      	add	sp, #16
 800e706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	f043 0320 	orr.w	r3, r3, #32
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	4833      	ldr	r0, [pc, #204]	@ (800e7e0 <_printf_i+0x23c>)
 800e714:	2778      	movs	r7, #120	@ 0x78
 800e716:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	6831      	ldr	r1, [r6, #0]
 800e71e:	061f      	lsls	r7, r3, #24
 800e720:	f851 5b04 	ldr.w	r5, [r1], #4
 800e724:	d402      	bmi.n	800e72c <_printf_i+0x188>
 800e726:	065f      	lsls	r7, r3, #25
 800e728:	bf48      	it	mi
 800e72a:	b2ad      	uxthmi	r5, r5
 800e72c:	6031      	str	r1, [r6, #0]
 800e72e:	07d9      	lsls	r1, r3, #31
 800e730:	bf44      	itt	mi
 800e732:	f043 0320 	orrmi.w	r3, r3, #32
 800e736:	6023      	strmi	r3, [r4, #0]
 800e738:	b11d      	cbz	r5, 800e742 <_printf_i+0x19e>
 800e73a:	2310      	movs	r3, #16
 800e73c:	e7ac      	b.n	800e698 <_printf_i+0xf4>
 800e73e:	4827      	ldr	r0, [pc, #156]	@ (800e7dc <_printf_i+0x238>)
 800e740:	e7e9      	b.n	800e716 <_printf_i+0x172>
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	f023 0320 	bic.w	r3, r3, #32
 800e748:	6023      	str	r3, [r4, #0]
 800e74a:	e7f6      	b.n	800e73a <_printf_i+0x196>
 800e74c:	4616      	mov	r6, r2
 800e74e:	e7bd      	b.n	800e6cc <_printf_i+0x128>
 800e750:	6833      	ldr	r3, [r6, #0]
 800e752:	6825      	ldr	r5, [r4, #0]
 800e754:	6961      	ldr	r1, [r4, #20]
 800e756:	1d18      	adds	r0, r3, #4
 800e758:	6030      	str	r0, [r6, #0]
 800e75a:	062e      	lsls	r6, r5, #24
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	d501      	bpl.n	800e764 <_printf_i+0x1c0>
 800e760:	6019      	str	r1, [r3, #0]
 800e762:	e002      	b.n	800e76a <_printf_i+0x1c6>
 800e764:	0668      	lsls	r0, r5, #25
 800e766:	d5fb      	bpl.n	800e760 <_printf_i+0x1bc>
 800e768:	8019      	strh	r1, [r3, #0]
 800e76a:	2300      	movs	r3, #0
 800e76c:	6123      	str	r3, [r4, #16]
 800e76e:	4616      	mov	r6, r2
 800e770:	e7bc      	b.n	800e6ec <_printf_i+0x148>
 800e772:	6833      	ldr	r3, [r6, #0]
 800e774:	1d1a      	adds	r2, r3, #4
 800e776:	6032      	str	r2, [r6, #0]
 800e778:	681e      	ldr	r6, [r3, #0]
 800e77a:	6862      	ldr	r2, [r4, #4]
 800e77c:	2100      	movs	r1, #0
 800e77e:	4630      	mov	r0, r6
 800e780:	f7f1 fd46 	bl	8000210 <memchr>
 800e784:	b108      	cbz	r0, 800e78a <_printf_i+0x1e6>
 800e786:	1b80      	subs	r0, r0, r6
 800e788:	6060      	str	r0, [r4, #4]
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	6123      	str	r3, [r4, #16]
 800e78e:	2300      	movs	r3, #0
 800e790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e794:	e7aa      	b.n	800e6ec <_printf_i+0x148>
 800e796:	6923      	ldr	r3, [r4, #16]
 800e798:	4632      	mov	r2, r6
 800e79a:	4649      	mov	r1, r9
 800e79c:	4640      	mov	r0, r8
 800e79e:	47d0      	blx	sl
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	d0ad      	beq.n	800e700 <_printf_i+0x15c>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	079b      	lsls	r3, r3, #30
 800e7a8:	d413      	bmi.n	800e7d2 <_printf_i+0x22e>
 800e7aa:	68e0      	ldr	r0, [r4, #12]
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	4298      	cmp	r0, r3
 800e7b0:	bfb8      	it	lt
 800e7b2:	4618      	movlt	r0, r3
 800e7b4:	e7a6      	b.n	800e704 <_printf_i+0x160>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	4632      	mov	r2, r6
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	4640      	mov	r0, r8
 800e7be:	47d0      	blx	sl
 800e7c0:	3001      	adds	r0, #1
 800e7c2:	d09d      	beq.n	800e700 <_printf_i+0x15c>
 800e7c4:	3501      	adds	r5, #1
 800e7c6:	68e3      	ldr	r3, [r4, #12]
 800e7c8:	9903      	ldr	r1, [sp, #12]
 800e7ca:	1a5b      	subs	r3, r3, r1
 800e7cc:	42ab      	cmp	r3, r5
 800e7ce:	dcf2      	bgt.n	800e7b6 <_printf_i+0x212>
 800e7d0:	e7eb      	b.n	800e7aa <_printf_i+0x206>
 800e7d2:	2500      	movs	r5, #0
 800e7d4:	f104 0619 	add.w	r6, r4, #25
 800e7d8:	e7f5      	b.n	800e7c6 <_printf_i+0x222>
 800e7da:	bf00      	nop
 800e7dc:	080119b2 	.word	0x080119b2
 800e7e0:	080119c3 	.word	0x080119c3

0800e7e4 <_scanf_float>:
 800e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e8:	b087      	sub	sp, #28
 800e7ea:	4617      	mov	r7, r2
 800e7ec:	9303      	str	r3, [sp, #12]
 800e7ee:	688b      	ldr	r3, [r1, #8]
 800e7f0:	1e5a      	subs	r2, r3, #1
 800e7f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e7f6:	bf81      	itttt	hi
 800e7f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e7fc:	eb03 0b05 	addhi.w	fp, r3, r5
 800e800:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e804:	608b      	strhi	r3, [r1, #8]
 800e806:	680b      	ldr	r3, [r1, #0]
 800e808:	460a      	mov	r2, r1
 800e80a:	f04f 0500 	mov.w	r5, #0
 800e80e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e812:	f842 3b1c 	str.w	r3, [r2], #28
 800e816:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e81a:	4680      	mov	r8, r0
 800e81c:	460c      	mov	r4, r1
 800e81e:	bf98      	it	ls
 800e820:	f04f 0b00 	movls.w	fp, #0
 800e824:	9201      	str	r2, [sp, #4]
 800e826:	4616      	mov	r6, r2
 800e828:	46aa      	mov	sl, r5
 800e82a:	46a9      	mov	r9, r5
 800e82c:	9502      	str	r5, [sp, #8]
 800e82e:	68a2      	ldr	r2, [r4, #8]
 800e830:	b152      	cbz	r2, 800e848 <_scanf_float+0x64>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	2b4e      	cmp	r3, #78	@ 0x4e
 800e838:	d864      	bhi.n	800e904 <_scanf_float+0x120>
 800e83a:	2b40      	cmp	r3, #64	@ 0x40
 800e83c:	d83c      	bhi.n	800e8b8 <_scanf_float+0xd4>
 800e83e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e842:	b2c8      	uxtb	r0, r1
 800e844:	280e      	cmp	r0, #14
 800e846:	d93a      	bls.n	800e8be <_scanf_float+0xda>
 800e848:	f1b9 0f00 	cmp.w	r9, #0
 800e84c:	d003      	beq.n	800e856 <_scanf_float+0x72>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e85a:	f1ba 0f01 	cmp.w	sl, #1
 800e85e:	f200 8117 	bhi.w	800ea90 <_scanf_float+0x2ac>
 800e862:	9b01      	ldr	r3, [sp, #4]
 800e864:	429e      	cmp	r6, r3
 800e866:	f200 8108 	bhi.w	800ea7a <_scanf_float+0x296>
 800e86a:	2001      	movs	r0, #1
 800e86c:	b007      	add	sp, #28
 800e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e872:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e876:	2a0d      	cmp	r2, #13
 800e878:	d8e6      	bhi.n	800e848 <_scanf_float+0x64>
 800e87a:	a101      	add	r1, pc, #4	@ (adr r1, 800e880 <_scanf_float+0x9c>)
 800e87c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e880:	0800e9c7 	.word	0x0800e9c7
 800e884:	0800e849 	.word	0x0800e849
 800e888:	0800e849 	.word	0x0800e849
 800e88c:	0800e849 	.word	0x0800e849
 800e890:	0800ea27 	.word	0x0800ea27
 800e894:	0800e9ff 	.word	0x0800e9ff
 800e898:	0800e849 	.word	0x0800e849
 800e89c:	0800e849 	.word	0x0800e849
 800e8a0:	0800e9d5 	.word	0x0800e9d5
 800e8a4:	0800e849 	.word	0x0800e849
 800e8a8:	0800e849 	.word	0x0800e849
 800e8ac:	0800e849 	.word	0x0800e849
 800e8b0:	0800e849 	.word	0x0800e849
 800e8b4:	0800e98d 	.word	0x0800e98d
 800e8b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e8bc:	e7db      	b.n	800e876 <_scanf_float+0x92>
 800e8be:	290e      	cmp	r1, #14
 800e8c0:	d8c2      	bhi.n	800e848 <_scanf_float+0x64>
 800e8c2:	a001      	add	r0, pc, #4	@ (adr r0, 800e8c8 <_scanf_float+0xe4>)
 800e8c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e8c8:	0800e97d 	.word	0x0800e97d
 800e8cc:	0800e849 	.word	0x0800e849
 800e8d0:	0800e97d 	.word	0x0800e97d
 800e8d4:	0800ea13 	.word	0x0800ea13
 800e8d8:	0800e849 	.word	0x0800e849
 800e8dc:	0800e925 	.word	0x0800e925
 800e8e0:	0800e963 	.word	0x0800e963
 800e8e4:	0800e963 	.word	0x0800e963
 800e8e8:	0800e963 	.word	0x0800e963
 800e8ec:	0800e963 	.word	0x0800e963
 800e8f0:	0800e963 	.word	0x0800e963
 800e8f4:	0800e963 	.word	0x0800e963
 800e8f8:	0800e963 	.word	0x0800e963
 800e8fc:	0800e963 	.word	0x0800e963
 800e900:	0800e963 	.word	0x0800e963
 800e904:	2b6e      	cmp	r3, #110	@ 0x6e
 800e906:	d809      	bhi.n	800e91c <_scanf_float+0x138>
 800e908:	2b60      	cmp	r3, #96	@ 0x60
 800e90a:	d8b2      	bhi.n	800e872 <_scanf_float+0x8e>
 800e90c:	2b54      	cmp	r3, #84	@ 0x54
 800e90e:	d07b      	beq.n	800ea08 <_scanf_float+0x224>
 800e910:	2b59      	cmp	r3, #89	@ 0x59
 800e912:	d199      	bne.n	800e848 <_scanf_float+0x64>
 800e914:	2d07      	cmp	r5, #7
 800e916:	d197      	bne.n	800e848 <_scanf_float+0x64>
 800e918:	2508      	movs	r5, #8
 800e91a:	e02c      	b.n	800e976 <_scanf_float+0x192>
 800e91c:	2b74      	cmp	r3, #116	@ 0x74
 800e91e:	d073      	beq.n	800ea08 <_scanf_float+0x224>
 800e920:	2b79      	cmp	r3, #121	@ 0x79
 800e922:	e7f6      	b.n	800e912 <_scanf_float+0x12e>
 800e924:	6821      	ldr	r1, [r4, #0]
 800e926:	05c8      	lsls	r0, r1, #23
 800e928:	d51b      	bpl.n	800e962 <_scanf_float+0x17e>
 800e92a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e92e:	6021      	str	r1, [r4, #0]
 800e930:	f109 0901 	add.w	r9, r9, #1
 800e934:	f1bb 0f00 	cmp.w	fp, #0
 800e938:	d003      	beq.n	800e942 <_scanf_float+0x15e>
 800e93a:	3201      	adds	r2, #1
 800e93c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e940:	60a2      	str	r2, [r4, #8]
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	3b01      	subs	r3, #1
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	6923      	ldr	r3, [r4, #16]
 800e94a:	3301      	adds	r3, #1
 800e94c:	6123      	str	r3, [r4, #16]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3b01      	subs	r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	607b      	str	r3, [r7, #4]
 800e956:	f340 8087 	ble.w	800ea68 <_scanf_float+0x284>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	3301      	adds	r3, #1
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	e765      	b.n	800e82e <_scanf_float+0x4a>
 800e962:	eb1a 0105 	adds.w	r1, sl, r5
 800e966:	f47f af6f 	bne.w	800e848 <_scanf_float+0x64>
 800e96a:	6822      	ldr	r2, [r4, #0]
 800e96c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e970:	6022      	str	r2, [r4, #0]
 800e972:	460d      	mov	r5, r1
 800e974:	468a      	mov	sl, r1
 800e976:	f806 3b01 	strb.w	r3, [r6], #1
 800e97a:	e7e2      	b.n	800e942 <_scanf_float+0x15e>
 800e97c:	6822      	ldr	r2, [r4, #0]
 800e97e:	0610      	lsls	r0, r2, #24
 800e980:	f57f af62 	bpl.w	800e848 <_scanf_float+0x64>
 800e984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e988:	6022      	str	r2, [r4, #0]
 800e98a:	e7f4      	b.n	800e976 <_scanf_float+0x192>
 800e98c:	f1ba 0f00 	cmp.w	sl, #0
 800e990:	d10e      	bne.n	800e9b0 <_scanf_float+0x1cc>
 800e992:	f1b9 0f00 	cmp.w	r9, #0
 800e996:	d10e      	bne.n	800e9b6 <_scanf_float+0x1d2>
 800e998:	6822      	ldr	r2, [r4, #0]
 800e99a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e99e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e9a2:	d108      	bne.n	800e9b6 <_scanf_float+0x1d2>
 800e9a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e9a8:	6022      	str	r2, [r4, #0]
 800e9aa:	f04f 0a01 	mov.w	sl, #1
 800e9ae:	e7e2      	b.n	800e976 <_scanf_float+0x192>
 800e9b0:	f1ba 0f02 	cmp.w	sl, #2
 800e9b4:	d055      	beq.n	800ea62 <_scanf_float+0x27e>
 800e9b6:	2d01      	cmp	r5, #1
 800e9b8:	d002      	beq.n	800e9c0 <_scanf_float+0x1dc>
 800e9ba:	2d04      	cmp	r5, #4
 800e9bc:	f47f af44 	bne.w	800e848 <_scanf_float+0x64>
 800e9c0:	3501      	adds	r5, #1
 800e9c2:	b2ed      	uxtb	r5, r5
 800e9c4:	e7d7      	b.n	800e976 <_scanf_float+0x192>
 800e9c6:	f1ba 0f01 	cmp.w	sl, #1
 800e9ca:	f47f af3d 	bne.w	800e848 <_scanf_float+0x64>
 800e9ce:	f04f 0a02 	mov.w	sl, #2
 800e9d2:	e7d0      	b.n	800e976 <_scanf_float+0x192>
 800e9d4:	b97d      	cbnz	r5, 800e9f6 <_scanf_float+0x212>
 800e9d6:	f1b9 0f00 	cmp.w	r9, #0
 800e9da:	f47f af38 	bne.w	800e84e <_scanf_float+0x6a>
 800e9de:	6822      	ldr	r2, [r4, #0]
 800e9e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e9e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e9e8:	f040 8108 	bne.w	800ebfc <_scanf_float+0x418>
 800e9ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e9f0:	6022      	str	r2, [r4, #0]
 800e9f2:	2501      	movs	r5, #1
 800e9f4:	e7bf      	b.n	800e976 <_scanf_float+0x192>
 800e9f6:	2d03      	cmp	r5, #3
 800e9f8:	d0e2      	beq.n	800e9c0 <_scanf_float+0x1dc>
 800e9fa:	2d05      	cmp	r5, #5
 800e9fc:	e7de      	b.n	800e9bc <_scanf_float+0x1d8>
 800e9fe:	2d02      	cmp	r5, #2
 800ea00:	f47f af22 	bne.w	800e848 <_scanf_float+0x64>
 800ea04:	2503      	movs	r5, #3
 800ea06:	e7b6      	b.n	800e976 <_scanf_float+0x192>
 800ea08:	2d06      	cmp	r5, #6
 800ea0a:	f47f af1d 	bne.w	800e848 <_scanf_float+0x64>
 800ea0e:	2507      	movs	r5, #7
 800ea10:	e7b1      	b.n	800e976 <_scanf_float+0x192>
 800ea12:	6822      	ldr	r2, [r4, #0]
 800ea14:	0591      	lsls	r1, r2, #22
 800ea16:	f57f af17 	bpl.w	800e848 <_scanf_float+0x64>
 800ea1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ea1e:	6022      	str	r2, [r4, #0]
 800ea20:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea24:	e7a7      	b.n	800e976 <_scanf_float+0x192>
 800ea26:	6822      	ldr	r2, [r4, #0]
 800ea28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ea2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ea30:	d006      	beq.n	800ea40 <_scanf_float+0x25c>
 800ea32:	0550      	lsls	r0, r2, #21
 800ea34:	f57f af08 	bpl.w	800e848 <_scanf_float+0x64>
 800ea38:	f1b9 0f00 	cmp.w	r9, #0
 800ea3c:	f000 80de 	beq.w	800ebfc <_scanf_float+0x418>
 800ea40:	0591      	lsls	r1, r2, #22
 800ea42:	bf58      	it	pl
 800ea44:	9902      	ldrpl	r1, [sp, #8]
 800ea46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea4a:	bf58      	it	pl
 800ea4c:	eba9 0101 	subpl.w	r1, r9, r1
 800ea50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ea54:	bf58      	it	pl
 800ea56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ea5a:	6022      	str	r2, [r4, #0]
 800ea5c:	f04f 0900 	mov.w	r9, #0
 800ea60:	e789      	b.n	800e976 <_scanf_float+0x192>
 800ea62:	f04f 0a03 	mov.w	sl, #3
 800ea66:	e786      	b.n	800e976 <_scanf_float+0x192>
 800ea68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4798      	blx	r3
 800ea72:	2800      	cmp	r0, #0
 800ea74:	f43f aedb 	beq.w	800e82e <_scanf_float+0x4a>
 800ea78:	e6e6      	b.n	800e848 <_scanf_float+0x64>
 800ea7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea82:	463a      	mov	r2, r7
 800ea84:	4640      	mov	r0, r8
 800ea86:	4798      	blx	r3
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	e6e8      	b.n	800e862 <_scanf_float+0x7e>
 800ea90:	1e6b      	subs	r3, r5, #1
 800ea92:	2b06      	cmp	r3, #6
 800ea94:	d824      	bhi.n	800eae0 <_scanf_float+0x2fc>
 800ea96:	2d02      	cmp	r5, #2
 800ea98:	d836      	bhi.n	800eb08 <_scanf_float+0x324>
 800ea9a:	9b01      	ldr	r3, [sp, #4]
 800ea9c:	429e      	cmp	r6, r3
 800ea9e:	f67f aee4 	bls.w	800e86a <_scanf_float+0x86>
 800eaa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eaa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eaaa:	463a      	mov	r2, r7
 800eaac:	4640      	mov	r0, r8
 800eaae:	4798      	blx	r3
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	3b01      	subs	r3, #1
 800eab4:	6123      	str	r3, [r4, #16]
 800eab6:	e7f0      	b.n	800ea9a <_scanf_float+0x2b6>
 800eab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eabc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eac0:	463a      	mov	r2, r7
 800eac2:	4640      	mov	r0, r8
 800eac4:	4798      	blx	r3
 800eac6:	6923      	ldr	r3, [r4, #16]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ead0:	fa5f fa8a 	uxtb.w	sl, sl
 800ead4:	f1ba 0f02 	cmp.w	sl, #2
 800ead8:	d1ee      	bne.n	800eab8 <_scanf_float+0x2d4>
 800eada:	3d03      	subs	r5, #3
 800eadc:	b2ed      	uxtb	r5, r5
 800eade:	1b76      	subs	r6, r6, r5
 800eae0:	6823      	ldr	r3, [r4, #0]
 800eae2:	05da      	lsls	r2, r3, #23
 800eae4:	d530      	bpl.n	800eb48 <_scanf_float+0x364>
 800eae6:	055b      	lsls	r3, r3, #21
 800eae8:	d511      	bpl.n	800eb0e <_scanf_float+0x32a>
 800eaea:	9b01      	ldr	r3, [sp, #4]
 800eaec:	429e      	cmp	r6, r3
 800eaee:	f67f aebc 	bls.w	800e86a <_scanf_float+0x86>
 800eaf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eaf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eafa:	463a      	mov	r2, r7
 800eafc:	4640      	mov	r0, r8
 800eafe:	4798      	blx	r3
 800eb00:	6923      	ldr	r3, [r4, #16]
 800eb02:	3b01      	subs	r3, #1
 800eb04:	6123      	str	r3, [r4, #16]
 800eb06:	e7f0      	b.n	800eaea <_scanf_float+0x306>
 800eb08:	46aa      	mov	sl, r5
 800eb0a:	46b3      	mov	fp, r6
 800eb0c:	e7de      	b.n	800eacc <_scanf_float+0x2e8>
 800eb0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eb12:	6923      	ldr	r3, [r4, #16]
 800eb14:	2965      	cmp	r1, #101	@ 0x65
 800eb16:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800eb1e:	6123      	str	r3, [r4, #16]
 800eb20:	d00c      	beq.n	800eb3c <_scanf_float+0x358>
 800eb22:	2945      	cmp	r1, #69	@ 0x45
 800eb24:	d00a      	beq.n	800eb3c <_scanf_float+0x358>
 800eb26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb2a:	463a      	mov	r2, r7
 800eb2c:	4640      	mov	r0, r8
 800eb2e:	4798      	blx	r3
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	1eb5      	subs	r5, r6, #2
 800eb3a:	6123      	str	r3, [r4, #16]
 800eb3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb40:	463a      	mov	r2, r7
 800eb42:	4640      	mov	r0, r8
 800eb44:	4798      	blx	r3
 800eb46:	462e      	mov	r6, r5
 800eb48:	6822      	ldr	r2, [r4, #0]
 800eb4a:	f012 0210 	ands.w	r2, r2, #16
 800eb4e:	d001      	beq.n	800eb54 <_scanf_float+0x370>
 800eb50:	2000      	movs	r0, #0
 800eb52:	e68b      	b.n	800e86c <_scanf_float+0x88>
 800eb54:	7032      	strb	r2, [r6, #0]
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800eb5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb60:	d11c      	bne.n	800eb9c <_scanf_float+0x3b8>
 800eb62:	9b02      	ldr	r3, [sp, #8]
 800eb64:	454b      	cmp	r3, r9
 800eb66:	eba3 0209 	sub.w	r2, r3, r9
 800eb6a:	d123      	bne.n	800ebb4 <_scanf_float+0x3d0>
 800eb6c:	9901      	ldr	r1, [sp, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4640      	mov	r0, r8
 800eb72:	f7ff f9cd 	bl	800df10 <_strtod_r>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	6821      	ldr	r1, [r4, #0]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f011 0f02 	tst.w	r1, #2
 800eb80:	ec57 6b10 	vmov	r6, r7, d0
 800eb84:	f103 0204 	add.w	r2, r3, #4
 800eb88:	d01f      	beq.n	800ebca <_scanf_float+0x3e6>
 800eb8a:	9903      	ldr	r1, [sp, #12]
 800eb8c:	600a      	str	r2, [r1, #0]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	e9c3 6700 	strd	r6, r7, [r3]
 800eb94:	68e3      	ldr	r3, [r4, #12]
 800eb96:	3301      	adds	r3, #1
 800eb98:	60e3      	str	r3, [r4, #12]
 800eb9a:	e7d9      	b.n	800eb50 <_scanf_float+0x36c>
 800eb9c:	9b04      	ldr	r3, [sp, #16]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0e4      	beq.n	800eb6c <_scanf_float+0x388>
 800eba2:	9905      	ldr	r1, [sp, #20]
 800eba4:	230a      	movs	r3, #10
 800eba6:	3101      	adds	r1, #1
 800eba8:	4640      	mov	r0, r8
 800ebaa:	f002 f923 	bl	8010df4 <_strtol_r>
 800ebae:	9b04      	ldr	r3, [sp, #16]
 800ebb0:	9e05      	ldr	r6, [sp, #20]
 800ebb2:	1ac2      	subs	r2, r0, r3
 800ebb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ebb8:	429e      	cmp	r6, r3
 800ebba:	bf28      	it	cs
 800ebbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ebc0:	4910      	ldr	r1, [pc, #64]	@ (800ec04 <_scanf_float+0x420>)
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 f8e4 	bl	800ed90 <siprintf>
 800ebc8:	e7d0      	b.n	800eb6c <_scanf_float+0x388>
 800ebca:	f011 0f04 	tst.w	r1, #4
 800ebce:	9903      	ldr	r1, [sp, #12]
 800ebd0:	600a      	str	r2, [r1, #0]
 800ebd2:	d1dc      	bne.n	800eb8e <_scanf_float+0x3aa>
 800ebd4:	681d      	ldr	r5, [r3, #0]
 800ebd6:	4632      	mov	r2, r6
 800ebd8:	463b      	mov	r3, r7
 800ebda:	4630      	mov	r0, r6
 800ebdc:	4639      	mov	r1, r7
 800ebde:	f7f1 ffc5 	bl	8000b6c <__aeabi_dcmpun>
 800ebe2:	b128      	cbz	r0, 800ebf0 <_scanf_float+0x40c>
 800ebe4:	4808      	ldr	r0, [pc, #32]	@ (800ec08 <_scanf_float+0x424>)
 800ebe6:	f000 f9ef 	bl	800efc8 <nanf>
 800ebea:	ed85 0a00 	vstr	s0, [r5]
 800ebee:	e7d1      	b.n	800eb94 <_scanf_float+0x3b0>
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f2 f818 	bl	8000c28 <__aeabi_d2f>
 800ebf8:	6028      	str	r0, [r5, #0]
 800ebfa:	e7cb      	b.n	800eb94 <_scanf_float+0x3b0>
 800ebfc:	f04f 0900 	mov.w	r9, #0
 800ec00:	e629      	b.n	800e856 <_scanf_float+0x72>
 800ec02:	bf00      	nop
 800ec04:	080119d4 	.word	0x080119d4
 800ec08:	08011d75 	.word	0x08011d75

0800ec0c <std>:
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	b510      	push	{r4, lr}
 800ec10:	4604      	mov	r4, r0
 800ec12:	e9c0 3300 	strd	r3, r3, [r0]
 800ec16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec1a:	6083      	str	r3, [r0, #8]
 800ec1c:	8181      	strh	r1, [r0, #12]
 800ec1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec20:	81c2      	strh	r2, [r0, #14]
 800ec22:	6183      	str	r3, [r0, #24]
 800ec24:	4619      	mov	r1, r3
 800ec26:	2208      	movs	r2, #8
 800ec28:	305c      	adds	r0, #92	@ 0x5c
 800ec2a:	f000 f914 	bl	800ee56 <memset>
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec64 <std+0x58>)
 800ec30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec32:	4b0d      	ldr	r3, [pc, #52]	@ (800ec68 <std+0x5c>)
 800ec34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec36:	4b0d      	ldr	r3, [pc, #52]	@ (800ec6c <std+0x60>)
 800ec38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec70 <std+0x64>)
 800ec3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec74 <std+0x68>)
 800ec40:	6224      	str	r4, [r4, #32]
 800ec42:	429c      	cmp	r4, r3
 800ec44:	d006      	beq.n	800ec54 <std+0x48>
 800ec46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec4a:	4294      	cmp	r4, r2
 800ec4c:	d002      	beq.n	800ec54 <std+0x48>
 800ec4e:	33d0      	adds	r3, #208	@ 0xd0
 800ec50:	429c      	cmp	r4, r3
 800ec52:	d105      	bne.n	800ec60 <std+0x54>
 800ec54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec5c:	f000 b99a 	b.w	800ef94 <__retarget_lock_init_recursive>
 800ec60:	bd10      	pop	{r4, pc}
 800ec62:	bf00      	nop
 800ec64:	0800edd1 	.word	0x0800edd1
 800ec68:	0800edf3 	.word	0x0800edf3
 800ec6c:	0800ee2b 	.word	0x0800ee2b
 800ec70:	0800ee4f 	.word	0x0800ee4f
 800ec74:	20002498 	.word	0x20002498

0800ec78 <stdio_exit_handler>:
 800ec78:	4a02      	ldr	r2, [pc, #8]	@ (800ec84 <stdio_exit_handler+0xc>)
 800ec7a:	4903      	ldr	r1, [pc, #12]	@ (800ec88 <stdio_exit_handler+0x10>)
 800ec7c:	4803      	ldr	r0, [pc, #12]	@ (800ec8c <stdio_exit_handler+0x14>)
 800ec7e:	f000 b869 	b.w	800ed54 <_fwalk_sglue>
 800ec82:	bf00      	nop
 800ec84:	20000120 	.word	0x20000120
 800ec88:	080111c9 	.word	0x080111c9
 800ec8c:	2000029c 	.word	0x2000029c

0800ec90 <cleanup_stdio>:
 800ec90:	6841      	ldr	r1, [r0, #4]
 800ec92:	4b0c      	ldr	r3, [pc, #48]	@ (800ecc4 <cleanup_stdio+0x34>)
 800ec94:	4299      	cmp	r1, r3
 800ec96:	b510      	push	{r4, lr}
 800ec98:	4604      	mov	r4, r0
 800ec9a:	d001      	beq.n	800eca0 <cleanup_stdio+0x10>
 800ec9c:	f002 fa94 	bl	80111c8 <_fflush_r>
 800eca0:	68a1      	ldr	r1, [r4, #8]
 800eca2:	4b09      	ldr	r3, [pc, #36]	@ (800ecc8 <cleanup_stdio+0x38>)
 800eca4:	4299      	cmp	r1, r3
 800eca6:	d002      	beq.n	800ecae <cleanup_stdio+0x1e>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f002 fa8d 	bl	80111c8 <_fflush_r>
 800ecae:	68e1      	ldr	r1, [r4, #12]
 800ecb0:	4b06      	ldr	r3, [pc, #24]	@ (800eccc <cleanup_stdio+0x3c>)
 800ecb2:	4299      	cmp	r1, r3
 800ecb4:	d004      	beq.n	800ecc0 <cleanup_stdio+0x30>
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecbc:	f002 ba84 	b.w	80111c8 <_fflush_r>
 800ecc0:	bd10      	pop	{r4, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20002498 	.word	0x20002498
 800ecc8:	20002500 	.word	0x20002500
 800eccc:	20002568 	.word	0x20002568

0800ecd0 <global_stdio_init.part.0>:
 800ecd0:	b510      	push	{r4, lr}
 800ecd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ed00 <global_stdio_init.part.0+0x30>)
 800ecd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ed04 <global_stdio_init.part.0+0x34>)
 800ecd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ed08 <global_stdio_init.part.0+0x38>)
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	4620      	mov	r0, r4
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2104      	movs	r1, #4
 800ece0:	f7ff ff94 	bl	800ec0c <std>
 800ece4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ece8:	2201      	movs	r2, #1
 800ecea:	2109      	movs	r1, #9
 800ecec:	f7ff ff8e 	bl	800ec0c <std>
 800ecf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecfa:	2112      	movs	r1, #18
 800ecfc:	f7ff bf86 	b.w	800ec0c <std>
 800ed00:	200025d0 	.word	0x200025d0
 800ed04:	20002498 	.word	0x20002498
 800ed08:	0800ec79 	.word	0x0800ec79

0800ed0c <__sfp_lock_acquire>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	@ (800ed14 <__sfp_lock_acquire+0x8>)
 800ed0e:	f000 b942 	b.w	800ef96 <__retarget_lock_acquire_recursive>
 800ed12:	bf00      	nop
 800ed14:	200025d9 	.word	0x200025d9

0800ed18 <__sfp_lock_release>:
 800ed18:	4801      	ldr	r0, [pc, #4]	@ (800ed20 <__sfp_lock_release+0x8>)
 800ed1a:	f000 b93d 	b.w	800ef98 <__retarget_lock_release_recursive>
 800ed1e:	bf00      	nop
 800ed20:	200025d9 	.word	0x200025d9

0800ed24 <__sinit>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	f7ff fff0 	bl	800ed0c <__sfp_lock_acquire>
 800ed2c:	6a23      	ldr	r3, [r4, #32]
 800ed2e:	b11b      	cbz	r3, 800ed38 <__sinit+0x14>
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f7ff bff0 	b.w	800ed18 <__sfp_lock_release>
 800ed38:	4b04      	ldr	r3, [pc, #16]	@ (800ed4c <__sinit+0x28>)
 800ed3a:	6223      	str	r3, [r4, #32]
 800ed3c:	4b04      	ldr	r3, [pc, #16]	@ (800ed50 <__sinit+0x2c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1f5      	bne.n	800ed30 <__sinit+0xc>
 800ed44:	f7ff ffc4 	bl	800ecd0 <global_stdio_init.part.0>
 800ed48:	e7f2      	b.n	800ed30 <__sinit+0xc>
 800ed4a:	bf00      	nop
 800ed4c:	0800ec91 	.word	0x0800ec91
 800ed50:	200025d0 	.word	0x200025d0

0800ed54 <_fwalk_sglue>:
 800ed54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed58:	4607      	mov	r7, r0
 800ed5a:	4688      	mov	r8, r1
 800ed5c:	4614      	mov	r4, r2
 800ed5e:	2600      	movs	r6, #0
 800ed60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed64:	f1b9 0901 	subs.w	r9, r9, #1
 800ed68:	d505      	bpl.n	800ed76 <_fwalk_sglue+0x22>
 800ed6a:	6824      	ldr	r4, [r4, #0]
 800ed6c:	2c00      	cmp	r4, #0
 800ed6e:	d1f7      	bne.n	800ed60 <_fwalk_sglue+0xc>
 800ed70:	4630      	mov	r0, r6
 800ed72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed76:	89ab      	ldrh	r3, [r5, #12]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d907      	bls.n	800ed8c <_fwalk_sglue+0x38>
 800ed7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed80:	3301      	adds	r3, #1
 800ed82:	d003      	beq.n	800ed8c <_fwalk_sglue+0x38>
 800ed84:	4629      	mov	r1, r5
 800ed86:	4638      	mov	r0, r7
 800ed88:	47c0      	blx	r8
 800ed8a:	4306      	orrs	r6, r0
 800ed8c:	3568      	adds	r5, #104	@ 0x68
 800ed8e:	e7e9      	b.n	800ed64 <_fwalk_sglue+0x10>

0800ed90 <siprintf>:
 800ed90:	b40e      	push	{r1, r2, r3}
 800ed92:	b500      	push	{lr}
 800ed94:	b09c      	sub	sp, #112	@ 0x70
 800ed96:	ab1d      	add	r3, sp, #116	@ 0x74
 800ed98:	9002      	str	r0, [sp, #8]
 800ed9a:	9006      	str	r0, [sp, #24]
 800ed9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eda0:	4809      	ldr	r0, [pc, #36]	@ (800edc8 <siprintf+0x38>)
 800eda2:	9107      	str	r1, [sp, #28]
 800eda4:	9104      	str	r1, [sp, #16]
 800eda6:	4909      	ldr	r1, [pc, #36]	@ (800edcc <siprintf+0x3c>)
 800eda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edac:	9105      	str	r1, [sp, #20]
 800edae:	6800      	ldr	r0, [r0, #0]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	a902      	add	r1, sp, #8
 800edb4:	f002 f888 	bl	8010ec8 <_svfiprintf_r>
 800edb8:	9b02      	ldr	r3, [sp, #8]
 800edba:	2200      	movs	r2, #0
 800edbc:	701a      	strb	r2, [r3, #0]
 800edbe:	b01c      	add	sp, #112	@ 0x70
 800edc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc4:	b003      	add	sp, #12
 800edc6:	4770      	bx	lr
 800edc8:	20000298 	.word	0x20000298
 800edcc:	ffff0208 	.word	0xffff0208

0800edd0 <__sread>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	460c      	mov	r4, r1
 800edd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd8:	f000 f87e 	bl	800eed8 <_read_r>
 800eddc:	2800      	cmp	r0, #0
 800edde:	bfab      	itete	ge
 800ede0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ede2:	89a3      	ldrhlt	r3, [r4, #12]
 800ede4:	181b      	addge	r3, r3, r0
 800ede6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800edea:	bfac      	ite	ge
 800edec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800edee:	81a3      	strhlt	r3, [r4, #12]
 800edf0:	bd10      	pop	{r4, pc}

0800edf2 <__swrite>:
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	461f      	mov	r7, r3
 800edf8:	898b      	ldrh	r3, [r1, #12]
 800edfa:	05db      	lsls	r3, r3, #23
 800edfc:	4605      	mov	r5, r0
 800edfe:	460c      	mov	r4, r1
 800ee00:	4616      	mov	r6, r2
 800ee02:	d505      	bpl.n	800ee10 <__swrite+0x1e>
 800ee04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee08:	2302      	movs	r3, #2
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f000 f852 	bl	800eeb4 <_lseek_r>
 800ee10:	89a3      	ldrh	r3, [r4, #12]
 800ee12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	463b      	mov	r3, r7
 800ee20:	4628      	mov	r0, r5
 800ee22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee26:	f000 b879 	b.w	800ef1c <_write_r>

0800ee2a <__sseek>:
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee32:	f000 f83f 	bl	800eeb4 <_lseek_r>
 800ee36:	1c43      	adds	r3, r0, #1
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	bf15      	itete	ne
 800ee3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee46:	81a3      	strheq	r3, [r4, #12]
 800ee48:	bf18      	it	ne
 800ee4a:	81a3      	strhne	r3, [r4, #12]
 800ee4c:	bd10      	pop	{r4, pc}

0800ee4e <__sclose>:
 800ee4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee52:	f000 b81f 	b.w	800ee94 <_close_r>

0800ee56 <memset>:
 800ee56:	4402      	add	r2, r0
 800ee58:	4603      	mov	r3, r0
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d100      	bne.n	800ee60 <memset+0xa>
 800ee5e:	4770      	bx	lr
 800ee60:	f803 1b01 	strb.w	r1, [r3], #1
 800ee64:	e7f9      	b.n	800ee5a <memset+0x4>

0800ee66 <strncmp>:
 800ee66:	b510      	push	{r4, lr}
 800ee68:	b16a      	cbz	r2, 800ee86 <strncmp+0x20>
 800ee6a:	3901      	subs	r1, #1
 800ee6c:	1884      	adds	r4, r0, r2
 800ee6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d103      	bne.n	800ee82 <strncmp+0x1c>
 800ee7a:	42a0      	cmp	r0, r4
 800ee7c:	d001      	beq.n	800ee82 <strncmp+0x1c>
 800ee7e:	2a00      	cmp	r2, #0
 800ee80:	d1f5      	bne.n	800ee6e <strncmp+0x8>
 800ee82:	1ad0      	subs	r0, r2, r3
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	4610      	mov	r0, r2
 800ee88:	e7fc      	b.n	800ee84 <strncmp+0x1e>
	...

0800ee8c <_localeconv_r>:
 800ee8c:	4800      	ldr	r0, [pc, #0]	@ (800ee90 <_localeconv_r+0x4>)
 800ee8e:	4770      	bx	lr
 800ee90:	2000021c 	.word	0x2000021c

0800ee94 <_close_r>:
 800ee94:	b538      	push	{r3, r4, r5, lr}
 800ee96:	4d06      	ldr	r5, [pc, #24]	@ (800eeb0 <_close_r+0x1c>)
 800ee98:	2300      	movs	r3, #0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	602b      	str	r3, [r5, #0]
 800eea0:	f7f4 f9d8 	bl	8003254 <_close>
 800eea4:	1c43      	adds	r3, r0, #1
 800eea6:	d102      	bne.n	800eeae <_close_r+0x1a>
 800eea8:	682b      	ldr	r3, [r5, #0]
 800eeaa:	b103      	cbz	r3, 800eeae <_close_r+0x1a>
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	bd38      	pop	{r3, r4, r5, pc}
 800eeb0:	200025d4 	.word	0x200025d4

0800eeb4 <_lseek_r>:
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	4d07      	ldr	r5, [pc, #28]	@ (800eed4 <_lseek_r+0x20>)
 800eeb8:	4604      	mov	r4, r0
 800eeba:	4608      	mov	r0, r1
 800eebc:	4611      	mov	r1, r2
 800eebe:	2200      	movs	r2, #0
 800eec0:	602a      	str	r2, [r5, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	f7f4 f9ed 	bl	80032a2 <_lseek>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	d102      	bne.n	800eed2 <_lseek_r+0x1e>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	b103      	cbz	r3, 800eed2 <_lseek_r+0x1e>
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	200025d4 	.word	0x200025d4

0800eed8 <_read_r>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	4d07      	ldr	r5, [pc, #28]	@ (800eef8 <_read_r+0x20>)
 800eedc:	4604      	mov	r4, r0
 800eede:	4608      	mov	r0, r1
 800eee0:	4611      	mov	r1, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	602a      	str	r2, [r5, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f7f4 f97b 	bl	80031e2 <_read>
 800eeec:	1c43      	adds	r3, r0, #1
 800eeee:	d102      	bne.n	800eef6 <_read_r+0x1e>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b103      	cbz	r3, 800eef6 <_read_r+0x1e>
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	200025d4 	.word	0x200025d4

0800eefc <_sbrk_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4d06      	ldr	r5, [pc, #24]	@ (800ef18 <_sbrk_r+0x1c>)
 800ef00:	2300      	movs	r3, #0
 800ef02:	4604      	mov	r4, r0
 800ef04:	4608      	mov	r0, r1
 800ef06:	602b      	str	r3, [r5, #0]
 800ef08:	f7f4 f9d8 	bl	80032bc <_sbrk>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d102      	bne.n	800ef16 <_sbrk_r+0x1a>
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	b103      	cbz	r3, 800ef16 <_sbrk_r+0x1a>
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	200025d4 	.word	0x200025d4

0800ef1c <_write_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	4d07      	ldr	r5, [pc, #28]	@ (800ef3c <_write_r+0x20>)
 800ef20:	4604      	mov	r4, r0
 800ef22:	4608      	mov	r0, r1
 800ef24:	4611      	mov	r1, r2
 800ef26:	2200      	movs	r2, #0
 800ef28:	602a      	str	r2, [r5, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f7f4 f976 	bl	800321c <_write>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_write_r+0x1e>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_write_r+0x1e>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	200025d4 	.word	0x200025d4

0800ef40 <__errno>:
 800ef40:	4b01      	ldr	r3, [pc, #4]	@ (800ef48 <__errno+0x8>)
 800ef42:	6818      	ldr	r0, [r3, #0]
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	20000298 	.word	0x20000298

0800ef4c <__libc_init_array>:
 800ef4c:	b570      	push	{r4, r5, r6, lr}
 800ef4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ef84 <__libc_init_array+0x38>)
 800ef50:	4c0d      	ldr	r4, [pc, #52]	@ (800ef88 <__libc_init_array+0x3c>)
 800ef52:	1b64      	subs	r4, r4, r5
 800ef54:	10a4      	asrs	r4, r4, #2
 800ef56:	2600      	movs	r6, #0
 800ef58:	42a6      	cmp	r6, r4
 800ef5a:	d109      	bne.n	800ef70 <__libc_init_array+0x24>
 800ef5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ef8c <__libc_init_array+0x40>)
 800ef5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ef90 <__libc_init_array+0x44>)
 800ef60:	f002 fc92 	bl	8011888 <_init>
 800ef64:	1b64      	subs	r4, r4, r5
 800ef66:	10a4      	asrs	r4, r4, #2
 800ef68:	2600      	movs	r6, #0
 800ef6a:	42a6      	cmp	r6, r4
 800ef6c:	d105      	bne.n	800ef7a <__libc_init_array+0x2e>
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef74:	4798      	blx	r3
 800ef76:	3601      	adds	r6, #1
 800ef78:	e7ee      	b.n	800ef58 <__libc_init_array+0xc>
 800ef7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef7e:	4798      	blx	r3
 800ef80:	3601      	adds	r6, #1
 800ef82:	e7f2      	b.n	800ef6a <__libc_init_array+0x1e>
 800ef84:	08011d80 	.word	0x08011d80
 800ef88:	08011d80 	.word	0x08011d80
 800ef8c:	08011d80 	.word	0x08011d80
 800ef90:	08011d84 	.word	0x08011d84

0800ef94 <__retarget_lock_init_recursive>:
 800ef94:	4770      	bx	lr

0800ef96 <__retarget_lock_acquire_recursive>:
 800ef96:	4770      	bx	lr

0800ef98 <__retarget_lock_release_recursive>:
 800ef98:	4770      	bx	lr

0800ef9a <memcpy>:
 800ef9a:	440a      	add	r2, r1
 800ef9c:	4291      	cmp	r1, r2
 800ef9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800efa2:	d100      	bne.n	800efa6 <memcpy+0xc>
 800efa4:	4770      	bx	lr
 800efa6:	b510      	push	{r4, lr}
 800efa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efb0:	4291      	cmp	r1, r2
 800efb2:	d1f9      	bne.n	800efa8 <memcpy+0xe>
 800efb4:	bd10      	pop	{r4, pc}
	...

0800efb8 <nan>:
 800efb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800efc0 <nan+0x8>
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	00000000 	.word	0x00000000
 800efc4:	7ff80000 	.word	0x7ff80000

0800efc8 <nanf>:
 800efc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800efd0 <nanf+0x8>
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	7fc00000 	.word	0x7fc00000

0800efd4 <quorem>:
 800efd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd8:	6903      	ldr	r3, [r0, #16]
 800efda:	690c      	ldr	r4, [r1, #16]
 800efdc:	42a3      	cmp	r3, r4
 800efde:	4607      	mov	r7, r0
 800efe0:	db7e      	blt.n	800f0e0 <quorem+0x10c>
 800efe2:	3c01      	subs	r4, #1
 800efe4:	f101 0814 	add.w	r8, r1, #20
 800efe8:	00a3      	lsls	r3, r4, #2
 800efea:	f100 0514 	add.w	r5, r0, #20
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800effa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800effe:	3301      	adds	r3, #1
 800f000:	429a      	cmp	r2, r3
 800f002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f006:	fbb2 f6f3 	udiv	r6, r2, r3
 800f00a:	d32e      	bcc.n	800f06a <quorem+0x96>
 800f00c:	f04f 0a00 	mov.w	sl, #0
 800f010:	46c4      	mov	ip, r8
 800f012:	46ae      	mov	lr, r5
 800f014:	46d3      	mov	fp, sl
 800f016:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f01a:	b298      	uxth	r0, r3
 800f01c:	fb06 a000 	mla	r0, r6, r0, sl
 800f020:	0c02      	lsrs	r2, r0, #16
 800f022:	0c1b      	lsrs	r3, r3, #16
 800f024:	fb06 2303 	mla	r3, r6, r3, r2
 800f028:	f8de 2000 	ldr.w	r2, [lr]
 800f02c:	b280      	uxth	r0, r0
 800f02e:	b292      	uxth	r2, r2
 800f030:	1a12      	subs	r2, r2, r0
 800f032:	445a      	add	r2, fp
 800f034:	f8de 0000 	ldr.w	r0, [lr]
 800f038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f042:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f046:	b292      	uxth	r2, r2
 800f048:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f04c:	45e1      	cmp	r9, ip
 800f04e:	f84e 2b04 	str.w	r2, [lr], #4
 800f052:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f056:	d2de      	bcs.n	800f016 <quorem+0x42>
 800f058:	9b00      	ldr	r3, [sp, #0]
 800f05a:	58eb      	ldr	r3, [r5, r3]
 800f05c:	b92b      	cbnz	r3, 800f06a <quorem+0x96>
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	3b04      	subs	r3, #4
 800f062:	429d      	cmp	r5, r3
 800f064:	461a      	mov	r2, r3
 800f066:	d32f      	bcc.n	800f0c8 <quorem+0xf4>
 800f068:	613c      	str	r4, [r7, #16]
 800f06a:	4638      	mov	r0, r7
 800f06c:	f001 fc5a 	bl	8010924 <__mcmp>
 800f070:	2800      	cmp	r0, #0
 800f072:	db25      	blt.n	800f0c0 <quorem+0xec>
 800f074:	4629      	mov	r1, r5
 800f076:	2000      	movs	r0, #0
 800f078:	f858 2b04 	ldr.w	r2, [r8], #4
 800f07c:	f8d1 c000 	ldr.w	ip, [r1]
 800f080:	fa1f fe82 	uxth.w	lr, r2
 800f084:	fa1f f38c 	uxth.w	r3, ip
 800f088:	eba3 030e 	sub.w	r3, r3, lr
 800f08c:	4403      	add	r3, r0
 800f08e:	0c12      	lsrs	r2, r2, #16
 800f090:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f094:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f098:	b29b      	uxth	r3, r3
 800f09a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f09e:	45c1      	cmp	r9, r8
 800f0a0:	f841 3b04 	str.w	r3, [r1], #4
 800f0a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0a8:	d2e6      	bcs.n	800f078 <quorem+0xa4>
 800f0aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0b2:	b922      	cbnz	r2, 800f0be <quorem+0xea>
 800f0b4:	3b04      	subs	r3, #4
 800f0b6:	429d      	cmp	r5, r3
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	d30b      	bcc.n	800f0d4 <quorem+0x100>
 800f0bc:	613c      	str	r4, [r7, #16]
 800f0be:	3601      	adds	r6, #1
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	b003      	add	sp, #12
 800f0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c8:	6812      	ldr	r2, [r2, #0]
 800f0ca:	3b04      	subs	r3, #4
 800f0cc:	2a00      	cmp	r2, #0
 800f0ce:	d1cb      	bne.n	800f068 <quorem+0x94>
 800f0d0:	3c01      	subs	r4, #1
 800f0d2:	e7c6      	b.n	800f062 <quorem+0x8e>
 800f0d4:	6812      	ldr	r2, [r2, #0]
 800f0d6:	3b04      	subs	r3, #4
 800f0d8:	2a00      	cmp	r2, #0
 800f0da:	d1ef      	bne.n	800f0bc <quorem+0xe8>
 800f0dc:	3c01      	subs	r4, #1
 800f0de:	e7ea      	b.n	800f0b6 <quorem+0xe2>
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	e7ee      	b.n	800f0c2 <quorem+0xee>
 800f0e4:	0000      	movs	r0, r0
	...

0800f0e8 <_dtoa_r>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	69c7      	ldr	r7, [r0, #28]
 800f0ee:	b099      	sub	sp, #100	@ 0x64
 800f0f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0f4:	ec55 4b10 	vmov	r4, r5, d0
 800f0f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f0fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0fc:	4683      	mov	fp, r0
 800f0fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800f100:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f102:	b97f      	cbnz	r7, 800f124 <_dtoa_r+0x3c>
 800f104:	2010      	movs	r0, #16
 800f106:	f7fe f84b 	bl	800d1a0 <malloc>
 800f10a:	4602      	mov	r2, r0
 800f10c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f110:	b920      	cbnz	r0, 800f11c <_dtoa_r+0x34>
 800f112:	4ba7      	ldr	r3, [pc, #668]	@ (800f3b0 <_dtoa_r+0x2c8>)
 800f114:	21ef      	movs	r1, #239	@ 0xef
 800f116:	48a7      	ldr	r0, [pc, #668]	@ (800f3b4 <_dtoa_r+0x2cc>)
 800f118:	f002 f898 	bl	801124c <__assert_func>
 800f11c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f120:	6007      	str	r7, [r0, #0]
 800f122:	60c7      	str	r7, [r0, #12]
 800f124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f128:	6819      	ldr	r1, [r3, #0]
 800f12a:	b159      	cbz	r1, 800f144 <_dtoa_r+0x5c>
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	604a      	str	r2, [r1, #4]
 800f130:	2301      	movs	r3, #1
 800f132:	4093      	lsls	r3, r2
 800f134:	608b      	str	r3, [r1, #8]
 800f136:	4658      	mov	r0, fp
 800f138:	f001 f970 	bl	801041c <_Bfree>
 800f13c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	1e2b      	subs	r3, r5, #0
 800f146:	bfb9      	ittee	lt
 800f148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f14c:	9303      	strlt	r3, [sp, #12]
 800f14e:	2300      	movge	r3, #0
 800f150:	6033      	strge	r3, [r6, #0]
 800f152:	9f03      	ldr	r7, [sp, #12]
 800f154:	4b98      	ldr	r3, [pc, #608]	@ (800f3b8 <_dtoa_r+0x2d0>)
 800f156:	bfbc      	itt	lt
 800f158:	2201      	movlt	r2, #1
 800f15a:	6032      	strlt	r2, [r6, #0]
 800f15c:	43bb      	bics	r3, r7
 800f15e:	d112      	bne.n	800f186 <_dtoa_r+0x9e>
 800f160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f162:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f16c:	4323      	orrs	r3, r4
 800f16e:	f000 854d 	beq.w	800fc0c <_dtoa_r+0xb24>
 800f172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f3cc <_dtoa_r+0x2e4>
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 854f 	beq.w	800fc1c <_dtoa_r+0xb34>
 800f17e:	f10a 0303 	add.w	r3, sl, #3
 800f182:	f000 bd49 	b.w	800fc18 <_dtoa_r+0xb30>
 800f186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f18a:	2200      	movs	r2, #0
 800f18c:	ec51 0b17 	vmov	r0, r1, d7
 800f190:	2300      	movs	r3, #0
 800f192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f196:	f7f1 fcb7 	bl	8000b08 <__aeabi_dcmpeq>
 800f19a:	4680      	mov	r8, r0
 800f19c:	b158      	cbz	r0, 800f1b6 <_dtoa_r+0xce>
 800f19e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f1a6:	b113      	cbz	r3, 800f1ae <_dtoa_r+0xc6>
 800f1a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f1aa:	4b84      	ldr	r3, [pc, #528]	@ (800f3bc <_dtoa_r+0x2d4>)
 800f1ac:	6013      	str	r3, [r2, #0]
 800f1ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f3d0 <_dtoa_r+0x2e8>
 800f1b2:	f000 bd33 	b.w	800fc1c <_dtoa_r+0xb34>
 800f1b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f1ba:	aa16      	add	r2, sp, #88	@ 0x58
 800f1bc:	a917      	add	r1, sp, #92	@ 0x5c
 800f1be:	4658      	mov	r0, fp
 800f1c0:	f001 fcd0 	bl	8010b64 <__d2b>
 800f1c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f1c8:	4681      	mov	r9, r0
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	d077      	beq.n	800f2be <_dtoa_r+0x1d6>
 800f1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f1e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f1e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	4b74      	ldr	r3, [pc, #464]	@ (800f3c0 <_dtoa_r+0x2d8>)
 800f1ee:	f7f1 f86b 	bl	80002c8 <__aeabi_dsub>
 800f1f2:	a369      	add	r3, pc, #420	@ (adr r3, 800f398 <_dtoa_r+0x2b0>)
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f7f1 fa1e 	bl	8000638 <__aeabi_dmul>
 800f1fc:	a368      	add	r3, pc, #416	@ (adr r3, 800f3a0 <_dtoa_r+0x2b8>)
 800f1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f202:	f7f1 f863 	bl	80002cc <__adddf3>
 800f206:	4604      	mov	r4, r0
 800f208:	4630      	mov	r0, r6
 800f20a:	460d      	mov	r5, r1
 800f20c:	f7f1 f9aa 	bl	8000564 <__aeabi_i2d>
 800f210:	a365      	add	r3, pc, #404	@ (adr r3, 800f3a8 <_dtoa_r+0x2c0>)
 800f212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f216:	f7f1 fa0f 	bl	8000638 <__aeabi_dmul>
 800f21a:	4602      	mov	r2, r0
 800f21c:	460b      	mov	r3, r1
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f853 	bl	80002cc <__adddf3>
 800f226:	4604      	mov	r4, r0
 800f228:	460d      	mov	r5, r1
 800f22a:	f7f1 fcb5 	bl	8000b98 <__aeabi_d2iz>
 800f22e:	2200      	movs	r2, #0
 800f230:	4607      	mov	r7, r0
 800f232:	2300      	movs	r3, #0
 800f234:	4620      	mov	r0, r4
 800f236:	4629      	mov	r1, r5
 800f238:	f7f1 fc70 	bl	8000b1c <__aeabi_dcmplt>
 800f23c:	b140      	cbz	r0, 800f250 <_dtoa_r+0x168>
 800f23e:	4638      	mov	r0, r7
 800f240:	f7f1 f990 	bl	8000564 <__aeabi_i2d>
 800f244:	4622      	mov	r2, r4
 800f246:	462b      	mov	r3, r5
 800f248:	f7f1 fc5e 	bl	8000b08 <__aeabi_dcmpeq>
 800f24c:	b900      	cbnz	r0, 800f250 <_dtoa_r+0x168>
 800f24e:	3f01      	subs	r7, #1
 800f250:	2f16      	cmp	r7, #22
 800f252:	d851      	bhi.n	800f2f8 <_dtoa_r+0x210>
 800f254:	4b5b      	ldr	r3, [pc, #364]	@ (800f3c4 <_dtoa_r+0x2dc>)
 800f256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f262:	f7f1 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 800f266:	2800      	cmp	r0, #0
 800f268:	d048      	beq.n	800f2fc <_dtoa_r+0x214>
 800f26a:	3f01      	subs	r7, #1
 800f26c:	2300      	movs	r3, #0
 800f26e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f272:	1b9b      	subs	r3, r3, r6
 800f274:	1e5a      	subs	r2, r3, #1
 800f276:	bf44      	itt	mi
 800f278:	f1c3 0801 	rsbmi	r8, r3, #1
 800f27c:	2300      	movmi	r3, #0
 800f27e:	9208      	str	r2, [sp, #32]
 800f280:	bf54      	ite	pl
 800f282:	f04f 0800 	movpl.w	r8, #0
 800f286:	9308      	strmi	r3, [sp, #32]
 800f288:	2f00      	cmp	r7, #0
 800f28a:	db39      	blt.n	800f300 <_dtoa_r+0x218>
 800f28c:	9b08      	ldr	r3, [sp, #32]
 800f28e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f290:	443b      	add	r3, r7
 800f292:	9308      	str	r3, [sp, #32]
 800f294:	2300      	movs	r3, #0
 800f296:	930a      	str	r3, [sp, #40]	@ 0x28
 800f298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f29a:	2b09      	cmp	r3, #9
 800f29c:	d864      	bhi.n	800f368 <_dtoa_r+0x280>
 800f29e:	2b05      	cmp	r3, #5
 800f2a0:	bfc4      	itt	gt
 800f2a2:	3b04      	subgt	r3, #4
 800f2a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a8:	f1a3 0302 	sub.w	r3, r3, #2
 800f2ac:	bfcc      	ite	gt
 800f2ae:	2400      	movgt	r4, #0
 800f2b0:	2401      	movle	r4, #1
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d863      	bhi.n	800f37e <_dtoa_r+0x296>
 800f2b6:	e8df f003 	tbb	[pc, r3]
 800f2ba:	372a      	.short	0x372a
 800f2bc:	5535      	.short	0x5535
 800f2be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f2c2:	441e      	add	r6, r3
 800f2c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f2c8:	2b20      	cmp	r3, #32
 800f2ca:	bfc1      	itttt	gt
 800f2cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f2d0:	409f      	lslgt	r7, r3
 800f2d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f2d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f2da:	bfd6      	itet	le
 800f2dc:	f1c3 0320 	rsble	r3, r3, #32
 800f2e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f2e4:	fa04 f003 	lslle.w	r0, r4, r3
 800f2e8:	f7f1 f92c 	bl	8000544 <__aeabi_ui2d>
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f2f2:	3e01      	subs	r6, #1
 800f2f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f2f6:	e777      	b.n	800f1e8 <_dtoa_r+0x100>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e7b8      	b.n	800f26e <_dtoa_r+0x186>
 800f2fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f2fe:	e7b7      	b.n	800f270 <_dtoa_r+0x188>
 800f300:	427b      	negs	r3, r7
 800f302:	930a      	str	r3, [sp, #40]	@ 0x28
 800f304:	2300      	movs	r3, #0
 800f306:	eba8 0807 	sub.w	r8, r8, r7
 800f30a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f30c:	e7c4      	b.n	800f298 <_dtoa_r+0x1b0>
 800f30e:	2300      	movs	r3, #0
 800f310:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f314:	2b00      	cmp	r3, #0
 800f316:	dc35      	bgt.n	800f384 <_dtoa_r+0x29c>
 800f318:	2301      	movs	r3, #1
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	9307      	str	r3, [sp, #28]
 800f31e:	461a      	mov	r2, r3
 800f320:	920e      	str	r2, [sp, #56]	@ 0x38
 800f322:	e00b      	b.n	800f33c <_dtoa_r+0x254>
 800f324:	2301      	movs	r3, #1
 800f326:	e7f3      	b.n	800f310 <_dtoa_r+0x228>
 800f328:	2300      	movs	r3, #0
 800f32a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f32e:	18fb      	adds	r3, r7, r3
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	2b01      	cmp	r3, #1
 800f336:	9307      	str	r3, [sp, #28]
 800f338:	bfb8      	it	lt
 800f33a:	2301      	movlt	r3, #1
 800f33c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f340:	2100      	movs	r1, #0
 800f342:	2204      	movs	r2, #4
 800f344:	f102 0514 	add.w	r5, r2, #20
 800f348:	429d      	cmp	r5, r3
 800f34a:	d91f      	bls.n	800f38c <_dtoa_r+0x2a4>
 800f34c:	6041      	str	r1, [r0, #4]
 800f34e:	4658      	mov	r0, fp
 800f350:	f001 f824 	bl	801039c <_Balloc>
 800f354:	4682      	mov	sl, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	d13c      	bne.n	800f3d4 <_dtoa_r+0x2ec>
 800f35a:	4b1b      	ldr	r3, [pc, #108]	@ (800f3c8 <_dtoa_r+0x2e0>)
 800f35c:	4602      	mov	r2, r0
 800f35e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f362:	e6d8      	b.n	800f116 <_dtoa_r+0x2e>
 800f364:	2301      	movs	r3, #1
 800f366:	e7e0      	b.n	800f32a <_dtoa_r+0x242>
 800f368:	2401      	movs	r4, #1
 800f36a:	2300      	movs	r3, #0
 800f36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f36e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f370:	f04f 33ff 	mov.w	r3, #4294967295
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	9307      	str	r3, [sp, #28]
 800f378:	2200      	movs	r2, #0
 800f37a:	2312      	movs	r3, #18
 800f37c:	e7d0      	b.n	800f320 <_dtoa_r+0x238>
 800f37e:	2301      	movs	r3, #1
 800f380:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f382:	e7f5      	b.n	800f370 <_dtoa_r+0x288>
 800f384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	9307      	str	r3, [sp, #28]
 800f38a:	e7d7      	b.n	800f33c <_dtoa_r+0x254>
 800f38c:	3101      	adds	r1, #1
 800f38e:	0052      	lsls	r2, r2, #1
 800f390:	e7d8      	b.n	800f344 <_dtoa_r+0x25c>
 800f392:	bf00      	nop
 800f394:	f3af 8000 	nop.w
 800f398:	636f4361 	.word	0x636f4361
 800f39c:	3fd287a7 	.word	0x3fd287a7
 800f3a0:	8b60c8b3 	.word	0x8b60c8b3
 800f3a4:	3fc68a28 	.word	0x3fc68a28
 800f3a8:	509f79fb 	.word	0x509f79fb
 800f3ac:	3fd34413 	.word	0x3fd34413
 800f3b0:	080119ee 	.word	0x080119ee
 800f3b4:	08011a05 	.word	0x08011a05
 800f3b8:	7ff00000 	.word	0x7ff00000
 800f3bc:	080119b1 	.word	0x080119b1
 800f3c0:	3ff80000 	.word	0x3ff80000
 800f3c4:	08011b60 	.word	0x08011b60
 800f3c8:	08011a5d 	.word	0x08011a5d
 800f3cc:	080119ea 	.word	0x080119ea
 800f3d0:	080119b0 	.word	0x080119b0
 800f3d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f3d8:	6018      	str	r0, [r3, #0]
 800f3da:	9b07      	ldr	r3, [sp, #28]
 800f3dc:	2b0e      	cmp	r3, #14
 800f3de:	f200 80a4 	bhi.w	800f52a <_dtoa_r+0x442>
 800f3e2:	2c00      	cmp	r4, #0
 800f3e4:	f000 80a1 	beq.w	800f52a <_dtoa_r+0x442>
 800f3e8:	2f00      	cmp	r7, #0
 800f3ea:	dd33      	ble.n	800f454 <_dtoa_r+0x36c>
 800f3ec:	4bad      	ldr	r3, [pc, #692]	@ (800f6a4 <_dtoa_r+0x5bc>)
 800f3ee:	f007 020f 	and.w	r2, r7, #15
 800f3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3f6:	ed93 7b00 	vldr	d7, [r3]
 800f3fa:	05f8      	lsls	r0, r7, #23
 800f3fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f400:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f404:	d516      	bpl.n	800f434 <_dtoa_r+0x34c>
 800f406:	4ba8      	ldr	r3, [pc, #672]	@ (800f6a8 <_dtoa_r+0x5c0>)
 800f408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f40c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f410:	f7f1 fa3c 	bl	800088c <__aeabi_ddiv>
 800f414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f418:	f004 040f 	and.w	r4, r4, #15
 800f41c:	2603      	movs	r6, #3
 800f41e:	4da2      	ldr	r5, [pc, #648]	@ (800f6a8 <_dtoa_r+0x5c0>)
 800f420:	b954      	cbnz	r4, 800f438 <_dtoa_r+0x350>
 800f422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42a:	f7f1 fa2f 	bl	800088c <__aeabi_ddiv>
 800f42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f432:	e028      	b.n	800f486 <_dtoa_r+0x39e>
 800f434:	2602      	movs	r6, #2
 800f436:	e7f2      	b.n	800f41e <_dtoa_r+0x336>
 800f438:	07e1      	lsls	r1, r4, #31
 800f43a:	d508      	bpl.n	800f44e <_dtoa_r+0x366>
 800f43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f440:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f444:	f7f1 f8f8 	bl	8000638 <__aeabi_dmul>
 800f448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f44c:	3601      	adds	r6, #1
 800f44e:	1064      	asrs	r4, r4, #1
 800f450:	3508      	adds	r5, #8
 800f452:	e7e5      	b.n	800f420 <_dtoa_r+0x338>
 800f454:	f000 80d2 	beq.w	800f5fc <_dtoa_r+0x514>
 800f458:	427c      	negs	r4, r7
 800f45a:	4b92      	ldr	r3, [pc, #584]	@ (800f6a4 <_dtoa_r+0x5bc>)
 800f45c:	4d92      	ldr	r5, [pc, #584]	@ (800f6a8 <_dtoa_r+0x5c0>)
 800f45e:	f004 020f 	and.w	r2, r4, #15
 800f462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f46e:	f7f1 f8e3 	bl	8000638 <__aeabi_dmul>
 800f472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f476:	1124      	asrs	r4, r4, #4
 800f478:	2300      	movs	r3, #0
 800f47a:	2602      	movs	r6, #2
 800f47c:	2c00      	cmp	r4, #0
 800f47e:	f040 80b2 	bne.w	800f5e6 <_dtoa_r+0x4fe>
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1d3      	bne.n	800f42e <_dtoa_r+0x346>
 800f486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 80b7 	beq.w	800f600 <_dtoa_r+0x518>
 800f492:	4b86      	ldr	r3, [pc, #536]	@ (800f6ac <_dtoa_r+0x5c4>)
 800f494:	2200      	movs	r2, #0
 800f496:	4620      	mov	r0, r4
 800f498:	4629      	mov	r1, r5
 800f49a:	f7f1 fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	f000 80ae 	beq.w	800f600 <_dtoa_r+0x518>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 80aa 	beq.w	800f600 <_dtoa_r+0x518>
 800f4ac:	9b00      	ldr	r3, [sp, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	dd37      	ble.n	800f522 <_dtoa_r+0x43a>
 800f4b2:	1e7b      	subs	r3, r7, #1
 800f4b4:	9304      	str	r3, [sp, #16]
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	4b7d      	ldr	r3, [pc, #500]	@ (800f6b0 <_dtoa_r+0x5c8>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4629      	mov	r1, r5
 800f4be:	f7f1 f8bb 	bl	8000638 <__aeabi_dmul>
 800f4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c6:	9c00      	ldr	r4, [sp, #0]
 800f4c8:	3601      	adds	r6, #1
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f7f1 f84a 	bl	8000564 <__aeabi_i2d>
 800f4d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4d4:	f7f1 f8b0 	bl	8000638 <__aeabi_dmul>
 800f4d8:	4b76      	ldr	r3, [pc, #472]	@ (800f6b4 <_dtoa_r+0x5cc>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f7f0 fef6 	bl	80002cc <__adddf3>
 800f4e0:	4605      	mov	r5, r0
 800f4e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f4e6:	2c00      	cmp	r4, #0
 800f4e8:	f040 808d 	bne.w	800f606 <_dtoa_r+0x51e>
 800f4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4f0:	4b71      	ldr	r3, [pc, #452]	@ (800f6b8 <_dtoa_r+0x5d0>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f7f0 fee8 	bl	80002c8 <__aeabi_dsub>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f500:	462a      	mov	r2, r5
 800f502:	4633      	mov	r3, r6
 800f504:	f7f1 fb28 	bl	8000b58 <__aeabi_dcmpgt>
 800f508:	2800      	cmp	r0, #0
 800f50a:	f040 828b 	bne.w	800fa24 <_dtoa_r+0x93c>
 800f50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f512:	462a      	mov	r2, r5
 800f514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f518:	f7f1 fb00 	bl	8000b1c <__aeabi_dcmplt>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	f040 8128 	bne.w	800f772 <_dtoa_r+0x68a>
 800f522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f52a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f2c0 815a 	blt.w	800f7e6 <_dtoa_r+0x6fe>
 800f532:	2f0e      	cmp	r7, #14
 800f534:	f300 8157 	bgt.w	800f7e6 <_dtoa_r+0x6fe>
 800f538:	4b5a      	ldr	r3, [pc, #360]	@ (800f6a4 <_dtoa_r+0x5bc>)
 800f53a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f53e:	ed93 7b00 	vldr	d7, [r3]
 800f542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f544:	2b00      	cmp	r3, #0
 800f546:	ed8d 7b00 	vstr	d7, [sp]
 800f54a:	da03      	bge.n	800f554 <_dtoa_r+0x46c>
 800f54c:	9b07      	ldr	r3, [sp, #28]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f340 8101 	ble.w	800f756 <_dtoa_r+0x66e>
 800f554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f558:	4656      	mov	r6, sl
 800f55a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f55e:	4620      	mov	r0, r4
 800f560:	4629      	mov	r1, r5
 800f562:	f7f1 f993 	bl	800088c <__aeabi_ddiv>
 800f566:	f7f1 fb17 	bl	8000b98 <__aeabi_d2iz>
 800f56a:	4680      	mov	r8, r0
 800f56c:	f7f0 fffa 	bl	8000564 <__aeabi_i2d>
 800f570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f574:	f7f1 f860 	bl	8000638 <__aeabi_dmul>
 800f578:	4602      	mov	r2, r0
 800f57a:	460b      	mov	r3, r1
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f584:	f7f0 fea0 	bl	80002c8 <__aeabi_dsub>
 800f588:	f806 4b01 	strb.w	r4, [r6], #1
 800f58c:	9d07      	ldr	r5, [sp, #28]
 800f58e:	eba6 040a 	sub.w	r4, r6, sl
 800f592:	42a5      	cmp	r5, r4
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	f040 8117 	bne.w	800f7ca <_dtoa_r+0x6e2>
 800f59c:	f7f0 fe96 	bl	80002cc <__adddf3>
 800f5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	460d      	mov	r5, r1
 800f5a8:	f7f1 fad6 	bl	8000b58 <__aeabi_dcmpgt>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	f040 80f9 	bne.w	800f7a4 <_dtoa_r+0x6bc>
 800f5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	f7f1 faa5 	bl	8000b08 <__aeabi_dcmpeq>
 800f5be:	b118      	cbz	r0, 800f5c8 <_dtoa_r+0x4e0>
 800f5c0:	f018 0f01 	tst.w	r8, #1
 800f5c4:	f040 80ee 	bne.w	800f7a4 <_dtoa_r+0x6bc>
 800f5c8:	4649      	mov	r1, r9
 800f5ca:	4658      	mov	r0, fp
 800f5cc:	f000 ff26 	bl	801041c <_Bfree>
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	7033      	strb	r3, [r6, #0]
 800f5d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5d6:	3701      	adds	r7, #1
 800f5d8:	601f      	str	r7, [r3, #0]
 800f5da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 831d 	beq.w	800fc1c <_dtoa_r+0xb34>
 800f5e2:	601e      	str	r6, [r3, #0]
 800f5e4:	e31a      	b.n	800fc1c <_dtoa_r+0xb34>
 800f5e6:	07e2      	lsls	r2, r4, #31
 800f5e8:	d505      	bpl.n	800f5f6 <_dtoa_r+0x50e>
 800f5ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5ee:	f7f1 f823 	bl	8000638 <__aeabi_dmul>
 800f5f2:	3601      	adds	r6, #1
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	1064      	asrs	r4, r4, #1
 800f5f8:	3508      	adds	r5, #8
 800f5fa:	e73f      	b.n	800f47c <_dtoa_r+0x394>
 800f5fc:	2602      	movs	r6, #2
 800f5fe:	e742      	b.n	800f486 <_dtoa_r+0x39e>
 800f600:	9c07      	ldr	r4, [sp, #28]
 800f602:	9704      	str	r7, [sp, #16]
 800f604:	e761      	b.n	800f4ca <_dtoa_r+0x3e2>
 800f606:	4b27      	ldr	r3, [pc, #156]	@ (800f6a4 <_dtoa_r+0x5bc>)
 800f608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f60a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f60e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f612:	4454      	add	r4, sl
 800f614:	2900      	cmp	r1, #0
 800f616:	d053      	beq.n	800f6c0 <_dtoa_r+0x5d8>
 800f618:	4928      	ldr	r1, [pc, #160]	@ (800f6bc <_dtoa_r+0x5d4>)
 800f61a:	2000      	movs	r0, #0
 800f61c:	f7f1 f936 	bl	800088c <__aeabi_ddiv>
 800f620:	4633      	mov	r3, r6
 800f622:	462a      	mov	r2, r5
 800f624:	f7f0 fe50 	bl	80002c8 <__aeabi_dsub>
 800f628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f62c:	4656      	mov	r6, sl
 800f62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f632:	f7f1 fab1 	bl	8000b98 <__aeabi_d2iz>
 800f636:	4605      	mov	r5, r0
 800f638:	f7f0 ff94 	bl	8000564 <__aeabi_i2d>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f644:	f7f0 fe40 	bl	80002c8 <__aeabi_dsub>
 800f648:	3530      	adds	r5, #48	@ 0x30
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f652:	f806 5b01 	strb.w	r5, [r6], #1
 800f656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f65a:	f7f1 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d171      	bne.n	800f746 <_dtoa_r+0x65e>
 800f662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f666:	4911      	ldr	r1, [pc, #68]	@ (800f6ac <_dtoa_r+0x5c4>)
 800f668:	2000      	movs	r0, #0
 800f66a:	f7f0 fe2d 	bl	80002c8 <__aeabi_dsub>
 800f66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f672:	f7f1 fa53 	bl	8000b1c <__aeabi_dcmplt>
 800f676:	2800      	cmp	r0, #0
 800f678:	f040 8095 	bne.w	800f7a6 <_dtoa_r+0x6be>
 800f67c:	42a6      	cmp	r6, r4
 800f67e:	f43f af50 	beq.w	800f522 <_dtoa_r+0x43a>
 800f682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f686:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b0 <_dtoa_r+0x5c8>)
 800f688:	2200      	movs	r2, #0
 800f68a:	f7f0 ffd5 	bl	8000638 <__aeabi_dmul>
 800f68e:	4b08      	ldr	r3, [pc, #32]	@ (800f6b0 <_dtoa_r+0x5c8>)
 800f690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f694:	2200      	movs	r2, #0
 800f696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f69a:	f7f0 ffcd 	bl	8000638 <__aeabi_dmul>
 800f69e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6a2:	e7c4      	b.n	800f62e <_dtoa_r+0x546>
 800f6a4:	08011b60 	.word	0x08011b60
 800f6a8:	08011b38 	.word	0x08011b38
 800f6ac:	3ff00000 	.word	0x3ff00000
 800f6b0:	40240000 	.word	0x40240000
 800f6b4:	401c0000 	.word	0x401c0000
 800f6b8:	40140000 	.word	0x40140000
 800f6bc:	3fe00000 	.word	0x3fe00000
 800f6c0:	4631      	mov	r1, r6
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f7f0 ffb8 	bl	8000638 <__aeabi_dmul>
 800f6c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f6cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800f6ce:	4656      	mov	r6, sl
 800f6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6d4:	f7f1 fa60 	bl	8000b98 <__aeabi_d2iz>
 800f6d8:	4605      	mov	r5, r0
 800f6da:	f7f0 ff43 	bl	8000564 <__aeabi_i2d>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e6:	f7f0 fdef 	bl	80002c8 <__aeabi_dsub>
 800f6ea:	3530      	adds	r5, #48	@ 0x30
 800f6ec:	f806 5b01 	strb.w	r5, [r6], #1
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	42a6      	cmp	r6, r4
 800f6f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6fa:	f04f 0200 	mov.w	r2, #0
 800f6fe:	d124      	bne.n	800f74a <_dtoa_r+0x662>
 800f700:	4bac      	ldr	r3, [pc, #688]	@ (800f9b4 <_dtoa_r+0x8cc>)
 800f702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f706:	f7f0 fde1 	bl	80002cc <__adddf3>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f712:	f7f1 fa21 	bl	8000b58 <__aeabi_dcmpgt>
 800f716:	2800      	cmp	r0, #0
 800f718:	d145      	bne.n	800f7a6 <_dtoa_r+0x6be>
 800f71a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f71e:	49a5      	ldr	r1, [pc, #660]	@ (800f9b4 <_dtoa_r+0x8cc>)
 800f720:	2000      	movs	r0, #0
 800f722:	f7f0 fdd1 	bl	80002c8 <__aeabi_dsub>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f72e:	f7f1 f9f5 	bl	8000b1c <__aeabi_dcmplt>
 800f732:	2800      	cmp	r0, #0
 800f734:	f43f aef5 	beq.w	800f522 <_dtoa_r+0x43a>
 800f738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f73a:	1e73      	subs	r3, r6, #1
 800f73c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f73e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f742:	2b30      	cmp	r3, #48	@ 0x30
 800f744:	d0f8      	beq.n	800f738 <_dtoa_r+0x650>
 800f746:	9f04      	ldr	r7, [sp, #16]
 800f748:	e73e      	b.n	800f5c8 <_dtoa_r+0x4e0>
 800f74a:	4b9b      	ldr	r3, [pc, #620]	@ (800f9b8 <_dtoa_r+0x8d0>)
 800f74c:	f7f0 ff74 	bl	8000638 <__aeabi_dmul>
 800f750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f754:	e7bc      	b.n	800f6d0 <_dtoa_r+0x5e8>
 800f756:	d10c      	bne.n	800f772 <_dtoa_r+0x68a>
 800f758:	4b98      	ldr	r3, [pc, #608]	@ (800f9bc <_dtoa_r+0x8d4>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f760:	f7f0 ff6a 	bl	8000638 <__aeabi_dmul>
 800f764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f768:	f7f1 f9ec 	bl	8000b44 <__aeabi_dcmpge>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	f000 8157 	beq.w	800fa20 <_dtoa_r+0x938>
 800f772:	2400      	movs	r4, #0
 800f774:	4625      	mov	r5, r4
 800f776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f778:	43db      	mvns	r3, r3
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	4656      	mov	r6, sl
 800f77e:	2700      	movs	r7, #0
 800f780:	4621      	mov	r1, r4
 800f782:	4658      	mov	r0, fp
 800f784:	f000 fe4a 	bl	801041c <_Bfree>
 800f788:	2d00      	cmp	r5, #0
 800f78a:	d0dc      	beq.n	800f746 <_dtoa_r+0x65e>
 800f78c:	b12f      	cbz	r7, 800f79a <_dtoa_r+0x6b2>
 800f78e:	42af      	cmp	r7, r5
 800f790:	d003      	beq.n	800f79a <_dtoa_r+0x6b2>
 800f792:	4639      	mov	r1, r7
 800f794:	4658      	mov	r0, fp
 800f796:	f000 fe41 	bl	801041c <_Bfree>
 800f79a:	4629      	mov	r1, r5
 800f79c:	4658      	mov	r0, fp
 800f79e:	f000 fe3d 	bl	801041c <_Bfree>
 800f7a2:	e7d0      	b.n	800f746 <_dtoa_r+0x65e>
 800f7a4:	9704      	str	r7, [sp, #16]
 800f7a6:	4633      	mov	r3, r6
 800f7a8:	461e      	mov	r6, r3
 800f7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7ae:	2a39      	cmp	r2, #57	@ 0x39
 800f7b0:	d107      	bne.n	800f7c2 <_dtoa_r+0x6da>
 800f7b2:	459a      	cmp	sl, r3
 800f7b4:	d1f8      	bne.n	800f7a8 <_dtoa_r+0x6c0>
 800f7b6:	9a04      	ldr	r2, [sp, #16]
 800f7b8:	3201      	adds	r2, #1
 800f7ba:	9204      	str	r2, [sp, #16]
 800f7bc:	2230      	movs	r2, #48	@ 0x30
 800f7be:	f88a 2000 	strb.w	r2, [sl]
 800f7c2:	781a      	ldrb	r2, [r3, #0]
 800f7c4:	3201      	adds	r2, #1
 800f7c6:	701a      	strb	r2, [r3, #0]
 800f7c8:	e7bd      	b.n	800f746 <_dtoa_r+0x65e>
 800f7ca:	4b7b      	ldr	r3, [pc, #492]	@ (800f9b8 <_dtoa_r+0x8d0>)
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f7f0 ff33 	bl	8000638 <__aeabi_dmul>
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	4604      	mov	r4, r0
 800f7d8:	460d      	mov	r5, r1
 800f7da:	f7f1 f995 	bl	8000b08 <__aeabi_dcmpeq>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f aebb 	beq.w	800f55a <_dtoa_r+0x472>
 800f7e4:	e6f0      	b.n	800f5c8 <_dtoa_r+0x4e0>
 800f7e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7e8:	2a00      	cmp	r2, #0
 800f7ea:	f000 80db 	beq.w	800f9a4 <_dtoa_r+0x8bc>
 800f7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f0:	2a01      	cmp	r2, #1
 800f7f2:	f300 80bf 	bgt.w	800f974 <_dtoa_r+0x88c>
 800f7f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	f000 80b7 	beq.w	800f96c <_dtoa_r+0x884>
 800f7fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f804:	4646      	mov	r6, r8
 800f806:	9a08      	ldr	r2, [sp, #32]
 800f808:	2101      	movs	r1, #1
 800f80a:	441a      	add	r2, r3
 800f80c:	4658      	mov	r0, fp
 800f80e:	4498      	add	r8, r3
 800f810:	9208      	str	r2, [sp, #32]
 800f812:	f000 ff01 	bl	8010618 <__i2b>
 800f816:	4605      	mov	r5, r0
 800f818:	b15e      	cbz	r6, 800f832 <_dtoa_r+0x74a>
 800f81a:	9b08      	ldr	r3, [sp, #32]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dd08      	ble.n	800f832 <_dtoa_r+0x74a>
 800f820:	42b3      	cmp	r3, r6
 800f822:	9a08      	ldr	r2, [sp, #32]
 800f824:	bfa8      	it	ge
 800f826:	4633      	movge	r3, r6
 800f828:	eba8 0803 	sub.w	r8, r8, r3
 800f82c:	1af6      	subs	r6, r6, r3
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	9308      	str	r3, [sp, #32]
 800f832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f834:	b1f3      	cbz	r3, 800f874 <_dtoa_r+0x78c>
 800f836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f000 80b7 	beq.w	800f9ac <_dtoa_r+0x8c4>
 800f83e:	b18c      	cbz	r4, 800f864 <_dtoa_r+0x77c>
 800f840:	4629      	mov	r1, r5
 800f842:	4622      	mov	r2, r4
 800f844:	4658      	mov	r0, fp
 800f846:	f000 ffa7 	bl	8010798 <__pow5mult>
 800f84a:	464a      	mov	r2, r9
 800f84c:	4601      	mov	r1, r0
 800f84e:	4605      	mov	r5, r0
 800f850:	4658      	mov	r0, fp
 800f852:	f000 fef7 	bl	8010644 <__multiply>
 800f856:	4649      	mov	r1, r9
 800f858:	9004      	str	r0, [sp, #16]
 800f85a:	4658      	mov	r0, fp
 800f85c:	f000 fdde 	bl	801041c <_Bfree>
 800f860:	9b04      	ldr	r3, [sp, #16]
 800f862:	4699      	mov	r9, r3
 800f864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f866:	1b1a      	subs	r2, r3, r4
 800f868:	d004      	beq.n	800f874 <_dtoa_r+0x78c>
 800f86a:	4649      	mov	r1, r9
 800f86c:	4658      	mov	r0, fp
 800f86e:	f000 ff93 	bl	8010798 <__pow5mult>
 800f872:	4681      	mov	r9, r0
 800f874:	2101      	movs	r1, #1
 800f876:	4658      	mov	r0, fp
 800f878:	f000 fece 	bl	8010618 <__i2b>
 800f87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f87e:	4604      	mov	r4, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	f000 81cf 	beq.w	800fc24 <_dtoa_r+0xb3c>
 800f886:	461a      	mov	r2, r3
 800f888:	4601      	mov	r1, r0
 800f88a:	4658      	mov	r0, fp
 800f88c:	f000 ff84 	bl	8010798 <__pow5mult>
 800f890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f892:	2b01      	cmp	r3, #1
 800f894:	4604      	mov	r4, r0
 800f896:	f300 8095 	bgt.w	800f9c4 <_dtoa_r+0x8dc>
 800f89a:	9b02      	ldr	r3, [sp, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f040 8087 	bne.w	800f9b0 <_dtoa_r+0x8c8>
 800f8a2:	9b03      	ldr	r3, [sp, #12]
 800f8a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f040 8089 	bne.w	800f9c0 <_dtoa_r+0x8d8>
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8b4:	0d1b      	lsrs	r3, r3, #20
 800f8b6:	051b      	lsls	r3, r3, #20
 800f8b8:	b12b      	cbz	r3, 800f8c6 <_dtoa_r+0x7de>
 800f8ba:	9b08      	ldr	r3, [sp, #32]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	9308      	str	r3, [sp, #32]
 800f8c0:	f108 0801 	add.w	r8, r8, #1
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 81b0 	beq.w	800fc30 <_dtoa_r+0xb48>
 800f8d0:	6923      	ldr	r3, [r4, #16]
 800f8d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8d6:	6918      	ldr	r0, [r3, #16]
 800f8d8:	f000 fe52 	bl	8010580 <__hi0bits>
 800f8dc:	f1c0 0020 	rsb	r0, r0, #32
 800f8e0:	9b08      	ldr	r3, [sp, #32]
 800f8e2:	4418      	add	r0, r3
 800f8e4:	f010 001f 	ands.w	r0, r0, #31
 800f8e8:	d077      	beq.n	800f9da <_dtoa_r+0x8f2>
 800f8ea:	f1c0 0320 	rsb	r3, r0, #32
 800f8ee:	2b04      	cmp	r3, #4
 800f8f0:	dd6b      	ble.n	800f9ca <_dtoa_r+0x8e2>
 800f8f2:	9b08      	ldr	r3, [sp, #32]
 800f8f4:	f1c0 001c 	rsb	r0, r0, #28
 800f8f8:	4403      	add	r3, r0
 800f8fa:	4480      	add	r8, r0
 800f8fc:	4406      	add	r6, r0
 800f8fe:	9308      	str	r3, [sp, #32]
 800f900:	f1b8 0f00 	cmp.w	r8, #0
 800f904:	dd05      	ble.n	800f912 <_dtoa_r+0x82a>
 800f906:	4649      	mov	r1, r9
 800f908:	4642      	mov	r2, r8
 800f90a:	4658      	mov	r0, fp
 800f90c:	f000 ff9e 	bl	801084c <__lshift>
 800f910:	4681      	mov	r9, r0
 800f912:	9b08      	ldr	r3, [sp, #32]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd05      	ble.n	800f924 <_dtoa_r+0x83c>
 800f918:	4621      	mov	r1, r4
 800f91a:	461a      	mov	r2, r3
 800f91c:	4658      	mov	r0, fp
 800f91e:	f000 ff95 	bl	801084c <__lshift>
 800f922:	4604      	mov	r4, r0
 800f924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f926:	2b00      	cmp	r3, #0
 800f928:	d059      	beq.n	800f9de <_dtoa_r+0x8f6>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4648      	mov	r0, r9
 800f92e:	f000 fff9 	bl	8010924 <__mcmp>
 800f932:	2800      	cmp	r0, #0
 800f934:	da53      	bge.n	800f9de <_dtoa_r+0x8f6>
 800f936:	1e7b      	subs	r3, r7, #1
 800f938:	9304      	str	r3, [sp, #16]
 800f93a:	4649      	mov	r1, r9
 800f93c:	2300      	movs	r3, #0
 800f93e:	220a      	movs	r2, #10
 800f940:	4658      	mov	r0, fp
 800f942:	f000 fd8d 	bl	8010460 <__multadd>
 800f946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f948:	4681      	mov	r9, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 8172 	beq.w	800fc34 <_dtoa_r+0xb4c>
 800f950:	2300      	movs	r3, #0
 800f952:	4629      	mov	r1, r5
 800f954:	220a      	movs	r2, #10
 800f956:	4658      	mov	r0, fp
 800f958:	f000 fd82 	bl	8010460 <__multadd>
 800f95c:	9b00      	ldr	r3, [sp, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	4605      	mov	r5, r0
 800f962:	dc67      	bgt.n	800fa34 <_dtoa_r+0x94c>
 800f964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f966:	2b02      	cmp	r3, #2
 800f968:	dc41      	bgt.n	800f9ee <_dtoa_r+0x906>
 800f96a:	e063      	b.n	800fa34 <_dtoa_r+0x94c>
 800f96c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f96e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f972:	e746      	b.n	800f802 <_dtoa_r+0x71a>
 800f974:	9b07      	ldr	r3, [sp, #28]
 800f976:	1e5c      	subs	r4, r3, #1
 800f978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f97a:	42a3      	cmp	r3, r4
 800f97c:	bfbf      	itttt	lt
 800f97e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f984:	1ae3      	sublt	r3, r4, r3
 800f986:	bfb4      	ite	lt
 800f988:	18d2      	addlt	r2, r2, r3
 800f98a:	1b1c      	subge	r4, r3, r4
 800f98c:	9b07      	ldr	r3, [sp, #28]
 800f98e:	bfbc      	itt	lt
 800f990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f992:	2400      	movlt	r4, #0
 800f994:	2b00      	cmp	r3, #0
 800f996:	bfb5      	itete	lt
 800f998:	eba8 0603 	sublt.w	r6, r8, r3
 800f99c:	9b07      	ldrge	r3, [sp, #28]
 800f99e:	2300      	movlt	r3, #0
 800f9a0:	4646      	movge	r6, r8
 800f9a2:	e730      	b.n	800f806 <_dtoa_r+0x71e>
 800f9a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f9a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f9a8:	4646      	mov	r6, r8
 800f9aa:	e735      	b.n	800f818 <_dtoa_r+0x730>
 800f9ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9ae:	e75c      	b.n	800f86a <_dtoa_r+0x782>
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	e788      	b.n	800f8c6 <_dtoa_r+0x7de>
 800f9b4:	3fe00000 	.word	0x3fe00000
 800f9b8:	40240000 	.word	0x40240000
 800f9bc:	40140000 	.word	0x40140000
 800f9c0:	9b02      	ldr	r3, [sp, #8]
 800f9c2:	e780      	b.n	800f8c6 <_dtoa_r+0x7de>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9c8:	e782      	b.n	800f8d0 <_dtoa_r+0x7e8>
 800f9ca:	d099      	beq.n	800f900 <_dtoa_r+0x818>
 800f9cc:	9a08      	ldr	r2, [sp, #32]
 800f9ce:	331c      	adds	r3, #28
 800f9d0:	441a      	add	r2, r3
 800f9d2:	4498      	add	r8, r3
 800f9d4:	441e      	add	r6, r3
 800f9d6:	9208      	str	r2, [sp, #32]
 800f9d8:	e792      	b.n	800f900 <_dtoa_r+0x818>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	e7f6      	b.n	800f9cc <_dtoa_r+0x8e4>
 800f9de:	9b07      	ldr	r3, [sp, #28]
 800f9e0:	9704      	str	r7, [sp, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	dc20      	bgt.n	800fa28 <_dtoa_r+0x940>
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ea:	2b02      	cmp	r3, #2
 800f9ec:	dd1e      	ble.n	800fa2c <_dtoa_r+0x944>
 800f9ee:	9b00      	ldr	r3, [sp, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f47f aec0 	bne.w	800f776 <_dtoa_r+0x68e>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	2205      	movs	r2, #5
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f000 fd30 	bl	8010460 <__multadd>
 800fa00:	4601      	mov	r1, r0
 800fa02:	4604      	mov	r4, r0
 800fa04:	4648      	mov	r0, r9
 800fa06:	f000 ff8d 	bl	8010924 <__mcmp>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	f77f aeb3 	ble.w	800f776 <_dtoa_r+0x68e>
 800fa10:	4656      	mov	r6, sl
 800fa12:	2331      	movs	r3, #49	@ 0x31
 800fa14:	f806 3b01 	strb.w	r3, [r6], #1
 800fa18:	9b04      	ldr	r3, [sp, #16]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	9304      	str	r3, [sp, #16]
 800fa1e:	e6ae      	b.n	800f77e <_dtoa_r+0x696>
 800fa20:	9c07      	ldr	r4, [sp, #28]
 800fa22:	9704      	str	r7, [sp, #16]
 800fa24:	4625      	mov	r5, r4
 800fa26:	e7f3      	b.n	800fa10 <_dtoa_r+0x928>
 800fa28:	9b07      	ldr	r3, [sp, #28]
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 8104 	beq.w	800fc3c <_dtoa_r+0xb54>
 800fa34:	2e00      	cmp	r6, #0
 800fa36:	dd05      	ble.n	800fa44 <_dtoa_r+0x95c>
 800fa38:	4629      	mov	r1, r5
 800fa3a:	4632      	mov	r2, r6
 800fa3c:	4658      	mov	r0, fp
 800fa3e:	f000 ff05 	bl	801084c <__lshift>
 800fa42:	4605      	mov	r5, r0
 800fa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d05a      	beq.n	800fb00 <_dtoa_r+0xa18>
 800fa4a:	6869      	ldr	r1, [r5, #4]
 800fa4c:	4658      	mov	r0, fp
 800fa4e:	f000 fca5 	bl	801039c <_Balloc>
 800fa52:	4606      	mov	r6, r0
 800fa54:	b928      	cbnz	r0, 800fa62 <_dtoa_r+0x97a>
 800fa56:	4b84      	ldr	r3, [pc, #528]	@ (800fc68 <_dtoa_r+0xb80>)
 800fa58:	4602      	mov	r2, r0
 800fa5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa5e:	f7ff bb5a 	b.w	800f116 <_dtoa_r+0x2e>
 800fa62:	692a      	ldr	r2, [r5, #16]
 800fa64:	3202      	adds	r2, #2
 800fa66:	0092      	lsls	r2, r2, #2
 800fa68:	f105 010c 	add.w	r1, r5, #12
 800fa6c:	300c      	adds	r0, #12
 800fa6e:	f7ff fa94 	bl	800ef9a <memcpy>
 800fa72:	2201      	movs	r2, #1
 800fa74:	4631      	mov	r1, r6
 800fa76:	4658      	mov	r0, fp
 800fa78:	f000 fee8 	bl	801084c <__lshift>
 800fa7c:	f10a 0301 	add.w	r3, sl, #1
 800fa80:	9307      	str	r3, [sp, #28]
 800fa82:	9b00      	ldr	r3, [sp, #0]
 800fa84:	4453      	add	r3, sl
 800fa86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa88:	9b02      	ldr	r3, [sp, #8]
 800fa8a:	f003 0301 	and.w	r3, r3, #1
 800fa8e:	462f      	mov	r7, r5
 800fa90:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa92:	4605      	mov	r5, r0
 800fa94:	9b07      	ldr	r3, [sp, #28]
 800fa96:	4621      	mov	r1, r4
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	4648      	mov	r0, r9
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	f7ff fa99 	bl	800efd4 <quorem>
 800faa2:	4639      	mov	r1, r7
 800faa4:	9002      	str	r0, [sp, #8]
 800faa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800faaa:	4648      	mov	r0, r9
 800faac:	f000 ff3a 	bl	8010924 <__mcmp>
 800fab0:	462a      	mov	r2, r5
 800fab2:	9008      	str	r0, [sp, #32]
 800fab4:	4621      	mov	r1, r4
 800fab6:	4658      	mov	r0, fp
 800fab8:	f000 ff50 	bl	801095c <__mdiff>
 800fabc:	68c2      	ldr	r2, [r0, #12]
 800fabe:	4606      	mov	r6, r0
 800fac0:	bb02      	cbnz	r2, 800fb04 <_dtoa_r+0xa1c>
 800fac2:	4601      	mov	r1, r0
 800fac4:	4648      	mov	r0, r9
 800fac6:	f000 ff2d 	bl	8010924 <__mcmp>
 800faca:	4602      	mov	r2, r0
 800facc:	4631      	mov	r1, r6
 800face:	4658      	mov	r0, fp
 800fad0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fad2:	f000 fca3 	bl	801041c <_Bfree>
 800fad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fada:	9e07      	ldr	r6, [sp, #28]
 800fadc:	ea43 0102 	orr.w	r1, r3, r2
 800fae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae2:	4319      	orrs	r1, r3
 800fae4:	d110      	bne.n	800fb08 <_dtoa_r+0xa20>
 800fae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faea:	d029      	beq.n	800fb40 <_dtoa_r+0xa58>
 800faec:	9b08      	ldr	r3, [sp, #32]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	dd02      	ble.n	800faf8 <_dtoa_r+0xa10>
 800faf2:	9b02      	ldr	r3, [sp, #8]
 800faf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800faf8:	9b00      	ldr	r3, [sp, #0]
 800fafa:	f883 8000 	strb.w	r8, [r3]
 800fafe:	e63f      	b.n	800f780 <_dtoa_r+0x698>
 800fb00:	4628      	mov	r0, r5
 800fb02:	e7bb      	b.n	800fa7c <_dtoa_r+0x994>
 800fb04:	2201      	movs	r2, #1
 800fb06:	e7e1      	b.n	800facc <_dtoa_r+0x9e4>
 800fb08:	9b08      	ldr	r3, [sp, #32]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	db04      	blt.n	800fb18 <_dtoa_r+0xa30>
 800fb0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb10:	430b      	orrs	r3, r1
 800fb12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb14:	430b      	orrs	r3, r1
 800fb16:	d120      	bne.n	800fb5a <_dtoa_r+0xa72>
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	dded      	ble.n	800faf8 <_dtoa_r+0xa10>
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4658      	mov	r0, fp
 800fb22:	f000 fe93 	bl	801084c <__lshift>
 800fb26:	4621      	mov	r1, r4
 800fb28:	4681      	mov	r9, r0
 800fb2a:	f000 fefb 	bl	8010924 <__mcmp>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	dc03      	bgt.n	800fb3a <_dtoa_r+0xa52>
 800fb32:	d1e1      	bne.n	800faf8 <_dtoa_r+0xa10>
 800fb34:	f018 0f01 	tst.w	r8, #1
 800fb38:	d0de      	beq.n	800faf8 <_dtoa_r+0xa10>
 800fb3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb3e:	d1d8      	bne.n	800faf2 <_dtoa_r+0xa0a>
 800fb40:	9a00      	ldr	r2, [sp, #0]
 800fb42:	2339      	movs	r3, #57	@ 0x39
 800fb44:	7013      	strb	r3, [r2, #0]
 800fb46:	4633      	mov	r3, r6
 800fb48:	461e      	mov	r6, r3
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb50:	2a39      	cmp	r2, #57	@ 0x39
 800fb52:	d052      	beq.n	800fbfa <_dtoa_r+0xb12>
 800fb54:	3201      	adds	r2, #1
 800fb56:	701a      	strb	r2, [r3, #0]
 800fb58:	e612      	b.n	800f780 <_dtoa_r+0x698>
 800fb5a:	2a00      	cmp	r2, #0
 800fb5c:	dd07      	ble.n	800fb6e <_dtoa_r+0xa86>
 800fb5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb62:	d0ed      	beq.n	800fb40 <_dtoa_r+0xa58>
 800fb64:	9a00      	ldr	r2, [sp, #0]
 800fb66:	f108 0301 	add.w	r3, r8, #1
 800fb6a:	7013      	strb	r3, [r2, #0]
 800fb6c:	e608      	b.n	800f780 <_dtoa_r+0x698>
 800fb6e:	9b07      	ldr	r3, [sp, #28]
 800fb70:	9a07      	ldr	r2, [sp, #28]
 800fb72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fb76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d028      	beq.n	800fbce <_dtoa_r+0xae6>
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	2300      	movs	r3, #0
 800fb80:	220a      	movs	r2, #10
 800fb82:	4658      	mov	r0, fp
 800fb84:	f000 fc6c 	bl	8010460 <__multadd>
 800fb88:	42af      	cmp	r7, r5
 800fb8a:	4681      	mov	r9, r0
 800fb8c:	f04f 0300 	mov.w	r3, #0
 800fb90:	f04f 020a 	mov.w	r2, #10
 800fb94:	4639      	mov	r1, r7
 800fb96:	4658      	mov	r0, fp
 800fb98:	d107      	bne.n	800fbaa <_dtoa_r+0xac2>
 800fb9a:	f000 fc61 	bl	8010460 <__multadd>
 800fb9e:	4607      	mov	r7, r0
 800fba0:	4605      	mov	r5, r0
 800fba2:	9b07      	ldr	r3, [sp, #28]
 800fba4:	3301      	adds	r3, #1
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	e774      	b.n	800fa94 <_dtoa_r+0x9ac>
 800fbaa:	f000 fc59 	bl	8010460 <__multadd>
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	220a      	movs	r2, #10
 800fbb6:	4658      	mov	r0, fp
 800fbb8:	f000 fc52 	bl	8010460 <__multadd>
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	e7f0      	b.n	800fba2 <_dtoa_r+0xaba>
 800fbc0:	9b00      	ldr	r3, [sp, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	bfcc      	ite	gt
 800fbc6:	461e      	movgt	r6, r3
 800fbc8:	2601      	movle	r6, #1
 800fbca:	4456      	add	r6, sl
 800fbcc:	2700      	movs	r7, #0
 800fbce:	4649      	mov	r1, r9
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	4658      	mov	r0, fp
 800fbd4:	f000 fe3a 	bl	801084c <__lshift>
 800fbd8:	4621      	mov	r1, r4
 800fbda:	4681      	mov	r9, r0
 800fbdc:	f000 fea2 	bl	8010924 <__mcmp>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	dcb0      	bgt.n	800fb46 <_dtoa_r+0xa5e>
 800fbe4:	d102      	bne.n	800fbec <_dtoa_r+0xb04>
 800fbe6:	f018 0f01 	tst.w	r8, #1
 800fbea:	d1ac      	bne.n	800fb46 <_dtoa_r+0xa5e>
 800fbec:	4633      	mov	r3, r6
 800fbee:	461e      	mov	r6, r3
 800fbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbf4:	2a30      	cmp	r2, #48	@ 0x30
 800fbf6:	d0fa      	beq.n	800fbee <_dtoa_r+0xb06>
 800fbf8:	e5c2      	b.n	800f780 <_dtoa_r+0x698>
 800fbfa:	459a      	cmp	sl, r3
 800fbfc:	d1a4      	bne.n	800fb48 <_dtoa_r+0xa60>
 800fbfe:	9b04      	ldr	r3, [sp, #16]
 800fc00:	3301      	adds	r3, #1
 800fc02:	9304      	str	r3, [sp, #16]
 800fc04:	2331      	movs	r3, #49	@ 0x31
 800fc06:	f88a 3000 	strb.w	r3, [sl]
 800fc0a:	e5b9      	b.n	800f780 <_dtoa_r+0x698>
 800fc0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc6c <_dtoa_r+0xb84>
 800fc12:	b11b      	cbz	r3, 800fc1c <_dtoa_r+0xb34>
 800fc14:	f10a 0308 	add.w	r3, sl, #8
 800fc18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	4650      	mov	r0, sl
 800fc1e:	b019      	add	sp, #100	@ 0x64
 800fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	f77f ae37 	ble.w	800f89a <_dtoa_r+0x7b2>
 800fc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc30:	2001      	movs	r0, #1
 800fc32:	e655      	b.n	800f8e0 <_dtoa_r+0x7f8>
 800fc34:	9b00      	ldr	r3, [sp, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f77f aed6 	ble.w	800f9e8 <_dtoa_r+0x900>
 800fc3c:	4656      	mov	r6, sl
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4648      	mov	r0, r9
 800fc42:	f7ff f9c7 	bl	800efd4 <quorem>
 800fc46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc4a:	f806 8b01 	strb.w	r8, [r6], #1
 800fc4e:	9b00      	ldr	r3, [sp, #0]
 800fc50:	eba6 020a 	sub.w	r2, r6, sl
 800fc54:	4293      	cmp	r3, r2
 800fc56:	ddb3      	ble.n	800fbc0 <_dtoa_r+0xad8>
 800fc58:	4649      	mov	r1, r9
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	220a      	movs	r2, #10
 800fc5e:	4658      	mov	r0, fp
 800fc60:	f000 fbfe 	bl	8010460 <__multadd>
 800fc64:	4681      	mov	r9, r0
 800fc66:	e7ea      	b.n	800fc3e <_dtoa_r+0xb56>
 800fc68:	08011a5d 	.word	0x08011a5d
 800fc6c:	080119e1 	.word	0x080119e1

0800fc70 <_free_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4605      	mov	r5, r0
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d041      	beq.n	800fcfc <_free_r+0x8c>
 800fc78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc7c:	1f0c      	subs	r4, r1, #4
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	bfb8      	it	lt
 800fc82:	18e4      	addlt	r4, r4, r3
 800fc84:	f7fd fb36 	bl	800d2f4 <__malloc_lock>
 800fc88:	4a1d      	ldr	r2, [pc, #116]	@ (800fd00 <_free_r+0x90>)
 800fc8a:	6813      	ldr	r3, [r2, #0]
 800fc8c:	b933      	cbnz	r3, 800fc9c <_free_r+0x2c>
 800fc8e:	6063      	str	r3, [r4, #4]
 800fc90:	6014      	str	r4, [r2, #0]
 800fc92:	4628      	mov	r0, r5
 800fc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc98:	f7fd bb32 	b.w	800d300 <__malloc_unlock>
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	d908      	bls.n	800fcb2 <_free_r+0x42>
 800fca0:	6820      	ldr	r0, [r4, #0]
 800fca2:	1821      	adds	r1, r4, r0
 800fca4:	428b      	cmp	r3, r1
 800fca6:	bf01      	itttt	eq
 800fca8:	6819      	ldreq	r1, [r3, #0]
 800fcaa:	685b      	ldreq	r3, [r3, #4]
 800fcac:	1809      	addeq	r1, r1, r0
 800fcae:	6021      	streq	r1, [r4, #0]
 800fcb0:	e7ed      	b.n	800fc8e <_free_r+0x1e>
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	b10b      	cbz	r3, 800fcbc <_free_r+0x4c>
 800fcb8:	42a3      	cmp	r3, r4
 800fcba:	d9fa      	bls.n	800fcb2 <_free_r+0x42>
 800fcbc:	6811      	ldr	r1, [r2, #0]
 800fcbe:	1850      	adds	r0, r2, r1
 800fcc0:	42a0      	cmp	r0, r4
 800fcc2:	d10b      	bne.n	800fcdc <_free_r+0x6c>
 800fcc4:	6820      	ldr	r0, [r4, #0]
 800fcc6:	4401      	add	r1, r0
 800fcc8:	1850      	adds	r0, r2, r1
 800fcca:	4283      	cmp	r3, r0
 800fccc:	6011      	str	r1, [r2, #0]
 800fcce:	d1e0      	bne.n	800fc92 <_free_r+0x22>
 800fcd0:	6818      	ldr	r0, [r3, #0]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	6053      	str	r3, [r2, #4]
 800fcd6:	4408      	add	r0, r1
 800fcd8:	6010      	str	r0, [r2, #0]
 800fcda:	e7da      	b.n	800fc92 <_free_r+0x22>
 800fcdc:	d902      	bls.n	800fce4 <_free_r+0x74>
 800fcde:	230c      	movs	r3, #12
 800fce0:	602b      	str	r3, [r5, #0]
 800fce2:	e7d6      	b.n	800fc92 <_free_r+0x22>
 800fce4:	6820      	ldr	r0, [r4, #0]
 800fce6:	1821      	adds	r1, r4, r0
 800fce8:	428b      	cmp	r3, r1
 800fcea:	bf04      	itt	eq
 800fcec:	6819      	ldreq	r1, [r3, #0]
 800fcee:	685b      	ldreq	r3, [r3, #4]
 800fcf0:	6063      	str	r3, [r4, #4]
 800fcf2:	bf04      	itt	eq
 800fcf4:	1809      	addeq	r1, r1, r0
 800fcf6:	6021      	streq	r1, [r4, #0]
 800fcf8:	6054      	str	r4, [r2, #4]
 800fcfa:	e7ca      	b.n	800fc92 <_free_r+0x22>
 800fcfc:	bd38      	pop	{r3, r4, r5, pc}
 800fcfe:	bf00      	nop
 800fd00:	20002494 	.word	0x20002494

0800fd04 <rshift>:
 800fd04:	6903      	ldr	r3, [r0, #16]
 800fd06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd12:	f100 0414 	add.w	r4, r0, #20
 800fd16:	dd45      	ble.n	800fda4 <rshift+0xa0>
 800fd18:	f011 011f 	ands.w	r1, r1, #31
 800fd1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd24:	d10c      	bne.n	800fd40 <rshift+0x3c>
 800fd26:	f100 0710 	add.w	r7, r0, #16
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	42b1      	cmp	r1, r6
 800fd2e:	d334      	bcc.n	800fd9a <rshift+0x96>
 800fd30:	1a9b      	subs	r3, r3, r2
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	1eea      	subs	r2, r5, #3
 800fd36:	4296      	cmp	r6, r2
 800fd38:	bf38      	it	cc
 800fd3a:	2300      	movcc	r3, #0
 800fd3c:	4423      	add	r3, r4
 800fd3e:	e015      	b.n	800fd6c <rshift+0x68>
 800fd40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd44:	f1c1 0820 	rsb	r8, r1, #32
 800fd48:	40cf      	lsrs	r7, r1
 800fd4a:	f105 0e04 	add.w	lr, r5, #4
 800fd4e:	46a1      	mov	r9, r4
 800fd50:	4576      	cmp	r6, lr
 800fd52:	46f4      	mov	ip, lr
 800fd54:	d815      	bhi.n	800fd82 <rshift+0x7e>
 800fd56:	1a9a      	subs	r2, r3, r2
 800fd58:	0092      	lsls	r2, r2, #2
 800fd5a:	3a04      	subs	r2, #4
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	42ae      	cmp	r6, r5
 800fd60:	bf38      	it	cc
 800fd62:	2200      	movcc	r2, #0
 800fd64:	18a3      	adds	r3, r4, r2
 800fd66:	50a7      	str	r7, [r4, r2]
 800fd68:	b107      	cbz	r7, 800fd6c <rshift+0x68>
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	1b1a      	subs	r2, r3, r4
 800fd6e:	42a3      	cmp	r3, r4
 800fd70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd74:	bf08      	it	eq
 800fd76:	2300      	moveq	r3, #0
 800fd78:	6102      	str	r2, [r0, #16]
 800fd7a:	bf08      	it	eq
 800fd7c:	6143      	streq	r3, [r0, #20]
 800fd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd82:	f8dc c000 	ldr.w	ip, [ip]
 800fd86:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd8a:	ea4c 0707 	orr.w	r7, ip, r7
 800fd8e:	f849 7b04 	str.w	r7, [r9], #4
 800fd92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd96:	40cf      	lsrs	r7, r1
 800fd98:	e7da      	b.n	800fd50 <rshift+0x4c>
 800fd9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fda2:	e7c3      	b.n	800fd2c <rshift+0x28>
 800fda4:	4623      	mov	r3, r4
 800fda6:	e7e1      	b.n	800fd6c <rshift+0x68>

0800fda8 <__hexdig_fun>:
 800fda8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fdac:	2b09      	cmp	r3, #9
 800fdae:	d802      	bhi.n	800fdb6 <__hexdig_fun+0xe>
 800fdb0:	3820      	subs	r0, #32
 800fdb2:	b2c0      	uxtb	r0, r0
 800fdb4:	4770      	bx	lr
 800fdb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fdba:	2b05      	cmp	r3, #5
 800fdbc:	d801      	bhi.n	800fdc2 <__hexdig_fun+0x1a>
 800fdbe:	3847      	subs	r0, #71	@ 0x47
 800fdc0:	e7f7      	b.n	800fdb2 <__hexdig_fun+0xa>
 800fdc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fdc6:	2b05      	cmp	r3, #5
 800fdc8:	d801      	bhi.n	800fdce <__hexdig_fun+0x26>
 800fdca:	3827      	subs	r0, #39	@ 0x27
 800fdcc:	e7f1      	b.n	800fdb2 <__hexdig_fun+0xa>
 800fdce:	2000      	movs	r0, #0
 800fdd0:	4770      	bx	lr
	...

0800fdd4 <__gethex>:
 800fdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd8:	b085      	sub	sp, #20
 800fdda:	468a      	mov	sl, r1
 800fddc:	9302      	str	r3, [sp, #8]
 800fdde:	680b      	ldr	r3, [r1, #0]
 800fde0:	9001      	str	r0, [sp, #4]
 800fde2:	4690      	mov	r8, r2
 800fde4:	1c9c      	adds	r4, r3, #2
 800fde6:	46a1      	mov	r9, r4
 800fde8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fdec:	2830      	cmp	r0, #48	@ 0x30
 800fdee:	d0fa      	beq.n	800fde6 <__gethex+0x12>
 800fdf0:	eba9 0303 	sub.w	r3, r9, r3
 800fdf4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fdf8:	f7ff ffd6 	bl	800fda8 <__hexdig_fun>
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d168      	bne.n	800fed4 <__gethex+0x100>
 800fe02:	49a0      	ldr	r1, [pc, #640]	@ (8010084 <__gethex+0x2b0>)
 800fe04:	2201      	movs	r2, #1
 800fe06:	4648      	mov	r0, r9
 800fe08:	f7ff f82d 	bl	800ee66 <strncmp>
 800fe0c:	4607      	mov	r7, r0
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d167      	bne.n	800fee2 <__gethex+0x10e>
 800fe12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fe16:	4626      	mov	r6, r4
 800fe18:	f7ff ffc6 	bl	800fda8 <__hexdig_fun>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d062      	beq.n	800fee6 <__gethex+0x112>
 800fe20:	4623      	mov	r3, r4
 800fe22:	7818      	ldrb	r0, [r3, #0]
 800fe24:	2830      	cmp	r0, #48	@ 0x30
 800fe26:	4699      	mov	r9, r3
 800fe28:	f103 0301 	add.w	r3, r3, #1
 800fe2c:	d0f9      	beq.n	800fe22 <__gethex+0x4e>
 800fe2e:	f7ff ffbb 	bl	800fda8 <__hexdig_fun>
 800fe32:	fab0 f580 	clz	r5, r0
 800fe36:	096d      	lsrs	r5, r5, #5
 800fe38:	f04f 0b01 	mov.w	fp, #1
 800fe3c:	464a      	mov	r2, r9
 800fe3e:	4616      	mov	r6, r2
 800fe40:	3201      	adds	r2, #1
 800fe42:	7830      	ldrb	r0, [r6, #0]
 800fe44:	f7ff ffb0 	bl	800fda8 <__hexdig_fun>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d1f8      	bne.n	800fe3e <__gethex+0x6a>
 800fe4c:	498d      	ldr	r1, [pc, #564]	@ (8010084 <__gethex+0x2b0>)
 800fe4e:	2201      	movs	r2, #1
 800fe50:	4630      	mov	r0, r6
 800fe52:	f7ff f808 	bl	800ee66 <strncmp>
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d13f      	bne.n	800feda <__gethex+0x106>
 800fe5a:	b944      	cbnz	r4, 800fe6e <__gethex+0x9a>
 800fe5c:	1c74      	adds	r4, r6, #1
 800fe5e:	4622      	mov	r2, r4
 800fe60:	4616      	mov	r6, r2
 800fe62:	3201      	adds	r2, #1
 800fe64:	7830      	ldrb	r0, [r6, #0]
 800fe66:	f7ff ff9f 	bl	800fda8 <__hexdig_fun>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d1f8      	bne.n	800fe60 <__gethex+0x8c>
 800fe6e:	1ba4      	subs	r4, r4, r6
 800fe70:	00a7      	lsls	r7, r4, #2
 800fe72:	7833      	ldrb	r3, [r6, #0]
 800fe74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fe78:	2b50      	cmp	r3, #80	@ 0x50
 800fe7a:	d13e      	bne.n	800fefa <__gethex+0x126>
 800fe7c:	7873      	ldrb	r3, [r6, #1]
 800fe7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fe80:	d033      	beq.n	800feea <__gethex+0x116>
 800fe82:	2b2d      	cmp	r3, #45	@ 0x2d
 800fe84:	d034      	beq.n	800fef0 <__gethex+0x11c>
 800fe86:	1c71      	adds	r1, r6, #1
 800fe88:	2400      	movs	r4, #0
 800fe8a:	7808      	ldrb	r0, [r1, #0]
 800fe8c:	f7ff ff8c 	bl	800fda8 <__hexdig_fun>
 800fe90:	1e43      	subs	r3, r0, #1
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	2b18      	cmp	r3, #24
 800fe96:	d830      	bhi.n	800fefa <__gethex+0x126>
 800fe98:	f1a0 0210 	sub.w	r2, r0, #16
 800fe9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fea0:	f7ff ff82 	bl	800fda8 <__hexdig_fun>
 800fea4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fea8:	fa5f fc8c 	uxtb.w	ip, ip
 800feac:	f1bc 0f18 	cmp.w	ip, #24
 800feb0:	f04f 030a 	mov.w	r3, #10
 800feb4:	d91e      	bls.n	800fef4 <__gethex+0x120>
 800feb6:	b104      	cbz	r4, 800feba <__gethex+0xe6>
 800feb8:	4252      	negs	r2, r2
 800feba:	4417      	add	r7, r2
 800febc:	f8ca 1000 	str.w	r1, [sl]
 800fec0:	b1ed      	cbz	r5, 800fefe <__gethex+0x12a>
 800fec2:	f1bb 0f00 	cmp.w	fp, #0
 800fec6:	bf0c      	ite	eq
 800fec8:	2506      	moveq	r5, #6
 800feca:	2500      	movne	r5, #0
 800fecc:	4628      	mov	r0, r5
 800fece:	b005      	add	sp, #20
 800fed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed4:	2500      	movs	r5, #0
 800fed6:	462c      	mov	r4, r5
 800fed8:	e7b0      	b.n	800fe3c <__gethex+0x68>
 800feda:	2c00      	cmp	r4, #0
 800fedc:	d1c7      	bne.n	800fe6e <__gethex+0x9a>
 800fede:	4627      	mov	r7, r4
 800fee0:	e7c7      	b.n	800fe72 <__gethex+0x9e>
 800fee2:	464e      	mov	r6, r9
 800fee4:	462f      	mov	r7, r5
 800fee6:	2501      	movs	r5, #1
 800fee8:	e7c3      	b.n	800fe72 <__gethex+0x9e>
 800feea:	2400      	movs	r4, #0
 800feec:	1cb1      	adds	r1, r6, #2
 800feee:	e7cc      	b.n	800fe8a <__gethex+0xb6>
 800fef0:	2401      	movs	r4, #1
 800fef2:	e7fb      	b.n	800feec <__gethex+0x118>
 800fef4:	fb03 0002 	mla	r0, r3, r2, r0
 800fef8:	e7ce      	b.n	800fe98 <__gethex+0xc4>
 800fefa:	4631      	mov	r1, r6
 800fefc:	e7de      	b.n	800febc <__gethex+0xe8>
 800fefe:	eba6 0309 	sub.w	r3, r6, r9
 800ff02:	3b01      	subs	r3, #1
 800ff04:	4629      	mov	r1, r5
 800ff06:	2b07      	cmp	r3, #7
 800ff08:	dc0a      	bgt.n	800ff20 <__gethex+0x14c>
 800ff0a:	9801      	ldr	r0, [sp, #4]
 800ff0c:	f000 fa46 	bl	801039c <_Balloc>
 800ff10:	4604      	mov	r4, r0
 800ff12:	b940      	cbnz	r0, 800ff26 <__gethex+0x152>
 800ff14:	4b5c      	ldr	r3, [pc, #368]	@ (8010088 <__gethex+0x2b4>)
 800ff16:	4602      	mov	r2, r0
 800ff18:	21e4      	movs	r1, #228	@ 0xe4
 800ff1a:	485c      	ldr	r0, [pc, #368]	@ (801008c <__gethex+0x2b8>)
 800ff1c:	f001 f996 	bl	801124c <__assert_func>
 800ff20:	3101      	adds	r1, #1
 800ff22:	105b      	asrs	r3, r3, #1
 800ff24:	e7ef      	b.n	800ff06 <__gethex+0x132>
 800ff26:	f100 0a14 	add.w	sl, r0, #20
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	4655      	mov	r5, sl
 800ff2e:	469b      	mov	fp, r3
 800ff30:	45b1      	cmp	r9, r6
 800ff32:	d337      	bcc.n	800ffa4 <__gethex+0x1d0>
 800ff34:	f845 bb04 	str.w	fp, [r5], #4
 800ff38:	eba5 050a 	sub.w	r5, r5, sl
 800ff3c:	10ad      	asrs	r5, r5, #2
 800ff3e:	6125      	str	r5, [r4, #16]
 800ff40:	4658      	mov	r0, fp
 800ff42:	f000 fb1d 	bl	8010580 <__hi0bits>
 800ff46:	016d      	lsls	r5, r5, #5
 800ff48:	f8d8 6000 	ldr.w	r6, [r8]
 800ff4c:	1a2d      	subs	r5, r5, r0
 800ff4e:	42b5      	cmp	r5, r6
 800ff50:	dd54      	ble.n	800fffc <__gethex+0x228>
 800ff52:	1bad      	subs	r5, r5, r6
 800ff54:	4629      	mov	r1, r5
 800ff56:	4620      	mov	r0, r4
 800ff58:	f000 feb1 	bl	8010cbe <__any_on>
 800ff5c:	4681      	mov	r9, r0
 800ff5e:	b178      	cbz	r0, 800ff80 <__gethex+0x1ac>
 800ff60:	1e6b      	subs	r3, r5, #1
 800ff62:	1159      	asrs	r1, r3, #5
 800ff64:	f003 021f 	and.w	r2, r3, #31
 800ff68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ff6c:	f04f 0901 	mov.w	r9, #1
 800ff70:	fa09 f202 	lsl.w	r2, r9, r2
 800ff74:	420a      	tst	r2, r1
 800ff76:	d003      	beq.n	800ff80 <__gethex+0x1ac>
 800ff78:	454b      	cmp	r3, r9
 800ff7a:	dc36      	bgt.n	800ffea <__gethex+0x216>
 800ff7c:	f04f 0902 	mov.w	r9, #2
 800ff80:	4629      	mov	r1, r5
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff febe 	bl	800fd04 <rshift>
 800ff88:	442f      	add	r7, r5
 800ff8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff8e:	42bb      	cmp	r3, r7
 800ff90:	da42      	bge.n	8010018 <__gethex+0x244>
 800ff92:	9801      	ldr	r0, [sp, #4]
 800ff94:	4621      	mov	r1, r4
 800ff96:	f000 fa41 	bl	801041c <_Bfree>
 800ff9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	25a3      	movs	r5, #163	@ 0xa3
 800ffa2:	e793      	b.n	800fecc <__gethex+0xf8>
 800ffa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ffa8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ffaa:	d012      	beq.n	800ffd2 <__gethex+0x1fe>
 800ffac:	2b20      	cmp	r3, #32
 800ffae:	d104      	bne.n	800ffba <__gethex+0x1e6>
 800ffb0:	f845 bb04 	str.w	fp, [r5], #4
 800ffb4:	f04f 0b00 	mov.w	fp, #0
 800ffb8:	465b      	mov	r3, fp
 800ffba:	7830      	ldrb	r0, [r6, #0]
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	f7ff fef3 	bl	800fda8 <__hexdig_fun>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	f000 000f 	and.w	r0, r0, #15
 800ffc8:	4098      	lsls	r0, r3
 800ffca:	ea4b 0b00 	orr.w	fp, fp, r0
 800ffce:	3304      	adds	r3, #4
 800ffd0:	e7ae      	b.n	800ff30 <__gethex+0x15c>
 800ffd2:	45b1      	cmp	r9, r6
 800ffd4:	d8ea      	bhi.n	800ffac <__gethex+0x1d8>
 800ffd6:	492b      	ldr	r1, [pc, #172]	@ (8010084 <__gethex+0x2b0>)
 800ffd8:	9303      	str	r3, [sp, #12]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f7fe ff42 	bl	800ee66 <strncmp>
 800ffe2:	9b03      	ldr	r3, [sp, #12]
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d1e1      	bne.n	800ffac <__gethex+0x1d8>
 800ffe8:	e7a2      	b.n	800ff30 <__gethex+0x15c>
 800ffea:	1ea9      	subs	r1, r5, #2
 800ffec:	4620      	mov	r0, r4
 800ffee:	f000 fe66 	bl	8010cbe <__any_on>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d0c2      	beq.n	800ff7c <__gethex+0x1a8>
 800fff6:	f04f 0903 	mov.w	r9, #3
 800fffa:	e7c1      	b.n	800ff80 <__gethex+0x1ac>
 800fffc:	da09      	bge.n	8010012 <__gethex+0x23e>
 800fffe:	1b75      	subs	r5, r6, r5
 8010000:	4621      	mov	r1, r4
 8010002:	9801      	ldr	r0, [sp, #4]
 8010004:	462a      	mov	r2, r5
 8010006:	f000 fc21 	bl	801084c <__lshift>
 801000a:	1b7f      	subs	r7, r7, r5
 801000c:	4604      	mov	r4, r0
 801000e:	f100 0a14 	add.w	sl, r0, #20
 8010012:	f04f 0900 	mov.w	r9, #0
 8010016:	e7b8      	b.n	800ff8a <__gethex+0x1b6>
 8010018:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801001c:	42bd      	cmp	r5, r7
 801001e:	dd6f      	ble.n	8010100 <__gethex+0x32c>
 8010020:	1bed      	subs	r5, r5, r7
 8010022:	42ae      	cmp	r6, r5
 8010024:	dc34      	bgt.n	8010090 <__gethex+0x2bc>
 8010026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801002a:	2b02      	cmp	r3, #2
 801002c:	d022      	beq.n	8010074 <__gethex+0x2a0>
 801002e:	2b03      	cmp	r3, #3
 8010030:	d024      	beq.n	801007c <__gethex+0x2a8>
 8010032:	2b01      	cmp	r3, #1
 8010034:	d115      	bne.n	8010062 <__gethex+0x28e>
 8010036:	42ae      	cmp	r6, r5
 8010038:	d113      	bne.n	8010062 <__gethex+0x28e>
 801003a:	2e01      	cmp	r6, #1
 801003c:	d10b      	bne.n	8010056 <__gethex+0x282>
 801003e:	9a02      	ldr	r2, [sp, #8]
 8010040:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010044:	6013      	str	r3, [r2, #0]
 8010046:	2301      	movs	r3, #1
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	f8ca 3000 	str.w	r3, [sl]
 801004e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010050:	2562      	movs	r5, #98	@ 0x62
 8010052:	601c      	str	r4, [r3, #0]
 8010054:	e73a      	b.n	800fecc <__gethex+0xf8>
 8010056:	1e71      	subs	r1, r6, #1
 8010058:	4620      	mov	r0, r4
 801005a:	f000 fe30 	bl	8010cbe <__any_on>
 801005e:	2800      	cmp	r0, #0
 8010060:	d1ed      	bne.n	801003e <__gethex+0x26a>
 8010062:	9801      	ldr	r0, [sp, #4]
 8010064:	4621      	mov	r1, r4
 8010066:	f000 f9d9 	bl	801041c <_Bfree>
 801006a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801006c:	2300      	movs	r3, #0
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	2550      	movs	r5, #80	@ 0x50
 8010072:	e72b      	b.n	800fecc <__gethex+0xf8>
 8010074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1f3      	bne.n	8010062 <__gethex+0x28e>
 801007a:	e7e0      	b.n	801003e <__gethex+0x26a>
 801007c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1dd      	bne.n	801003e <__gethex+0x26a>
 8010082:	e7ee      	b.n	8010062 <__gethex+0x28e>
 8010084:	08011948 	.word	0x08011948
 8010088:	08011a5d 	.word	0x08011a5d
 801008c:	08011a6e 	.word	0x08011a6e
 8010090:	1e6f      	subs	r7, r5, #1
 8010092:	f1b9 0f00 	cmp.w	r9, #0
 8010096:	d130      	bne.n	80100fa <__gethex+0x326>
 8010098:	b127      	cbz	r7, 80100a4 <__gethex+0x2d0>
 801009a:	4639      	mov	r1, r7
 801009c:	4620      	mov	r0, r4
 801009e:	f000 fe0e 	bl	8010cbe <__any_on>
 80100a2:	4681      	mov	r9, r0
 80100a4:	117a      	asrs	r2, r7, #5
 80100a6:	2301      	movs	r3, #1
 80100a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80100ac:	f007 071f 	and.w	r7, r7, #31
 80100b0:	40bb      	lsls	r3, r7
 80100b2:	4213      	tst	r3, r2
 80100b4:	4629      	mov	r1, r5
 80100b6:	4620      	mov	r0, r4
 80100b8:	bf18      	it	ne
 80100ba:	f049 0902 	orrne.w	r9, r9, #2
 80100be:	f7ff fe21 	bl	800fd04 <rshift>
 80100c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80100c6:	1b76      	subs	r6, r6, r5
 80100c8:	2502      	movs	r5, #2
 80100ca:	f1b9 0f00 	cmp.w	r9, #0
 80100ce:	d047      	beq.n	8010160 <__gethex+0x38c>
 80100d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d015      	beq.n	8010104 <__gethex+0x330>
 80100d8:	2b03      	cmp	r3, #3
 80100da:	d017      	beq.n	801010c <__gethex+0x338>
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d109      	bne.n	80100f4 <__gethex+0x320>
 80100e0:	f019 0f02 	tst.w	r9, #2
 80100e4:	d006      	beq.n	80100f4 <__gethex+0x320>
 80100e6:	f8da 3000 	ldr.w	r3, [sl]
 80100ea:	ea49 0903 	orr.w	r9, r9, r3
 80100ee:	f019 0f01 	tst.w	r9, #1
 80100f2:	d10e      	bne.n	8010112 <__gethex+0x33e>
 80100f4:	f045 0510 	orr.w	r5, r5, #16
 80100f8:	e032      	b.n	8010160 <__gethex+0x38c>
 80100fa:	f04f 0901 	mov.w	r9, #1
 80100fe:	e7d1      	b.n	80100a4 <__gethex+0x2d0>
 8010100:	2501      	movs	r5, #1
 8010102:	e7e2      	b.n	80100ca <__gethex+0x2f6>
 8010104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010106:	f1c3 0301 	rsb	r3, r3, #1
 801010a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801010c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0f0      	beq.n	80100f4 <__gethex+0x320>
 8010112:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010116:	f104 0314 	add.w	r3, r4, #20
 801011a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801011e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010122:	f04f 0c00 	mov.w	ip, #0
 8010126:	4618      	mov	r0, r3
 8010128:	f853 2b04 	ldr.w	r2, [r3], #4
 801012c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010130:	d01b      	beq.n	801016a <__gethex+0x396>
 8010132:	3201      	adds	r2, #1
 8010134:	6002      	str	r2, [r0, #0]
 8010136:	2d02      	cmp	r5, #2
 8010138:	f104 0314 	add.w	r3, r4, #20
 801013c:	d13c      	bne.n	80101b8 <__gethex+0x3e4>
 801013e:	f8d8 2000 	ldr.w	r2, [r8]
 8010142:	3a01      	subs	r2, #1
 8010144:	42b2      	cmp	r2, r6
 8010146:	d109      	bne.n	801015c <__gethex+0x388>
 8010148:	1171      	asrs	r1, r6, #5
 801014a:	2201      	movs	r2, #1
 801014c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010150:	f006 061f 	and.w	r6, r6, #31
 8010154:	fa02 f606 	lsl.w	r6, r2, r6
 8010158:	421e      	tst	r6, r3
 801015a:	d13a      	bne.n	80101d2 <__gethex+0x3fe>
 801015c:	f045 0520 	orr.w	r5, r5, #32
 8010160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010162:	601c      	str	r4, [r3, #0]
 8010164:	9b02      	ldr	r3, [sp, #8]
 8010166:	601f      	str	r7, [r3, #0]
 8010168:	e6b0      	b.n	800fecc <__gethex+0xf8>
 801016a:	4299      	cmp	r1, r3
 801016c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010170:	d8d9      	bhi.n	8010126 <__gethex+0x352>
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	459b      	cmp	fp, r3
 8010176:	db17      	blt.n	80101a8 <__gethex+0x3d4>
 8010178:	6861      	ldr	r1, [r4, #4]
 801017a:	9801      	ldr	r0, [sp, #4]
 801017c:	3101      	adds	r1, #1
 801017e:	f000 f90d 	bl	801039c <_Balloc>
 8010182:	4681      	mov	r9, r0
 8010184:	b918      	cbnz	r0, 801018e <__gethex+0x3ba>
 8010186:	4b1a      	ldr	r3, [pc, #104]	@ (80101f0 <__gethex+0x41c>)
 8010188:	4602      	mov	r2, r0
 801018a:	2184      	movs	r1, #132	@ 0x84
 801018c:	e6c5      	b.n	800ff1a <__gethex+0x146>
 801018e:	6922      	ldr	r2, [r4, #16]
 8010190:	3202      	adds	r2, #2
 8010192:	f104 010c 	add.w	r1, r4, #12
 8010196:	0092      	lsls	r2, r2, #2
 8010198:	300c      	adds	r0, #12
 801019a:	f7fe fefe 	bl	800ef9a <memcpy>
 801019e:	4621      	mov	r1, r4
 80101a0:	9801      	ldr	r0, [sp, #4]
 80101a2:	f000 f93b 	bl	801041c <_Bfree>
 80101a6:	464c      	mov	r4, r9
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101b0:	6122      	str	r2, [r4, #16]
 80101b2:	2201      	movs	r2, #1
 80101b4:	615a      	str	r2, [r3, #20]
 80101b6:	e7be      	b.n	8010136 <__gethex+0x362>
 80101b8:	6922      	ldr	r2, [r4, #16]
 80101ba:	455a      	cmp	r2, fp
 80101bc:	dd0b      	ble.n	80101d6 <__gethex+0x402>
 80101be:	2101      	movs	r1, #1
 80101c0:	4620      	mov	r0, r4
 80101c2:	f7ff fd9f 	bl	800fd04 <rshift>
 80101c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101ca:	3701      	adds	r7, #1
 80101cc:	42bb      	cmp	r3, r7
 80101ce:	f6ff aee0 	blt.w	800ff92 <__gethex+0x1be>
 80101d2:	2501      	movs	r5, #1
 80101d4:	e7c2      	b.n	801015c <__gethex+0x388>
 80101d6:	f016 061f 	ands.w	r6, r6, #31
 80101da:	d0fa      	beq.n	80101d2 <__gethex+0x3fe>
 80101dc:	4453      	add	r3, sl
 80101de:	f1c6 0620 	rsb	r6, r6, #32
 80101e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80101e6:	f000 f9cb 	bl	8010580 <__hi0bits>
 80101ea:	42b0      	cmp	r0, r6
 80101ec:	dbe7      	blt.n	80101be <__gethex+0x3ea>
 80101ee:	e7f0      	b.n	80101d2 <__gethex+0x3fe>
 80101f0:	08011a5d 	.word	0x08011a5d

080101f4 <L_shift>:
 80101f4:	f1c2 0208 	rsb	r2, r2, #8
 80101f8:	0092      	lsls	r2, r2, #2
 80101fa:	b570      	push	{r4, r5, r6, lr}
 80101fc:	f1c2 0620 	rsb	r6, r2, #32
 8010200:	6843      	ldr	r3, [r0, #4]
 8010202:	6804      	ldr	r4, [r0, #0]
 8010204:	fa03 f506 	lsl.w	r5, r3, r6
 8010208:	432c      	orrs	r4, r5
 801020a:	40d3      	lsrs	r3, r2
 801020c:	6004      	str	r4, [r0, #0]
 801020e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010212:	4288      	cmp	r0, r1
 8010214:	d3f4      	bcc.n	8010200 <L_shift+0xc>
 8010216:	bd70      	pop	{r4, r5, r6, pc}

08010218 <__match>:
 8010218:	b530      	push	{r4, r5, lr}
 801021a:	6803      	ldr	r3, [r0, #0]
 801021c:	3301      	adds	r3, #1
 801021e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010222:	b914      	cbnz	r4, 801022a <__match+0x12>
 8010224:	6003      	str	r3, [r0, #0]
 8010226:	2001      	movs	r0, #1
 8010228:	bd30      	pop	{r4, r5, pc}
 801022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010232:	2d19      	cmp	r5, #25
 8010234:	bf98      	it	ls
 8010236:	3220      	addls	r2, #32
 8010238:	42a2      	cmp	r2, r4
 801023a:	d0f0      	beq.n	801021e <__match+0x6>
 801023c:	2000      	movs	r0, #0
 801023e:	e7f3      	b.n	8010228 <__match+0x10>

08010240 <__hexnan>:
 8010240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010244:	680b      	ldr	r3, [r1, #0]
 8010246:	6801      	ldr	r1, [r0, #0]
 8010248:	115e      	asrs	r6, r3, #5
 801024a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801024e:	f013 031f 	ands.w	r3, r3, #31
 8010252:	b087      	sub	sp, #28
 8010254:	bf18      	it	ne
 8010256:	3604      	addne	r6, #4
 8010258:	2500      	movs	r5, #0
 801025a:	1f37      	subs	r7, r6, #4
 801025c:	4682      	mov	sl, r0
 801025e:	4690      	mov	r8, r2
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	f846 5c04 	str.w	r5, [r6, #-4]
 8010266:	46b9      	mov	r9, r7
 8010268:	463c      	mov	r4, r7
 801026a:	9502      	str	r5, [sp, #8]
 801026c:	46ab      	mov	fp, r5
 801026e:	784a      	ldrb	r2, [r1, #1]
 8010270:	1c4b      	adds	r3, r1, #1
 8010272:	9303      	str	r3, [sp, #12]
 8010274:	b342      	cbz	r2, 80102c8 <__hexnan+0x88>
 8010276:	4610      	mov	r0, r2
 8010278:	9105      	str	r1, [sp, #20]
 801027a:	9204      	str	r2, [sp, #16]
 801027c:	f7ff fd94 	bl	800fda8 <__hexdig_fun>
 8010280:	2800      	cmp	r0, #0
 8010282:	d151      	bne.n	8010328 <__hexnan+0xe8>
 8010284:	9a04      	ldr	r2, [sp, #16]
 8010286:	9905      	ldr	r1, [sp, #20]
 8010288:	2a20      	cmp	r2, #32
 801028a:	d818      	bhi.n	80102be <__hexnan+0x7e>
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	459b      	cmp	fp, r3
 8010290:	dd13      	ble.n	80102ba <__hexnan+0x7a>
 8010292:	454c      	cmp	r4, r9
 8010294:	d206      	bcs.n	80102a4 <__hexnan+0x64>
 8010296:	2d07      	cmp	r5, #7
 8010298:	dc04      	bgt.n	80102a4 <__hexnan+0x64>
 801029a:	462a      	mov	r2, r5
 801029c:	4649      	mov	r1, r9
 801029e:	4620      	mov	r0, r4
 80102a0:	f7ff ffa8 	bl	80101f4 <L_shift>
 80102a4:	4544      	cmp	r4, r8
 80102a6:	d952      	bls.n	801034e <__hexnan+0x10e>
 80102a8:	2300      	movs	r3, #0
 80102aa:	f1a4 0904 	sub.w	r9, r4, #4
 80102ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80102b2:	f8cd b008 	str.w	fp, [sp, #8]
 80102b6:	464c      	mov	r4, r9
 80102b8:	461d      	mov	r5, r3
 80102ba:	9903      	ldr	r1, [sp, #12]
 80102bc:	e7d7      	b.n	801026e <__hexnan+0x2e>
 80102be:	2a29      	cmp	r2, #41	@ 0x29
 80102c0:	d157      	bne.n	8010372 <__hexnan+0x132>
 80102c2:	3102      	adds	r1, #2
 80102c4:	f8ca 1000 	str.w	r1, [sl]
 80102c8:	f1bb 0f00 	cmp.w	fp, #0
 80102cc:	d051      	beq.n	8010372 <__hexnan+0x132>
 80102ce:	454c      	cmp	r4, r9
 80102d0:	d206      	bcs.n	80102e0 <__hexnan+0xa0>
 80102d2:	2d07      	cmp	r5, #7
 80102d4:	dc04      	bgt.n	80102e0 <__hexnan+0xa0>
 80102d6:	462a      	mov	r2, r5
 80102d8:	4649      	mov	r1, r9
 80102da:	4620      	mov	r0, r4
 80102dc:	f7ff ff8a 	bl	80101f4 <L_shift>
 80102e0:	4544      	cmp	r4, r8
 80102e2:	d936      	bls.n	8010352 <__hexnan+0x112>
 80102e4:	f1a8 0204 	sub.w	r2, r8, #4
 80102e8:	4623      	mov	r3, r4
 80102ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80102ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80102f2:	429f      	cmp	r7, r3
 80102f4:	d2f9      	bcs.n	80102ea <__hexnan+0xaa>
 80102f6:	1b3b      	subs	r3, r7, r4
 80102f8:	f023 0303 	bic.w	r3, r3, #3
 80102fc:	3304      	adds	r3, #4
 80102fe:	3401      	adds	r4, #1
 8010300:	3e03      	subs	r6, #3
 8010302:	42b4      	cmp	r4, r6
 8010304:	bf88      	it	hi
 8010306:	2304      	movhi	r3, #4
 8010308:	4443      	add	r3, r8
 801030a:	2200      	movs	r2, #0
 801030c:	f843 2b04 	str.w	r2, [r3], #4
 8010310:	429f      	cmp	r7, r3
 8010312:	d2fb      	bcs.n	801030c <__hexnan+0xcc>
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	b91b      	cbnz	r3, 8010320 <__hexnan+0xe0>
 8010318:	4547      	cmp	r7, r8
 801031a:	d128      	bne.n	801036e <__hexnan+0x12e>
 801031c:	2301      	movs	r3, #1
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	2005      	movs	r0, #5
 8010322:	b007      	add	sp, #28
 8010324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010328:	3501      	adds	r5, #1
 801032a:	2d08      	cmp	r5, #8
 801032c:	f10b 0b01 	add.w	fp, fp, #1
 8010330:	dd06      	ble.n	8010340 <__hexnan+0x100>
 8010332:	4544      	cmp	r4, r8
 8010334:	d9c1      	bls.n	80102ba <__hexnan+0x7a>
 8010336:	2300      	movs	r3, #0
 8010338:	f844 3c04 	str.w	r3, [r4, #-4]
 801033c:	2501      	movs	r5, #1
 801033e:	3c04      	subs	r4, #4
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	f000 000f 	and.w	r0, r0, #15
 8010346:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801034a:	6020      	str	r0, [r4, #0]
 801034c:	e7b5      	b.n	80102ba <__hexnan+0x7a>
 801034e:	2508      	movs	r5, #8
 8010350:	e7b3      	b.n	80102ba <__hexnan+0x7a>
 8010352:	9b01      	ldr	r3, [sp, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d0dd      	beq.n	8010314 <__hexnan+0xd4>
 8010358:	f1c3 0320 	rsb	r3, r3, #32
 801035c:	f04f 32ff 	mov.w	r2, #4294967295
 8010360:	40da      	lsrs	r2, r3
 8010362:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010366:	4013      	ands	r3, r2
 8010368:	f846 3c04 	str.w	r3, [r6, #-4]
 801036c:	e7d2      	b.n	8010314 <__hexnan+0xd4>
 801036e:	3f04      	subs	r7, #4
 8010370:	e7d0      	b.n	8010314 <__hexnan+0xd4>
 8010372:	2004      	movs	r0, #4
 8010374:	e7d5      	b.n	8010322 <__hexnan+0xe2>

08010376 <__ascii_mbtowc>:
 8010376:	b082      	sub	sp, #8
 8010378:	b901      	cbnz	r1, 801037c <__ascii_mbtowc+0x6>
 801037a:	a901      	add	r1, sp, #4
 801037c:	b142      	cbz	r2, 8010390 <__ascii_mbtowc+0x1a>
 801037e:	b14b      	cbz	r3, 8010394 <__ascii_mbtowc+0x1e>
 8010380:	7813      	ldrb	r3, [r2, #0]
 8010382:	600b      	str	r3, [r1, #0]
 8010384:	7812      	ldrb	r2, [r2, #0]
 8010386:	1e10      	subs	r0, r2, #0
 8010388:	bf18      	it	ne
 801038a:	2001      	movne	r0, #1
 801038c:	b002      	add	sp, #8
 801038e:	4770      	bx	lr
 8010390:	4610      	mov	r0, r2
 8010392:	e7fb      	b.n	801038c <__ascii_mbtowc+0x16>
 8010394:	f06f 0001 	mvn.w	r0, #1
 8010398:	e7f8      	b.n	801038c <__ascii_mbtowc+0x16>
	...

0801039c <_Balloc>:
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	69c6      	ldr	r6, [r0, #28]
 80103a0:	4604      	mov	r4, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	b976      	cbnz	r6, 80103c4 <_Balloc+0x28>
 80103a6:	2010      	movs	r0, #16
 80103a8:	f7fc fefa 	bl	800d1a0 <malloc>
 80103ac:	4602      	mov	r2, r0
 80103ae:	61e0      	str	r0, [r4, #28]
 80103b0:	b920      	cbnz	r0, 80103bc <_Balloc+0x20>
 80103b2:	4b18      	ldr	r3, [pc, #96]	@ (8010414 <_Balloc+0x78>)
 80103b4:	4818      	ldr	r0, [pc, #96]	@ (8010418 <_Balloc+0x7c>)
 80103b6:	216b      	movs	r1, #107	@ 0x6b
 80103b8:	f000 ff48 	bl	801124c <__assert_func>
 80103bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103c0:	6006      	str	r6, [r0, #0]
 80103c2:	60c6      	str	r6, [r0, #12]
 80103c4:	69e6      	ldr	r6, [r4, #28]
 80103c6:	68f3      	ldr	r3, [r6, #12]
 80103c8:	b183      	cbz	r3, 80103ec <_Balloc+0x50>
 80103ca:	69e3      	ldr	r3, [r4, #28]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103d2:	b9b8      	cbnz	r0, 8010404 <_Balloc+0x68>
 80103d4:	2101      	movs	r1, #1
 80103d6:	fa01 f605 	lsl.w	r6, r1, r5
 80103da:	1d72      	adds	r2, r6, #5
 80103dc:	0092      	lsls	r2, r2, #2
 80103de:	4620      	mov	r0, r4
 80103e0:	f000 ff52 	bl	8011288 <_calloc_r>
 80103e4:	b160      	cbz	r0, 8010400 <_Balloc+0x64>
 80103e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103ea:	e00e      	b.n	801040a <_Balloc+0x6e>
 80103ec:	2221      	movs	r2, #33	@ 0x21
 80103ee:	2104      	movs	r1, #4
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 ff49 	bl	8011288 <_calloc_r>
 80103f6:	69e3      	ldr	r3, [r4, #28]
 80103f8:	60f0      	str	r0, [r6, #12]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e4      	bne.n	80103ca <_Balloc+0x2e>
 8010400:	2000      	movs	r0, #0
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	6802      	ldr	r2, [r0, #0]
 8010406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801040a:	2300      	movs	r3, #0
 801040c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010410:	e7f7      	b.n	8010402 <_Balloc+0x66>
 8010412:	bf00      	nop
 8010414:	080119ee 	.word	0x080119ee
 8010418:	08011ace 	.word	0x08011ace

0801041c <_Bfree>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	69c6      	ldr	r6, [r0, #28]
 8010420:	4605      	mov	r5, r0
 8010422:	460c      	mov	r4, r1
 8010424:	b976      	cbnz	r6, 8010444 <_Bfree+0x28>
 8010426:	2010      	movs	r0, #16
 8010428:	f7fc feba 	bl	800d1a0 <malloc>
 801042c:	4602      	mov	r2, r0
 801042e:	61e8      	str	r0, [r5, #28]
 8010430:	b920      	cbnz	r0, 801043c <_Bfree+0x20>
 8010432:	4b09      	ldr	r3, [pc, #36]	@ (8010458 <_Bfree+0x3c>)
 8010434:	4809      	ldr	r0, [pc, #36]	@ (801045c <_Bfree+0x40>)
 8010436:	218f      	movs	r1, #143	@ 0x8f
 8010438:	f000 ff08 	bl	801124c <__assert_func>
 801043c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010440:	6006      	str	r6, [r0, #0]
 8010442:	60c6      	str	r6, [r0, #12]
 8010444:	b13c      	cbz	r4, 8010456 <_Bfree+0x3a>
 8010446:	69eb      	ldr	r3, [r5, #28]
 8010448:	6862      	ldr	r2, [r4, #4]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010450:	6021      	str	r1, [r4, #0]
 8010452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010456:	bd70      	pop	{r4, r5, r6, pc}
 8010458:	080119ee 	.word	0x080119ee
 801045c:	08011ace 	.word	0x08011ace

08010460 <__multadd>:
 8010460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010464:	690d      	ldr	r5, [r1, #16]
 8010466:	4607      	mov	r7, r0
 8010468:	460c      	mov	r4, r1
 801046a:	461e      	mov	r6, r3
 801046c:	f101 0c14 	add.w	ip, r1, #20
 8010470:	2000      	movs	r0, #0
 8010472:	f8dc 3000 	ldr.w	r3, [ip]
 8010476:	b299      	uxth	r1, r3
 8010478:	fb02 6101 	mla	r1, r2, r1, r6
 801047c:	0c1e      	lsrs	r6, r3, #16
 801047e:	0c0b      	lsrs	r3, r1, #16
 8010480:	fb02 3306 	mla	r3, r2, r6, r3
 8010484:	b289      	uxth	r1, r1
 8010486:	3001      	adds	r0, #1
 8010488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801048c:	4285      	cmp	r5, r0
 801048e:	f84c 1b04 	str.w	r1, [ip], #4
 8010492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010496:	dcec      	bgt.n	8010472 <__multadd+0x12>
 8010498:	b30e      	cbz	r6, 80104de <__multadd+0x7e>
 801049a:	68a3      	ldr	r3, [r4, #8]
 801049c:	42ab      	cmp	r3, r5
 801049e:	dc19      	bgt.n	80104d4 <__multadd+0x74>
 80104a0:	6861      	ldr	r1, [r4, #4]
 80104a2:	4638      	mov	r0, r7
 80104a4:	3101      	adds	r1, #1
 80104a6:	f7ff ff79 	bl	801039c <_Balloc>
 80104aa:	4680      	mov	r8, r0
 80104ac:	b928      	cbnz	r0, 80104ba <__multadd+0x5a>
 80104ae:	4602      	mov	r2, r0
 80104b0:	4b0c      	ldr	r3, [pc, #48]	@ (80104e4 <__multadd+0x84>)
 80104b2:	480d      	ldr	r0, [pc, #52]	@ (80104e8 <__multadd+0x88>)
 80104b4:	21ba      	movs	r1, #186	@ 0xba
 80104b6:	f000 fec9 	bl	801124c <__assert_func>
 80104ba:	6922      	ldr	r2, [r4, #16]
 80104bc:	3202      	adds	r2, #2
 80104be:	f104 010c 	add.w	r1, r4, #12
 80104c2:	0092      	lsls	r2, r2, #2
 80104c4:	300c      	adds	r0, #12
 80104c6:	f7fe fd68 	bl	800ef9a <memcpy>
 80104ca:	4621      	mov	r1, r4
 80104cc:	4638      	mov	r0, r7
 80104ce:	f7ff ffa5 	bl	801041c <_Bfree>
 80104d2:	4644      	mov	r4, r8
 80104d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104d8:	3501      	adds	r5, #1
 80104da:	615e      	str	r6, [r3, #20]
 80104dc:	6125      	str	r5, [r4, #16]
 80104de:	4620      	mov	r0, r4
 80104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e4:	08011a5d 	.word	0x08011a5d
 80104e8:	08011ace 	.word	0x08011ace

080104ec <__s2b>:
 80104ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f0:	460c      	mov	r4, r1
 80104f2:	4615      	mov	r5, r2
 80104f4:	461f      	mov	r7, r3
 80104f6:	2209      	movs	r2, #9
 80104f8:	3308      	adds	r3, #8
 80104fa:	4606      	mov	r6, r0
 80104fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8010500:	2100      	movs	r1, #0
 8010502:	2201      	movs	r2, #1
 8010504:	429a      	cmp	r2, r3
 8010506:	db09      	blt.n	801051c <__s2b+0x30>
 8010508:	4630      	mov	r0, r6
 801050a:	f7ff ff47 	bl	801039c <_Balloc>
 801050e:	b940      	cbnz	r0, 8010522 <__s2b+0x36>
 8010510:	4602      	mov	r2, r0
 8010512:	4b19      	ldr	r3, [pc, #100]	@ (8010578 <__s2b+0x8c>)
 8010514:	4819      	ldr	r0, [pc, #100]	@ (801057c <__s2b+0x90>)
 8010516:	21d3      	movs	r1, #211	@ 0xd3
 8010518:	f000 fe98 	bl	801124c <__assert_func>
 801051c:	0052      	lsls	r2, r2, #1
 801051e:	3101      	adds	r1, #1
 8010520:	e7f0      	b.n	8010504 <__s2b+0x18>
 8010522:	9b08      	ldr	r3, [sp, #32]
 8010524:	6143      	str	r3, [r0, #20]
 8010526:	2d09      	cmp	r5, #9
 8010528:	f04f 0301 	mov.w	r3, #1
 801052c:	6103      	str	r3, [r0, #16]
 801052e:	dd16      	ble.n	801055e <__s2b+0x72>
 8010530:	f104 0909 	add.w	r9, r4, #9
 8010534:	46c8      	mov	r8, r9
 8010536:	442c      	add	r4, r5
 8010538:	f818 3b01 	ldrb.w	r3, [r8], #1
 801053c:	4601      	mov	r1, r0
 801053e:	3b30      	subs	r3, #48	@ 0x30
 8010540:	220a      	movs	r2, #10
 8010542:	4630      	mov	r0, r6
 8010544:	f7ff ff8c 	bl	8010460 <__multadd>
 8010548:	45a0      	cmp	r8, r4
 801054a:	d1f5      	bne.n	8010538 <__s2b+0x4c>
 801054c:	f1a5 0408 	sub.w	r4, r5, #8
 8010550:	444c      	add	r4, r9
 8010552:	1b2d      	subs	r5, r5, r4
 8010554:	1963      	adds	r3, r4, r5
 8010556:	42bb      	cmp	r3, r7
 8010558:	db04      	blt.n	8010564 <__s2b+0x78>
 801055a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801055e:	340a      	adds	r4, #10
 8010560:	2509      	movs	r5, #9
 8010562:	e7f6      	b.n	8010552 <__s2b+0x66>
 8010564:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010568:	4601      	mov	r1, r0
 801056a:	3b30      	subs	r3, #48	@ 0x30
 801056c:	220a      	movs	r2, #10
 801056e:	4630      	mov	r0, r6
 8010570:	f7ff ff76 	bl	8010460 <__multadd>
 8010574:	e7ee      	b.n	8010554 <__s2b+0x68>
 8010576:	bf00      	nop
 8010578:	08011a5d 	.word	0x08011a5d
 801057c:	08011ace 	.word	0x08011ace

08010580 <__hi0bits>:
 8010580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010584:	4603      	mov	r3, r0
 8010586:	bf36      	itet	cc
 8010588:	0403      	lslcc	r3, r0, #16
 801058a:	2000      	movcs	r0, #0
 801058c:	2010      	movcc	r0, #16
 801058e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010592:	bf3c      	itt	cc
 8010594:	021b      	lslcc	r3, r3, #8
 8010596:	3008      	addcc	r0, #8
 8010598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801059c:	bf3c      	itt	cc
 801059e:	011b      	lslcc	r3, r3, #4
 80105a0:	3004      	addcc	r0, #4
 80105a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105a6:	bf3c      	itt	cc
 80105a8:	009b      	lslcc	r3, r3, #2
 80105aa:	3002      	addcc	r0, #2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	db05      	blt.n	80105bc <__hi0bits+0x3c>
 80105b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80105b4:	f100 0001 	add.w	r0, r0, #1
 80105b8:	bf08      	it	eq
 80105ba:	2020      	moveq	r0, #32
 80105bc:	4770      	bx	lr

080105be <__lo0bits>:
 80105be:	6803      	ldr	r3, [r0, #0]
 80105c0:	4602      	mov	r2, r0
 80105c2:	f013 0007 	ands.w	r0, r3, #7
 80105c6:	d00b      	beq.n	80105e0 <__lo0bits+0x22>
 80105c8:	07d9      	lsls	r1, r3, #31
 80105ca:	d421      	bmi.n	8010610 <__lo0bits+0x52>
 80105cc:	0798      	lsls	r0, r3, #30
 80105ce:	bf49      	itett	mi
 80105d0:	085b      	lsrmi	r3, r3, #1
 80105d2:	089b      	lsrpl	r3, r3, #2
 80105d4:	2001      	movmi	r0, #1
 80105d6:	6013      	strmi	r3, [r2, #0]
 80105d8:	bf5c      	itt	pl
 80105da:	6013      	strpl	r3, [r2, #0]
 80105dc:	2002      	movpl	r0, #2
 80105de:	4770      	bx	lr
 80105e0:	b299      	uxth	r1, r3
 80105e2:	b909      	cbnz	r1, 80105e8 <__lo0bits+0x2a>
 80105e4:	0c1b      	lsrs	r3, r3, #16
 80105e6:	2010      	movs	r0, #16
 80105e8:	b2d9      	uxtb	r1, r3
 80105ea:	b909      	cbnz	r1, 80105f0 <__lo0bits+0x32>
 80105ec:	3008      	adds	r0, #8
 80105ee:	0a1b      	lsrs	r3, r3, #8
 80105f0:	0719      	lsls	r1, r3, #28
 80105f2:	bf04      	itt	eq
 80105f4:	091b      	lsreq	r3, r3, #4
 80105f6:	3004      	addeq	r0, #4
 80105f8:	0799      	lsls	r1, r3, #30
 80105fa:	bf04      	itt	eq
 80105fc:	089b      	lsreq	r3, r3, #2
 80105fe:	3002      	addeq	r0, #2
 8010600:	07d9      	lsls	r1, r3, #31
 8010602:	d403      	bmi.n	801060c <__lo0bits+0x4e>
 8010604:	085b      	lsrs	r3, r3, #1
 8010606:	f100 0001 	add.w	r0, r0, #1
 801060a:	d003      	beq.n	8010614 <__lo0bits+0x56>
 801060c:	6013      	str	r3, [r2, #0]
 801060e:	4770      	bx	lr
 8010610:	2000      	movs	r0, #0
 8010612:	4770      	bx	lr
 8010614:	2020      	movs	r0, #32
 8010616:	4770      	bx	lr

08010618 <__i2b>:
 8010618:	b510      	push	{r4, lr}
 801061a:	460c      	mov	r4, r1
 801061c:	2101      	movs	r1, #1
 801061e:	f7ff febd 	bl	801039c <_Balloc>
 8010622:	4602      	mov	r2, r0
 8010624:	b928      	cbnz	r0, 8010632 <__i2b+0x1a>
 8010626:	4b05      	ldr	r3, [pc, #20]	@ (801063c <__i2b+0x24>)
 8010628:	4805      	ldr	r0, [pc, #20]	@ (8010640 <__i2b+0x28>)
 801062a:	f240 1145 	movw	r1, #325	@ 0x145
 801062e:	f000 fe0d 	bl	801124c <__assert_func>
 8010632:	2301      	movs	r3, #1
 8010634:	6144      	str	r4, [r0, #20]
 8010636:	6103      	str	r3, [r0, #16]
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop
 801063c:	08011a5d 	.word	0x08011a5d
 8010640:	08011ace 	.word	0x08011ace

08010644 <__multiply>:
 8010644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010648:	4614      	mov	r4, r2
 801064a:	690a      	ldr	r2, [r1, #16]
 801064c:	6923      	ldr	r3, [r4, #16]
 801064e:	429a      	cmp	r2, r3
 8010650:	bfa8      	it	ge
 8010652:	4623      	movge	r3, r4
 8010654:	460f      	mov	r7, r1
 8010656:	bfa4      	itt	ge
 8010658:	460c      	movge	r4, r1
 801065a:	461f      	movge	r7, r3
 801065c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010660:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010664:	68a3      	ldr	r3, [r4, #8]
 8010666:	6861      	ldr	r1, [r4, #4]
 8010668:	eb0a 0609 	add.w	r6, sl, r9
 801066c:	42b3      	cmp	r3, r6
 801066e:	b085      	sub	sp, #20
 8010670:	bfb8      	it	lt
 8010672:	3101      	addlt	r1, #1
 8010674:	f7ff fe92 	bl	801039c <_Balloc>
 8010678:	b930      	cbnz	r0, 8010688 <__multiply+0x44>
 801067a:	4602      	mov	r2, r0
 801067c:	4b44      	ldr	r3, [pc, #272]	@ (8010790 <__multiply+0x14c>)
 801067e:	4845      	ldr	r0, [pc, #276]	@ (8010794 <__multiply+0x150>)
 8010680:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010684:	f000 fde2 	bl	801124c <__assert_func>
 8010688:	f100 0514 	add.w	r5, r0, #20
 801068c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010690:	462b      	mov	r3, r5
 8010692:	2200      	movs	r2, #0
 8010694:	4543      	cmp	r3, r8
 8010696:	d321      	bcc.n	80106dc <__multiply+0x98>
 8010698:	f107 0114 	add.w	r1, r7, #20
 801069c:	f104 0214 	add.w	r2, r4, #20
 80106a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80106a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80106a8:	9302      	str	r3, [sp, #8]
 80106aa:	1b13      	subs	r3, r2, r4
 80106ac:	3b15      	subs	r3, #21
 80106ae:	f023 0303 	bic.w	r3, r3, #3
 80106b2:	3304      	adds	r3, #4
 80106b4:	f104 0715 	add.w	r7, r4, #21
 80106b8:	42ba      	cmp	r2, r7
 80106ba:	bf38      	it	cc
 80106bc:	2304      	movcc	r3, #4
 80106be:	9301      	str	r3, [sp, #4]
 80106c0:	9b02      	ldr	r3, [sp, #8]
 80106c2:	9103      	str	r1, [sp, #12]
 80106c4:	428b      	cmp	r3, r1
 80106c6:	d80c      	bhi.n	80106e2 <__multiply+0x9e>
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	dd03      	ble.n	80106d4 <__multiply+0x90>
 80106cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d05b      	beq.n	801078c <__multiply+0x148>
 80106d4:	6106      	str	r6, [r0, #16]
 80106d6:	b005      	add	sp, #20
 80106d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106dc:	f843 2b04 	str.w	r2, [r3], #4
 80106e0:	e7d8      	b.n	8010694 <__multiply+0x50>
 80106e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80106e6:	f1ba 0f00 	cmp.w	sl, #0
 80106ea:	d024      	beq.n	8010736 <__multiply+0xf2>
 80106ec:	f104 0e14 	add.w	lr, r4, #20
 80106f0:	46a9      	mov	r9, r5
 80106f2:	f04f 0c00 	mov.w	ip, #0
 80106f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80106fa:	f8d9 3000 	ldr.w	r3, [r9]
 80106fe:	fa1f fb87 	uxth.w	fp, r7
 8010702:	b29b      	uxth	r3, r3
 8010704:	fb0a 330b 	mla	r3, sl, fp, r3
 8010708:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801070c:	f8d9 7000 	ldr.w	r7, [r9]
 8010710:	4463      	add	r3, ip
 8010712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010716:	fb0a c70b 	mla	r7, sl, fp, ip
 801071a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801071e:	b29b      	uxth	r3, r3
 8010720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010724:	4572      	cmp	r2, lr
 8010726:	f849 3b04 	str.w	r3, [r9], #4
 801072a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801072e:	d8e2      	bhi.n	80106f6 <__multiply+0xb2>
 8010730:	9b01      	ldr	r3, [sp, #4]
 8010732:	f845 c003 	str.w	ip, [r5, r3]
 8010736:	9b03      	ldr	r3, [sp, #12]
 8010738:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801073c:	3104      	adds	r1, #4
 801073e:	f1b9 0f00 	cmp.w	r9, #0
 8010742:	d021      	beq.n	8010788 <__multiply+0x144>
 8010744:	682b      	ldr	r3, [r5, #0]
 8010746:	f104 0c14 	add.w	ip, r4, #20
 801074a:	46ae      	mov	lr, r5
 801074c:	f04f 0a00 	mov.w	sl, #0
 8010750:	f8bc b000 	ldrh.w	fp, [ip]
 8010754:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010758:	fb09 770b 	mla	r7, r9, fp, r7
 801075c:	4457      	add	r7, sl
 801075e:	b29b      	uxth	r3, r3
 8010760:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010764:	f84e 3b04 	str.w	r3, [lr], #4
 8010768:	f85c 3b04 	ldr.w	r3, [ip], #4
 801076c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010770:	f8be 3000 	ldrh.w	r3, [lr]
 8010774:	fb09 330a 	mla	r3, r9, sl, r3
 8010778:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801077c:	4562      	cmp	r2, ip
 801077e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010782:	d8e5      	bhi.n	8010750 <__multiply+0x10c>
 8010784:	9f01      	ldr	r7, [sp, #4]
 8010786:	51eb      	str	r3, [r5, r7]
 8010788:	3504      	adds	r5, #4
 801078a:	e799      	b.n	80106c0 <__multiply+0x7c>
 801078c:	3e01      	subs	r6, #1
 801078e:	e79b      	b.n	80106c8 <__multiply+0x84>
 8010790:	08011a5d 	.word	0x08011a5d
 8010794:	08011ace 	.word	0x08011ace

08010798 <__pow5mult>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4615      	mov	r5, r2
 801079e:	f012 0203 	ands.w	r2, r2, #3
 80107a2:	4607      	mov	r7, r0
 80107a4:	460e      	mov	r6, r1
 80107a6:	d007      	beq.n	80107b8 <__pow5mult+0x20>
 80107a8:	4c25      	ldr	r4, [pc, #148]	@ (8010840 <__pow5mult+0xa8>)
 80107aa:	3a01      	subs	r2, #1
 80107ac:	2300      	movs	r3, #0
 80107ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107b2:	f7ff fe55 	bl	8010460 <__multadd>
 80107b6:	4606      	mov	r6, r0
 80107b8:	10ad      	asrs	r5, r5, #2
 80107ba:	d03d      	beq.n	8010838 <__pow5mult+0xa0>
 80107bc:	69fc      	ldr	r4, [r7, #28]
 80107be:	b97c      	cbnz	r4, 80107e0 <__pow5mult+0x48>
 80107c0:	2010      	movs	r0, #16
 80107c2:	f7fc fced 	bl	800d1a0 <malloc>
 80107c6:	4602      	mov	r2, r0
 80107c8:	61f8      	str	r0, [r7, #28]
 80107ca:	b928      	cbnz	r0, 80107d8 <__pow5mult+0x40>
 80107cc:	4b1d      	ldr	r3, [pc, #116]	@ (8010844 <__pow5mult+0xac>)
 80107ce:	481e      	ldr	r0, [pc, #120]	@ (8010848 <__pow5mult+0xb0>)
 80107d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80107d4:	f000 fd3a 	bl	801124c <__assert_func>
 80107d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107dc:	6004      	str	r4, [r0, #0]
 80107de:	60c4      	str	r4, [r0, #12]
 80107e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80107e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107e8:	b94c      	cbnz	r4, 80107fe <__pow5mult+0x66>
 80107ea:	f240 2171 	movw	r1, #625	@ 0x271
 80107ee:	4638      	mov	r0, r7
 80107f0:	f7ff ff12 	bl	8010618 <__i2b>
 80107f4:	2300      	movs	r3, #0
 80107f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80107fa:	4604      	mov	r4, r0
 80107fc:	6003      	str	r3, [r0, #0]
 80107fe:	f04f 0900 	mov.w	r9, #0
 8010802:	07eb      	lsls	r3, r5, #31
 8010804:	d50a      	bpl.n	801081c <__pow5mult+0x84>
 8010806:	4631      	mov	r1, r6
 8010808:	4622      	mov	r2, r4
 801080a:	4638      	mov	r0, r7
 801080c:	f7ff ff1a 	bl	8010644 <__multiply>
 8010810:	4631      	mov	r1, r6
 8010812:	4680      	mov	r8, r0
 8010814:	4638      	mov	r0, r7
 8010816:	f7ff fe01 	bl	801041c <_Bfree>
 801081a:	4646      	mov	r6, r8
 801081c:	106d      	asrs	r5, r5, #1
 801081e:	d00b      	beq.n	8010838 <__pow5mult+0xa0>
 8010820:	6820      	ldr	r0, [r4, #0]
 8010822:	b938      	cbnz	r0, 8010834 <__pow5mult+0x9c>
 8010824:	4622      	mov	r2, r4
 8010826:	4621      	mov	r1, r4
 8010828:	4638      	mov	r0, r7
 801082a:	f7ff ff0b 	bl	8010644 <__multiply>
 801082e:	6020      	str	r0, [r4, #0]
 8010830:	f8c0 9000 	str.w	r9, [r0]
 8010834:	4604      	mov	r4, r0
 8010836:	e7e4      	b.n	8010802 <__pow5mult+0x6a>
 8010838:	4630      	mov	r0, r6
 801083a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801083e:	bf00      	nop
 8010840:	08011b28 	.word	0x08011b28
 8010844:	080119ee 	.word	0x080119ee
 8010848:	08011ace 	.word	0x08011ace

0801084c <__lshift>:
 801084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010850:	460c      	mov	r4, r1
 8010852:	6849      	ldr	r1, [r1, #4]
 8010854:	6923      	ldr	r3, [r4, #16]
 8010856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801085a:	68a3      	ldr	r3, [r4, #8]
 801085c:	4607      	mov	r7, r0
 801085e:	4691      	mov	r9, r2
 8010860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010864:	f108 0601 	add.w	r6, r8, #1
 8010868:	42b3      	cmp	r3, r6
 801086a:	db0b      	blt.n	8010884 <__lshift+0x38>
 801086c:	4638      	mov	r0, r7
 801086e:	f7ff fd95 	bl	801039c <_Balloc>
 8010872:	4605      	mov	r5, r0
 8010874:	b948      	cbnz	r0, 801088a <__lshift+0x3e>
 8010876:	4602      	mov	r2, r0
 8010878:	4b28      	ldr	r3, [pc, #160]	@ (801091c <__lshift+0xd0>)
 801087a:	4829      	ldr	r0, [pc, #164]	@ (8010920 <__lshift+0xd4>)
 801087c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010880:	f000 fce4 	bl	801124c <__assert_func>
 8010884:	3101      	adds	r1, #1
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	e7ee      	b.n	8010868 <__lshift+0x1c>
 801088a:	2300      	movs	r3, #0
 801088c:	f100 0114 	add.w	r1, r0, #20
 8010890:	f100 0210 	add.w	r2, r0, #16
 8010894:	4618      	mov	r0, r3
 8010896:	4553      	cmp	r3, sl
 8010898:	db33      	blt.n	8010902 <__lshift+0xb6>
 801089a:	6920      	ldr	r0, [r4, #16]
 801089c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108a0:	f104 0314 	add.w	r3, r4, #20
 80108a4:	f019 091f 	ands.w	r9, r9, #31
 80108a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80108b0:	d02b      	beq.n	801090a <__lshift+0xbe>
 80108b2:	f1c9 0e20 	rsb	lr, r9, #32
 80108b6:	468a      	mov	sl, r1
 80108b8:	2200      	movs	r2, #0
 80108ba:	6818      	ldr	r0, [r3, #0]
 80108bc:	fa00 f009 	lsl.w	r0, r0, r9
 80108c0:	4310      	orrs	r0, r2
 80108c2:	f84a 0b04 	str.w	r0, [sl], #4
 80108c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ca:	459c      	cmp	ip, r3
 80108cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80108d0:	d8f3      	bhi.n	80108ba <__lshift+0x6e>
 80108d2:	ebac 0304 	sub.w	r3, ip, r4
 80108d6:	3b15      	subs	r3, #21
 80108d8:	f023 0303 	bic.w	r3, r3, #3
 80108dc:	3304      	adds	r3, #4
 80108de:	f104 0015 	add.w	r0, r4, #21
 80108e2:	4584      	cmp	ip, r0
 80108e4:	bf38      	it	cc
 80108e6:	2304      	movcc	r3, #4
 80108e8:	50ca      	str	r2, [r1, r3]
 80108ea:	b10a      	cbz	r2, 80108f0 <__lshift+0xa4>
 80108ec:	f108 0602 	add.w	r6, r8, #2
 80108f0:	3e01      	subs	r6, #1
 80108f2:	4638      	mov	r0, r7
 80108f4:	612e      	str	r6, [r5, #16]
 80108f6:	4621      	mov	r1, r4
 80108f8:	f7ff fd90 	bl	801041c <_Bfree>
 80108fc:	4628      	mov	r0, r5
 80108fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010902:	f842 0f04 	str.w	r0, [r2, #4]!
 8010906:	3301      	adds	r3, #1
 8010908:	e7c5      	b.n	8010896 <__lshift+0x4a>
 801090a:	3904      	subs	r1, #4
 801090c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010910:	f841 2f04 	str.w	r2, [r1, #4]!
 8010914:	459c      	cmp	ip, r3
 8010916:	d8f9      	bhi.n	801090c <__lshift+0xc0>
 8010918:	e7ea      	b.n	80108f0 <__lshift+0xa4>
 801091a:	bf00      	nop
 801091c:	08011a5d 	.word	0x08011a5d
 8010920:	08011ace 	.word	0x08011ace

08010924 <__mcmp>:
 8010924:	690a      	ldr	r2, [r1, #16]
 8010926:	4603      	mov	r3, r0
 8010928:	6900      	ldr	r0, [r0, #16]
 801092a:	1a80      	subs	r0, r0, r2
 801092c:	b530      	push	{r4, r5, lr}
 801092e:	d10e      	bne.n	801094e <__mcmp+0x2a>
 8010930:	3314      	adds	r3, #20
 8010932:	3114      	adds	r1, #20
 8010934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801093c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010944:	4295      	cmp	r5, r2
 8010946:	d003      	beq.n	8010950 <__mcmp+0x2c>
 8010948:	d205      	bcs.n	8010956 <__mcmp+0x32>
 801094a:	f04f 30ff 	mov.w	r0, #4294967295
 801094e:	bd30      	pop	{r4, r5, pc}
 8010950:	42a3      	cmp	r3, r4
 8010952:	d3f3      	bcc.n	801093c <__mcmp+0x18>
 8010954:	e7fb      	b.n	801094e <__mcmp+0x2a>
 8010956:	2001      	movs	r0, #1
 8010958:	e7f9      	b.n	801094e <__mcmp+0x2a>
	...

0801095c <__mdiff>:
 801095c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	4689      	mov	r9, r1
 8010962:	4606      	mov	r6, r0
 8010964:	4611      	mov	r1, r2
 8010966:	4648      	mov	r0, r9
 8010968:	4614      	mov	r4, r2
 801096a:	f7ff ffdb 	bl	8010924 <__mcmp>
 801096e:	1e05      	subs	r5, r0, #0
 8010970:	d112      	bne.n	8010998 <__mdiff+0x3c>
 8010972:	4629      	mov	r1, r5
 8010974:	4630      	mov	r0, r6
 8010976:	f7ff fd11 	bl	801039c <_Balloc>
 801097a:	4602      	mov	r2, r0
 801097c:	b928      	cbnz	r0, 801098a <__mdiff+0x2e>
 801097e:	4b3f      	ldr	r3, [pc, #252]	@ (8010a7c <__mdiff+0x120>)
 8010980:	f240 2137 	movw	r1, #567	@ 0x237
 8010984:	483e      	ldr	r0, [pc, #248]	@ (8010a80 <__mdiff+0x124>)
 8010986:	f000 fc61 	bl	801124c <__assert_func>
 801098a:	2301      	movs	r3, #1
 801098c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010990:	4610      	mov	r0, r2
 8010992:	b003      	add	sp, #12
 8010994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010998:	bfbc      	itt	lt
 801099a:	464b      	movlt	r3, r9
 801099c:	46a1      	movlt	r9, r4
 801099e:	4630      	mov	r0, r6
 80109a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80109a4:	bfba      	itte	lt
 80109a6:	461c      	movlt	r4, r3
 80109a8:	2501      	movlt	r5, #1
 80109aa:	2500      	movge	r5, #0
 80109ac:	f7ff fcf6 	bl	801039c <_Balloc>
 80109b0:	4602      	mov	r2, r0
 80109b2:	b918      	cbnz	r0, 80109bc <__mdiff+0x60>
 80109b4:	4b31      	ldr	r3, [pc, #196]	@ (8010a7c <__mdiff+0x120>)
 80109b6:	f240 2145 	movw	r1, #581	@ 0x245
 80109ba:	e7e3      	b.n	8010984 <__mdiff+0x28>
 80109bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80109c0:	6926      	ldr	r6, [r4, #16]
 80109c2:	60c5      	str	r5, [r0, #12]
 80109c4:	f109 0310 	add.w	r3, r9, #16
 80109c8:	f109 0514 	add.w	r5, r9, #20
 80109cc:	f104 0e14 	add.w	lr, r4, #20
 80109d0:	f100 0b14 	add.w	fp, r0, #20
 80109d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80109d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80109dc:	9301      	str	r3, [sp, #4]
 80109de:	46d9      	mov	r9, fp
 80109e0:	f04f 0c00 	mov.w	ip, #0
 80109e4:	9b01      	ldr	r3, [sp, #4]
 80109e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80109ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	fa1f f38a 	uxth.w	r3, sl
 80109f4:	4619      	mov	r1, r3
 80109f6:	b283      	uxth	r3, r0
 80109f8:	1acb      	subs	r3, r1, r3
 80109fa:	0c00      	lsrs	r0, r0, #16
 80109fc:	4463      	add	r3, ip
 80109fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010a02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010a0c:	4576      	cmp	r6, lr
 8010a0e:	f849 3b04 	str.w	r3, [r9], #4
 8010a12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a16:	d8e5      	bhi.n	80109e4 <__mdiff+0x88>
 8010a18:	1b33      	subs	r3, r6, r4
 8010a1a:	3b15      	subs	r3, #21
 8010a1c:	f023 0303 	bic.w	r3, r3, #3
 8010a20:	3415      	adds	r4, #21
 8010a22:	3304      	adds	r3, #4
 8010a24:	42a6      	cmp	r6, r4
 8010a26:	bf38      	it	cc
 8010a28:	2304      	movcc	r3, #4
 8010a2a:	441d      	add	r5, r3
 8010a2c:	445b      	add	r3, fp
 8010a2e:	461e      	mov	r6, r3
 8010a30:	462c      	mov	r4, r5
 8010a32:	4544      	cmp	r4, r8
 8010a34:	d30e      	bcc.n	8010a54 <__mdiff+0xf8>
 8010a36:	f108 0103 	add.w	r1, r8, #3
 8010a3a:	1b49      	subs	r1, r1, r5
 8010a3c:	f021 0103 	bic.w	r1, r1, #3
 8010a40:	3d03      	subs	r5, #3
 8010a42:	45a8      	cmp	r8, r5
 8010a44:	bf38      	it	cc
 8010a46:	2100      	movcc	r1, #0
 8010a48:	440b      	add	r3, r1
 8010a4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a4e:	b191      	cbz	r1, 8010a76 <__mdiff+0x11a>
 8010a50:	6117      	str	r7, [r2, #16]
 8010a52:	e79d      	b.n	8010990 <__mdiff+0x34>
 8010a54:	f854 1b04 	ldr.w	r1, [r4], #4
 8010a58:	46e6      	mov	lr, ip
 8010a5a:	0c08      	lsrs	r0, r1, #16
 8010a5c:	fa1c fc81 	uxtah	ip, ip, r1
 8010a60:	4471      	add	r1, lr
 8010a62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a66:	b289      	uxth	r1, r1
 8010a68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a6c:	f846 1b04 	str.w	r1, [r6], #4
 8010a70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a74:	e7dd      	b.n	8010a32 <__mdiff+0xd6>
 8010a76:	3f01      	subs	r7, #1
 8010a78:	e7e7      	b.n	8010a4a <__mdiff+0xee>
 8010a7a:	bf00      	nop
 8010a7c:	08011a5d 	.word	0x08011a5d
 8010a80:	08011ace 	.word	0x08011ace

08010a84 <__ulp>:
 8010a84:	b082      	sub	sp, #8
 8010a86:	ed8d 0b00 	vstr	d0, [sp]
 8010a8a:	9a01      	ldr	r2, [sp, #4]
 8010a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8010acc <__ulp+0x48>)
 8010a8e:	4013      	ands	r3, r2
 8010a90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	dc08      	bgt.n	8010aaa <__ulp+0x26>
 8010a98:	425b      	negs	r3, r3
 8010a9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010a9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010aa2:	da04      	bge.n	8010aae <__ulp+0x2a>
 8010aa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010aa8:	4113      	asrs	r3, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	e008      	b.n	8010ac0 <__ulp+0x3c>
 8010aae:	f1a2 0314 	sub.w	r3, r2, #20
 8010ab2:	2b1e      	cmp	r3, #30
 8010ab4:	bfda      	itte	le
 8010ab6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010aba:	40da      	lsrle	r2, r3
 8010abc:	2201      	movgt	r2, #1
 8010abe:	2300      	movs	r3, #0
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	ec41 0b10 	vmov	d0, r0, r1
 8010ac8:	b002      	add	sp, #8
 8010aca:	4770      	bx	lr
 8010acc:	7ff00000 	.word	0x7ff00000

08010ad0 <__b2d>:
 8010ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad4:	6906      	ldr	r6, [r0, #16]
 8010ad6:	f100 0814 	add.w	r8, r0, #20
 8010ada:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010ade:	1f37      	subs	r7, r6, #4
 8010ae0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010ae4:	4610      	mov	r0, r2
 8010ae6:	f7ff fd4b 	bl	8010580 <__hi0bits>
 8010aea:	f1c0 0320 	rsb	r3, r0, #32
 8010aee:	280a      	cmp	r0, #10
 8010af0:	600b      	str	r3, [r1, #0]
 8010af2:	491b      	ldr	r1, [pc, #108]	@ (8010b60 <__b2d+0x90>)
 8010af4:	dc15      	bgt.n	8010b22 <__b2d+0x52>
 8010af6:	f1c0 0c0b 	rsb	ip, r0, #11
 8010afa:	fa22 f30c 	lsr.w	r3, r2, ip
 8010afe:	45b8      	cmp	r8, r7
 8010b00:	ea43 0501 	orr.w	r5, r3, r1
 8010b04:	bf34      	ite	cc
 8010b06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b0a:	2300      	movcs	r3, #0
 8010b0c:	3015      	adds	r0, #21
 8010b0e:	fa02 f000 	lsl.w	r0, r2, r0
 8010b12:	fa23 f30c 	lsr.w	r3, r3, ip
 8010b16:	4303      	orrs	r3, r0
 8010b18:	461c      	mov	r4, r3
 8010b1a:	ec45 4b10 	vmov	d0, r4, r5
 8010b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b22:	45b8      	cmp	r8, r7
 8010b24:	bf3a      	itte	cc
 8010b26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010b2a:	f1a6 0708 	subcc.w	r7, r6, #8
 8010b2e:	2300      	movcs	r3, #0
 8010b30:	380b      	subs	r0, #11
 8010b32:	d012      	beq.n	8010b5a <__b2d+0x8a>
 8010b34:	f1c0 0120 	rsb	r1, r0, #32
 8010b38:	fa23 f401 	lsr.w	r4, r3, r1
 8010b3c:	4082      	lsls	r2, r0
 8010b3e:	4322      	orrs	r2, r4
 8010b40:	4547      	cmp	r7, r8
 8010b42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010b46:	bf8c      	ite	hi
 8010b48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010b4c:	2200      	movls	r2, #0
 8010b4e:	4083      	lsls	r3, r0
 8010b50:	40ca      	lsrs	r2, r1
 8010b52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010b56:	4313      	orrs	r3, r2
 8010b58:	e7de      	b.n	8010b18 <__b2d+0x48>
 8010b5a:	ea42 0501 	orr.w	r5, r2, r1
 8010b5e:	e7db      	b.n	8010b18 <__b2d+0x48>
 8010b60:	3ff00000 	.word	0x3ff00000

08010b64 <__d2b>:
 8010b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b68:	460f      	mov	r7, r1
 8010b6a:	2101      	movs	r1, #1
 8010b6c:	ec59 8b10 	vmov	r8, r9, d0
 8010b70:	4616      	mov	r6, r2
 8010b72:	f7ff fc13 	bl	801039c <_Balloc>
 8010b76:	4604      	mov	r4, r0
 8010b78:	b930      	cbnz	r0, 8010b88 <__d2b+0x24>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4b23      	ldr	r3, [pc, #140]	@ (8010c0c <__d2b+0xa8>)
 8010b7e:	4824      	ldr	r0, [pc, #144]	@ (8010c10 <__d2b+0xac>)
 8010b80:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b84:	f000 fb62 	bl	801124c <__assert_func>
 8010b88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b90:	b10d      	cbz	r5, 8010b96 <__d2b+0x32>
 8010b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	f1b8 0300 	subs.w	r3, r8, #0
 8010b9c:	d023      	beq.n	8010be6 <__d2b+0x82>
 8010b9e:	4668      	mov	r0, sp
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	f7ff fd0c 	bl	80105be <__lo0bits>
 8010ba6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010baa:	b1d0      	cbz	r0, 8010be2 <__d2b+0x7e>
 8010bac:	f1c0 0320 	rsb	r3, r0, #32
 8010bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb4:	430b      	orrs	r3, r1
 8010bb6:	40c2      	lsrs	r2, r0
 8010bb8:	6163      	str	r3, [r4, #20]
 8010bba:	9201      	str	r2, [sp, #4]
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	61a3      	str	r3, [r4, #24]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	bf0c      	ite	eq
 8010bc4:	2201      	moveq	r2, #1
 8010bc6:	2202      	movne	r2, #2
 8010bc8:	6122      	str	r2, [r4, #16]
 8010bca:	b1a5      	cbz	r5, 8010bf6 <__d2b+0x92>
 8010bcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010bd0:	4405      	add	r5, r0
 8010bd2:	603d      	str	r5, [r7, #0]
 8010bd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010bd8:	6030      	str	r0, [r6, #0]
 8010bda:	4620      	mov	r0, r4
 8010bdc:	b003      	add	sp, #12
 8010bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010be2:	6161      	str	r1, [r4, #20]
 8010be4:	e7ea      	b.n	8010bbc <__d2b+0x58>
 8010be6:	a801      	add	r0, sp, #4
 8010be8:	f7ff fce9 	bl	80105be <__lo0bits>
 8010bec:	9b01      	ldr	r3, [sp, #4]
 8010bee:	6163      	str	r3, [r4, #20]
 8010bf0:	3020      	adds	r0, #32
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	e7e8      	b.n	8010bc8 <__d2b+0x64>
 8010bf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010bfe:	6038      	str	r0, [r7, #0]
 8010c00:	6918      	ldr	r0, [r3, #16]
 8010c02:	f7ff fcbd 	bl	8010580 <__hi0bits>
 8010c06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c0a:	e7e5      	b.n	8010bd8 <__d2b+0x74>
 8010c0c:	08011a5d 	.word	0x08011a5d
 8010c10:	08011ace 	.word	0x08011ace

08010c14 <__ratio>:
 8010c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c18:	b085      	sub	sp, #20
 8010c1a:	e9cd 1000 	strd	r1, r0, [sp]
 8010c1e:	a902      	add	r1, sp, #8
 8010c20:	f7ff ff56 	bl	8010ad0 <__b2d>
 8010c24:	9800      	ldr	r0, [sp, #0]
 8010c26:	a903      	add	r1, sp, #12
 8010c28:	ec55 4b10 	vmov	r4, r5, d0
 8010c2c:	f7ff ff50 	bl	8010ad0 <__b2d>
 8010c30:	9b01      	ldr	r3, [sp, #4]
 8010c32:	6919      	ldr	r1, [r3, #16]
 8010c34:	9b00      	ldr	r3, [sp, #0]
 8010c36:	691b      	ldr	r3, [r3, #16]
 8010c38:	1ac9      	subs	r1, r1, r3
 8010c3a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010c3e:	1a9b      	subs	r3, r3, r2
 8010c40:	ec5b ab10 	vmov	sl, fp, d0
 8010c44:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	bfce      	itee	gt
 8010c4c:	462a      	movgt	r2, r5
 8010c4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c52:	465a      	movle	r2, fp
 8010c54:	462f      	mov	r7, r5
 8010c56:	46d9      	mov	r9, fp
 8010c58:	bfcc      	ite	gt
 8010c5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010c5e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010c62:	464b      	mov	r3, r9
 8010c64:	4652      	mov	r2, sl
 8010c66:	4620      	mov	r0, r4
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ef fe0f 	bl	800088c <__aeabi_ddiv>
 8010c6e:	ec41 0b10 	vmov	d0, r0, r1
 8010c72:	b005      	add	sp, #20
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c78 <__copybits>:
 8010c78:	3901      	subs	r1, #1
 8010c7a:	b570      	push	{r4, r5, r6, lr}
 8010c7c:	1149      	asrs	r1, r1, #5
 8010c7e:	6914      	ldr	r4, [r2, #16]
 8010c80:	3101      	adds	r1, #1
 8010c82:	f102 0314 	add.w	r3, r2, #20
 8010c86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c8e:	1f05      	subs	r5, r0, #4
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	d30c      	bcc.n	8010cae <__copybits+0x36>
 8010c94:	1aa3      	subs	r3, r4, r2
 8010c96:	3b11      	subs	r3, #17
 8010c98:	f023 0303 	bic.w	r3, r3, #3
 8010c9c:	3211      	adds	r2, #17
 8010c9e:	42a2      	cmp	r2, r4
 8010ca0:	bf88      	it	hi
 8010ca2:	2300      	movhi	r3, #0
 8010ca4:	4418      	add	r0, r3
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	4288      	cmp	r0, r1
 8010caa:	d305      	bcc.n	8010cb8 <__copybits+0x40>
 8010cac:	bd70      	pop	{r4, r5, r6, pc}
 8010cae:	f853 6b04 	ldr.w	r6, [r3], #4
 8010cb2:	f845 6f04 	str.w	r6, [r5, #4]!
 8010cb6:	e7eb      	b.n	8010c90 <__copybits+0x18>
 8010cb8:	f840 3b04 	str.w	r3, [r0], #4
 8010cbc:	e7f4      	b.n	8010ca8 <__copybits+0x30>

08010cbe <__any_on>:
 8010cbe:	f100 0214 	add.w	r2, r0, #20
 8010cc2:	6900      	ldr	r0, [r0, #16]
 8010cc4:	114b      	asrs	r3, r1, #5
 8010cc6:	4298      	cmp	r0, r3
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	db11      	blt.n	8010cf0 <__any_on+0x32>
 8010ccc:	dd0a      	ble.n	8010ce4 <__any_on+0x26>
 8010cce:	f011 011f 	ands.w	r1, r1, #31
 8010cd2:	d007      	beq.n	8010ce4 <__any_on+0x26>
 8010cd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cd8:	fa24 f001 	lsr.w	r0, r4, r1
 8010cdc:	fa00 f101 	lsl.w	r1, r0, r1
 8010ce0:	428c      	cmp	r4, r1
 8010ce2:	d10b      	bne.n	8010cfc <__any_on+0x3e>
 8010ce4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d803      	bhi.n	8010cf4 <__any_on+0x36>
 8010cec:	2000      	movs	r0, #0
 8010cee:	bd10      	pop	{r4, pc}
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	e7f7      	b.n	8010ce4 <__any_on+0x26>
 8010cf4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cf8:	2900      	cmp	r1, #0
 8010cfa:	d0f5      	beq.n	8010ce8 <__any_on+0x2a>
 8010cfc:	2001      	movs	r0, #1
 8010cfe:	e7f6      	b.n	8010cee <__any_on+0x30>

08010d00 <_strtol_l.constprop.0>:
 8010d00:	2b24      	cmp	r3, #36	@ 0x24
 8010d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d06:	4686      	mov	lr, r0
 8010d08:	4690      	mov	r8, r2
 8010d0a:	d801      	bhi.n	8010d10 <_strtol_l.constprop.0+0x10>
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d106      	bne.n	8010d1e <_strtol_l.constprop.0+0x1e>
 8010d10:	f7fe f916 	bl	800ef40 <__errno>
 8010d14:	2316      	movs	r3, #22
 8010d16:	6003      	str	r3, [r0, #0]
 8010d18:	2000      	movs	r0, #0
 8010d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d1e:	4834      	ldr	r0, [pc, #208]	@ (8010df0 <_strtol_l.constprop.0+0xf0>)
 8010d20:	460d      	mov	r5, r1
 8010d22:	462a      	mov	r2, r5
 8010d24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d28:	5d06      	ldrb	r6, [r0, r4]
 8010d2a:	f016 0608 	ands.w	r6, r6, #8
 8010d2e:	d1f8      	bne.n	8010d22 <_strtol_l.constprop.0+0x22>
 8010d30:	2c2d      	cmp	r4, #45	@ 0x2d
 8010d32:	d12d      	bne.n	8010d90 <_strtol_l.constprop.0+0x90>
 8010d34:	782c      	ldrb	r4, [r5, #0]
 8010d36:	2601      	movs	r6, #1
 8010d38:	1c95      	adds	r5, r2, #2
 8010d3a:	f033 0210 	bics.w	r2, r3, #16
 8010d3e:	d109      	bne.n	8010d54 <_strtol_l.constprop.0+0x54>
 8010d40:	2c30      	cmp	r4, #48	@ 0x30
 8010d42:	d12a      	bne.n	8010d9a <_strtol_l.constprop.0+0x9a>
 8010d44:	782a      	ldrb	r2, [r5, #0]
 8010d46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d4a:	2a58      	cmp	r2, #88	@ 0x58
 8010d4c:	d125      	bne.n	8010d9a <_strtol_l.constprop.0+0x9a>
 8010d4e:	786c      	ldrb	r4, [r5, #1]
 8010d50:	2310      	movs	r3, #16
 8010d52:	3502      	adds	r5, #2
 8010d54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010d58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	fbbc f9f3 	udiv	r9, ip, r3
 8010d62:	4610      	mov	r0, r2
 8010d64:	fb03 ca19 	mls	sl, r3, r9, ip
 8010d68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010d6c:	2f09      	cmp	r7, #9
 8010d6e:	d81b      	bhi.n	8010da8 <_strtol_l.constprop.0+0xa8>
 8010d70:	463c      	mov	r4, r7
 8010d72:	42a3      	cmp	r3, r4
 8010d74:	dd27      	ble.n	8010dc6 <_strtol_l.constprop.0+0xc6>
 8010d76:	1c57      	adds	r7, r2, #1
 8010d78:	d007      	beq.n	8010d8a <_strtol_l.constprop.0+0x8a>
 8010d7a:	4581      	cmp	r9, r0
 8010d7c:	d320      	bcc.n	8010dc0 <_strtol_l.constprop.0+0xc0>
 8010d7e:	d101      	bne.n	8010d84 <_strtol_l.constprop.0+0x84>
 8010d80:	45a2      	cmp	sl, r4
 8010d82:	db1d      	blt.n	8010dc0 <_strtol_l.constprop.0+0xc0>
 8010d84:	fb00 4003 	mla	r0, r0, r3, r4
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d8e:	e7eb      	b.n	8010d68 <_strtol_l.constprop.0+0x68>
 8010d90:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d92:	bf04      	itt	eq
 8010d94:	782c      	ldrbeq	r4, [r5, #0]
 8010d96:	1c95      	addeq	r5, r2, #2
 8010d98:	e7cf      	b.n	8010d3a <_strtol_l.constprop.0+0x3a>
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1da      	bne.n	8010d54 <_strtol_l.constprop.0+0x54>
 8010d9e:	2c30      	cmp	r4, #48	@ 0x30
 8010da0:	bf0c      	ite	eq
 8010da2:	2308      	moveq	r3, #8
 8010da4:	230a      	movne	r3, #10
 8010da6:	e7d5      	b.n	8010d54 <_strtol_l.constprop.0+0x54>
 8010da8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010dac:	2f19      	cmp	r7, #25
 8010dae:	d801      	bhi.n	8010db4 <_strtol_l.constprop.0+0xb4>
 8010db0:	3c37      	subs	r4, #55	@ 0x37
 8010db2:	e7de      	b.n	8010d72 <_strtol_l.constprop.0+0x72>
 8010db4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010db8:	2f19      	cmp	r7, #25
 8010dba:	d804      	bhi.n	8010dc6 <_strtol_l.constprop.0+0xc6>
 8010dbc:	3c57      	subs	r4, #87	@ 0x57
 8010dbe:	e7d8      	b.n	8010d72 <_strtol_l.constprop.0+0x72>
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	e7e1      	b.n	8010d8a <_strtol_l.constprop.0+0x8a>
 8010dc6:	1c53      	adds	r3, r2, #1
 8010dc8:	d108      	bne.n	8010ddc <_strtol_l.constprop.0+0xdc>
 8010dca:	2322      	movs	r3, #34	@ 0x22
 8010dcc:	f8ce 3000 	str.w	r3, [lr]
 8010dd0:	4660      	mov	r0, ip
 8010dd2:	f1b8 0f00 	cmp.w	r8, #0
 8010dd6:	d0a0      	beq.n	8010d1a <_strtol_l.constprop.0+0x1a>
 8010dd8:	1e69      	subs	r1, r5, #1
 8010dda:	e006      	b.n	8010dea <_strtol_l.constprop.0+0xea>
 8010ddc:	b106      	cbz	r6, 8010de0 <_strtol_l.constprop.0+0xe0>
 8010dde:	4240      	negs	r0, r0
 8010de0:	f1b8 0f00 	cmp.w	r8, #0
 8010de4:	d099      	beq.n	8010d1a <_strtol_l.constprop.0+0x1a>
 8010de6:	2a00      	cmp	r2, #0
 8010de8:	d1f6      	bne.n	8010dd8 <_strtol_l.constprop.0+0xd8>
 8010dea:	f8c8 1000 	str.w	r1, [r8]
 8010dee:	e794      	b.n	8010d1a <_strtol_l.constprop.0+0x1a>
 8010df0:	08011c29 	.word	0x08011c29

08010df4 <_strtol_r>:
 8010df4:	f7ff bf84 	b.w	8010d00 <_strtol_l.constprop.0>

08010df8 <__ascii_wctomb>:
 8010df8:	4603      	mov	r3, r0
 8010dfa:	4608      	mov	r0, r1
 8010dfc:	b141      	cbz	r1, 8010e10 <__ascii_wctomb+0x18>
 8010dfe:	2aff      	cmp	r2, #255	@ 0xff
 8010e00:	d904      	bls.n	8010e0c <__ascii_wctomb+0x14>
 8010e02:	228a      	movs	r2, #138	@ 0x8a
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0a:	4770      	bx	lr
 8010e0c:	700a      	strb	r2, [r1, #0]
 8010e0e:	2001      	movs	r0, #1
 8010e10:	4770      	bx	lr

08010e12 <__ssputs_r>:
 8010e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e16:	688e      	ldr	r6, [r1, #8]
 8010e18:	461f      	mov	r7, r3
 8010e1a:	42be      	cmp	r6, r7
 8010e1c:	680b      	ldr	r3, [r1, #0]
 8010e1e:	4682      	mov	sl, r0
 8010e20:	460c      	mov	r4, r1
 8010e22:	4690      	mov	r8, r2
 8010e24:	d82d      	bhi.n	8010e82 <__ssputs_r+0x70>
 8010e26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010e2e:	d026      	beq.n	8010e7e <__ssputs_r+0x6c>
 8010e30:	6965      	ldr	r5, [r4, #20]
 8010e32:	6909      	ldr	r1, [r1, #16]
 8010e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e38:	eba3 0901 	sub.w	r9, r3, r1
 8010e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e40:	1c7b      	adds	r3, r7, #1
 8010e42:	444b      	add	r3, r9
 8010e44:	106d      	asrs	r5, r5, #1
 8010e46:	429d      	cmp	r5, r3
 8010e48:	bf38      	it	cc
 8010e4a:	461d      	movcc	r5, r3
 8010e4c:	0553      	lsls	r3, r2, #21
 8010e4e:	d527      	bpl.n	8010ea0 <__ssputs_r+0x8e>
 8010e50:	4629      	mov	r1, r5
 8010e52:	f7fc f9cf 	bl	800d1f4 <_malloc_r>
 8010e56:	4606      	mov	r6, r0
 8010e58:	b360      	cbz	r0, 8010eb4 <__ssputs_r+0xa2>
 8010e5a:	6921      	ldr	r1, [r4, #16]
 8010e5c:	464a      	mov	r2, r9
 8010e5e:	f7fe f89c 	bl	800ef9a <memcpy>
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e6c:	81a3      	strh	r3, [r4, #12]
 8010e6e:	6126      	str	r6, [r4, #16]
 8010e70:	6165      	str	r5, [r4, #20]
 8010e72:	444e      	add	r6, r9
 8010e74:	eba5 0509 	sub.w	r5, r5, r9
 8010e78:	6026      	str	r6, [r4, #0]
 8010e7a:	60a5      	str	r5, [r4, #8]
 8010e7c:	463e      	mov	r6, r7
 8010e7e:	42be      	cmp	r6, r7
 8010e80:	d900      	bls.n	8010e84 <__ssputs_r+0x72>
 8010e82:	463e      	mov	r6, r7
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	4632      	mov	r2, r6
 8010e88:	4641      	mov	r1, r8
 8010e8a:	f000 f9c5 	bl	8011218 <memmove>
 8010e8e:	68a3      	ldr	r3, [r4, #8]
 8010e90:	1b9b      	subs	r3, r3, r6
 8010e92:	60a3      	str	r3, [r4, #8]
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	4433      	add	r3, r6
 8010e98:	6023      	str	r3, [r4, #0]
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea0:	462a      	mov	r2, r5
 8010ea2:	f000 fa05 	bl	80112b0 <_realloc_r>
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d1e0      	bne.n	8010e6e <__ssputs_r+0x5c>
 8010eac:	6921      	ldr	r1, [r4, #16]
 8010eae:	4650      	mov	r0, sl
 8010eb0:	f7fe fede 	bl	800fc70 <_free_r>
 8010eb4:	230c      	movs	r3, #12
 8010eb6:	f8ca 3000 	str.w	r3, [sl]
 8010eba:	89a3      	ldrh	r3, [r4, #12]
 8010ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec6:	e7e9      	b.n	8010e9c <__ssputs_r+0x8a>

08010ec8 <_svfiprintf_r>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	4698      	mov	r8, r3
 8010ece:	898b      	ldrh	r3, [r1, #12]
 8010ed0:	061b      	lsls	r3, r3, #24
 8010ed2:	b09d      	sub	sp, #116	@ 0x74
 8010ed4:	4607      	mov	r7, r0
 8010ed6:	460d      	mov	r5, r1
 8010ed8:	4614      	mov	r4, r2
 8010eda:	d510      	bpl.n	8010efe <_svfiprintf_r+0x36>
 8010edc:	690b      	ldr	r3, [r1, #16]
 8010ede:	b973      	cbnz	r3, 8010efe <_svfiprintf_r+0x36>
 8010ee0:	2140      	movs	r1, #64	@ 0x40
 8010ee2:	f7fc f987 	bl	800d1f4 <_malloc_r>
 8010ee6:	6028      	str	r0, [r5, #0]
 8010ee8:	6128      	str	r0, [r5, #16]
 8010eea:	b930      	cbnz	r0, 8010efa <_svfiprintf_r+0x32>
 8010eec:	230c      	movs	r3, #12
 8010eee:	603b      	str	r3, [r7, #0]
 8010ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef4:	b01d      	add	sp, #116	@ 0x74
 8010ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efa:	2340      	movs	r3, #64	@ 0x40
 8010efc:	616b      	str	r3, [r5, #20]
 8010efe:	2300      	movs	r3, #0
 8010f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f02:	2320      	movs	r3, #32
 8010f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f0c:	2330      	movs	r3, #48	@ 0x30
 8010f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80110ac <_svfiprintf_r+0x1e4>
 8010f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f16:	f04f 0901 	mov.w	r9, #1
 8010f1a:	4623      	mov	r3, r4
 8010f1c:	469a      	mov	sl, r3
 8010f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f22:	b10a      	cbz	r2, 8010f28 <_svfiprintf_r+0x60>
 8010f24:	2a25      	cmp	r2, #37	@ 0x25
 8010f26:	d1f9      	bne.n	8010f1c <_svfiprintf_r+0x54>
 8010f28:	ebba 0b04 	subs.w	fp, sl, r4
 8010f2c:	d00b      	beq.n	8010f46 <_svfiprintf_r+0x7e>
 8010f2e:	465b      	mov	r3, fp
 8010f30:	4622      	mov	r2, r4
 8010f32:	4629      	mov	r1, r5
 8010f34:	4638      	mov	r0, r7
 8010f36:	f7ff ff6c 	bl	8010e12 <__ssputs_r>
 8010f3a:	3001      	adds	r0, #1
 8010f3c:	f000 80a7 	beq.w	801108e <_svfiprintf_r+0x1c6>
 8010f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f42:	445a      	add	r2, fp
 8010f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f46:	f89a 3000 	ldrb.w	r3, [sl]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f000 809f 	beq.w	801108e <_svfiprintf_r+0x1c6>
 8010f50:	2300      	movs	r3, #0
 8010f52:	f04f 32ff 	mov.w	r2, #4294967295
 8010f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f5a:	f10a 0a01 	add.w	sl, sl, #1
 8010f5e:	9304      	str	r3, [sp, #16]
 8010f60:	9307      	str	r3, [sp, #28]
 8010f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f68:	4654      	mov	r4, sl
 8010f6a:	2205      	movs	r2, #5
 8010f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f70:	484e      	ldr	r0, [pc, #312]	@ (80110ac <_svfiprintf_r+0x1e4>)
 8010f72:	f7ef f94d 	bl	8000210 <memchr>
 8010f76:	9a04      	ldr	r2, [sp, #16]
 8010f78:	b9d8      	cbnz	r0, 8010fb2 <_svfiprintf_r+0xea>
 8010f7a:	06d0      	lsls	r0, r2, #27
 8010f7c:	bf44      	itt	mi
 8010f7e:	2320      	movmi	r3, #32
 8010f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f84:	0711      	lsls	r1, r2, #28
 8010f86:	bf44      	itt	mi
 8010f88:	232b      	movmi	r3, #43	@ 0x2b
 8010f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f94:	d015      	beq.n	8010fc2 <_svfiprintf_r+0xfa>
 8010f96:	9a07      	ldr	r2, [sp, #28]
 8010f98:	4654      	mov	r4, sl
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	f04f 0c0a 	mov.w	ip, #10
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fa6:	3b30      	subs	r3, #48	@ 0x30
 8010fa8:	2b09      	cmp	r3, #9
 8010faa:	d94b      	bls.n	8011044 <_svfiprintf_r+0x17c>
 8010fac:	b1b0      	cbz	r0, 8010fdc <_svfiprintf_r+0x114>
 8010fae:	9207      	str	r2, [sp, #28]
 8010fb0:	e014      	b.n	8010fdc <_svfiprintf_r+0x114>
 8010fb2:	eba0 0308 	sub.w	r3, r0, r8
 8010fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	9304      	str	r3, [sp, #16]
 8010fbe:	46a2      	mov	sl, r4
 8010fc0:	e7d2      	b.n	8010f68 <_svfiprintf_r+0xa0>
 8010fc2:	9b03      	ldr	r3, [sp, #12]
 8010fc4:	1d19      	adds	r1, r3, #4
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	9103      	str	r1, [sp, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	bfbb      	ittet	lt
 8010fce:	425b      	neglt	r3, r3
 8010fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8010fd4:	9307      	strge	r3, [sp, #28]
 8010fd6:	9307      	strlt	r3, [sp, #28]
 8010fd8:	bfb8      	it	lt
 8010fda:	9204      	strlt	r2, [sp, #16]
 8010fdc:	7823      	ldrb	r3, [r4, #0]
 8010fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fe0:	d10a      	bne.n	8010ff8 <_svfiprintf_r+0x130>
 8010fe2:	7863      	ldrb	r3, [r4, #1]
 8010fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fe6:	d132      	bne.n	801104e <_svfiprintf_r+0x186>
 8010fe8:	9b03      	ldr	r3, [sp, #12]
 8010fea:	1d1a      	adds	r2, r3, #4
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	9203      	str	r2, [sp, #12]
 8010ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ff4:	3402      	adds	r4, #2
 8010ff6:	9305      	str	r3, [sp, #20]
 8010ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80110bc <_svfiprintf_r+0x1f4>
 8010ffc:	7821      	ldrb	r1, [r4, #0]
 8010ffe:	2203      	movs	r2, #3
 8011000:	4650      	mov	r0, sl
 8011002:	f7ef f905 	bl	8000210 <memchr>
 8011006:	b138      	cbz	r0, 8011018 <_svfiprintf_r+0x150>
 8011008:	9b04      	ldr	r3, [sp, #16]
 801100a:	eba0 000a 	sub.w	r0, r0, sl
 801100e:	2240      	movs	r2, #64	@ 0x40
 8011010:	4082      	lsls	r2, r0
 8011012:	4313      	orrs	r3, r2
 8011014:	3401      	adds	r4, #1
 8011016:	9304      	str	r3, [sp, #16]
 8011018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801101c:	4824      	ldr	r0, [pc, #144]	@ (80110b0 <_svfiprintf_r+0x1e8>)
 801101e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011022:	2206      	movs	r2, #6
 8011024:	f7ef f8f4 	bl	8000210 <memchr>
 8011028:	2800      	cmp	r0, #0
 801102a:	d036      	beq.n	801109a <_svfiprintf_r+0x1d2>
 801102c:	4b21      	ldr	r3, [pc, #132]	@ (80110b4 <_svfiprintf_r+0x1ec>)
 801102e:	bb1b      	cbnz	r3, 8011078 <_svfiprintf_r+0x1b0>
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	3307      	adds	r3, #7
 8011034:	f023 0307 	bic.w	r3, r3, #7
 8011038:	3308      	adds	r3, #8
 801103a:	9303      	str	r3, [sp, #12]
 801103c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801103e:	4433      	add	r3, r6
 8011040:	9309      	str	r3, [sp, #36]	@ 0x24
 8011042:	e76a      	b.n	8010f1a <_svfiprintf_r+0x52>
 8011044:	fb0c 3202 	mla	r2, ip, r2, r3
 8011048:	460c      	mov	r4, r1
 801104a:	2001      	movs	r0, #1
 801104c:	e7a8      	b.n	8010fa0 <_svfiprintf_r+0xd8>
 801104e:	2300      	movs	r3, #0
 8011050:	3401      	adds	r4, #1
 8011052:	9305      	str	r3, [sp, #20]
 8011054:	4619      	mov	r1, r3
 8011056:	f04f 0c0a 	mov.w	ip, #10
 801105a:	4620      	mov	r0, r4
 801105c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011060:	3a30      	subs	r2, #48	@ 0x30
 8011062:	2a09      	cmp	r2, #9
 8011064:	d903      	bls.n	801106e <_svfiprintf_r+0x1a6>
 8011066:	2b00      	cmp	r3, #0
 8011068:	d0c6      	beq.n	8010ff8 <_svfiprintf_r+0x130>
 801106a:	9105      	str	r1, [sp, #20]
 801106c:	e7c4      	b.n	8010ff8 <_svfiprintf_r+0x130>
 801106e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011072:	4604      	mov	r4, r0
 8011074:	2301      	movs	r3, #1
 8011076:	e7f0      	b.n	801105a <_svfiprintf_r+0x192>
 8011078:	ab03      	add	r3, sp, #12
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	462a      	mov	r2, r5
 801107e:	4b0e      	ldr	r3, [pc, #56]	@ (80110b8 <_svfiprintf_r+0x1f0>)
 8011080:	a904      	add	r1, sp, #16
 8011082:	4638      	mov	r0, r7
 8011084:	f7fc fff6 	bl	800e074 <_printf_float>
 8011088:	1c42      	adds	r2, r0, #1
 801108a:	4606      	mov	r6, r0
 801108c:	d1d6      	bne.n	801103c <_svfiprintf_r+0x174>
 801108e:	89ab      	ldrh	r3, [r5, #12]
 8011090:	065b      	lsls	r3, r3, #25
 8011092:	f53f af2d 	bmi.w	8010ef0 <_svfiprintf_r+0x28>
 8011096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011098:	e72c      	b.n	8010ef4 <_svfiprintf_r+0x2c>
 801109a:	ab03      	add	r3, sp, #12
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	462a      	mov	r2, r5
 80110a0:	4b05      	ldr	r3, [pc, #20]	@ (80110b8 <_svfiprintf_r+0x1f0>)
 80110a2:	a904      	add	r1, sp, #16
 80110a4:	4638      	mov	r0, r7
 80110a6:	f7fd fa7d 	bl	800e5a4 <_printf_i>
 80110aa:	e7ed      	b.n	8011088 <_svfiprintf_r+0x1c0>
 80110ac:	08011d29 	.word	0x08011d29
 80110b0:	08011d33 	.word	0x08011d33
 80110b4:	0800e075 	.word	0x0800e075
 80110b8:	08010e13 	.word	0x08010e13
 80110bc:	08011d2f 	.word	0x08011d2f

080110c0 <__sflush_r>:
 80110c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	0716      	lsls	r6, r2, #28
 80110ca:	4605      	mov	r5, r0
 80110cc:	460c      	mov	r4, r1
 80110ce:	d454      	bmi.n	801117a <__sflush_r+0xba>
 80110d0:	684b      	ldr	r3, [r1, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	dc02      	bgt.n	80110dc <__sflush_r+0x1c>
 80110d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dd48      	ble.n	801116e <__sflush_r+0xae>
 80110dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110de:	2e00      	cmp	r6, #0
 80110e0:	d045      	beq.n	801116e <__sflush_r+0xae>
 80110e2:	2300      	movs	r3, #0
 80110e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110e8:	682f      	ldr	r7, [r5, #0]
 80110ea:	6a21      	ldr	r1, [r4, #32]
 80110ec:	602b      	str	r3, [r5, #0]
 80110ee:	d030      	beq.n	8011152 <__sflush_r+0x92>
 80110f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	0759      	lsls	r1, r3, #29
 80110f6:	d505      	bpl.n	8011104 <__sflush_r+0x44>
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	1ad2      	subs	r2, r2, r3
 80110fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110fe:	b10b      	cbz	r3, 8011104 <__sflush_r+0x44>
 8011100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	2300      	movs	r3, #0
 8011106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011108:	6a21      	ldr	r1, [r4, #32]
 801110a:	4628      	mov	r0, r5
 801110c:	47b0      	blx	r6
 801110e:	1c43      	adds	r3, r0, #1
 8011110:	89a3      	ldrh	r3, [r4, #12]
 8011112:	d106      	bne.n	8011122 <__sflush_r+0x62>
 8011114:	6829      	ldr	r1, [r5, #0]
 8011116:	291d      	cmp	r1, #29
 8011118:	d82b      	bhi.n	8011172 <__sflush_r+0xb2>
 801111a:	4a2a      	ldr	r2, [pc, #168]	@ (80111c4 <__sflush_r+0x104>)
 801111c:	410a      	asrs	r2, r1
 801111e:	07d6      	lsls	r6, r2, #31
 8011120:	d427      	bmi.n	8011172 <__sflush_r+0xb2>
 8011122:	2200      	movs	r2, #0
 8011124:	6062      	str	r2, [r4, #4]
 8011126:	04d9      	lsls	r1, r3, #19
 8011128:	6922      	ldr	r2, [r4, #16]
 801112a:	6022      	str	r2, [r4, #0]
 801112c:	d504      	bpl.n	8011138 <__sflush_r+0x78>
 801112e:	1c42      	adds	r2, r0, #1
 8011130:	d101      	bne.n	8011136 <__sflush_r+0x76>
 8011132:	682b      	ldr	r3, [r5, #0]
 8011134:	b903      	cbnz	r3, 8011138 <__sflush_r+0x78>
 8011136:	6560      	str	r0, [r4, #84]	@ 0x54
 8011138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801113a:	602f      	str	r7, [r5, #0]
 801113c:	b1b9      	cbz	r1, 801116e <__sflush_r+0xae>
 801113e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011142:	4299      	cmp	r1, r3
 8011144:	d002      	beq.n	801114c <__sflush_r+0x8c>
 8011146:	4628      	mov	r0, r5
 8011148:	f7fe fd92 	bl	800fc70 <_free_r>
 801114c:	2300      	movs	r3, #0
 801114e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011150:	e00d      	b.n	801116e <__sflush_r+0xae>
 8011152:	2301      	movs	r3, #1
 8011154:	4628      	mov	r0, r5
 8011156:	47b0      	blx	r6
 8011158:	4602      	mov	r2, r0
 801115a:	1c50      	adds	r0, r2, #1
 801115c:	d1c9      	bne.n	80110f2 <__sflush_r+0x32>
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d0c6      	beq.n	80110f2 <__sflush_r+0x32>
 8011164:	2b1d      	cmp	r3, #29
 8011166:	d001      	beq.n	801116c <__sflush_r+0xac>
 8011168:	2b16      	cmp	r3, #22
 801116a:	d11e      	bne.n	80111aa <__sflush_r+0xea>
 801116c:	602f      	str	r7, [r5, #0]
 801116e:	2000      	movs	r0, #0
 8011170:	e022      	b.n	80111b8 <__sflush_r+0xf8>
 8011172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011176:	b21b      	sxth	r3, r3
 8011178:	e01b      	b.n	80111b2 <__sflush_r+0xf2>
 801117a:	690f      	ldr	r7, [r1, #16]
 801117c:	2f00      	cmp	r7, #0
 801117e:	d0f6      	beq.n	801116e <__sflush_r+0xae>
 8011180:	0793      	lsls	r3, r2, #30
 8011182:	680e      	ldr	r6, [r1, #0]
 8011184:	bf08      	it	eq
 8011186:	694b      	ldreq	r3, [r1, #20]
 8011188:	600f      	str	r7, [r1, #0]
 801118a:	bf18      	it	ne
 801118c:	2300      	movne	r3, #0
 801118e:	eba6 0807 	sub.w	r8, r6, r7
 8011192:	608b      	str	r3, [r1, #8]
 8011194:	f1b8 0f00 	cmp.w	r8, #0
 8011198:	dde9      	ble.n	801116e <__sflush_r+0xae>
 801119a:	6a21      	ldr	r1, [r4, #32]
 801119c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801119e:	4643      	mov	r3, r8
 80111a0:	463a      	mov	r2, r7
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b0      	blx	r6
 80111a6:	2800      	cmp	r0, #0
 80111a8:	dc08      	bgt.n	80111bc <__sflush_r+0xfc>
 80111aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	f04f 30ff 	mov.w	r0, #4294967295
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	4407      	add	r7, r0
 80111be:	eba8 0800 	sub.w	r8, r8, r0
 80111c2:	e7e7      	b.n	8011194 <__sflush_r+0xd4>
 80111c4:	dfbffffe 	.word	0xdfbffffe

080111c8 <_fflush_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	690b      	ldr	r3, [r1, #16]
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b913      	cbnz	r3, 80111d8 <_fflush_r+0x10>
 80111d2:	2500      	movs	r5, #0
 80111d4:	4628      	mov	r0, r5
 80111d6:	bd38      	pop	{r3, r4, r5, pc}
 80111d8:	b118      	cbz	r0, 80111e2 <_fflush_r+0x1a>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <_fflush_r+0x1a>
 80111de:	f7fd fda1 	bl	800ed24 <__sinit>
 80111e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0f3      	beq.n	80111d2 <_fflush_r+0xa>
 80111ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111ec:	07d0      	lsls	r0, r2, #31
 80111ee:	d404      	bmi.n	80111fa <_fflush_r+0x32>
 80111f0:	0599      	lsls	r1, r3, #22
 80111f2:	d402      	bmi.n	80111fa <_fflush_r+0x32>
 80111f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111f6:	f7fd fece 	bl	800ef96 <__retarget_lock_acquire_recursive>
 80111fa:	4628      	mov	r0, r5
 80111fc:	4621      	mov	r1, r4
 80111fe:	f7ff ff5f 	bl	80110c0 <__sflush_r>
 8011202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011204:	07da      	lsls	r2, r3, #31
 8011206:	4605      	mov	r5, r0
 8011208:	d4e4      	bmi.n	80111d4 <_fflush_r+0xc>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	059b      	lsls	r3, r3, #22
 801120e:	d4e1      	bmi.n	80111d4 <_fflush_r+0xc>
 8011210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011212:	f7fd fec1 	bl	800ef98 <__retarget_lock_release_recursive>
 8011216:	e7dd      	b.n	80111d4 <_fflush_r+0xc>

08011218 <memmove>:
 8011218:	4288      	cmp	r0, r1
 801121a:	b510      	push	{r4, lr}
 801121c:	eb01 0402 	add.w	r4, r1, r2
 8011220:	d902      	bls.n	8011228 <memmove+0x10>
 8011222:	4284      	cmp	r4, r0
 8011224:	4623      	mov	r3, r4
 8011226:	d807      	bhi.n	8011238 <memmove+0x20>
 8011228:	1e43      	subs	r3, r0, #1
 801122a:	42a1      	cmp	r1, r4
 801122c:	d008      	beq.n	8011240 <memmove+0x28>
 801122e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011236:	e7f8      	b.n	801122a <memmove+0x12>
 8011238:	4402      	add	r2, r0
 801123a:	4601      	mov	r1, r0
 801123c:	428a      	cmp	r2, r1
 801123e:	d100      	bne.n	8011242 <memmove+0x2a>
 8011240:	bd10      	pop	{r4, pc}
 8011242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801124a:	e7f7      	b.n	801123c <memmove+0x24>

0801124c <__assert_func>:
 801124c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801124e:	4614      	mov	r4, r2
 8011250:	461a      	mov	r2, r3
 8011252:	4b09      	ldr	r3, [pc, #36]	@ (8011278 <__assert_func+0x2c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4605      	mov	r5, r0
 8011258:	68d8      	ldr	r0, [r3, #12]
 801125a:	b954      	cbnz	r4, 8011272 <__assert_func+0x26>
 801125c:	4b07      	ldr	r3, [pc, #28]	@ (801127c <__assert_func+0x30>)
 801125e:	461c      	mov	r4, r3
 8011260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011264:	9100      	str	r1, [sp, #0]
 8011266:	462b      	mov	r3, r5
 8011268:	4905      	ldr	r1, [pc, #20]	@ (8011280 <__assert_func+0x34>)
 801126a:	f000 f84f 	bl	801130c <fiprintf>
 801126e:	f000 f85f 	bl	8011330 <abort>
 8011272:	4b04      	ldr	r3, [pc, #16]	@ (8011284 <__assert_func+0x38>)
 8011274:	e7f4      	b.n	8011260 <__assert_func+0x14>
 8011276:	bf00      	nop
 8011278:	20000298 	.word	0x20000298
 801127c:	08011d75 	.word	0x08011d75
 8011280:	08011d47 	.word	0x08011d47
 8011284:	08011d3a 	.word	0x08011d3a

08011288 <_calloc_r>:
 8011288:	b570      	push	{r4, r5, r6, lr}
 801128a:	fba1 5402 	umull	r5, r4, r1, r2
 801128e:	b93c      	cbnz	r4, 80112a0 <_calloc_r+0x18>
 8011290:	4629      	mov	r1, r5
 8011292:	f7fb ffaf 	bl	800d1f4 <_malloc_r>
 8011296:	4606      	mov	r6, r0
 8011298:	b928      	cbnz	r0, 80112a6 <_calloc_r+0x1e>
 801129a:	2600      	movs	r6, #0
 801129c:	4630      	mov	r0, r6
 801129e:	bd70      	pop	{r4, r5, r6, pc}
 80112a0:	220c      	movs	r2, #12
 80112a2:	6002      	str	r2, [r0, #0]
 80112a4:	e7f9      	b.n	801129a <_calloc_r+0x12>
 80112a6:	462a      	mov	r2, r5
 80112a8:	4621      	mov	r1, r4
 80112aa:	f7fd fdd4 	bl	800ee56 <memset>
 80112ae:	e7f5      	b.n	801129c <_calloc_r+0x14>

080112b0 <_realloc_r>:
 80112b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b4:	4680      	mov	r8, r0
 80112b6:	4615      	mov	r5, r2
 80112b8:	460c      	mov	r4, r1
 80112ba:	b921      	cbnz	r1, 80112c6 <_realloc_r+0x16>
 80112bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112c0:	4611      	mov	r1, r2
 80112c2:	f7fb bf97 	b.w	800d1f4 <_malloc_r>
 80112c6:	b92a      	cbnz	r2, 80112d4 <_realloc_r+0x24>
 80112c8:	f7fe fcd2 	bl	800fc70 <_free_r>
 80112cc:	2400      	movs	r4, #0
 80112ce:	4620      	mov	r0, r4
 80112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d4:	f000 f833 	bl	801133e <_malloc_usable_size_r>
 80112d8:	4285      	cmp	r5, r0
 80112da:	4606      	mov	r6, r0
 80112dc:	d802      	bhi.n	80112e4 <_realloc_r+0x34>
 80112de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80112e2:	d8f4      	bhi.n	80112ce <_realloc_r+0x1e>
 80112e4:	4629      	mov	r1, r5
 80112e6:	4640      	mov	r0, r8
 80112e8:	f7fb ff84 	bl	800d1f4 <_malloc_r>
 80112ec:	4607      	mov	r7, r0
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d0ec      	beq.n	80112cc <_realloc_r+0x1c>
 80112f2:	42b5      	cmp	r5, r6
 80112f4:	462a      	mov	r2, r5
 80112f6:	4621      	mov	r1, r4
 80112f8:	bf28      	it	cs
 80112fa:	4632      	movcs	r2, r6
 80112fc:	f7fd fe4d 	bl	800ef9a <memcpy>
 8011300:	4621      	mov	r1, r4
 8011302:	4640      	mov	r0, r8
 8011304:	f7fe fcb4 	bl	800fc70 <_free_r>
 8011308:	463c      	mov	r4, r7
 801130a:	e7e0      	b.n	80112ce <_realloc_r+0x1e>

0801130c <fiprintf>:
 801130c:	b40e      	push	{r1, r2, r3}
 801130e:	b503      	push	{r0, r1, lr}
 8011310:	4601      	mov	r1, r0
 8011312:	ab03      	add	r3, sp, #12
 8011314:	4805      	ldr	r0, [pc, #20]	@ (801132c <fiprintf+0x20>)
 8011316:	f853 2b04 	ldr.w	r2, [r3], #4
 801131a:	6800      	ldr	r0, [r0, #0]
 801131c:	9301      	str	r3, [sp, #4]
 801131e:	f000 f83f 	bl	80113a0 <_vfiprintf_r>
 8011322:	b002      	add	sp, #8
 8011324:	f85d eb04 	ldr.w	lr, [sp], #4
 8011328:	b003      	add	sp, #12
 801132a:	4770      	bx	lr
 801132c:	20000298 	.word	0x20000298

08011330 <abort>:
 8011330:	b508      	push	{r3, lr}
 8011332:	2006      	movs	r0, #6
 8011334:	f000 fa08 	bl	8011748 <raise>
 8011338:	2001      	movs	r0, #1
 801133a:	f7f1 ff47 	bl	80031cc <_exit>

0801133e <_malloc_usable_size_r>:
 801133e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011342:	1f18      	subs	r0, r3, #4
 8011344:	2b00      	cmp	r3, #0
 8011346:	bfbc      	itt	lt
 8011348:	580b      	ldrlt	r3, [r1, r0]
 801134a:	18c0      	addlt	r0, r0, r3
 801134c:	4770      	bx	lr

0801134e <__sfputc_r>:
 801134e:	6893      	ldr	r3, [r2, #8]
 8011350:	3b01      	subs	r3, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	b410      	push	{r4}
 8011356:	6093      	str	r3, [r2, #8]
 8011358:	da08      	bge.n	801136c <__sfputc_r+0x1e>
 801135a:	6994      	ldr	r4, [r2, #24]
 801135c:	42a3      	cmp	r3, r4
 801135e:	db01      	blt.n	8011364 <__sfputc_r+0x16>
 8011360:	290a      	cmp	r1, #10
 8011362:	d103      	bne.n	801136c <__sfputc_r+0x1e>
 8011364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011368:	f000 b932 	b.w	80115d0 <__swbuf_r>
 801136c:	6813      	ldr	r3, [r2, #0]
 801136e:	1c58      	adds	r0, r3, #1
 8011370:	6010      	str	r0, [r2, #0]
 8011372:	7019      	strb	r1, [r3, #0]
 8011374:	4608      	mov	r0, r1
 8011376:	f85d 4b04 	ldr.w	r4, [sp], #4
 801137a:	4770      	bx	lr

0801137c <__sfputs_r>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	4614      	mov	r4, r2
 8011384:	18d5      	adds	r5, r2, r3
 8011386:	42ac      	cmp	r4, r5
 8011388:	d101      	bne.n	801138e <__sfputs_r+0x12>
 801138a:	2000      	movs	r0, #0
 801138c:	e007      	b.n	801139e <__sfputs_r+0x22>
 801138e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011392:	463a      	mov	r2, r7
 8011394:	4630      	mov	r0, r6
 8011396:	f7ff ffda 	bl	801134e <__sfputc_r>
 801139a:	1c43      	adds	r3, r0, #1
 801139c:	d1f3      	bne.n	8011386 <__sfputs_r+0xa>
 801139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113a0 <_vfiprintf_r>:
 80113a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	460d      	mov	r5, r1
 80113a6:	b09d      	sub	sp, #116	@ 0x74
 80113a8:	4614      	mov	r4, r2
 80113aa:	4698      	mov	r8, r3
 80113ac:	4606      	mov	r6, r0
 80113ae:	b118      	cbz	r0, 80113b8 <_vfiprintf_r+0x18>
 80113b0:	6a03      	ldr	r3, [r0, #32]
 80113b2:	b90b      	cbnz	r3, 80113b8 <_vfiprintf_r+0x18>
 80113b4:	f7fd fcb6 	bl	800ed24 <__sinit>
 80113b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113ba:	07d9      	lsls	r1, r3, #31
 80113bc:	d405      	bmi.n	80113ca <_vfiprintf_r+0x2a>
 80113be:	89ab      	ldrh	r3, [r5, #12]
 80113c0:	059a      	lsls	r2, r3, #22
 80113c2:	d402      	bmi.n	80113ca <_vfiprintf_r+0x2a>
 80113c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113c6:	f7fd fde6 	bl	800ef96 <__retarget_lock_acquire_recursive>
 80113ca:	89ab      	ldrh	r3, [r5, #12]
 80113cc:	071b      	lsls	r3, r3, #28
 80113ce:	d501      	bpl.n	80113d4 <_vfiprintf_r+0x34>
 80113d0:	692b      	ldr	r3, [r5, #16]
 80113d2:	b99b      	cbnz	r3, 80113fc <_vfiprintf_r+0x5c>
 80113d4:	4629      	mov	r1, r5
 80113d6:	4630      	mov	r0, r6
 80113d8:	f000 f938 	bl	801164c <__swsetup_r>
 80113dc:	b170      	cbz	r0, 80113fc <_vfiprintf_r+0x5c>
 80113de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113e0:	07dc      	lsls	r4, r3, #31
 80113e2:	d504      	bpl.n	80113ee <_vfiprintf_r+0x4e>
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	b01d      	add	sp, #116	@ 0x74
 80113ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ee:	89ab      	ldrh	r3, [r5, #12]
 80113f0:	0598      	lsls	r0, r3, #22
 80113f2:	d4f7      	bmi.n	80113e4 <_vfiprintf_r+0x44>
 80113f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113f6:	f7fd fdcf 	bl	800ef98 <__retarget_lock_release_recursive>
 80113fa:	e7f3      	b.n	80113e4 <_vfiprintf_r+0x44>
 80113fc:	2300      	movs	r3, #0
 80113fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011400:	2320      	movs	r3, #32
 8011402:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011406:	f8cd 800c 	str.w	r8, [sp, #12]
 801140a:	2330      	movs	r3, #48	@ 0x30
 801140c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80115bc <_vfiprintf_r+0x21c>
 8011410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011414:	f04f 0901 	mov.w	r9, #1
 8011418:	4623      	mov	r3, r4
 801141a:	469a      	mov	sl, r3
 801141c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011420:	b10a      	cbz	r2, 8011426 <_vfiprintf_r+0x86>
 8011422:	2a25      	cmp	r2, #37	@ 0x25
 8011424:	d1f9      	bne.n	801141a <_vfiprintf_r+0x7a>
 8011426:	ebba 0b04 	subs.w	fp, sl, r4
 801142a:	d00b      	beq.n	8011444 <_vfiprintf_r+0xa4>
 801142c:	465b      	mov	r3, fp
 801142e:	4622      	mov	r2, r4
 8011430:	4629      	mov	r1, r5
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ffa2 	bl	801137c <__sfputs_r>
 8011438:	3001      	adds	r0, #1
 801143a:	f000 80a7 	beq.w	801158c <_vfiprintf_r+0x1ec>
 801143e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011440:	445a      	add	r2, fp
 8011442:	9209      	str	r2, [sp, #36]	@ 0x24
 8011444:	f89a 3000 	ldrb.w	r3, [sl]
 8011448:	2b00      	cmp	r3, #0
 801144a:	f000 809f 	beq.w	801158c <_vfiprintf_r+0x1ec>
 801144e:	2300      	movs	r3, #0
 8011450:	f04f 32ff 	mov.w	r2, #4294967295
 8011454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011458:	f10a 0a01 	add.w	sl, sl, #1
 801145c:	9304      	str	r3, [sp, #16]
 801145e:	9307      	str	r3, [sp, #28]
 8011460:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011464:	931a      	str	r3, [sp, #104]	@ 0x68
 8011466:	4654      	mov	r4, sl
 8011468:	2205      	movs	r2, #5
 801146a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801146e:	4853      	ldr	r0, [pc, #332]	@ (80115bc <_vfiprintf_r+0x21c>)
 8011470:	f7ee fece 	bl	8000210 <memchr>
 8011474:	9a04      	ldr	r2, [sp, #16]
 8011476:	b9d8      	cbnz	r0, 80114b0 <_vfiprintf_r+0x110>
 8011478:	06d1      	lsls	r1, r2, #27
 801147a:	bf44      	itt	mi
 801147c:	2320      	movmi	r3, #32
 801147e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011482:	0713      	lsls	r3, r2, #28
 8011484:	bf44      	itt	mi
 8011486:	232b      	movmi	r3, #43	@ 0x2b
 8011488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801148c:	f89a 3000 	ldrb.w	r3, [sl]
 8011490:	2b2a      	cmp	r3, #42	@ 0x2a
 8011492:	d015      	beq.n	80114c0 <_vfiprintf_r+0x120>
 8011494:	9a07      	ldr	r2, [sp, #28]
 8011496:	4654      	mov	r4, sl
 8011498:	2000      	movs	r0, #0
 801149a:	f04f 0c0a 	mov.w	ip, #10
 801149e:	4621      	mov	r1, r4
 80114a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114a4:	3b30      	subs	r3, #48	@ 0x30
 80114a6:	2b09      	cmp	r3, #9
 80114a8:	d94b      	bls.n	8011542 <_vfiprintf_r+0x1a2>
 80114aa:	b1b0      	cbz	r0, 80114da <_vfiprintf_r+0x13a>
 80114ac:	9207      	str	r2, [sp, #28]
 80114ae:	e014      	b.n	80114da <_vfiprintf_r+0x13a>
 80114b0:	eba0 0308 	sub.w	r3, r0, r8
 80114b4:	fa09 f303 	lsl.w	r3, r9, r3
 80114b8:	4313      	orrs	r3, r2
 80114ba:	9304      	str	r3, [sp, #16]
 80114bc:	46a2      	mov	sl, r4
 80114be:	e7d2      	b.n	8011466 <_vfiprintf_r+0xc6>
 80114c0:	9b03      	ldr	r3, [sp, #12]
 80114c2:	1d19      	adds	r1, r3, #4
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	9103      	str	r1, [sp, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfbb      	ittet	lt
 80114cc:	425b      	neglt	r3, r3
 80114ce:	f042 0202 	orrlt.w	r2, r2, #2
 80114d2:	9307      	strge	r3, [sp, #28]
 80114d4:	9307      	strlt	r3, [sp, #28]
 80114d6:	bfb8      	it	lt
 80114d8:	9204      	strlt	r2, [sp, #16]
 80114da:	7823      	ldrb	r3, [r4, #0]
 80114dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80114de:	d10a      	bne.n	80114f6 <_vfiprintf_r+0x156>
 80114e0:	7863      	ldrb	r3, [r4, #1]
 80114e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80114e4:	d132      	bne.n	801154c <_vfiprintf_r+0x1ac>
 80114e6:	9b03      	ldr	r3, [sp, #12]
 80114e8:	1d1a      	adds	r2, r3, #4
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	9203      	str	r2, [sp, #12]
 80114ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114f2:	3402      	adds	r4, #2
 80114f4:	9305      	str	r3, [sp, #20]
 80114f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80115cc <_vfiprintf_r+0x22c>
 80114fa:	7821      	ldrb	r1, [r4, #0]
 80114fc:	2203      	movs	r2, #3
 80114fe:	4650      	mov	r0, sl
 8011500:	f7ee fe86 	bl	8000210 <memchr>
 8011504:	b138      	cbz	r0, 8011516 <_vfiprintf_r+0x176>
 8011506:	9b04      	ldr	r3, [sp, #16]
 8011508:	eba0 000a 	sub.w	r0, r0, sl
 801150c:	2240      	movs	r2, #64	@ 0x40
 801150e:	4082      	lsls	r2, r0
 8011510:	4313      	orrs	r3, r2
 8011512:	3401      	adds	r4, #1
 8011514:	9304      	str	r3, [sp, #16]
 8011516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151a:	4829      	ldr	r0, [pc, #164]	@ (80115c0 <_vfiprintf_r+0x220>)
 801151c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011520:	2206      	movs	r2, #6
 8011522:	f7ee fe75 	bl	8000210 <memchr>
 8011526:	2800      	cmp	r0, #0
 8011528:	d03f      	beq.n	80115aa <_vfiprintf_r+0x20a>
 801152a:	4b26      	ldr	r3, [pc, #152]	@ (80115c4 <_vfiprintf_r+0x224>)
 801152c:	bb1b      	cbnz	r3, 8011576 <_vfiprintf_r+0x1d6>
 801152e:	9b03      	ldr	r3, [sp, #12]
 8011530:	3307      	adds	r3, #7
 8011532:	f023 0307 	bic.w	r3, r3, #7
 8011536:	3308      	adds	r3, #8
 8011538:	9303      	str	r3, [sp, #12]
 801153a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801153c:	443b      	add	r3, r7
 801153e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011540:	e76a      	b.n	8011418 <_vfiprintf_r+0x78>
 8011542:	fb0c 3202 	mla	r2, ip, r2, r3
 8011546:	460c      	mov	r4, r1
 8011548:	2001      	movs	r0, #1
 801154a:	e7a8      	b.n	801149e <_vfiprintf_r+0xfe>
 801154c:	2300      	movs	r3, #0
 801154e:	3401      	adds	r4, #1
 8011550:	9305      	str	r3, [sp, #20]
 8011552:	4619      	mov	r1, r3
 8011554:	f04f 0c0a 	mov.w	ip, #10
 8011558:	4620      	mov	r0, r4
 801155a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801155e:	3a30      	subs	r2, #48	@ 0x30
 8011560:	2a09      	cmp	r2, #9
 8011562:	d903      	bls.n	801156c <_vfiprintf_r+0x1cc>
 8011564:	2b00      	cmp	r3, #0
 8011566:	d0c6      	beq.n	80114f6 <_vfiprintf_r+0x156>
 8011568:	9105      	str	r1, [sp, #20]
 801156a:	e7c4      	b.n	80114f6 <_vfiprintf_r+0x156>
 801156c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011570:	4604      	mov	r4, r0
 8011572:	2301      	movs	r3, #1
 8011574:	e7f0      	b.n	8011558 <_vfiprintf_r+0x1b8>
 8011576:	ab03      	add	r3, sp, #12
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	462a      	mov	r2, r5
 801157c:	4b12      	ldr	r3, [pc, #72]	@ (80115c8 <_vfiprintf_r+0x228>)
 801157e:	a904      	add	r1, sp, #16
 8011580:	4630      	mov	r0, r6
 8011582:	f7fc fd77 	bl	800e074 <_printf_float>
 8011586:	4607      	mov	r7, r0
 8011588:	1c78      	adds	r0, r7, #1
 801158a:	d1d6      	bne.n	801153a <_vfiprintf_r+0x19a>
 801158c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801158e:	07d9      	lsls	r1, r3, #31
 8011590:	d405      	bmi.n	801159e <_vfiprintf_r+0x1fe>
 8011592:	89ab      	ldrh	r3, [r5, #12]
 8011594:	059a      	lsls	r2, r3, #22
 8011596:	d402      	bmi.n	801159e <_vfiprintf_r+0x1fe>
 8011598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801159a:	f7fd fcfd 	bl	800ef98 <__retarget_lock_release_recursive>
 801159e:	89ab      	ldrh	r3, [r5, #12]
 80115a0:	065b      	lsls	r3, r3, #25
 80115a2:	f53f af1f 	bmi.w	80113e4 <_vfiprintf_r+0x44>
 80115a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115a8:	e71e      	b.n	80113e8 <_vfiprintf_r+0x48>
 80115aa:	ab03      	add	r3, sp, #12
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	462a      	mov	r2, r5
 80115b0:	4b05      	ldr	r3, [pc, #20]	@ (80115c8 <_vfiprintf_r+0x228>)
 80115b2:	a904      	add	r1, sp, #16
 80115b4:	4630      	mov	r0, r6
 80115b6:	f7fc fff5 	bl	800e5a4 <_printf_i>
 80115ba:	e7e4      	b.n	8011586 <_vfiprintf_r+0x1e6>
 80115bc:	08011d29 	.word	0x08011d29
 80115c0:	08011d33 	.word	0x08011d33
 80115c4:	0800e075 	.word	0x0800e075
 80115c8:	0801137d 	.word	0x0801137d
 80115cc:	08011d2f 	.word	0x08011d2f

080115d0 <__swbuf_r>:
 80115d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d2:	460e      	mov	r6, r1
 80115d4:	4614      	mov	r4, r2
 80115d6:	4605      	mov	r5, r0
 80115d8:	b118      	cbz	r0, 80115e2 <__swbuf_r+0x12>
 80115da:	6a03      	ldr	r3, [r0, #32]
 80115dc:	b90b      	cbnz	r3, 80115e2 <__swbuf_r+0x12>
 80115de:	f7fd fba1 	bl	800ed24 <__sinit>
 80115e2:	69a3      	ldr	r3, [r4, #24]
 80115e4:	60a3      	str	r3, [r4, #8]
 80115e6:	89a3      	ldrh	r3, [r4, #12]
 80115e8:	071a      	lsls	r2, r3, #28
 80115ea:	d501      	bpl.n	80115f0 <__swbuf_r+0x20>
 80115ec:	6923      	ldr	r3, [r4, #16]
 80115ee:	b943      	cbnz	r3, 8011602 <__swbuf_r+0x32>
 80115f0:	4621      	mov	r1, r4
 80115f2:	4628      	mov	r0, r5
 80115f4:	f000 f82a 	bl	801164c <__swsetup_r>
 80115f8:	b118      	cbz	r0, 8011602 <__swbuf_r+0x32>
 80115fa:	f04f 37ff 	mov.w	r7, #4294967295
 80115fe:	4638      	mov	r0, r7
 8011600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011602:	6823      	ldr	r3, [r4, #0]
 8011604:	6922      	ldr	r2, [r4, #16]
 8011606:	1a98      	subs	r0, r3, r2
 8011608:	6963      	ldr	r3, [r4, #20]
 801160a:	b2f6      	uxtb	r6, r6
 801160c:	4283      	cmp	r3, r0
 801160e:	4637      	mov	r7, r6
 8011610:	dc05      	bgt.n	801161e <__swbuf_r+0x4e>
 8011612:	4621      	mov	r1, r4
 8011614:	4628      	mov	r0, r5
 8011616:	f7ff fdd7 	bl	80111c8 <_fflush_r>
 801161a:	2800      	cmp	r0, #0
 801161c:	d1ed      	bne.n	80115fa <__swbuf_r+0x2a>
 801161e:	68a3      	ldr	r3, [r4, #8]
 8011620:	3b01      	subs	r3, #1
 8011622:	60a3      	str	r3, [r4, #8]
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	1c5a      	adds	r2, r3, #1
 8011628:	6022      	str	r2, [r4, #0]
 801162a:	701e      	strb	r6, [r3, #0]
 801162c:	6962      	ldr	r2, [r4, #20]
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	429a      	cmp	r2, r3
 8011632:	d004      	beq.n	801163e <__swbuf_r+0x6e>
 8011634:	89a3      	ldrh	r3, [r4, #12]
 8011636:	07db      	lsls	r3, r3, #31
 8011638:	d5e1      	bpl.n	80115fe <__swbuf_r+0x2e>
 801163a:	2e0a      	cmp	r6, #10
 801163c:	d1df      	bne.n	80115fe <__swbuf_r+0x2e>
 801163e:	4621      	mov	r1, r4
 8011640:	4628      	mov	r0, r5
 8011642:	f7ff fdc1 	bl	80111c8 <_fflush_r>
 8011646:	2800      	cmp	r0, #0
 8011648:	d0d9      	beq.n	80115fe <__swbuf_r+0x2e>
 801164a:	e7d6      	b.n	80115fa <__swbuf_r+0x2a>

0801164c <__swsetup_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4b29      	ldr	r3, [pc, #164]	@ (80116f4 <__swsetup_r+0xa8>)
 8011650:	4605      	mov	r5, r0
 8011652:	6818      	ldr	r0, [r3, #0]
 8011654:	460c      	mov	r4, r1
 8011656:	b118      	cbz	r0, 8011660 <__swsetup_r+0x14>
 8011658:	6a03      	ldr	r3, [r0, #32]
 801165a:	b90b      	cbnz	r3, 8011660 <__swsetup_r+0x14>
 801165c:	f7fd fb62 	bl	800ed24 <__sinit>
 8011660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011664:	0719      	lsls	r1, r3, #28
 8011666:	d422      	bmi.n	80116ae <__swsetup_r+0x62>
 8011668:	06da      	lsls	r2, r3, #27
 801166a:	d407      	bmi.n	801167c <__swsetup_r+0x30>
 801166c:	2209      	movs	r2, #9
 801166e:	602a      	str	r2, [r5, #0]
 8011670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011674:	81a3      	strh	r3, [r4, #12]
 8011676:	f04f 30ff 	mov.w	r0, #4294967295
 801167a:	e033      	b.n	80116e4 <__swsetup_r+0x98>
 801167c:	0758      	lsls	r0, r3, #29
 801167e:	d512      	bpl.n	80116a6 <__swsetup_r+0x5a>
 8011680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011682:	b141      	cbz	r1, 8011696 <__swsetup_r+0x4a>
 8011684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011688:	4299      	cmp	r1, r3
 801168a:	d002      	beq.n	8011692 <__swsetup_r+0x46>
 801168c:	4628      	mov	r0, r5
 801168e:	f7fe faef 	bl	800fc70 <_free_r>
 8011692:	2300      	movs	r3, #0
 8011694:	6363      	str	r3, [r4, #52]	@ 0x34
 8011696:	89a3      	ldrh	r3, [r4, #12]
 8011698:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801169c:	81a3      	strh	r3, [r4, #12]
 801169e:	2300      	movs	r3, #0
 80116a0:	6063      	str	r3, [r4, #4]
 80116a2:	6923      	ldr	r3, [r4, #16]
 80116a4:	6023      	str	r3, [r4, #0]
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	f043 0308 	orr.w	r3, r3, #8
 80116ac:	81a3      	strh	r3, [r4, #12]
 80116ae:	6923      	ldr	r3, [r4, #16]
 80116b0:	b94b      	cbnz	r3, 80116c6 <__swsetup_r+0x7a>
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116bc:	d003      	beq.n	80116c6 <__swsetup_r+0x7a>
 80116be:	4621      	mov	r1, r4
 80116c0:	4628      	mov	r0, r5
 80116c2:	f000 f883 	bl	80117cc <__smakebuf_r>
 80116c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ca:	f013 0201 	ands.w	r2, r3, #1
 80116ce:	d00a      	beq.n	80116e6 <__swsetup_r+0x9a>
 80116d0:	2200      	movs	r2, #0
 80116d2:	60a2      	str	r2, [r4, #8]
 80116d4:	6962      	ldr	r2, [r4, #20]
 80116d6:	4252      	negs	r2, r2
 80116d8:	61a2      	str	r2, [r4, #24]
 80116da:	6922      	ldr	r2, [r4, #16]
 80116dc:	b942      	cbnz	r2, 80116f0 <__swsetup_r+0xa4>
 80116de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80116e2:	d1c5      	bne.n	8011670 <__swsetup_r+0x24>
 80116e4:	bd38      	pop	{r3, r4, r5, pc}
 80116e6:	0799      	lsls	r1, r3, #30
 80116e8:	bf58      	it	pl
 80116ea:	6962      	ldrpl	r2, [r4, #20]
 80116ec:	60a2      	str	r2, [r4, #8]
 80116ee:	e7f4      	b.n	80116da <__swsetup_r+0x8e>
 80116f0:	2000      	movs	r0, #0
 80116f2:	e7f7      	b.n	80116e4 <__swsetup_r+0x98>
 80116f4:	20000298 	.word	0x20000298

080116f8 <_raise_r>:
 80116f8:	291f      	cmp	r1, #31
 80116fa:	b538      	push	{r3, r4, r5, lr}
 80116fc:	4605      	mov	r5, r0
 80116fe:	460c      	mov	r4, r1
 8011700:	d904      	bls.n	801170c <_raise_r+0x14>
 8011702:	2316      	movs	r3, #22
 8011704:	6003      	str	r3, [r0, #0]
 8011706:	f04f 30ff 	mov.w	r0, #4294967295
 801170a:	bd38      	pop	{r3, r4, r5, pc}
 801170c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801170e:	b112      	cbz	r2, 8011716 <_raise_r+0x1e>
 8011710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011714:	b94b      	cbnz	r3, 801172a <_raise_r+0x32>
 8011716:	4628      	mov	r0, r5
 8011718:	f000 f830 	bl	801177c <_getpid_r>
 801171c:	4622      	mov	r2, r4
 801171e:	4601      	mov	r1, r0
 8011720:	4628      	mov	r0, r5
 8011722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011726:	f000 b817 	b.w	8011758 <_kill_r>
 801172a:	2b01      	cmp	r3, #1
 801172c:	d00a      	beq.n	8011744 <_raise_r+0x4c>
 801172e:	1c59      	adds	r1, r3, #1
 8011730:	d103      	bne.n	801173a <_raise_r+0x42>
 8011732:	2316      	movs	r3, #22
 8011734:	6003      	str	r3, [r0, #0]
 8011736:	2001      	movs	r0, #1
 8011738:	e7e7      	b.n	801170a <_raise_r+0x12>
 801173a:	2100      	movs	r1, #0
 801173c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011740:	4620      	mov	r0, r4
 8011742:	4798      	blx	r3
 8011744:	2000      	movs	r0, #0
 8011746:	e7e0      	b.n	801170a <_raise_r+0x12>

08011748 <raise>:
 8011748:	4b02      	ldr	r3, [pc, #8]	@ (8011754 <raise+0xc>)
 801174a:	4601      	mov	r1, r0
 801174c:	6818      	ldr	r0, [r3, #0]
 801174e:	f7ff bfd3 	b.w	80116f8 <_raise_r>
 8011752:	bf00      	nop
 8011754:	20000298 	.word	0x20000298

08011758 <_kill_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4d07      	ldr	r5, [pc, #28]	@ (8011778 <_kill_r+0x20>)
 801175c:	2300      	movs	r3, #0
 801175e:	4604      	mov	r4, r0
 8011760:	4608      	mov	r0, r1
 8011762:	4611      	mov	r1, r2
 8011764:	602b      	str	r3, [r5, #0]
 8011766:	f7f1 fd21 	bl	80031ac <_kill>
 801176a:	1c43      	adds	r3, r0, #1
 801176c:	d102      	bne.n	8011774 <_kill_r+0x1c>
 801176e:	682b      	ldr	r3, [r5, #0]
 8011770:	b103      	cbz	r3, 8011774 <_kill_r+0x1c>
 8011772:	6023      	str	r3, [r4, #0]
 8011774:	bd38      	pop	{r3, r4, r5, pc}
 8011776:	bf00      	nop
 8011778:	200025d4 	.word	0x200025d4

0801177c <_getpid_r>:
 801177c:	f7f1 bd0e 	b.w	800319c <_getpid>

08011780 <__swhatbuf_r>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	460c      	mov	r4, r1
 8011784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011788:	2900      	cmp	r1, #0
 801178a:	b096      	sub	sp, #88	@ 0x58
 801178c:	4615      	mov	r5, r2
 801178e:	461e      	mov	r6, r3
 8011790:	da0d      	bge.n	80117ae <__swhatbuf_r+0x2e>
 8011792:	89a3      	ldrh	r3, [r4, #12]
 8011794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011798:	f04f 0100 	mov.w	r1, #0
 801179c:	bf14      	ite	ne
 801179e:	2340      	movne	r3, #64	@ 0x40
 80117a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80117a4:	2000      	movs	r0, #0
 80117a6:	6031      	str	r1, [r6, #0]
 80117a8:	602b      	str	r3, [r5, #0]
 80117aa:	b016      	add	sp, #88	@ 0x58
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	466a      	mov	r2, sp
 80117b0:	f000 f848 	bl	8011844 <_fstat_r>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	dbec      	blt.n	8011792 <__swhatbuf_r+0x12>
 80117b8:	9901      	ldr	r1, [sp, #4]
 80117ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80117be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80117c2:	4259      	negs	r1, r3
 80117c4:	4159      	adcs	r1, r3
 80117c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80117ca:	e7eb      	b.n	80117a4 <__swhatbuf_r+0x24>

080117cc <__smakebuf_r>:
 80117cc:	898b      	ldrh	r3, [r1, #12]
 80117ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117d0:	079d      	lsls	r5, r3, #30
 80117d2:	4606      	mov	r6, r0
 80117d4:	460c      	mov	r4, r1
 80117d6:	d507      	bpl.n	80117e8 <__smakebuf_r+0x1c>
 80117d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80117dc:	6023      	str	r3, [r4, #0]
 80117de:	6123      	str	r3, [r4, #16]
 80117e0:	2301      	movs	r3, #1
 80117e2:	6163      	str	r3, [r4, #20]
 80117e4:	b003      	add	sp, #12
 80117e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e8:	ab01      	add	r3, sp, #4
 80117ea:	466a      	mov	r2, sp
 80117ec:	f7ff ffc8 	bl	8011780 <__swhatbuf_r>
 80117f0:	9f00      	ldr	r7, [sp, #0]
 80117f2:	4605      	mov	r5, r0
 80117f4:	4639      	mov	r1, r7
 80117f6:	4630      	mov	r0, r6
 80117f8:	f7fb fcfc 	bl	800d1f4 <_malloc_r>
 80117fc:	b948      	cbnz	r0, 8011812 <__smakebuf_r+0x46>
 80117fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011802:	059a      	lsls	r2, r3, #22
 8011804:	d4ee      	bmi.n	80117e4 <__smakebuf_r+0x18>
 8011806:	f023 0303 	bic.w	r3, r3, #3
 801180a:	f043 0302 	orr.w	r3, r3, #2
 801180e:	81a3      	strh	r3, [r4, #12]
 8011810:	e7e2      	b.n	80117d8 <__smakebuf_r+0xc>
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	6020      	str	r0, [r4, #0]
 8011816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801181a:	81a3      	strh	r3, [r4, #12]
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011822:	b15b      	cbz	r3, 801183c <__smakebuf_r+0x70>
 8011824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011828:	4630      	mov	r0, r6
 801182a:	f000 f81d 	bl	8011868 <_isatty_r>
 801182e:	b128      	cbz	r0, 801183c <__smakebuf_r+0x70>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	f023 0303 	bic.w	r3, r3, #3
 8011836:	f043 0301 	orr.w	r3, r3, #1
 801183a:	81a3      	strh	r3, [r4, #12]
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	431d      	orrs	r5, r3
 8011840:	81a5      	strh	r5, [r4, #12]
 8011842:	e7cf      	b.n	80117e4 <__smakebuf_r+0x18>

08011844 <_fstat_r>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	4d07      	ldr	r5, [pc, #28]	@ (8011864 <_fstat_r+0x20>)
 8011848:	2300      	movs	r3, #0
 801184a:	4604      	mov	r4, r0
 801184c:	4608      	mov	r0, r1
 801184e:	4611      	mov	r1, r2
 8011850:	602b      	str	r3, [r5, #0]
 8011852:	f7f1 fd0b 	bl	800326c <_fstat>
 8011856:	1c43      	adds	r3, r0, #1
 8011858:	d102      	bne.n	8011860 <_fstat_r+0x1c>
 801185a:	682b      	ldr	r3, [r5, #0]
 801185c:	b103      	cbz	r3, 8011860 <_fstat_r+0x1c>
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	bd38      	pop	{r3, r4, r5, pc}
 8011862:	bf00      	nop
 8011864:	200025d4 	.word	0x200025d4

08011868 <_isatty_r>:
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	4d06      	ldr	r5, [pc, #24]	@ (8011884 <_isatty_r+0x1c>)
 801186c:	2300      	movs	r3, #0
 801186e:	4604      	mov	r4, r0
 8011870:	4608      	mov	r0, r1
 8011872:	602b      	str	r3, [r5, #0]
 8011874:	f7f1 fd0a 	bl	800328c <_isatty>
 8011878:	1c43      	adds	r3, r0, #1
 801187a:	d102      	bne.n	8011882 <_isatty_r+0x1a>
 801187c:	682b      	ldr	r3, [r5, #0]
 801187e:	b103      	cbz	r3, 8011882 <_isatty_r+0x1a>
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	200025d4 	.word	0x200025d4

08011888 <_init>:
 8011888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188a:	bf00      	nop
 801188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801188e:	bc08      	pop	{r3}
 8011890:	469e      	mov	lr, r3
 8011892:	4770      	bx	lr

08011894 <_fini>:
 8011894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011896:	bf00      	nop
 8011898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801189a:	bc08      	pop	{r3}
 801189c:	469e      	mov	lr, r3
 801189e:	4770      	bx	lr
