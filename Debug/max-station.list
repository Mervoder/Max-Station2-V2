
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08015158  08015158  00016158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159a0  080159a0  00017300  2**0
                  CONTENTS
  4 .ARM          00000008  080159a0  080159a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159a8  080159a8  00017300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159a8  080159a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080159ac  080159ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  080159b0  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002430  20000300  08015cb0  00017300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002730  08015cb0  00017730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021868  00000000  00000000  00017330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6f  00000000  00000000  00038b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  0003d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001632  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297df  00000000  00000000  00040aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000276ff  00000000  00000000  0006a2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f8c  00000000  00000000  000919a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009368  00000000  00000000  0017b978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00184ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015140 	.word	0x08015140

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	08015140 	.word	0x08015140

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00e f988 	bl	800f3fc <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00f f8be 	bl	8010346 <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f f8b4 	bl	8010346 <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00f f8a5 	bl	8010346 <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00f f89b 	bl	8010346 <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00f f88c 	bl	8010346 <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00f f882 	bl	8010346 <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00f f873 	bl	8010346 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00f f869 	bl	8010346 <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	08015158 	.word	0x08015158
 80014b0:	08015160 	.word	0x08015160
 80014b4:	08015168 	.word	0x08015168
 80014b8:	08015170 	.word	0x08015170
 80014bc:	08015178 	.word	0x08015178
 80014c0:	08015180 	.word	0x08015180
 80014c4:	08015188 	.word	0x08015188
 80014c8:	08015190 	.word	0x08015190
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00e fdcc 	bl	801047a <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00e fce0 	bl	8010336 <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00e fcc7 	bl	8010336 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_RxCpltCallback>:
//{
//	counthalf++;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
//
//		}
//	HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
//	}
//
	if(huart == &huart3){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <HAL_UART_RxCpltCallback+0x84>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d109      	bne.n	8001b24 <HAL_UART_RxCpltCallback+0x24>
		countfull++;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_UART_RxCpltCallback+0x88>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <HAL_UART_RxCpltCallback+0x88>)
 8001b18:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
 8001b1a:	224b      	movs	r2, #75	@ 0x4b
 8001b1c:	491b      	ldr	r1, [pc, #108]	@ (8001b8c <HAL_UART_RxCpltCallback+0x8c>)
 8001b1e:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <HAL_UART_RxCpltCallback+0x84>)
 8001b20:	f007 f9bf 	bl	8008ea2 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_UART_RxCpltCallback+0x90>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d127      	bne.n	8001b7c <HAL_UART_RxCpltCallback+0x7c>
			if( rx_data != '\n'&& rx_index < RX_BUFFER_SIZE) {
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b0a      	cmp	r3, #10
 8001b32:	d010      	beq.n	8001b56 <HAL_UART_RxCpltCallback+0x56>
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <HAL_UART_RxCpltCallback+0x56>
				gps_rx_buffer[rx_index++] = rx_data;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b48:	7011      	strb	r1, [r2, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b4e:	7819      	ldrb	r1, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_UART_RxCpltCallback+0x9c>)
 8001b52:	5499      	strb	r1, [r3, r2]
 8001b54:	e00d      	b.n	8001b72 <HAL_UART_RxCpltCallback+0x72>
			} else {
				lwgps_process(&gps, gps_rx_buffer, rx_index+1);
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	490f      	ldr	r1, [pc, #60]	@ (8001b9c <HAL_UART_RxCpltCallback+0x9c>)
 8001b60:	480f      	ldr	r0, [pc, #60]	@ (8001ba0 <HAL_UART_RxCpltCallback+0xa0>)
 8001b62:	f7ff ff0d 	bl	8001980 <lwgps_process>
				rx_index = 0;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <HAL_UART_RxCpltCallback+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <HAL_UART_RxCpltCallback+0x94>)
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <HAL_UART_RxCpltCallback+0x90>)
 8001b78:	f007 f963 	bl	8008e42 <HAL_UART_Receive_IT>
		}
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200004e0 	.word	0x200004e0
 8001b88:	200009b8 	.word	0x200009b8
 8001b8c:	20000584 	.word	0x20000584
 8001b90:	2000049c 	.word	0x2000049c
 8001b94:	200006ed 	.word	0x200006ed
 8001b98:	200006ec 	.word	0x200006ec
 8001b9c:	2000066c 	.word	0x2000066c
 8001ba0:	20000908 	.word	0x20000908

08001ba4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d102      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x16>
   adc_flag=1;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]

	}


}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000410 	.word	0x20000410
 8001bcc:	200008f0 	.word	0x200008f0

08001bd0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <HAL_ADC_ConvCpltCallback+0x30>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d109      	bne.n	8001bf6 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8001be2:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <HAL_ADC_ConvCpltCallback+0x34>)
 8001be4:	f002 fee6 	bl	80049b4 <HAL_ADC_GetValue>
 8001be8:	ee07 0a90 	vmov	s15, r0
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_ADC_ConvCpltCallback+0x38>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]


		//adc_flag = 1;
	}
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40012000 	.word	0x40012000
 8001c04:	2000031c 	.word	0x2000031c
 8001c08:	200008e8 	.word	0x200008e8
 8001c0c:	00000000 	.word	0x00000000

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	ed2d 8b04 	vpush	{d8-d9}
 8001c16:	b0a2      	sub	sp, #136	@ 0x88
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1a:	f002 fc03 	bl	8004424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1e:	f001 f89f 	bl	8002d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c22:	f001 fa81 	bl	8003128 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c26:	f001 fa5f 	bl	80030e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c2a:	f001 f905 	bl	8002e38 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c2e:	f001 f955 	bl	8002edc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c32:	f001 f981 	bl	8002f38 <MX_SPI1_Init>
  MX_UART4_Init();
 8001c36:	f001 f9d9 	bl	8002fec <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001c3a:	f001 fa01 	bl	8003040 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c3e:	f001 fa29 	bl	8003094 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001c42:	f009 fed7 	bl	800b9f4 <MX_FATFS_Init>
  MX_TIM11_Init();
 8001c46:	f001 f9ad 	bl	8002fa4 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001c4a:	f00b ff89 	bl	800db60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


 // HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
  HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
 8001c4e:	224b      	movs	r2, #75	@ 0x4b
 8001c50:	49c3      	ldr	r1, [pc, #780]	@ (8001f60 <main+0x350>)
 8001c52:	48c4      	ldr	r0, [pc, #784]	@ (8001f64 <main+0x354>)
 8001c54:	f007 f925 	bl	8008ea2 <HAL_UART_Receive_DMA>

  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	49c3      	ldr	r1, [pc, #780]	@ (8001f68 <main+0x358>)
 8001c5c:	48c3      	ldr	r0, [pc, #780]	@ (8001f6c <main+0x35c>)
 8001c5e:	f007 f8f0 	bl	8008e42 <HAL_UART_Receive_IT>
  E220_CONFIG(0x8,0x2A,0x10,1);
 8001c62:	2301      	movs	r3, #1
 8001c64:	2210      	movs	r2, #16
 8001c66:	212a      	movs	r1, #42	@ 0x2a
 8001c68:	2008      	movs	r0, #8
 8001c6a:	f001 fb09 	bl	8003280 <E220_CONFIG>
  lwgps_init(&gps);
 8001c6e:	48c0      	ldr	r0, [pc, #768]	@ (8001f70 <main+0x360>)
 8001c70:	f7ff fe78 	bl	8001964 <lwgps_init>

  HAL_ADC_Start_IT(&hadc1);
 8001c74:	48bf      	ldr	r0, [pc, #764]	@ (8001f74 <main+0x364>)
 8001c76:	f002 fcaf 	bl	80045d8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001c7a:	48bf      	ldr	r0, [pc, #764]	@ (8001f78 <main+0x368>)
 8001c7c:	f006 fdae 	bl	80087dc <HAL_TIM_Base_Start_IT>

  tim1=HAL_GetTick();
 8001c80:	f002 fc36 	bl	80044f0 <HAL_GetTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4abd      	ldr	r2, [pc, #756]	@ (8001f7c <main+0x36c>)
 8001c88:	6013      	str	r3, [r2, #0]
  while (1)
  {
	//  HAL_UART_Receive(&huart4, nextion_rx_data, 5 , 1000);


		  HYI_BUFFER_Fill();
 8001c8a:	f001 fca7 	bl	80035dc <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 8001c8e:	4bb4      	ldr	r3, [pc, #720]	@ (8001f60 <main+0x350>)
 8001c90:	78db      	ldrb	r3, [r3, #3]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 8233 	bne.w	80020fe <main+0x4ee>
 8001c98:	4bb1      	ldr	r3, [pc, #708]	@ (8001f60 <main+0x350>)
 8001c9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c9e:	2b31      	cmp	r3, #49	@ 0x31
 8001ca0:	f040 822d 	bne.w	80020fe <main+0x4ee>

		  Sustainer.satsinview=lora_rx_buffer[4];
 8001ca4:	4bae      	ldr	r3, [pc, #696]	@ (8001f60 <main+0x350>)
 8001ca6:	791a      	ldrb	r2, [r3, #4]
 8001ca8:	4bb5      	ldr	r3, [pc, #724]	@ (8001f80 <main+0x370>)
 8001caa:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001cb2:	e01b      	b.n	8001cec <main+0xdc>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8001cb4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cb8:	1d5a      	adds	r2, r3, #5
 8001cba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cbe:	49a8      	ldr	r1, [pc, #672]	@ (8001f60 <main+0x350>)
 8001cc0:	5c8a      	ldrb	r2, [r1, r2]
 8001cc2:	3380      	adds	r3, #128	@ 0x80
 8001cc4:	f107 0108 	add.w	r1, r7, #8
 8001cc8:	440b      	add	r3, r1
 8001cca:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8001cce:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cd2:	1d5a      	adds	r2, r3, #5
 8001cd4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cd8:	330a      	adds	r3, #10
 8001cda:	49a1      	ldr	r1, [pc, #644]	@ (8001f60 <main+0x350>)
 8001cdc:	5c89      	ldrb	r1, [r1, r2]
 8001cde:	4aa9      	ldr	r2, [pc, #676]	@ (8001f84 <main+0x374>)
 8001ce0:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001ce2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001cec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d9df      	bls.n	8001cb4 <main+0xa4>
				 }
				 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 8001cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf6:	4aa2      	ldr	r2, [pc, #648]	@ (8001f80 <main+0x370>)
 8001cf8:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001d00:	e01d      	b.n	8001d3e <main+0x12e>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8001d02:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d06:	f103 0209 	add.w	r2, r3, #9
 8001d0a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d0e:	4994      	ldr	r1, [pc, #592]	@ (8001f60 <main+0x350>)
 8001d10:	5c8a      	ldrb	r2, [r1, r2]
 8001d12:	3380      	adds	r3, #128	@ 0x80
 8001d14:	f107 0108 	add.w	r1, r7, #8
 8001d18:	440b      	add	r3, r1
 8001d1a:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 8001d1e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d22:	f103 0209 	add.w	r2, r3, #9
 8001d26:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d2a:	330e      	adds	r3, #14
 8001d2c:	498c      	ldr	r1, [pc, #560]	@ (8001f60 <main+0x350>)
 8001d2e:	5c89      	ldrb	r1, [r1, r2]
 8001d30:	4a94      	ldr	r2, [pc, #592]	@ (8001f84 <main+0x374>)
 8001d32:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d34:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001d3e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d9dd      	bls.n	8001d02 <main+0xf2>
				 }
				 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8001d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d48:	4a8d      	ldr	r2, [pc, #564]	@ (8001f80 <main+0x370>)
 8001d4a:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8001d52:	e01d      	b.n	8001d90 <main+0x180>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8001d54:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d58:	f103 020d 	add.w	r2, r3, #13
 8001d5c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d60:	497f      	ldr	r1, [pc, #508]	@ (8001f60 <main+0x350>)
 8001d62:	5c8a      	ldrb	r2, [r1, r2]
 8001d64:	3380      	adds	r3, #128	@ 0x80
 8001d66:	f107 0108 	add.w	r1, r7, #8
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 8001d70:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d74:	f103 020d 	add.w	r2, r3, #13
 8001d78:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d7c:	3312      	adds	r3, #18
 8001d7e:	4978      	ldr	r1, [pc, #480]	@ (8001f60 <main+0x350>)
 8001d80:	5c89      	ldrb	r1, [r1, r2]
 8001d82:	4a80      	ldr	r2, [pc, #512]	@ (8001f84 <main+0x374>)
 8001d84:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d86:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8001d90:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d9dd      	bls.n	8001d54 <main+0x144>
				 }
				 Sustainer.gpslongitude=f2u8_longitude.fVal;
 8001d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d9a:	4a79      	ldr	r2, [pc, #484]	@ (8001f80 <main+0x370>)
 8001d9c:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8001da4:	e01d      	b.n	8001de2 <main+0x1d2>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 8001da6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001daa:	f103 0211 	add.w	r2, r3, #17
 8001dae:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001db2:	496b      	ldr	r1, [pc, #428]	@ (8001f60 <main+0x350>)
 8001db4:	5c8a      	ldrb	r2, [r1, r2]
 8001db6:	3380      	adds	r3, #128	@ 0x80
 8001db8:	f107 0108 	add.w	r1, r7, #8
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 8001dc2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001dc6:	f103 0211 	add.w	r2, r3, #17
 8001dca:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001dce:	3306      	adds	r3, #6
 8001dd0:	4963      	ldr	r1, [pc, #396]	@ (8001f60 <main+0x350>)
 8001dd2:	5c89      	ldrb	r1, [r1, r2]
 8001dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f84 <main+0x374>)
 8001dd6:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001dd8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8001de2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d9dd      	bls.n	8001da6 <main+0x196>
				 }
				 Sustainer.altitude=f2u8_altitude.fVal;
 8001dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dec:	4a64      	ldr	r2, [pc, #400]	@ (8001f80 <main+0x370>)
 8001dee:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001df6:	e012      	b.n	8001e1e <main+0x20e>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8001df8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001dfc:	f103 0215 	add.w	r2, r3, #21
 8001e00:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e04:	4956      	ldr	r1, [pc, #344]	@ (8001f60 <main+0x350>)
 8001e06:	5c8a      	ldrb	r2, [r1, r2]
 8001e08:	3380      	adds	r3, #128	@ 0x80
 8001e0a:	f107 0108 	add.w	r1, r7, #8
 8001e0e:	440b      	add	r3, r1
 8001e10:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8001e14:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001e1e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d9e8      	bls.n	8001df8 <main+0x1e8>
				 }
				 Sustainer.speed=f2u8_speed.fVal;
 8001e26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e28:	4a55      	ldr	r2, [pc, #340]	@ (8001f80 <main+0x370>)
 8001e2a:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8001e32:	e012      	b.n	8001e5a <main+0x24a>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8001e34:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e38:	f103 0219 	add.w	r2, r3, #25
 8001e3c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e40:	4947      	ldr	r1, [pc, #284]	@ (8001f60 <main+0x350>)
 8001e42:	5c8a      	ldrb	r2, [r1, r2]
 8001e44:	3380      	adds	r3, #128	@ 0x80
 8001e46:	f107 0108 	add.w	r1, r7, #8
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8001e50:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e54:	3301      	adds	r3, #1
 8001e56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8001e5a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d9e8      	bls.n	8001e34 <main+0x224>
				 }
				 Sustainer.temperature=f2u8_temp.fVal;
 8001e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e64:	4a46      	ldr	r2, [pc, #280]	@ (8001f80 <main+0x370>)
 8001e66:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8001e6e:	e012      	b.n	8001e96 <main+0x286>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 8001e70:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001e74:	f103 021d 	add.w	r2, r3, #29
 8001e78:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001e7c:	4938      	ldr	r1, [pc, #224]	@ (8001f60 <main+0x350>)
 8001e7e:	5c8a      	ldrb	r2, [r1, r2]
 8001e80:	3380      	adds	r3, #128	@ 0x80
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	440b      	add	r3, r1
 8001e88:	f803 2c38 	strb.w	r2, [r3, #-56]
				 for(uint8_t i=0;i<4;i++)
 8001e8c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001e90:	3301      	adds	r3, #1
 8001e92:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8001e96:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d9e8      	bls.n	8001e70 <main+0x260>
					// HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
				 }
				 Sustainer.accx=f2u8_accx.fVal;
 8001e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ea0:	4a37      	ldr	r2, [pc, #220]	@ (8001f80 <main+0x370>)
 8001ea2:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8001eaa:	e012      	b.n	8001ed2 <main+0x2c2>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 8001eac:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001eb0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001eb4:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001eb8:	4929      	ldr	r1, [pc, #164]	@ (8001f60 <main+0x350>)
 8001eba:	5c8a      	ldrb	r2, [r1, r2]
 8001ebc:	3380      	adds	r3, #128	@ 0x80
 8001ebe:	f107 0108 	add.w	r1, r7, #8
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f803 2c3c 	strb.w	r2, [r3, #-60]
				 for(uint8_t i=0;i<4;i++)
 8001ec8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8001ed2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d9e8      	bls.n	8001eac <main+0x29c>
					 //HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
				 }
				 Sustainer.accy=f2u8_accy.fVal;
 8001eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001edc:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <main+0x370>)
 8001ede:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ee6:	e012      	b.n	8001f0e <main+0x2fe>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 8001ee8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001eec:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001ef0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ef4:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <main+0x350>)
 8001ef6:	5c8a      	ldrb	r2, [r1, r2]
 8001ef8:	3380      	adds	r3, #128	@ 0x80
 8001efa:	f107 0108 	add.w	r1, r7, #8
 8001efe:	440b      	add	r3, r1
 8001f00:	f803 2c40 	strb.w	r2, [r3, #-64]
			      for(uint8_t i=0;i<4;i++)
 8001f04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001f0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d9e8      	bls.n	8001ee8 <main+0x2d8>
			    	//  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
				 }
			      Sustainer.accz=f2u8_accz.fVal;
 8001f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <main+0x370>)
 8001f1a:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001f22:	e012      	b.n	8001f4a <main+0x33a>
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 8001f24:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f28:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001f2c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f30:	490b      	ldr	r1, [pc, #44]	@ (8001f60 <main+0x350>)
 8001f32:	5c8a      	ldrb	r2, [r1, r2]
 8001f34:	3380      	adds	r3, #128	@ 0x80
 8001f36:	f107 0108 	add.w	r1, r7, #8
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 8001f40:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f44:	3301      	adds	r3, #1
 8001f46:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001f4a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d9e8      	bls.n	8001f24 <main+0x314>
				 }
				  Sustainer.normal=f2u8_roll.fVal;
 8001f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f54:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <main+0x370>)
 8001f56:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001f5e:	e026      	b.n	8001fae <main+0x39e>
 8001f60:	20000584 	.word	0x20000584
 8001f64:	200004e0 	.word	0x200004e0
 8001f68:	200006ed 	.word	0x200006ed
 8001f6c:	2000049c 	.word	0x2000049c
 8001f70:	20000908 	.word	0x20000908
 8001f74:	2000031c 	.word	0x2000031c
 8001f78:	20000410 	.word	0x20000410
 8001f7c:	200008f8 	.word	0x200008f8
 8001f80:	20000790 	.word	0x20000790
 8001f84:	2000061c 	.word	0x2000061c
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8001f88:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001f8c:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8001f90:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001f94:	49be      	ldr	r1, [pc, #760]	@ (8002290 <main+0x680>)
 8001f96:	5c8a      	ldrb	r2, [r1, r2]
 8001f98:	3380      	adds	r3, #128	@ 0x80
 8001f9a:	f107 0108 	add.w	r1, r7, #8
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 8001fa4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001fae:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d9e8      	bls.n	8001f88 <main+0x378>
				 }
				  Sustainer.pitch=f2u8_pitch.fVal;
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb8:	4ab6      	ldr	r2, [pc, #728]	@ (8002294 <main+0x684>)
 8001fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Sustainer.battery=lora_rx_buffer[49];
 8001fbc:	4bb4      	ldr	r3, [pc, #720]	@ (8002290 <main+0x680>)
 8001fbe:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8001fc2:	4bb4      	ldr	r3, [pc, #720]	@ (8002294 <main+0x684>)
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Sustainer.mod=lora_rx_buffer[73];
 8001fc8:	4bb1      	ldr	r3, [pc, #708]	@ (8002290 <main+0x680>)
 8001fca:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8001fce:	4bb1      	ldr	r3, [pc, #708]	@ (8002294 <main+0x684>)
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Sustainer.communication=lora_rx_buffer[51];
 8001fd4:	4bae      	ldr	r3, [pc, #696]	@ (8002290 <main+0x680>)
 8001fd6:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001fda:	4bae      	ldr	r3, [pc, #696]	@ (8002294 <main+0x684>)
 8001fdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8001fe0:	4bab      	ldr	r3, [pc, #684]	@ (8002290 <main+0x680>)
 8001fe2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8001fe6:	4bac      	ldr	r3, [pc, #688]	@ (8002298 <main+0x688>)
 8001fe8:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 8001fea:	4ba9      	ldr	r3, [pc, #676]	@ (8002290 <main+0x680>)
 8001fec:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8001ff0:	4baa      	ldr	r3, [pc, #680]	@ (800229c <main+0x68c>)
 8001ff2:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8001ffa:	e012      	b.n	8002022 <main+0x412>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 8001ffc:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002000:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8002004:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002008:	49a1      	ldr	r1, [pc, #644]	@ (8002290 <main+0x680>)
 800200a:	5c8a      	ldrb	r2, [r1, r2]
 800200c:	3380      	adds	r3, #128	@ 0x80
 800200e:	f107 0108 	add.w	r1, r7, #8
 8002012:	440b      	add	r3, r1
 8002014:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8002018:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800201c:	3301      	adds	r3, #1
 800201e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8002022:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002026:	2b03      	cmp	r3, #3
 8002028:	d9e8      	bls.n	8001ffc <main+0x3ec>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 800202a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800202c:	4a9c      	ldr	r2, [pc, #624]	@ (80022a0 <main+0x690>)
 800202e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 8002030:	2300      	movs	r3, #0
 8002032:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002036:	e012      	b.n	800205e <main+0x44e>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 8002038:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800203c:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 8002040:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002044:	4992      	ldr	r1, [pc, #584]	@ (8002290 <main+0x680>)
 8002046:	5c8a      	ldrb	r2, [r1, r2]
 8002048:	3380      	adds	r3, #128	@ 0x80
 800204a:	f107 0108 	add.w	r1, r7, #8
 800204e:	440b      	add	r3, r1
 8002050:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 8002054:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002058:	3301      	adds	r3, #1
 800205a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800205e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002062:	2b03      	cmp	r3, #3
 8002064:	d9e8      	bls.n	8002038 <main+0x428>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8002066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002068:	4a8e      	ldr	r2, [pc, #568]	@ (80022a4 <main+0x694>)
 800206a:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 800206c:	2300      	movs	r3, #0
 800206e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8002072:	e012      	b.n	800209a <main+0x48a>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 8002074:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8002078:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 800207c:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8002080:	4983      	ldr	r1, [pc, #524]	@ (8002290 <main+0x680>)
 8002082:	5c8a      	ldrb	r2, [r1, r2]
 8002084:	3380      	adds	r3, #128	@ 0x80
 8002086:	f107 0108 	add.w	r1, r7, #8
 800208a:	440b      	add	r3, r1
 800208c:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 8002090:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8002094:	3301      	adds	r3, #1
 8002096:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800209a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d9e8      	bls.n	8002074 <main+0x464>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 80020a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020a4:	4a80      	ldr	r2, [pc, #512]	@ (80022a8 <main+0x698>)
 80020a6:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 80020a8:	4b79      	ldr	r3, [pc, #484]	@ (8002290 <main+0x680>)
 80020aa:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <main+0x69c>)
 80020b0:	701a      	strb	r2, [r3, #0]
	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=lora_rx_buffer[66];
 80020b2:	4b77      	ldr	r3, [pc, #476]	@ (8002290 <main+0x680>)
 80020b4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80020b8:	4b7d      	ldr	r3, [pc, #500]	@ (80022b0 <main+0x6a0>)
 80020ba:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 80020bc:	4b74      	ldr	r3, [pc, #464]	@ (8002290 <main+0x680>)
 80020be:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 80020c2:	4b7c      	ldr	r3, [pc, #496]	@ (80022b4 <main+0x6a4>)
 80020c4:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 80020c6:	4b72      	ldr	r3, [pc, #456]	@ (8002290 <main+0x680>)
 80020c8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80020cc:	4b7a      	ldr	r3, [pc, #488]	@ (80022b8 <main+0x6a8>)
 80020ce:	701a      	strb	r2, [r3, #0]

					  f2u8_altitude.array[0] = lora_rx_buffer[69];
 80020d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002290 <main+0x680>)
 80020d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020d6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
					  f2u8_altitude.array[1] = lora_rx_buffer[70];
 80020da:	4b6d      	ldr	r3, [pc, #436]	@ (8002290 <main+0x680>)
 80020dc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80020e0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
					  f2u8_altitude.array[2] = lora_rx_buffer[71];
 80020e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002290 <main+0x680>)
 80020e6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80020ea:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
					  f2u8_altitude.array[3] = lora_rx_buffer[72];
 80020ee:	4b68      	ldr	r3, [pc, #416]	@ (8002290 <main+0x680>)
 80020f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80020f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					  Sustainer.maxAltitude=f2u8_altitude.fVal;
 80020f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020fa:	4a66      	ldr	r2, [pc, #408]	@ (8002294 <main+0x684>)
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30



}

	   if(RS_rx_buffer[3]==1 && RS_rx_buffer[50]==0x32){
 80020fe:	4b6f      	ldr	r3, [pc, #444]	@ (80022bc <main+0x6ac>)
 8002100:	78db      	ldrb	r3, [r3, #3]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 81be 	bne.w	8002484 <main+0x874>
 8002108:	4b6c      	ldr	r3, [pc, #432]	@ (80022bc <main+0x6ac>)
 800210a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800210e:	2b32      	cmp	r3, #50	@ 0x32
 8002110:	f040 81b8 	bne.w	8002484 <main+0x874>

		  Booster.satsinview=RS_rx_buffer[4];
 8002114:	4b69      	ldr	r3, [pc, #420]	@ (80022bc <main+0x6ac>)
 8002116:	791a      	ldrb	r2, [r3, #4]
 8002118:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <main+0x6b0>)
 800211a:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8002122:	e01b      	b.n	800215c <main+0x54c>
				 {
					 f2u8_bgpsalt.array[i]=RS_rx_buffer[i+5];
 8002124:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002128:	1d5a      	adds	r2, r3, #5
 800212a:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800212e:	4963      	ldr	r1, [pc, #396]	@ (80022bc <main+0x6ac>)
 8002130:	5c8a      	ldrb	r2, [r1, r2]
 8002132:	3380      	adds	r3, #128	@ 0x80
 8002134:	f107 0108 	add.w	r1, r7, #8
 8002138:	440b      	add	r3, r1
 800213a:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 800213e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002142:	1d5a      	adds	r2, r3, #5
 8002144:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002148:	3322      	adds	r3, #34	@ 0x22
 800214a:	4951      	ldr	r1, [pc, #324]	@ (8002290 <main+0x680>)
 800214c:	5c89      	ldrb	r1, [r1, r2]
 800214e:	4a5d      	ldr	r2, [pc, #372]	@ (80022c4 <main+0x6b4>)
 8002150:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8002152:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002156:	3301      	adds	r3, #1
 8002158:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800215c:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002160:	2b03      	cmp	r3, #3
 8002162:	d9df      	bls.n	8002124 <main+0x514>
				 }
				 Booster.gpsaltitude=f2u8_bgpsalt.fVal;
 8002164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002166:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <main+0x6b0>)
 8002168:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 800216a:	2300      	movs	r3, #0
 800216c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8002170:	e01d      	b.n	80021ae <main+0x59e>
				 {
					 f2u8_blatitude.array[i]=RS_rx_buffer[i+9];
 8002172:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002176:	f103 0209 	add.w	r2, r3, #9
 800217a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800217e:	494f      	ldr	r1, [pc, #316]	@ (80022bc <main+0x6ac>)
 8002180:	5c8a      	ldrb	r2, [r1, r2]
 8002182:	3380      	adds	r3, #128	@ 0x80
 8002184:	f107 0108 	add.w	r1, r7, #8
 8002188:	440b      	add	r3, r1
 800218a:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=RS_rx_buffer[i+9]; // 38 39 40 41
 800218e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002192:	f103 0209 	add.w	r2, r3, #9
 8002196:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800219a:	3326      	adds	r3, #38	@ 0x26
 800219c:	4947      	ldr	r1, [pc, #284]	@ (80022bc <main+0x6ac>)
 800219e:	5c89      	ldrb	r1, [r1, r2]
 80021a0:	4a48      	ldr	r2, [pc, #288]	@ (80022c4 <main+0x6b4>)
 80021a2:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80021a4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80021a8:	3301      	adds	r3, #1
 80021aa:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80021ae:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d9dd      	bls.n	8002172 <main+0x562>
				 }
				 Booster.gpslatitude=f2u8_blatitude.fVal;
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	4a41      	ldr	r2, [pc, #260]	@ (80022c0 <main+0x6b0>)
 80021ba:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80021c2:	e01d      	b.n	8002200 <main+0x5f0>
				 {
					 f2u8_blongitude.array[i]=RS_rx_buffer[i+13];
 80021c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021c8:	f103 020d 	add.w	r2, r3, #13
 80021cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021d0:	493a      	ldr	r1, [pc, #232]	@ (80022bc <main+0x6ac>)
 80021d2:	5c8a      	ldrb	r2, [r1, r2]
 80021d4:	3380      	adds	r3, #128	@ 0x80
 80021d6:	f107 0108 	add.w	r1, r7, #8
 80021da:	440b      	add	r3, r1
 80021dc:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=RS_rx_buffer[i+13]; // 42 43 44 45
 80021e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021e4:	f103 020d 	add.w	r2, r3, #13
 80021e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021ec:	332a      	adds	r3, #42	@ 0x2a
 80021ee:	4933      	ldr	r1, [pc, #204]	@ (80022bc <main+0x6ac>)
 80021f0:	5c89      	ldrb	r1, [r1, r2]
 80021f2:	4a34      	ldr	r2, [pc, #208]	@ (80022c4 <main+0x6b4>)
 80021f4:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80021f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021fa:	3301      	adds	r3, #1
 80021fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002200:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002204:	2b03      	cmp	r3, #3
 8002206:	d9dd      	bls.n	80021c4 <main+0x5b4>
				 }
				 Booster.gpslongitude=f2u8_blongitude.fVal;
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <main+0x6b0>)
 800220c:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 800220e:	2300      	movs	r3, #0
 8002210:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002214:	e012      	b.n	800223c <main+0x62c>
				 {
					f2u8_baltitude.array[i]=RS_rx_buffer[i+17];
 8002216:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800221a:	f103 0211 	add.w	r2, r3, #17
 800221e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002222:	4926      	ldr	r1, [pc, #152]	@ (80022bc <main+0x6ac>)
 8002224:	5c8a      	ldrb	r2, [r1, r2]
 8002226:	3380      	adds	r3, #128	@ 0x80
 8002228:	f107 0108 	add.w	r1, r7, #8
 800222c:	440b      	add	r3, r1
 800222e:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8002232:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002236:	3301      	adds	r3, #1
 8002238:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800223c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002240:	2b03      	cmp	r3, #3
 8002242:	d9e8      	bls.n	8002216 <main+0x606>
				 }
				 Booster.altitude=f2u8_baltitude.fVal;
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <main+0x6b0>)
 8002248:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002250:	e012      	b.n	8002278 <main+0x668>
				 {
					 f2u8_bspeed.array[i]=RS_rx_buffer[i+21];
 8002252:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002256:	f103 0215 	add.w	r2, r3, #21
 800225a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800225e:	4917      	ldr	r1, [pc, #92]	@ (80022bc <main+0x6ac>)
 8002260:	5c8a      	ldrb	r2, [r1, r2]
 8002262:	3380      	adds	r3, #128	@ 0x80
 8002264:	f107 0108 	add.w	r1, r7, #8
 8002268:	440b      	add	r3, r1
 800226a:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 800226e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002272:	3301      	adds	r3, #1
 8002274:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002278:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800227c:	2b03      	cmp	r3, #3
 800227e:	d9e8      	bls.n	8002252 <main+0x642>
				 }
				 Booster.speed=f2u8_bspeed.fVal;
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <main+0x6b0>)
 8002284:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800228c:	e02f      	b.n	80022ee <main+0x6de>
 800228e:	bf00      	nop
 8002290:	20000584 	.word	0x20000584
 8002294:	20000790 	.word	0x20000790
 8002298:	20000700 	.word	0x20000700
 800229c:	20000701 	.word	0x20000701
 80022a0:	20000708 	.word	0x20000708
 80022a4:	20000710 	.word	0x20000710
 80022a8:	2000070c 	.word	0x2000070c
 80022ac:	20000705 	.word	0x20000705
 80022b0:	200006f8 	.word	0x200006f8
 80022b4:	20000703 	.word	0x20000703
 80022b8:	20000702 	.word	0x20000702
 80022bc:	200005d0 	.word	0x200005d0
 80022c0:	20000758 	.word	0x20000758
 80022c4:	2000061c 	.word	0x2000061c
				 {
					 f2u8_btemp.array[i]=RS_rx_buffer[i+25];
 80022c8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022cc:	f103 0219 	add.w	r2, r3, #25
 80022d0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022d4:	4969      	ldr	r1, [pc, #420]	@ (800247c <main+0x86c>)
 80022d6:	5c8a      	ldrb	r2, [r1, r2]
 80022d8:	3380      	adds	r3, #128	@ 0x80
 80022da:	f107 0108 	add.w	r1, r7, #8
 80022de:	440b      	add	r3, r1
 80022e0:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 80022e4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022e8:	3301      	adds	r3, #1
 80022ea:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80022ee:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d9e8      	bls.n	80022c8 <main+0x6b8>
				 }
				 Booster.temperature=f2u8_btemp.fVal;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4a61      	ldr	r2, [pc, #388]	@ (8002480 <main+0x870>)
 80022fa:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8002302:	e012      	b.n	800232a <main+0x71a>
				 {
					 f2u8_baccx.array[i]=RS_rx_buffer[i+29];
 8002304:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002308:	f103 021d 	add.w	r2, r3, #29
 800230c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002310:	495a      	ldr	r1, [pc, #360]	@ (800247c <main+0x86c>)
 8002312:	5c8a      	ldrb	r2, [r1, r2]
 8002314:	3380      	adds	r3, #128	@ 0x80
 8002316:	f107 0108 	add.w	r1, r7, #8
 800231a:	440b      	add	r3, r1
 800231c:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 8002320:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002324:	3301      	adds	r3, #1
 8002326:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800232a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800232e:	2b03      	cmp	r3, #3
 8002330:	d9e8      	bls.n	8002304 <main+0x6f4>
				 }
				 Booster.accx=f2u8_baccx.fVal;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <main+0x870>)
 8002336:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800233e:	e012      	b.n	8002366 <main+0x756>
				 {
					 f2u8_baccy.array[i]=RS_rx_buffer[i+33];
 8002340:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002344:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002348:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800234c:	494b      	ldr	r1, [pc, #300]	@ (800247c <main+0x86c>)
 800234e:	5c8a      	ldrb	r2, [r1, r2]
 8002350:	3380      	adds	r3, #128	@ 0x80
 8002352:	f107 0108 	add.w	r1, r7, #8
 8002356:	440b      	add	r3, r1
 8002358:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 800235c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002360:	3301      	adds	r3, #1
 8002362:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8002366:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800236a:	2b03      	cmp	r3, #3
 800236c:	d9e8      	bls.n	8002340 <main+0x730>
				 }
				 Booster.accy=f2u8_baccy.fVal;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	4a43      	ldr	r2, [pc, #268]	@ (8002480 <main+0x870>)
 8002372:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8002374:	2300      	movs	r3, #0
 8002376:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 800237a:	e012      	b.n	80023a2 <main+0x792>
				 {
			    	  f2u8_baccz.array[i]=RS_rx_buffer[i+37];
 800237c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002380:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8002384:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002388:	493c      	ldr	r1, [pc, #240]	@ (800247c <main+0x86c>)
 800238a:	5c8a      	ldrb	r2, [r1, r2]
 800238c:	3380      	adds	r3, #128	@ 0x80
 800238e:	f107 0108 	add.w	r1, r7, #8
 8002392:	440b      	add	r3, r1
 8002394:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8002398:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800239c:	3301      	adds	r3, #1
 800239e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80023a2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d9e8      	bls.n	800237c <main+0x76c>
				 }
			      Booster.accz=f2u8_baccz.fVal;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4a34      	ldr	r2, [pc, #208]	@ (8002480 <main+0x870>)
 80023ae:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 80023b6:	e012      	b.n	80023de <main+0x7ce>
				 {
					  f2u8_broll.array[i]=RS_rx_buffer[i+41];
 80023b8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80023bc:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80023c0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80023c4:	492d      	ldr	r1, [pc, #180]	@ (800247c <main+0x86c>)
 80023c6:	5c8a      	ldrb	r2, [r1, r2]
 80023c8:	3380      	adds	r3, #128	@ 0x80
 80023ca:	f107 0108 	add.w	r1, r7, #8
 80023ce:	440b      	add	r3, r1
 80023d0:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 80023d4:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80023d8:	3301      	adds	r3, #1
 80023da:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 80023de:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d9e8      	bls.n	80023b8 <main+0x7a8>
				 }
				  Booster.normal=f2u8_broll.fVal;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a25      	ldr	r2, [pc, #148]	@ (8002480 <main+0x870>)
 80023ea:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80023f2:	e012      	b.n	800241a <main+0x80a>
				 {
					  f2u8_bpitch.array[i]=RS_rx_buffer[i+45];
 80023f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80023f8:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80023fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002400:	491e      	ldr	r1, [pc, #120]	@ (800247c <main+0x86c>)
 8002402:	5c8a      	ldrb	r2, [r1, r2]
 8002404:	3380      	adds	r3, #128	@ 0x80
 8002406:	f107 0108 	add.w	r1, r7, #8
 800240a:	440b      	add	r3, r1
 800240c:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8002410:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002414:	3301      	adds	r3, #1
 8002416:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800241a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800241e:	2b03      	cmp	r3, #3
 8002420:	d9e8      	bls.n	80023f4 <main+0x7e4>
				 }
				  Booster.pitch=f2u8_bpitch.fVal;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <main+0x870>)
 8002426:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Booster.battery=RS_rx_buffer[49];
 8002428:	4b14      	ldr	r3, [pc, #80]	@ (800247c <main+0x86c>)
 800242a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <main+0x870>)
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Booster.mod=RS_rx_buffer[73];
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <main+0x86c>)
 8002436:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <main+0x870>)
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Booster.communication=RS_rx_buffer[51];
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <main+0x86c>)
 8002442:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002446:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <main+0x870>)
 8002448:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

				  f2u8_baltitude.array[0] = RS_rx_buffer[69];
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <main+0x86c>)
 800244e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002452:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				  f2u8_baltitude.array[1] = RS_rx_buffer[70];
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <main+0x86c>)
 8002458:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800245c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				  f2u8_baltitude.array[2] = RS_rx_buffer[71];
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <main+0x86c>)
 8002462:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002466:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				  f2u8_baltitude.array[3] = RS_rx_buffer[72];
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <main+0x86c>)
 800246c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				  Booster.maxAltitude = f2u8_baltitude.fVal;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	4a02      	ldr	r2, [pc, #8]	@ (8002480 <main+0x870>)
 8002478:	6313      	str	r3, [r2, #48]	@ 0x30
	   if(RS_rx_buffer[3]==1 && RS_rx_buffer[50]==0x32){
 800247a:	e024      	b.n	80024c6 <main+0x8b6>
 800247c:	200005d0 	.word	0x200005d0
 8002480:	20000758 	.word	0x20000758


	  	  }

	     else if(RS_rx_buffer[3]==3 && RS_rx_buffer[50]==0x33)
 8002484:	4b85      	ldr	r3, [pc, #532]	@ (800269c <main+0xa8c>)
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d11c      	bne.n	80024c6 <main+0x8b6>
 800248c:	4b83      	ldr	r3, [pc, #524]	@ (800269c <main+0xa8c>)
 800248e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002492:	2b33      	cmp	r3, #51	@ 0x33
 8002494:	d117      	bne.n	80024c6 <main+0x8b6>
		  {

		  Payload.satsinview=RS_rx_buffer[4];
 8002496:	4b81      	ldr	r3, [pc, #516]	@ (800269c <main+0xa8c>)
 8002498:	791a      	ldrb	r2, [r3, #4]
 800249a:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <main+0xa90>)
 800249c:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 800249e:	f001 f8c1 	bl	8003624 <Payload_union_converter>

		  Payload.battery=RS_rx_buffer[49];
 80024a2:	4b7e      	ldr	r3, [pc, #504]	@ (800269c <main+0xa8c>)
 80024a4:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80024a8:	4b7d      	ldr	r3, [pc, #500]	@ (80026a0 <main+0xa90>)
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=RS_rx_buffer[73];
 80024ae:	4b7b      	ldr	r3, [pc, #492]	@ (800269c <main+0xa8c>)
 80024b0:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80024b4:	4b7a      	ldr	r3, [pc, #488]	@ (80026a0 <main+0xa90>)
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=RS_rx_buffer[51];
 80024ba:	4b78      	ldr	r3, [pc, #480]	@ (800269c <main+0xa8c>)
 80024bc:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80024c0:	4b77      	ldr	r3, [pc, #476]	@ (80026a0 <main+0xa90>)
 80024c2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		  }




	  s_distance=distance_in_m(gps.latitude,gps.longitude,sustgpslatitude,sustgpslongitude);
 80024c6:	4b77      	ldr	r3, [pc, #476]	@ (80026a4 <main+0xa94>)
 80024c8:	ed93 8b00 	vldr	d8, [r3]
 80024cc:	4b75      	ldr	r3, [pc, #468]	@ (80026a4 <main+0xa94>)
 80024ce:	ed93 9b02 	vldr	d9, [r3, #8]
 80024d2:	4b75      	ldr	r3, [pc, #468]	@ (80026a8 <main+0xa98>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f856 	bl	8000588 <__aeabi_f2d>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	4b72      	ldr	r3, [pc, #456]	@ (80026ac <main+0xa9c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f84f 	bl	8000588 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ec43 2b13 	vmov	d3, r2, r3
 80024f2:	ec45 4b12 	vmov	d2, r4, r5
 80024f6:	eeb0 1a49 	vmov.f32	s2, s18
 80024fa:	eef0 1a69 	vmov.f32	s3, s19
 80024fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002502:	eef0 0a68 	vmov.f32	s1, s17
 8002506:	f000 ff1b 	bl	8003340 <distance_in_m>
 800250a:	ec53 2b10 	vmov	r2, r3, d0
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fb89 	bl	8000c28 <__aeabi_d2f>
 8002516:	4603      	mov	r3, r0
 8002518:	4a65      	ldr	r2, [pc, #404]	@ (80026b0 <main+0xaa0>)
 800251a:	6013      	str	r3, [r2, #0]
	  bs_distance=distance_in_m(gps.latitude,gps.longitude,boostgpslatitude,boostgpslongitude);
 800251c:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <main+0xa94>)
 800251e:	ed93 8b00 	vldr	d8, [r3]
 8002522:	4b60      	ldr	r3, [pc, #384]	@ (80026a4 <main+0xa94>)
 8002524:	ed93 9b02 	vldr	d9, [r3, #8]
 8002528:	4b62      	ldr	r3, [pc, #392]	@ (80026b4 <main+0xaa4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f82b 	bl	8000588 <__aeabi_f2d>
 8002532:	4604      	mov	r4, r0
 8002534:	460d      	mov	r5, r1
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <main+0xaa8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f824 	bl	8000588 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ec43 2b13 	vmov	d3, r2, r3
 8002548:	ec45 4b12 	vmov	d2, r4, r5
 800254c:	eeb0 1a49 	vmov.f32	s2, s18
 8002550:	eef0 1a69 	vmov.f32	s3, s19
 8002554:	eeb0 0a48 	vmov.f32	s0, s16
 8002558:	eef0 0a68 	vmov.f32	s1, s17
 800255c:	f000 fef0 	bl	8003340 <distance_in_m>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb5e 	bl	8000c28 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	4a53      	ldr	r2, [pc, #332]	@ (80026bc <main+0xaac>)
 8002570:	6013      	str	r3, [r2, #0]

	  // EKRANA YAZMA



    	sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 8002572:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <main+0xab0>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002580:	793b      	ldrb	r3, [r7, #4]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	494f      	ldr	r1, [pc, #316]	@ (80026c4 <main+0xab4>)
 8002588:	484f      	ldr	r0, [pc, #316]	@ (80026c8 <main+0xab8>)
 800258a:	f00d fe71 	bl	8010270 <siprintf>
    	NEXTION_SendString("t54", st_bat);
 800258e:	494e      	ldr	r1, [pc, #312]	@ (80026c8 <main+0xab8>)
 8002590:	484e      	ldr	r0, [pc, #312]	@ (80026cc <main+0xabc>)
 8002592:	f000 fffd 	bl	8003590 <NEXTION_SendString>

        Enum_State_bs();
 8002596:	f001 f95f 	bl	8003858 <Enum_State_bs>
        Enum_State_s();
 800259a:	f001 fa85 	bl	8003aa8 <Enum_State_s>
     //   NEXTION_SendString("t58", &EGU_MOTOR_ATESLEME_TALEP_IN);
    	sprintf(seconds,"%2d",gps.seconds);
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <main+0xa94>)
 80025a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025a4:	461a      	mov	r2, r3
 80025a6:	4947      	ldr	r1, [pc, #284]	@ (80026c4 <main+0xab4>)
 80025a8:	4849      	ldr	r0, [pc, #292]	@ (80026d0 <main+0xac0>)
 80025aa:	f00d fe61 	bl	8010270 <siprintf>
    	sprintf(minutes,"%2d",gps.minutes);
 80025ae:	4b3d      	ldr	r3, [pc, #244]	@ (80026a4 <main+0xa94>)
 80025b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80025b4:	461a      	mov	r2, r3
 80025b6:	4943      	ldr	r1, [pc, #268]	@ (80026c4 <main+0xab4>)
 80025b8:	4846      	ldr	r0, [pc, #280]	@ (80026d4 <main+0xac4>)
 80025ba:	f00d fe59 	bl	8010270 <siprintf>
    	sprintf(hours,"%2d",gps.hours);
 80025be:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <main+0xa94>)
 80025c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80025c4:	461a      	mov	r2, r3
 80025c6:	493f      	ldr	r1, [pc, #252]	@ (80026c4 <main+0xab4>)
 80025c8:	4843      	ldr	r0, [pc, #268]	@ (80026d8 <main+0xac8>)
 80025ca:	f00d fe51 	bl	8010270 <siprintf>


        NEXTION_SendString("t4", hours);
 80025ce:	4942      	ldr	r1, [pc, #264]	@ (80026d8 <main+0xac8>)
 80025d0:	4842      	ldr	r0, [pc, #264]	@ (80026dc <main+0xacc>)
 80025d2:	f000 ffdd 	bl	8003590 <NEXTION_SendString>
        NEXTION_SendString("t6", minutes);
 80025d6:	493f      	ldr	r1, [pc, #252]	@ (80026d4 <main+0xac4>)
 80025d8:	4841      	ldr	r0, [pc, #260]	@ (80026e0 <main+0xad0>)
 80025da:	f000 ffd9 	bl	8003590 <NEXTION_SendString>
        NEXTION_SendString("t8", seconds);
 80025de:	493c      	ldr	r1, [pc, #240]	@ (80026d0 <main+0xac0>)
 80025e0:	4840      	ldr	r0, [pc, #256]	@ (80026e4 <main+0xad4>)
 80025e2:	f000 ffd5 	bl	8003590 <NEXTION_SendString>

        //megü ekran


        if(EGU_MOTOR_ATESLEME_TALEP_IN==1){
 80025e6:	4b40      	ldr	r3, [pc, #256]	@ (80026e8 <main+0xad8>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d109      	bne.n	8002602 <main+0x9f2>
        	e_engine_request[0]='Y';
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <main+0xadc>)
 80025f0:	2259      	movs	r2, #89	@ 0x59
 80025f2:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='E';
 80025f4:	4b3d      	ldr	r3, [pc, #244]	@ (80026ec <main+0xadc>)
 80025f6:	2245      	movs	r2, #69	@ 0x45
 80025f8:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='S';
 80025fa:	4b3c      	ldr	r3, [pc, #240]	@ (80026ec <main+0xadc>)
 80025fc:	2253      	movs	r2, #83	@ 0x53
 80025fe:	709a      	strb	r2, [r3, #2]
 8002600:	e008      	b.n	8002614 <main+0xa04>
        }
        else{
        	e_engine_request[0]='N';
 8002602:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <main+0xadc>)
 8002604:	224e      	movs	r2, #78	@ 0x4e
 8002606:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='O';
 8002608:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <main+0xadc>)
 800260a:	224f      	movs	r2, #79	@ 0x4f
 800260c:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='\0';
 800260e:	4b37      	ldr	r3, [pc, #220]	@ (80026ec <main+0xadc>)
 8002610:	2200      	movs	r2, #0
 8002612:	709a      	strb	r2, [r3, #2]
        }

        if(EGU_BATTERY>0)
 8002614:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <main+0xae0>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	dd27      	ble.n	8002674 <main+0xa64>
        {
        	if(EGU_FITIL==0){
 8002624:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <main+0xae4>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10f      	bne.n	800264c <main+0xa3c>
            	e_fitil[0]='R';
 800262c:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <main+0xae8>)
 800262e:	2252      	movs	r2, #82	@ 0x52
 8002630:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='E';
 8002632:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <main+0xae8>)
 8002634:	2245      	movs	r2, #69	@ 0x45
 8002636:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='A';
 8002638:	4b2f      	ldr	r3, [pc, #188]	@ (80026f8 <main+0xae8>)
 800263a:	2241      	movs	r2, #65	@ 0x41
 800263c:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='D';
 800263e:	4b2e      	ldr	r3, [pc, #184]	@ (80026f8 <main+0xae8>)
 8002640:	2244      	movs	r2, #68	@ 0x44
 8002642:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='Y';
 8002644:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <main+0xae8>)
 8002646:	2259      	movs	r2, #89	@ 0x59
 8002648:	711a      	strb	r2, [r3, #4]
 800264a:	e022      	b.n	8002692 <main+0xa82>

        	}
        	else if(EGU_FITIL==1){
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <main+0xae4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d11e      	bne.n	8002692 <main+0xa82>
            	e_fitil[0]='F';
 8002654:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <main+0xae8>)
 8002656:	2246      	movs	r2, #70	@ 0x46
 8002658:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='I';
 800265a:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <main+0xae8>)
 800265c:	2249      	movs	r2, #73	@ 0x49
 800265e:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='R';
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <main+0xae8>)
 8002662:	2252      	movs	r2, #82	@ 0x52
 8002664:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='E';
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <main+0xae8>)
 8002668:	2245      	movs	r2, #69	@ 0x45
 800266a:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='D';
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <main+0xae8>)
 800266e:	2244      	movs	r2, #68	@ 0x44
 8002670:	711a      	strb	r2, [r3, #4]
 8002672:	e00e      	b.n	8002692 <main+0xa82>
        	}

        }
        else {

        	e_fitil[0]='O';
 8002674:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <main+0xae8>)
 8002676:	224f      	movs	r2, #79	@ 0x4f
 8002678:	701a      	strb	r2, [r3, #0]
        	e_fitil[1]='F';
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <main+0xae8>)
 800267c:	2246      	movs	r2, #70	@ 0x46
 800267e:	705a      	strb	r2, [r3, #1]
        	e_fitil[2]='F';
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <main+0xae8>)
 8002682:	2246      	movs	r2, #70	@ 0x46
 8002684:	709a      	strb	r2, [r3, #2]
        	e_fitil[3]='\0';
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <main+0xae8>)
 8002688:	2200      	movs	r2, #0
 800268a:	70da      	strb	r2, [r3, #3]
        	e_fitil[4]='\0';
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <main+0xae8>)
 800268e:	2200      	movs	r2, #0
 8002690:	711a      	strb	r2, [r3, #4]

        }



    	for(uint8_t i=4;i<75;i++)
 8002692:	2304      	movs	r3, #4
 8002694:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002698:	e044      	b.n	8002724 <main+0xb14>
 800269a:	bf00      	nop
 800269c:	200005d0 	.word	0x200005d0
 80026a0:	20000720 	.word	0x20000720
 80026a4:	20000908 	.word	0x20000908
 80026a8:	200006f0 	.word	0x200006f0
 80026ac:	200006f4 	.word	0x200006f4
 80026b0:	200006fc 	.word	0x200006fc
 80026b4:	20000714 	.word	0x20000714
 80026b8:	20000718 	.word	0x20000718
 80026bc:	2000071c 	.word	0x2000071c
 80026c0:	200008ec 	.word	0x200008ec
 80026c4:	08015198 	.word	0x08015198
 80026c8:	200008f4 	.word	0x200008f4
 80026cc:	0801519c 	.word	0x0801519c
 80026d0:	20000888 	.word	0x20000888
 80026d4:	2000088c 	.word	0x2000088c
 80026d8:	20000890 	.word	0x20000890
 80026dc:	080151a0 	.word	0x080151a0
 80026e0:	080151a4 	.word	0x080151a4
 80026e4:	080151a8 	.word	0x080151a8
 80026e8:	20000702 	.word	0x20000702
 80026ec:	200008e4 	.word	0x200008e4
 80026f0:	20000708 	.word	0x20000708
 80026f4:	20000705 	.word	0x20000705
 80026f8:	200008dc 	.word	0x200008dc
    	{
    		crc+=HYI_BUFFER[i];
 80026fc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002700:	4ab5      	ldr	r2, [pc, #724]	@ (80029d8 <main+0xdc8>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	461a      	mov	r2, r3
 8002706:	4bb5      	ldr	r3, [pc, #724]	@ (80029dc <main+0xdcc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4ab3      	ldr	r2, [pc, #716]	@ (80029dc <main+0xdcc>)
 800270e:	6013      	str	r3, [r2, #0]
    		chs=crc % 256;
 8002710:	4bb2      	ldr	r3, [pc, #712]	@ (80029dc <main+0xdcc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4bb2      	ldr	r3, [pc, #712]	@ (80029e0 <main+0xdd0>)
 8002718:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i=4;i<75;i++)
 800271a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800271e:	3301      	adds	r3, #1
 8002720:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002724:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002728:	2b4a      	cmp	r3, #74	@ 0x4a
 800272a:	d9e7      	bls.n	80026fc <main+0xaec>


    	}
         HYI_BUFFER[75]= chs; // CRC
 800272c:	4bac      	ldr	r3, [pc, #688]	@ (80029e0 <main+0xdd0>)
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4ba9      	ldr	r3, [pc, #676]	@ (80029d8 <main+0xdc8>)
 8002732:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
     	 CDC_Transmit_FS(HYI_BUFFER,HYI_BUFFER_SIZE);
 8002736:	214e      	movs	r1, #78	@ 0x4e
 8002738:	48a7      	ldr	r0, [pc, #668]	@ (80029d8 <main+0xdc8>)
 800273a:	f00b facf 	bl	800dcdc <CDC_Transmit_FS>
     	 crc=0;
 800273e:	4ba7      	ldr	r3, [pc, #668]	@ (80029dc <main+0xdcc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
          // CDC_Transmit_FS("LLLL",4);



if(adc_flag ==1)
 8002744:	4ba7      	ldr	r3, [pc, #668]	@ (80029e4 <main+0xdd4>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b01      	cmp	r3, #1
 800274a:	f47f aa9e 	bne.w	8001c8a <main+0x7a>
	  {
		  if(adc > 2476) adc = 2234;
 800274e:	4ba6      	ldr	r3, [pc, #664]	@ (80029e8 <main+0xdd8>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80029ec <main+0xddc>
 8002758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	dd02      	ble.n	8002768 <main+0xb58>
 8002762:	4ba1      	ldr	r3, [pc, #644]	@ (80029e8 <main+0xdd8>)
 8002764:	4aa2      	ldr	r2, [pc, #648]	@ (80029f0 <main+0xde0>)
 8002766:	601a      	str	r2, [r3, #0]
		  if(adc < 1755) adc = 1755;
 8002768:	4b9f      	ldr	r3, [pc, #636]	@ (80029e8 <main+0xdd8>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80029f4 <main+0xde4>
 8002772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277a:	d502      	bpl.n	8002782 <main+0xb72>
 800277c:	4b9a      	ldr	r3, [pc, #616]	@ (80029e8 <main+0xdd8>)
 800277e:	4a9e      	ldr	r2, [pc, #632]	@ (80029f8 <main+0xde8>)
 8002780:	601a      	str	r2, [r3, #0]
		  // 6V = 1755 adc val 1,41V
		  // 8.4V = 2476 adc val 1,99V 0,58V
		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 8002782:	4b99      	ldr	r3, [pc, #612]	@ (80029e8 <main+0xdd8>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80029fc <main+0xdec>
 800278c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002790:	ee16 0a90 	vmov	r0, s13
 8002794:	f7fd fef8 	bl	8000588 <__aeabi_f2d>
 8002798:	a389      	add	r3, pc, #548	@ (adr r3, 80029c0 <main+0xdb0>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd ff4b 	bl	8000638 <__aeabi_dmul>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	a387      	add	r3, pc, #540	@ (adr r3, 80029c8 <main+0xdb8>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd8a 	bl	80002c8 <__aeabi_dsub>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	a384      	add	r3, pc, #528	@ (adr r3, 80029d0 <main+0xdc0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fe f863 	bl	800088c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe fa2b 	bl	8000c28 <__aeabi_d2f>
 80027d2:	ee07 0a10 	vmov	s14, r0
 80027d6:	eddf 7a8a 	vldr	s15, [pc, #552]	@ 8002a00 <main+0xdf0>
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	4b89      	ldr	r3, [pc, #548]	@ (8002a04 <main+0xdf4>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
		 // adc_pil_val = (adc-1755)/(2746-1755)*100;
		  adc_flag=0;
 80027e4:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <main+0xdd4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]


	     	sprintf(b_altitude,"%4.3f",Booster.altitude);
 80027ea:	4b87      	ldr	r3, [pc, #540]	@ (8002a08 <main+0xdf8>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd feca 	bl	8000588 <__aeabi_f2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4984      	ldr	r1, [pc, #528]	@ (8002a0c <main+0xdfc>)
 80027fa:	4885      	ldr	r0, [pc, #532]	@ (8002a10 <main+0xe00>)
 80027fc:	f00d fd38 	bl	8010270 <siprintf>
	     	sprintf(b_temperature,"%2.2f",Booster.temperature);
 8002800:	4b81      	ldr	r3, [pc, #516]	@ (8002a08 <main+0xdf8>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd febf 	bl	8000588 <__aeabi_f2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4981      	ldr	r1, [pc, #516]	@ (8002a14 <main+0xe04>)
 8002810:	4881      	ldr	r0, [pc, #516]	@ (8002a18 <main+0xe08>)
 8002812:	f00d fd2d 	bl	8010270 <siprintf>
	     	sprintf(b_speed,"%2.2f",Booster.speed);
 8002816:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <main+0xdf8>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd feb4 	bl	8000588 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	497b      	ldr	r1, [pc, #492]	@ (8002a14 <main+0xe04>)
 8002826:	487d      	ldr	r0, [pc, #500]	@ (8002a1c <main+0xe0c>)
 8002828:	f00d fd22 	bl	8010270 <siprintf>
	     	sprintf(b_roll,"%2.2f",Booster.normal);
 800282c:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <main+0xdf8>)
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fea9 	bl	8000588 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4976      	ldr	r1, [pc, #472]	@ (8002a14 <main+0xe04>)
 800283c:	4878      	ldr	r0, [pc, #480]	@ (8002a20 <main+0xe10>)
 800283e:	f00d fd17 	bl	8010270 <siprintf>
	     	sprintf(b_pitch,"%2.2f",Booster.pitch);
 8002842:	4b71      	ldr	r3, [pc, #452]	@ (8002a08 <main+0xdf8>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe9e 	bl	8000588 <__aeabi_f2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4970      	ldr	r1, [pc, #448]	@ (8002a14 <main+0xe04>)
 8002852:	4874      	ldr	r0, [pc, #464]	@ (8002a24 <main+0xe14>)
 8002854:	f00d fd0c 	bl	8010270 <siprintf>
	     	sprintf(b_latitude,"%2.6f",Booster.gpslatitude);
 8002858:	4b6b      	ldr	r3, [pc, #428]	@ (8002a08 <main+0xdf8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe93 	bl	8000588 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4970      	ldr	r1, [pc, #448]	@ (8002a28 <main+0xe18>)
 8002868:	4870      	ldr	r0, [pc, #448]	@ (8002a2c <main+0xe1c>)
 800286a:	f00d fd01 	bl	8010270 <siprintf>
	     	sprintf(b_longitude,"%2.6f",Booster.gpslongitude);
 800286e:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <main+0xdf8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe88 	bl	8000588 <__aeabi_f2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	496a      	ldr	r1, [pc, #424]	@ (8002a28 <main+0xe18>)
 800287e:	486c      	ldr	r0, [pc, #432]	@ (8002a30 <main+0xe20>)
 8002880:	f00d fcf6 	bl	8010270 <siprintf>
	     	sprintf(b_bat,"%2d",Booster.battery);
 8002884:	4b60      	ldr	r3, [pc, #384]	@ (8002a08 <main+0xdf8>)
 8002886:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800288a:	461a      	mov	r2, r3
 800288c:	4969      	ldr	r1, [pc, #420]	@ (8002a34 <main+0xe24>)
 800288e:	486a      	ldr	r0, [pc, #424]	@ (8002a38 <main+0xe28>)
 8002890:	f00d fcee 	bl	8010270 <siprintf>
	     	sprintf(b_sats,"%2d",Booster.satsinview);
 8002894:	4b5c      	ldr	r3, [pc, #368]	@ (8002a08 <main+0xdf8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4966      	ldr	r1, [pc, #408]	@ (8002a34 <main+0xe24>)
 800289c:	4867      	ldr	r0, [pc, #412]	@ (8002a3c <main+0xe2c>)
 800289e:	f00d fce7 	bl	8010270 <siprintf>
	       	sprintf(b_comm,"%2d",Booster.communication);
 80028a2:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <main+0xdf8>)
 80028a4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80028a8:	461a      	mov	r2, r3
 80028aa:	4962      	ldr	r1, [pc, #392]	@ (8002a34 <main+0xe24>)
 80028ac:	4864      	ldr	r0, [pc, #400]	@ (8002a40 <main+0xe30>)
 80028ae:	f00d fcdf 	bl	8010270 <siprintf>
	       	sprintf(b_dist,"%4.2f",bs_distance);
 80028b2:	4b64      	ldr	r3, [pc, #400]	@ (8002a44 <main+0xe34>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe66 	bl	8000588 <__aeabi_f2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4961      	ldr	r1, [pc, #388]	@ (8002a48 <main+0xe38>)
 80028c2:	4862      	ldr	r0, [pc, #392]	@ (8002a4c <main+0xe3c>)
 80028c4:	f00d fcd4 	bl	8010270 <siprintf>

	        NEXTION_SendString("bs1", b_altitude);
 80028c8:	4951      	ldr	r1, [pc, #324]	@ (8002a10 <main+0xe00>)
 80028ca:	4861      	ldr	r0, [pc, #388]	@ (8002a50 <main+0xe40>)
 80028cc:	f000 fe60 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs2", b_temperature);
 80028d0:	4951      	ldr	r1, [pc, #324]	@ (8002a18 <main+0xe08>)
 80028d2:	4860      	ldr	r0, [pc, #384]	@ (8002a54 <main+0xe44>)
 80028d4:	f000 fe5c 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs3", b_speed);
 80028d8:	4950      	ldr	r1, [pc, #320]	@ (8002a1c <main+0xe0c>)
 80028da:	485f      	ldr	r0, [pc, #380]	@ (8002a58 <main+0xe48>)
 80028dc:	f000 fe58 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs4", b_roll);
 80028e0:	494f      	ldr	r1, [pc, #316]	@ (8002a20 <main+0xe10>)
 80028e2:	485e      	ldr	r0, [pc, #376]	@ (8002a5c <main+0xe4c>)
 80028e4:	f000 fe54 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs5", b_pitch);
 80028e8:	494e      	ldr	r1, [pc, #312]	@ (8002a24 <main+0xe14>)
 80028ea:	485d      	ldr	r0, [pc, #372]	@ (8002a60 <main+0xe50>)
 80028ec:	f000 fe50 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs6", b_sats);
 80028f0:	4952      	ldr	r1, [pc, #328]	@ (8002a3c <main+0xe2c>)
 80028f2:	485c      	ldr	r0, [pc, #368]	@ (8002a64 <main+0xe54>)
 80028f4:	f000 fe4c 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs7", b_latitude);
 80028f8:	494c      	ldr	r1, [pc, #304]	@ (8002a2c <main+0xe1c>)
 80028fa:	485b      	ldr	r0, [pc, #364]	@ (8002a68 <main+0xe58>)
 80028fc:	f000 fe48 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs8", b_longitude);
 8002900:	494b      	ldr	r1, [pc, #300]	@ (8002a30 <main+0xe20>)
 8002902:	485a      	ldr	r0, [pc, #360]	@ (8002a6c <main+0xe5c>)
 8002904:	f000 fe44 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("bs9", b_bat);
 8002908:	494b      	ldr	r1, [pc, #300]	@ (8002a38 <main+0xe28>)
 800290a:	4859      	ldr	r0, [pc, #356]	@ (8002a70 <main+0xe60>)
 800290c:	f000 fe40 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("t56", b_comm);
 8002910:	494b      	ldr	r1, [pc, #300]	@ (8002a40 <main+0xe30>)
 8002912:	4858      	ldr	r0, [pc, #352]	@ (8002a74 <main+0xe64>)
 8002914:	f000 fe3c 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("t17", b_dist);
 8002918:	494c      	ldr	r1, [pc, #304]	@ (8002a4c <main+0xe3c>)
 800291a:	4857      	ldr	r0, [pc, #348]	@ (8002a78 <main+0xe68>)
 800291c:	f000 fe38 	bl	8003590 <NEXTION_SendString>

	        NEXTION_SendString("m7", e_engine_request);
 8002920:	4956      	ldr	r1, [pc, #344]	@ (8002a7c <main+0xe6c>)
 8002922:	4857      	ldr	r0, [pc, #348]	@ (8002a80 <main+0xe70>)
 8002924:	f000 fe34 	bl	8003590 <NEXTION_SendString>
	        NEXTION_SendString("t59", e_fitil);
 8002928:	4956      	ldr	r1, [pc, #344]	@ (8002a84 <main+0xe74>)
 800292a:	4857      	ldr	r0, [pc, #348]	@ (8002a88 <main+0xe78>)
 800292c:	f000 fe30 	bl	8003590 <NEXTION_SendString>

	     	sprintf(p_altitude,"%4.2f",Payload.altitude);
 8002930:	4b56      	ldr	r3, [pc, #344]	@ (8002a8c <main+0xe7c>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fe27 	bl	8000588 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4942      	ldr	r1, [pc, #264]	@ (8002a48 <main+0xe38>)
 8002940:	4853      	ldr	r0, [pc, #332]	@ (8002a90 <main+0xe80>)
 8002942:	f00d fc95 	bl	8010270 <siprintf>
			sprintf(p_latitude,"%2.6f",Payload.gpslatitude);
 8002946:	4b51      	ldr	r3, [pc, #324]	@ (8002a8c <main+0xe7c>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fe1c 	bl	8000588 <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4934      	ldr	r1, [pc, #208]	@ (8002a28 <main+0xe18>)
 8002956:	484f      	ldr	r0, [pc, #316]	@ (8002a94 <main+0xe84>)
 8002958:	f00d fc8a 	bl	8010270 <siprintf>
			sprintf(p_gpsaltitude,"%4.2f",Payload.gpsaltitude);
 800295c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <main+0xe7c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fe11 	bl	8000588 <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4937      	ldr	r1, [pc, #220]	@ (8002a48 <main+0xe38>)
 800296c:	484a      	ldr	r0, [pc, #296]	@ (8002a98 <main+0xe88>)
 800296e:	f00d fc7f 	bl	8010270 <siprintf>
			sprintf(p_longitude,"%2.6f",Payload.gpslongitude);
 8002972:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <main+0xe7c>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fe06 	bl	8000588 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4929      	ldr	r1, [pc, #164]	@ (8002a28 <main+0xe18>)
 8002982:	4846      	ldr	r0, [pc, #280]	@ (8002a9c <main+0xe8c>)
 8002984:	f00d fc74 	bl	8010270 <siprintf>
			sprintf(p_bat,"%2d",Payload.battery);
 8002988:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <main+0xe7c>)
 800298a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800298e:	461a      	mov	r2, r3
 8002990:	4928      	ldr	r1, [pc, #160]	@ (8002a34 <main+0xe24>)
 8002992:	4843      	ldr	r0, [pc, #268]	@ (8002aa0 <main+0xe90>)
 8002994:	f00d fc6c 	bl	8010270 <siprintf>

			NEXTION_SendString("vp1", p_latitude);
 8002998:	493e      	ldr	r1, [pc, #248]	@ (8002a94 <main+0xe84>)
 800299a:	4842      	ldr	r0, [pc, #264]	@ (8002aa4 <main+0xe94>)
 800299c:	f000 fdf8 	bl	8003590 <NEXTION_SendString>
			NEXTION_SendString("vp2", p_longitude);
 80029a0:	493e      	ldr	r1, [pc, #248]	@ (8002a9c <main+0xe8c>)
 80029a2:	4841      	ldr	r0, [pc, #260]	@ (8002aa8 <main+0xe98>)
 80029a4:	f000 fdf4 	bl	8003590 <NEXTION_SendString>
			NEXTION_SendString("vp3", p_gpsaltitude);
 80029a8:	493b      	ldr	r1, [pc, #236]	@ (8002a98 <main+0xe88>)
 80029aa:	4840      	ldr	r0, [pc, #256]	@ (8002aac <main+0xe9c>)
 80029ac:	f000 fdf0 	bl	8003590 <NEXTION_SendString>
			NEXTION_SendString("vp4", p_altitude);
 80029b0:	4937      	ldr	r1, [pc, #220]	@ (8002a90 <main+0xe80>)
 80029b2:	483f      	ldr	r0, [pc, #252]	@ (8002ab0 <main+0xea0>)
 80029b4:	f000 fdec 	bl	8003590 <NEXTION_SendString>
 80029b8:	e07c      	b.n	8002ab4 <main+0xea4>
 80029ba:	bf00      	nop
 80029bc:	f3af 8000 	nop.w
 80029c0:	66666666 	.word	0x66666666
 80029c4:	400a6666 	.word	0x400a6666
 80029c8:	28f5c28f 	.word	0x28f5c28f
 80029cc:	3ff68f5c 	.word	0x3ff68f5c
 80029d0:	28f5c290 	.word	0x28f5c290
 80029d4:	3fe28f5c 	.word	0x3fe28f5c
 80029d8:	2000061c 	.word	0x2000061c
 80029dc:	200008fc 	.word	0x200008fc
 80029e0:	20000900 	.word	0x20000900
 80029e4:	200008f0 	.word	0x200008f0
 80029e8:	200008e8 	.word	0x200008e8
 80029ec:	451ac000 	.word	0x451ac000
 80029f0:	450ba000 	.word	0x450ba000
 80029f4:	44db6000 	.word	0x44db6000
 80029f8:	44db6000 	.word	0x44db6000
 80029fc:	457ff000 	.word	0x457ff000
 8002a00:	42c80000 	.word	0x42c80000
 8002a04:	200008ec 	.word	0x200008ec
 8002a08:	20000758 	.word	0x20000758
 8002a0c:	080151ac 	.word	0x080151ac
 8002a10:	200007c8 	.word	0x200007c8
 8002a14:	080151b4 	.word	0x080151b4
 8002a18:	200007d0 	.word	0x200007d0
 8002a1c:	200007d8 	.word	0x200007d8
 8002a20:	200007e0 	.word	0x200007e0
 8002a24:	200007e8 	.word	0x200007e8
 8002a28:	080151bc 	.word	0x080151bc
 8002a2c:	200007f0 	.word	0x200007f0
 8002a30:	200007fc 	.word	0x200007fc
 8002a34:	08015198 	.word	0x08015198
 8002a38:	20000808 	.word	0x20000808
 8002a3c:	2000080c 	.word	0x2000080c
 8002a40:	20000810 	.word	0x20000810
 8002a44:	2000071c 	.word	0x2000071c
 8002a48:	080151c4 	.word	0x080151c4
 8002a4c:	20000814 	.word	0x20000814
 8002a50:	080151cc 	.word	0x080151cc
 8002a54:	080151d0 	.word	0x080151d0
 8002a58:	080151d4 	.word	0x080151d4
 8002a5c:	080151d8 	.word	0x080151d8
 8002a60:	080151dc 	.word	0x080151dc
 8002a64:	080151e0 	.word	0x080151e0
 8002a68:	080151e4 	.word	0x080151e4
 8002a6c:	080151e8 	.word	0x080151e8
 8002a70:	080151ec 	.word	0x080151ec
 8002a74:	080151f0 	.word	0x080151f0
 8002a78:	080151f4 	.word	0x080151f4
 8002a7c:	200008e4 	.word	0x200008e4
 8002a80:	080151f8 	.word	0x080151f8
 8002a84:	200008dc 	.word	0x200008dc
 8002a88:	080151fc 	.word	0x080151fc
 8002a8c:	20000720 	.word	0x20000720
 8002a90:	200008ac 	.word	0x200008ac
 8002a94:	20000894 	.word	0x20000894
 8002a98:	200008b4 	.word	0x200008b4
 8002a9c:	200008a0 	.word	0x200008a0
 8002aa0:	200008bc 	.word	0x200008bc
 8002aa4:	08015200 	.word	0x08015200
 8002aa8:	08015204 	.word	0x08015204
 8002aac:	08015208 	.word	0x08015208
 8002ab0:	0801520c 	.word	0x0801520c
			NEXTION_SendString("vp5", p_bat);
 8002ab4:	4979      	ldr	r1, [pc, #484]	@ (8002c9c <main+0x108c>)
 8002ab6:	487a      	ldr	r0, [pc, #488]	@ (8002ca0 <main+0x1090>)
 8002ab8:	f000 fd6a 	bl	8003590 <NEXTION_SendString>



			sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 8002abc:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <main+0x1094>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd61 	bl	8000588 <__aeabi_f2d>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4977      	ldr	r1, [pc, #476]	@ (8002ca8 <main+0x1098>)
 8002acc:	4877      	ldr	r0, [pc, #476]	@ (8002cac <main+0x109c>)
 8002ace:	f00d fbcf 	bl	8010270 <siprintf>
			sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 8002ad2:	4b74      	ldr	r3, [pc, #464]	@ (8002ca4 <main+0x1094>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fd56 	bl	8000588 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4973      	ldr	r1, [pc, #460]	@ (8002cb0 <main+0x10a0>)
 8002ae2:	4874      	ldr	r0, [pc, #464]	@ (8002cb4 <main+0x10a4>)
 8002ae4:	f00d fbc4 	bl	8010270 <siprintf>
			sprintf(s_speed,"%2.2f",Sustainer.speed);
 8002ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <main+0x1094>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd4b 	bl	8000588 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	496e      	ldr	r1, [pc, #440]	@ (8002cb0 <main+0x10a0>)
 8002af8:	486f      	ldr	r0, [pc, #444]	@ (8002cb8 <main+0x10a8>)
 8002afa:	f00d fbb9 	bl	8010270 <siprintf>
			sprintf(s_roll,"%2.2f",Sustainer.normal);
 8002afe:	4b69      	ldr	r3, [pc, #420]	@ (8002ca4 <main+0x1094>)
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd40 	bl	8000588 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4968      	ldr	r1, [pc, #416]	@ (8002cb0 <main+0x10a0>)
 8002b0e:	486b      	ldr	r0, [pc, #428]	@ (8002cbc <main+0x10ac>)
 8002b10:	f00d fbae 	bl	8010270 <siprintf>
			sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 8002b14:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <main+0x1094>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fd35 	bl	8000588 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4963      	ldr	r1, [pc, #396]	@ (8002cb0 <main+0x10a0>)
 8002b24:	4866      	ldr	r0, [pc, #408]	@ (8002cc0 <main+0x10b0>)
 8002b26:	f00d fba3 	bl	8010270 <siprintf>
			sprintf(s_latitude,"%2.6f",Sustainer.gpslatitude);
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca4 <main+0x1094>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd2a 	bl	8000588 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4962      	ldr	r1, [pc, #392]	@ (8002cc4 <main+0x10b4>)
 8002b3a:	4863      	ldr	r0, [pc, #396]	@ (8002cc8 <main+0x10b8>)
 8002b3c:	f00d fb98 	bl	8010270 <siprintf>
			sprintf(s_longitude,"%2.6f",Sustainer.gpslongitude);
 8002b40:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <main+0x1094>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fd1f 	bl	8000588 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	495d      	ldr	r1, [pc, #372]	@ (8002cc4 <main+0x10b4>)
 8002b50:	485e      	ldr	r0, [pc, #376]	@ (8002ccc <main+0x10bc>)
 8002b52:	f00d fb8d 	bl	8010270 <siprintf>
			sprintf(s_bat,"%2d",Sustainer.battery);
 8002b56:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <main+0x1094>)
 8002b58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	495c      	ldr	r1, [pc, #368]	@ (8002cd0 <main+0x10c0>)
 8002b60:	485c      	ldr	r0, [pc, #368]	@ (8002cd4 <main+0x10c4>)
 8002b62:	f00d fb85 	bl	8010270 <siprintf>
			sprintf(s_sats,"%2d",Sustainer.satsinview);
 8002b66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <main+0x1094>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4958      	ldr	r1, [pc, #352]	@ (8002cd0 <main+0x10c0>)
 8002b6e:	485a      	ldr	r0, [pc, #360]	@ (8002cd8 <main+0x10c8>)
 8002b70:	f00d fb7e 	bl	8010270 <siprintf>
			sprintf(s_comm,"%2d",Sustainer.communication);
 8002b74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <main+0x1094>)
 8002b76:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4954      	ldr	r1, [pc, #336]	@ (8002cd0 <main+0x10c0>)
 8002b7e:	4857      	ldr	r0, [pc, #348]	@ (8002cdc <main+0x10cc>)
 8002b80:	f00d fb76 	bl	8010270 <siprintf>
			sprintf(s_comm,"%2d",Sustainer.communication);
 8002b84:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <main+0x1094>)
 8002b86:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4950      	ldr	r1, [pc, #320]	@ (8002cd0 <main+0x10c0>)
 8002b8e:	4853      	ldr	r0, [pc, #332]	@ (8002cdc <main+0x10cc>)
 8002b90:	f00d fb6e 	bl	8010270 <siprintf>
			sprintf(s_dist,"%4.2f",s_distance);
 8002b94:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <main+0x10d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcf5 	bl	8000588 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4950      	ldr	r1, [pc, #320]	@ (8002ce4 <main+0x10d4>)
 8002ba4:	4850      	ldr	r0, [pc, #320]	@ (8002ce8 <main+0x10d8>)
 8002ba6:	f00d fb63 	bl	8010270 <siprintf>

			sprintf(e_altitude,"%4.2f",EGU_IRTIFA);
 8002baa:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <main+0x10dc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcea 	bl	8000588 <__aeabi_f2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	494a      	ldr	r1, [pc, #296]	@ (8002ce4 <main+0x10d4>)
 8002bba:	484d      	ldr	r0, [pc, #308]	@ (8002cf0 <main+0x10e0>)
 8002bbc:	f00d fb58 	bl	8010270 <siprintf>
			sprintf(e_angle,"%2.2f",EGU_ANGLE);
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <main+0x10e4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fcdf 	bl	8000588 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4938      	ldr	r1, [pc, #224]	@ (8002cb0 <main+0x10a0>)
 8002bd0:	4849      	ldr	r0, [pc, #292]	@ (8002cf8 <main+0x10e8>)
 8002bd2:	f00d fb4d 	bl	8010270 <siprintf>
			sprintf(e_bat,"%2d",EGU_BATTERY);
 8002bd6:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <main+0x10ec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fcd4 	bl	8000588 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	493a      	ldr	r1, [pc, #232]	@ (8002cd0 <main+0x10c0>)
 8002be6:	4846      	ldr	r0, [pc, #280]	@ (8002d00 <main+0x10f0>)
 8002be8:	f00d fb42 	bl	8010270 <siprintf>
			sprintf(e_flight,"%d",EGU_UCUS_BASLADIMI);
 8002bec:	4b45      	ldr	r3, [pc, #276]	@ (8002d04 <main+0x10f4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4945      	ldr	r1, [pc, #276]	@ (8002d08 <main+0x10f8>)
 8002bf4:	4845      	ldr	r0, [pc, #276]	@ (8002d0c <main+0x10fc>)
 8002bf6:	f00d fb3b 	bl	8010270 <siprintf>
			sprintf(e_stage,"%d",EGU_AYRILMA_TESPIT);
 8002bfa:	4b45      	ldr	r3, [pc, #276]	@ (8002d10 <main+0x1100>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4941      	ldr	r1, [pc, #260]	@ (8002d08 <main+0x10f8>)
 8002c02:	4844      	ldr	r0, [pc, #272]	@ (8002d14 <main+0x1104>)
 8002c04:	f00d fb34 	bl	8010270 <siprintf>
			sprintf(e_fitil,"%d",EGU_FITIL);
 8002c08:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <main+0x1108>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	493e      	ldr	r1, [pc, #248]	@ (8002d08 <main+0x10f8>)
 8002c10:	4842      	ldr	r0, [pc, #264]	@ (8002d1c <main+0x110c>)
 8002c12:	f00d fb2d 	bl	8010270 <siprintf>
			// Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
			 NEXTION_SendString("s1", s_altitude);
 8002c16:	4925      	ldr	r1, [pc, #148]	@ (8002cac <main+0x109c>)
 8002c18:	4841      	ldr	r0, [pc, #260]	@ (8002d20 <main+0x1110>)
 8002c1a:	f000 fcb9 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s2", s_temperature);
 8002c1e:	4925      	ldr	r1, [pc, #148]	@ (8002cb4 <main+0x10a4>)
 8002c20:	4840      	ldr	r0, [pc, #256]	@ (8002d24 <main+0x1114>)
 8002c22:	f000 fcb5 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s3", s_speed);
 8002c26:	4924      	ldr	r1, [pc, #144]	@ (8002cb8 <main+0x10a8>)
 8002c28:	483f      	ldr	r0, [pc, #252]	@ (8002d28 <main+0x1118>)
 8002c2a:	f000 fcb1 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s4", s_roll);
 8002c2e:	4923      	ldr	r1, [pc, #140]	@ (8002cbc <main+0x10ac>)
 8002c30:	483e      	ldr	r0, [pc, #248]	@ (8002d2c <main+0x111c>)
 8002c32:	f000 fcad 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s5", s_pitch);
 8002c36:	4922      	ldr	r1, [pc, #136]	@ (8002cc0 <main+0x10b0>)
 8002c38:	483d      	ldr	r0, [pc, #244]	@ (8002d30 <main+0x1120>)
 8002c3a:	f000 fca9 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s6", s_sats);
 8002c3e:	4926      	ldr	r1, [pc, #152]	@ (8002cd8 <main+0x10c8>)
 8002c40:	483c      	ldr	r0, [pc, #240]	@ (8002d34 <main+0x1124>)
 8002c42:	f000 fca5 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s7", s_latitude);
 8002c46:	4920      	ldr	r1, [pc, #128]	@ (8002cc8 <main+0x10b8>)
 8002c48:	483b      	ldr	r0, [pc, #236]	@ (8002d38 <main+0x1128>)
 8002c4a:	f000 fca1 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s8", s_longitude);
 8002c4e:	491f      	ldr	r1, [pc, #124]	@ (8002ccc <main+0x10bc>)
 8002c50:	483a      	ldr	r0, [pc, #232]	@ (8002d3c <main+0x112c>)
 8002c52:	f000 fc9d 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("s9", s_bat);
 8002c56:	491f      	ldr	r1, [pc, #124]	@ (8002cd4 <main+0x10c4>)
 8002c58:	4839      	ldr	r0, [pc, #228]	@ (8002d40 <main+0x1130>)
 8002c5a:	f000 fc99 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("t57", s_comm);
 8002c5e:	491f      	ldr	r1, [pc, #124]	@ (8002cdc <main+0x10cc>)
 8002c60:	4838      	ldr	r0, [pc, #224]	@ (8002d44 <main+0x1134>)
 8002c62:	f000 fc95 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("t", s_dist);
 8002c66:	4920      	ldr	r1, [pc, #128]	@ (8002ce8 <main+0x10d8>)
 8002c68:	4837      	ldr	r0, [pc, #220]	@ (8002d48 <main+0x1138>)
 8002c6a:	f000 fc91 	bl	8003590 <NEXTION_SendString>


			 NEXTION_SendString("m1", e_altitude);
 8002c6e:	4920      	ldr	r1, [pc, #128]	@ (8002cf0 <main+0x10e0>)
 8002c70:	4836      	ldr	r0, [pc, #216]	@ (8002d4c <main+0x113c>)
 8002c72:	f000 fc8d 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("m3", e_angle);
 8002c76:	4920      	ldr	r1, [pc, #128]	@ (8002cf8 <main+0x10e8>)
 8002c78:	4835      	ldr	r0, [pc, #212]	@ (8002d50 <main+0x1140>)
 8002c7a:	f000 fc89 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("m2", e_bat);
 8002c7e:	4920      	ldr	r1, [pc, #128]	@ (8002d00 <main+0x10f0>)
 8002c80:	4834      	ldr	r0, [pc, #208]	@ (8002d54 <main+0x1144>)
 8002c82:	f000 fc85 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("m4", e_flight);
 8002c86:	4921      	ldr	r1, [pc, #132]	@ (8002d0c <main+0x10fc>)
 8002c88:	4833      	ldr	r0, [pc, #204]	@ (8002d58 <main+0x1148>)
 8002c8a:	f000 fc81 	bl	8003590 <NEXTION_SendString>
			 NEXTION_SendString("m5", e_stage);
 8002c8e:	4921      	ldr	r1, [pc, #132]	@ (8002d14 <main+0x1104>)
 8002c90:	4832      	ldr	r0, [pc, #200]	@ (8002d5c <main+0x114c>)
 8002c92:	f000 fc7d 	bl	8003590 <NEXTION_SendString>
  {
 8002c96:	f7fe bff8 	b.w	8001c8a <main+0x7a>
 8002c9a:	bf00      	nop
 8002c9c:	200008bc 	.word	0x200008bc
 8002ca0:	08015210 	.word	0x08015210
 8002ca4:	20000790 	.word	0x20000790
 8002ca8:	080151ac 	.word	0x080151ac
 8002cac:	20000834 	.word	0x20000834
 8002cb0:	080151b4 	.word	0x080151b4
 8002cb4:	2000083c 	.word	0x2000083c
 8002cb8:	20000844 	.word	0x20000844
 8002cbc:	2000084c 	.word	0x2000084c
 8002cc0:	20000854 	.word	0x20000854
 8002cc4:	080151bc 	.word	0x080151bc
 8002cc8:	2000085c 	.word	0x2000085c
 8002ccc:	20000868 	.word	0x20000868
 8002cd0:	08015198 	.word	0x08015198
 8002cd4:	20000874 	.word	0x20000874
 8002cd8:	20000878 	.word	0x20000878
 8002cdc:	2000087c 	.word	0x2000087c
 8002ce0:	200006fc 	.word	0x200006fc
 8002ce4:	080151c4 	.word	0x080151c4
 8002ce8:	20000880 	.word	0x20000880
 8002cec:	2000070c 	.word	0x2000070c
 8002cf0:	200008c0 	.word	0x200008c0
 8002cf4:	20000710 	.word	0x20000710
 8002cf8:	200008cc 	.word	0x200008cc
 8002cfc:	20000708 	.word	0x20000708
 8002d00:	200008c8 	.word	0x200008c8
 8002d04:	20000704 	.word	0x20000704
 8002d08:	08015214 	.word	0x08015214
 8002d0c:	200008d4 	.word	0x200008d4
 8002d10:	20000701 	.word	0x20000701
 8002d14:	200008d8 	.word	0x200008d8
 8002d18:	20000705 	.word	0x20000705
 8002d1c:	200008dc 	.word	0x200008dc
 8002d20:	08015218 	.word	0x08015218
 8002d24:	0801521c 	.word	0x0801521c
 8002d28:	08015220 	.word	0x08015220
 8002d2c:	08015224 	.word	0x08015224
 8002d30:	08015228 	.word	0x08015228
 8002d34:	0801522c 	.word	0x0801522c
 8002d38:	08015230 	.word	0x08015230
 8002d3c:	08015234 	.word	0x08015234
 8002d40:	08015238 	.word	0x08015238
 8002d44:	0801523c 	.word	0x0801523c
 8002d48:	08015240 	.word	0x08015240
 8002d4c:	08015244 	.word	0x08015244
 8002d50:	08015248 	.word	0x08015248
 8002d54:	0801524c 	.word	0x0801524c
 8002d58:	08015250 	.word	0x08015250
 8002d5c:	08015254 	.word	0x08015254

08002d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b094      	sub	sp, #80	@ 0x50
 8002d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d66:	f107 031c 	add.w	r3, r7, #28
 8002d6a:	2234      	movs	r2, #52	@ 0x34
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f00d fae1 	bl	8010336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <SystemClock_Config+0xd0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	4a28      	ldr	r2, [pc, #160]	@ (8002e30 <SystemClock_Config+0xd0>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d94:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <SystemClock_Config+0xd0>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da0:	2300      	movs	r3, #0
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4b23      	ldr	r3, [pc, #140]	@ (8002e34 <SystemClock_Config+0xd4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	@ (8002e34 <SystemClock_Config+0xd4>)
 8002daa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <SystemClock_Config+0xd4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002dd4:	23a8      	movs	r3, #168	@ 0xa8
 8002dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002de0:	2302      	movs	r3, #2
 8002de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4618      	mov	r0, r3
 8002dea:	f005 f981 	bl	80080f0 <HAL_RCC_OscConfig>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002df4:	f000 ff60 	bl	8003cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df8:	230f      	movs	r3, #15
 8002dfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	2105      	movs	r1, #5
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 faf6 	bl	8007408 <HAL_RCC_ClockConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002e22:	f000 ff49 	bl	8003cb8 <Error_Handler>
  }
}
 8002e26:	bf00      	nop
 8002e28:	3750      	adds	r7, #80	@ 0x50
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000

08002e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e4a:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e4c:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <MX_ADC1_Init+0x9c>)
 8002e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e72:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e78:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e7a:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <MX_ADC1_Init+0xa0>)
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e98:	480d      	ldr	r0, [pc, #52]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002e9a:	f001 fb59 	bl	8004550 <HAL_ADC_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ea4:	f000 ff08 	bl	8003cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002eac:	2301      	movs	r3, #1
 8002eae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <MX_ADC1_Init+0x98>)
 8002eba:	f001 fd9d 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ec4:	f000 fef8 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2000031c 	.word	0x2000031c
 8002ed4:	40012000 	.word	0x40012000
 8002ed8:	0f000001 	.word	0x0f000001

08002edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002ee2:	4a13      	ldr	r2, [pc, #76]	@ (8002f30 <MX_I2C1_Init+0x54>)
 8002ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002ee8:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <MX_I2C1_Init+0x58>)
 8002eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002efa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	@ (8002f2c <MX_I2C1_Init+0x50>)
 8002f1a:	f002 fe67 	bl	8005bec <HAL_I2C_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f24:	f000 fec8 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000364 	.word	0x20000364
 8002f30:	40005400 	.word	0x40005400
 8002f34:	000186a0 	.word	0x000186a0

08002f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f3e:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <MX_SPI1_Init+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f84:	220a      	movs	r2, #10
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f88:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <MX_SPI1_Init+0x64>)
 8002f8a:	f005 fb4f 	bl	800862c <HAL_SPI_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f94:	f000 fe90 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200003b8 	.word	0x200003b8
 8002fa0:	40013000 	.word	0x40013000

08002fa4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <MX_TIM11_Init+0x44>)
 8002fac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fb0:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002fb4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15000-1;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fbe:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002fc2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fca:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002fd0:	4804      	ldr	r0, [pc, #16]	@ (8002fe4 <MX_TIM11_Init+0x40>)
 8002fd2:	f005 fbb4 	bl	800873e <HAL_TIM_Base_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002fdc:	f000 fe6c 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000410 	.word	0x20000410
 8002fe8:	40014800 	.word	0x40014800

08002fec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <MX_UART4_Init+0x4c>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <MX_UART4_Init+0x50>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <MX_UART4_Init+0x4c>)
 8002ff8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ffc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <MX_UART4_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003010:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003012:	220c      	movs	r2, #12
 8003014:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <MX_UART4_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003024:	f005 fe2e 	bl	8008c84 <HAL_UART_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800302e:	f000 fe43 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000458 	.word	0x20000458
 800303c:	40004c00 	.word	0x40004c00

08003040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <MX_USART2_UART_Init+0x50>)
 8003048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800304c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b08      	ldr	r3, [pc, #32]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003078:	f005 fe04 	bl	8008c84 <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003082:	f000 fe19 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000049c 	.word	0x2000049c
 8003090:	40004400 	.word	0x40004400

08003094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 800309a:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <MX_USART3_UART_Init+0x50>)
 800309c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80030a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	@ (80030e0 <MX_USART3_UART_Init+0x4c>)
 80030cc:	f005 fdda 	bl	8008c84 <HAL_UART_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030d6:	f000 fdef 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200004e0 	.word	0x200004e0
 80030e4:	40004800 	.word	0x40004800

080030e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <MX_DMA_Init+0x3c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003124 <MX_DMA_Init+0x3c>)
 80030f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <MX_DMA_Init+0x3c>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	200c      	movs	r0, #12
 8003110:	f001 ff85 	bl	800501e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003114:	200c      	movs	r0, #12
 8003116:	f001 ff9e 	bl	8005056 <HAL_NVIC_EnableIRQ>

}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	4b4c      	ldr	r3, [pc, #304]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4a4b      	ldr	r2, [pc, #300]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4b49      	ldr	r3, [pc, #292]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b45      	ldr	r3, [pc, #276]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	4a44      	ldr	r2, [pc, #272]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003168:	6313      	str	r3, [r2, #48]	@ 0x30
 800316a:	4b42      	ldr	r3, [pc, #264]	@ (8003274 <MX_GPIO_Init+0x14c>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <MX_GPIO_Init+0x14c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	4a3d      	ldr	r2, [pc, #244]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6313      	str	r3, [r2, #48]	@ 0x30
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <MX_GPIO_Init+0x14c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	4a36      	ldr	r2, [pc, #216]	@ (8003274 <MX_GPIO_Init+0x14c>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a2:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <MX_GPIO_Init+0x14c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 80031ae:	2200      	movs	r2, #0
 80031b0:	f640 4112 	movw	r1, #3090	@ 0xc12
 80031b4:	4830      	ldr	r0, [pc, #192]	@ (8003278 <MX_GPIO_Init+0x150>)
 80031b6:	f002 fcff 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80031ba:	2200      	movs	r2, #0
 80031bc:	f246 011f 	movw	r1, #24607	@ 0x601f
 80031c0:	482e      	ldr	r0, [pc, #184]	@ (800327c <MX_GPIO_Init+0x154>)
 80031c2:	f002 fcf9 	bl	8005bb8 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80031c6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80031ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	4619      	mov	r1, r3
 80031da:	4827      	ldr	r0, [pc, #156]	@ (8003278 <MX_GPIO_Init+0x150>)
 80031dc:	f002 fb58 	bl	8005890 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 80031e0:	f640 4312 	movw	r3, #3090	@ 0xc12
 80031e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	481f      	ldr	r0, [pc, #124]	@ (8003278 <MX_GPIO_Init+0x150>)
 80031fa:	f002 fb49 	bl	8005890 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80031fe:	f246 031f 	movw	r3, #24607	@ 0x601f
 8003202:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003204:	2301      	movs	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	4619      	mov	r1, r3
 8003216:	4819      	ldr	r0, [pc, #100]	@ (800327c <MX_GPIO_Init+0x154>)
 8003218:	f002 fb3a 	bl	8005890 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 800321c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	4812      	ldr	r0, [pc, #72]	@ (800327c <MX_GPIO_Init+0x154>)
 8003232:	f002 fb2d 	bl	8005890 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800323a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	480b      	ldr	r0, [pc, #44]	@ (8003278 <MX_GPIO_Init+0x150>)
 800324c:	f002 fb20 	bl	8005890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8003250:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003256:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800325a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4619      	mov	r1, r3
 8003266:	4805      	ldr	r0, [pc, #20]	@ (800327c <MX_GPIO_Init+0x154>)
 8003268:	f002 fb12 	bl	8005890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800326c:	bf00      	nop
 800326e:	3728      	adds	r7, #40	@ 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	40020800 	.word	0x40020800
 800327c:	40020400 	.word	0x40020400

08003280 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	4604      	mov	r4, r0
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	71fb      	strb	r3, [r7, #7]
 8003292:	4603      	mov	r3, r0
 8003294:	71bb      	strb	r3, [r7, #6]
 8003296:	460b      	mov	r3, r1
 8003298:	717b      	strb	r3, [r7, #5]
 800329a:	4613      	mov	r3, r2
 800329c:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800329e:	2201      	movs	r2, #1
 80032a0:	2104      	movs	r1, #4
 80032a2:	4824      	ldr	r0, [pc, #144]	@ (8003334 <E220_CONFIG+0xb4>)
 80032a4:	f002 fc88 	bl	8005bb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80032a8:	2201      	movs	r2, #1
 80032aa:	2102      	movs	r1, #2
 80032ac:	4821      	ldr	r0, [pc, #132]	@ (8003334 <E220_CONFIG+0xb4>)
 80032ae:	f002 fc83 	bl	8005bb8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80032b2:	2032      	movs	r0, #50	@ 0x32
 80032b4:	f001 f928 	bl	8004508 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 80032c0:	793b      	ldrb	r3, [r7, #4]
 80032c2:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 80032cc:	2362      	movs	r3, #98	@ 0x62
 80032ce:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 80032d4:	797b      	ldrb	r3, [r7, #5]
 80032d6:	743b      	strb	r3, [r7, #16]

    switch(mode){
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <E220_CONFIG+0x64>
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d003      	beq.n	80032ea <E220_CONFIG+0x6a>
 80032e2:	e005      	b.n	80032f0 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80032e4:	2300      	movs	r3, #0
 80032e6:	747b      	strb	r3, [r7, #17]
            break;
 80032e8:	e004      	b.n	80032f4 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80032ea:	2311      	movs	r3, #17
 80032ec:	747b      	strb	r3, [r7, #17]
            break;
 80032ee:	e001      	b.n	80032f4 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 80032f0:	2311      	movs	r3, #17
 80032f2:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 80032f4:	2300      	movs	r3, #0
 80032f6:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80032f8:	2300      	movs	r3, #0
 80032fa:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80032fc:	f107 010c 	add.w	r1, r7, #12
 8003300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003304:	2208      	movs	r2, #8
 8003306:	480c      	ldr	r0, [pc, #48]	@ (8003338 <E220_CONFIG+0xb8>)
 8003308:	f005 fd09 	bl	8008d1e <HAL_UART_Transmit>

    HAL_Delay(25);
 800330c:	2019      	movs	r0, #25
 800330e:	f001 f8fb 	bl	8004508 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8003312:	2200      	movs	r2, #0
 8003314:	2104      	movs	r1, #4
 8003316:	4807      	ldr	r0, [pc, #28]	@ (8003334 <E220_CONFIG+0xb4>)
 8003318:	f002 fc4e 	bl	8005bb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800331c:	2200      	movs	r2, #0
 800331e:	2102      	movs	r1, #2
 8003320:	4804      	ldr	r0, [pc, #16]	@ (8003334 <E220_CONFIG+0xb4>)
 8003322:	f002 fc49 	bl	8005bb8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8003326:	2019      	movs	r0, #25
 8003328:	f001 f8ee 	bl	8004508 <HAL_Delay>
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}
 8003334:	40020400 	.word	0x40020400
 8003338:	200004e0 	.word	0x200004e0
 800333c:	00000000 	.word	0x00000000

08003340 <distance_in_m>:
double distance_in_m(double lat1, double long1, double lat2, double long2) {
 8003340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003344:	ed2d 8b02 	vpush	{d8}
 8003348:	b09a      	sub	sp, #104	@ 0x68
 800334a:	af00      	add	r7, sp, #0
 800334c:	ed87 0b06 	vstr	d0, [r7, #24]
 8003350:	ed87 1b04 	vstr	d1, [r7, #16]
 8003354:	ed87 2b02 	vstr	d2, [r7, #8]
 8003358:	ed87 3b00 	vstr	d3, [r7]


    double dlat1=lat1*(PI/180);
 800335c:	a184      	add	r1, pc, #528	@ (adr r1, 8003570 <distance_in_m+0x230>)
 800335e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <distance_in_m+0x248>)
 8003368:	f7fd fa90 	bl	800088c <__aeabi_ddiv>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003374:	f7fd f960 	bl	8000638 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double dlong1=long1*(PI/180);
 8003380:	a17b      	add	r1, pc, #492	@ (adr r1, 8003570 <distance_in_m+0x230>)
 8003382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <distance_in_m+0x248>)
 800338c:	f7fd fa7e 	bl	800088c <__aeabi_ddiv>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003398:	f7fd f94e 	bl	8000638 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dlat2=lat2*(PI/180);
 80033a4:	a172      	add	r1, pc, #456	@ (adr r1, 8003570 <distance_in_m+0x230>)
 80033a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <distance_in_m+0x248>)
 80033b0:	f7fd fa6c 	bl	800088c <__aeabi_ddiv>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033bc:	f7fd f93c 	bl	8000638 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dlong2=long2*(PI/180);
 80033c8:	a169      	add	r1, pc, #420	@ (adr r1, 8003570 <distance_in_m+0x230>)
 80033ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <distance_in_m+0x248>)
 80033d4:	f7fd fa5a 	bl	800088c <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e0:	f7fd f92a 	bl	8000638 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double dLong=dlong1-dlong2;
 80033ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80033f4:	f7fc ff68 	bl	80002c8 <__aeabi_dsub>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double dLat=dlat1-dlat2;
 8003400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003404:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003408:	f7fc ff5e 	bl	80002c8 <__aeabi_dsub>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    double aHarv= pow(sin(dLat/2.0),2.0)+cos(dlat1)*cos(dlat2)*pow(sin(dLong/2),2);
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800341c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003420:	f7fd fa34 	bl	800088c <__aeabi_ddiv>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	ec43 2b17 	vmov	d7, r2, r3
 800342c:	eeb0 0a47 	vmov.f32	s0, s14
 8003430:	eef0 0a67 	vmov.f32	s1, s15
 8003434:	f00f fd8c 	bl	8012f50 <sin>
 8003438:	eeb0 7a40 	vmov.f32	s14, s0
 800343c:	eef0 7a60 	vmov.f32	s15, s1
 8003440:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003578 <distance_in_m+0x238>
 8003444:	eeb0 0a47 	vmov.f32	s0, s14
 8003448:	eef0 0a67 	vmov.f32	s1, s15
 800344c:	f00f fc8e 	bl	8012d6c <pow>
 8003450:	ec59 8b10 	vmov	r8, r9, d0
 8003454:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003458:	f00f fd26 	bl	8012ea8 <cos>
 800345c:	ec55 4b10 	vmov	r4, r5, d0
 8003460:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8003464:	f00f fd20 	bl	8012ea8 <cos>
 8003468:	ec53 2b10 	vmov	r2, r3, d0
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fd f8e2 	bl	8000638 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003484:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003488:	f7fd fa00 	bl	800088c <__aeabi_ddiv>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	ec43 2b17 	vmov	d7, r2, r3
 8003494:	eeb0 0a47 	vmov.f32	s0, s14
 8003498:	eef0 0a67 	vmov.f32	s1, s15
 800349c:	f00f fd58 	bl	8012f50 <sin>
 80034a0:	eeb0 7a40 	vmov.f32	s14, s0
 80034a4:	eef0 7a60 	vmov.f32	s15, s1
 80034a8:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8003578 <distance_in_m+0x238>
 80034ac:	eeb0 0a47 	vmov.f32	s0, s14
 80034b0:	eef0 0a67 	vmov.f32	s1, s15
 80034b4:	f00f fc5a 	bl	8012d6c <pow>
 80034b8:	ec53 2b10 	vmov	r2, r3, d0
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	f7fd f8ba 	bl	8000638 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4640      	mov	r0, r8
 80034ca:	4649      	mov	r1, r9
 80034cc:	f7fc fefe 	bl	80002cc <__adddf3>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double cHarv=2*atan2(sqrt(aHarv),sqrt(1.0-aHarv));
 80034d8:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80034dc:	f00f fcb6 	bl	8012e4c <sqrt>
 80034e0:	eeb0 8a40 	vmov.f32	s16, s0
 80034e4:	eef0 8a60 	vmov.f32	s17, s1
 80034e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	4926      	ldr	r1, [pc, #152]	@ (800358c <distance_in_m+0x24c>)
 80034f2:	f7fc fee9 	bl	80002c8 <__aeabi_dsub>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	ec43 2b17 	vmov	d7, r2, r3
 80034fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003502:	eef0 0a67 	vmov.f32	s1, s15
 8003506:	f00f fca1 	bl	8012e4c <sqrt>
 800350a:	eeb0 7a40 	vmov.f32	s14, s0
 800350e:	eef0 7a60 	vmov.f32	s15, s1
 8003512:	eeb0 1a47 	vmov.f32	s2, s14
 8003516:	eef0 1a67 	vmov.f32	s3, s15
 800351a:	eeb0 0a48 	vmov.f32	s0, s16
 800351e:	eef0 0a68 	vmov.f32	s1, s17
 8003522:	f00f fc21 	bl	8012d68 <atan2>
 8003526:	ec51 0b10 	vmov	r0, r1, d0
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	f7fc fecd 	bl	80002cc <__adddf3>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double distance=radius_of_earth*cHarv;
 800353a:	a311      	add	r3, pc, #68	@ (adr r3, 8003580 <distance_in_m+0x240>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003544:	f7fd f878 	bl	8000638 <__aeabi_dmul>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return (distance);
 8003550:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003554:	ec43 2b17 	vmov	d7, r2, r3
    }
 8003558:	eeb0 0a47 	vmov.f32	s0, s14
 800355c:	eef0 0a67 	vmov.f32	s1, s15
 8003560:	3768      	adds	r7, #104	@ 0x68
 8003562:	46bd      	mov	sp, r7
 8003564:	ecbd 8b02 	vpop	{d8}
 8003568:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800356c:	f3af 8000 	nop.w
 8003570:	54442d18 	.word	0x54442d18
 8003574:	400921fb 	.word	0x400921fb
 8003578:	00000000 	.word	0x00000000
 800357c:	40000000 	.word	0x40000000
 8003580:	03089a02 	.word	0x03089a02
 8003584:	415854a6 	.word	0x415854a6
 8003588:	40668000 	.word	0x40668000
 800358c:	3ff00000 	.word	0x3ff00000

08003590 <NEXTION_SendString>:
    double angle_deg = angle_rad * 180.0 / PI;
    return angle_deg;
}

void NEXTION_SendString (char *ID, char *string)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b090      	sub	sp, #64	@ 0x40
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 800359a:	f107 0008 	add.w	r0, r7, #8
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	490b      	ldr	r1, [pc, #44]	@ (80035d0 <NEXTION_SendString+0x40>)
 80035a4:	f00c fe64 	bl	8010270 <siprintf>
 80035a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	f107 0108 	add.w	r1, r7, #8
 80035b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b6:	4807      	ldr	r0, [pc, #28]	@ (80035d4 <NEXTION_SendString+0x44>)
 80035b8:	f005 fbb1 	bl	8008d1e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 80035bc:	2364      	movs	r3, #100	@ 0x64
 80035be:	2203      	movs	r2, #3
 80035c0:	4905      	ldr	r1, [pc, #20]	@ (80035d8 <NEXTION_SendString+0x48>)
 80035c2:	4804      	ldr	r0, [pc, #16]	@ (80035d4 <NEXTION_SendString+0x44>)
 80035c4:	f005 fbab 	bl	8008d1e <HAL_UART_Transmit>
}
 80035c8:	bf00      	nop
 80035ca:	3740      	adds	r7, #64	@ 0x40
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	08015258 	.word	0x08015258
 80035d4:	20000458 	.word	0x20000458
 80035d8:	20000000 	.word	0x20000000

080035dc <HYI_BUFFER_Fill>:
    // Send the command to the Nextion display
    Nextion_SendCommand(command);
}

void HYI_BUFFER_Fill()
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 80035e8:	22ff      	movs	r2, #255	@ 0xff
 80035ea:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[2] =0x54;
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 80035ee:	2254      	movs	r2, #84	@ 0x54
 80035f0:	709a      	strb	r2, [r3, #2]
	HYI_BUFFER[3] =0X52;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 80035f4:	2252      	movs	r2, #82	@ 0x52
 80035f6:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 80035fa:	221f      	movs	r2, #31
 80035fc:	711a      	strb	r2, [r3, #4]
//	HYI_BUFFER[71] =takim_sayac;
//	HYI_BUFFER[72] =takim_sayac;
//	HYI_BUFFER[73] =takim_sayac;


	HYI_BUFFER[74]= 1;//EGU_AYRILMA_TESPIT;
 80035fe:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 8003600:	2201      	movs	r2, #1
 8003602:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	//HYI_BUFFER[75]= crc; // CRC
	HYI_BUFFER[76]= 0x0D;
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 8003608:	220d      	movs	r2, #13
 800360a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <HYI_BUFFER_Fill+0x44>)
 8003610:	220a      	movs	r2, #10
 8003612:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	2000061c 	.word	0x2000061c

08003624 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	e013      	b.n	8003658 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+5];
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	1d5a      	adds	r2, r3, #5
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4985      	ldr	r1, [pc, #532]	@ (800384c <Payload_union_converter+0x228>)
 8003638:	5c8a      	ldrb	r2, [r1, r2]
 800363a:	3310      	adds	r3, #16
 800363c:	443b      	add	r3, r7
 800363e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=RS_rx_buffer[i+5]; // 34 35 36 37
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	1d5a      	adds	r2, r3, #5
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3316      	adds	r3, #22
 800364a:	4980      	ldr	r1, [pc, #512]	@ (800384c <Payload_union_converter+0x228>)
 800364c:	5c89      	ldrb	r1, [r1, r2]
 800364e:	4a80      	ldr	r2, [pc, #512]	@ (8003850 <Payload_union_converter+0x22c>)
 8003650:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	3301      	adds	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d9e8      	bls.n	8003630 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4a7c      	ldr	r2, [pc, #496]	@ (8003854 <Payload_union_converter+0x230>)
 8003662:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8003664:	2300      	movs	r3, #0
 8003666:	73bb      	strb	r3, [r7, #14]
 8003668:	e015      	b.n	8003696 <Payload_union_converter+0x72>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+9];
 800366a:	7bbb      	ldrb	r3, [r7, #14]
 800366c:	f103 0209 	add.w	r2, r3, #9
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	4976      	ldr	r1, [pc, #472]	@ (800384c <Payload_union_converter+0x228>)
 8003674:	5c8a      	ldrb	r2, [r1, r2]
 8003676:	3310      	adds	r3, #16
 8003678:	443b      	add	r3, r7
 800367a:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=RS_rx_buffer[i+9]; // 38 39 40 41
 800367e:	7bbb      	ldrb	r3, [r7, #14]
 8003680:	f103 0209 	add.w	r2, r3, #9
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	331a      	adds	r3, #26
 8003688:	4970      	ldr	r1, [pc, #448]	@ (800384c <Payload_union_converter+0x228>)
 800368a:	5c89      	ldrb	r1, [r1, r2]
 800368c:	4a70      	ldr	r2, [pc, #448]	@ (8003850 <Payload_union_converter+0x22c>)
 800368e:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	3301      	adds	r3, #1
 8003694:	73bb      	strb	r3, [r7, #14]
 8003696:	7bbb      	ldrb	r3, [r7, #14]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d9e6      	bls.n	800366a <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4a6d      	ldr	r2, [pc, #436]	@ (8003854 <Payload_union_converter+0x230>)
 80036a0:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	737b      	strb	r3, [r7, #13]
 80036a6:	e015      	b.n	80036d4 <Payload_union_converter+0xb0>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+13];
 80036a8:	7b7b      	ldrb	r3, [r7, #13]
 80036aa:	f103 020d 	add.w	r2, r3, #13
 80036ae:	7b7b      	ldrb	r3, [r7, #13]
 80036b0:	4966      	ldr	r1, [pc, #408]	@ (800384c <Payload_union_converter+0x228>)
 80036b2:	5c8a      	ldrb	r2, [r1, r2]
 80036b4:	3310      	adds	r3, #16
 80036b6:	443b      	add	r3, r7
 80036b8:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=RS_rx_buffer[i+13]; // 42 43 44 45
 80036bc:	7b7b      	ldrb	r3, [r7, #13]
 80036be:	f103 020d 	add.w	r2, r3, #13
 80036c2:	7b7b      	ldrb	r3, [r7, #13]
 80036c4:	331e      	adds	r3, #30
 80036c6:	4961      	ldr	r1, [pc, #388]	@ (800384c <Payload_union_converter+0x228>)
 80036c8:	5c89      	ldrb	r1, [r1, r2]
 80036ca:	4a61      	ldr	r2, [pc, #388]	@ (8003850 <Payload_union_converter+0x22c>)
 80036cc:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80036ce:	7b7b      	ldrb	r3, [r7, #13]
 80036d0:	3301      	adds	r3, #1
 80036d2:	737b      	strb	r3, [r7, #13]
 80036d4:	7b7b      	ldrb	r3, [r7, #13]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d9e6      	bls.n	80036a8 <Payload_union_converter+0x84>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003854 <Payload_union_converter+0x230>)
 80036de:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	733b      	strb	r3, [r7, #12]
 80036e4:	e00c      	b.n	8003700 <Payload_union_converter+0xdc>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+17];
 80036e6:	7b3b      	ldrb	r3, [r7, #12]
 80036e8:	f103 0211 	add.w	r2, r3, #17
 80036ec:	7b3b      	ldrb	r3, [r7, #12]
 80036ee:	4957      	ldr	r1, [pc, #348]	@ (800384c <Payload_union_converter+0x228>)
 80036f0:	5c8a      	ldrb	r2, [r1, r2]
 80036f2:	3310      	adds	r3, #16
 80036f4:	443b      	add	r3, r7
 80036f6:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80036fa:	7b3b      	ldrb	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	733b      	strb	r3, [r7, #12]
 8003700:	7b3b      	ldrb	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d9ef      	bls.n	80036e6 <Payload_union_converter+0xc2>
			 }
			 Payload.altitude=f2u8.fVal;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <Payload_union_converter+0x230>)
 800370a:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 800370c:	2300      	movs	r3, #0
 800370e:	72fb      	strb	r3, [r7, #11]
 8003710:	e00c      	b.n	800372c <Payload_union_converter+0x108>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+21];
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	f103 0215 	add.w	r2, r3, #21
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	494c      	ldr	r1, [pc, #304]	@ (800384c <Payload_union_converter+0x228>)
 800371c:	5c8a      	ldrb	r2, [r1, r2]
 800371e:	3310      	adds	r3, #16
 8003720:	443b      	add	r3, r7
 8003722:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	3301      	adds	r3, #1
 800372a:	72fb      	strb	r3, [r7, #11]
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d9ef      	bls.n	8003712 <Payload_union_converter+0xee>
			 }
			 Payload.speed=f2u8.fVal;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4a47      	ldr	r2, [pc, #284]	@ (8003854 <Payload_union_converter+0x230>)
 8003736:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8003738:	2300      	movs	r3, #0
 800373a:	72bb      	strb	r3, [r7, #10]
 800373c:	e00c      	b.n	8003758 <Payload_union_converter+0x134>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+25];
 800373e:	7abb      	ldrb	r3, [r7, #10]
 8003740:	f103 0219 	add.w	r2, r3, #25
 8003744:	7abb      	ldrb	r3, [r7, #10]
 8003746:	4941      	ldr	r1, [pc, #260]	@ (800384c <Payload_union_converter+0x228>)
 8003748:	5c8a      	ldrb	r2, [r1, r2]
 800374a:	3310      	adds	r3, #16
 800374c:	443b      	add	r3, r7
 800374e:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003752:	7abb      	ldrb	r3, [r7, #10]
 8003754:	3301      	adds	r3, #1
 8003756:	72bb      	strb	r3, [r7, #10]
 8003758:	7abb      	ldrb	r3, [r7, #10]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d9ef      	bls.n	800373e <Payload_union_converter+0x11a>
			 }
			 Payload.temperature=f2u8.fVal;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	4a3c      	ldr	r2, [pc, #240]	@ (8003854 <Payload_union_converter+0x230>)
 8003762:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8003764:	2300      	movs	r3, #0
 8003766:	727b      	strb	r3, [r7, #9]
 8003768:	e00c      	b.n	8003784 <Payload_union_converter+0x160>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+29];
 800376a:	7a7b      	ldrb	r3, [r7, #9]
 800376c:	f103 021d 	add.w	r2, r3, #29
 8003770:	7a7b      	ldrb	r3, [r7, #9]
 8003772:	4936      	ldr	r1, [pc, #216]	@ (800384c <Payload_union_converter+0x228>)
 8003774:	5c8a      	ldrb	r2, [r1, r2]
 8003776:	3310      	adds	r3, #16
 8003778:	443b      	add	r3, r7
 800377a:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800377e:	7a7b      	ldrb	r3, [r7, #9]
 8003780:	3301      	adds	r3, #1
 8003782:	727b      	strb	r3, [r7, #9]
 8003784:	7a7b      	ldrb	r3, [r7, #9]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d9ef      	bls.n	800376a <Payload_union_converter+0x146>
			 }
			 Payload.accx=f2u8.fVal;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4a31      	ldr	r2, [pc, #196]	@ (8003854 <Payload_union_converter+0x230>)
 800378e:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8003790:	2300      	movs	r3, #0
 8003792:	723b      	strb	r3, [r7, #8]
 8003794:	e00c      	b.n	80037b0 <Payload_union_converter+0x18c>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+33];
 8003796:	7a3b      	ldrb	r3, [r7, #8]
 8003798:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800379c:	7a3b      	ldrb	r3, [r7, #8]
 800379e:	492b      	ldr	r1, [pc, #172]	@ (800384c <Payload_union_converter+0x228>)
 80037a0:	5c8a      	ldrb	r2, [r1, r2]
 80037a2:	3310      	adds	r3, #16
 80037a4:	443b      	add	r3, r7
 80037a6:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80037aa:	7a3b      	ldrb	r3, [r7, #8]
 80037ac:	3301      	adds	r3, #1
 80037ae:	723b      	strb	r3, [r7, #8]
 80037b0:	7a3b      	ldrb	r3, [r7, #8]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d9ef      	bls.n	8003796 <Payload_union_converter+0x172>
			 }
			 Payload.accy=f2u8.fVal;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <Payload_union_converter+0x230>)
 80037ba:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 80037bc:	2300      	movs	r3, #0
 80037be:	71fb      	strb	r3, [r7, #7]
 80037c0:	e00c      	b.n	80037dc <Payload_union_converter+0x1b8>
			 {
		    	  f2u8.array[i]=RS_rx_buffer[i+37];
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	4920      	ldr	r1, [pc, #128]	@ (800384c <Payload_union_converter+0x228>)
 80037cc:	5c8a      	ldrb	r2, [r1, r2]
 80037ce:	3310      	adds	r3, #16
 80037d0:	443b      	add	r3, r7
 80037d2:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	3301      	adds	r3, #1
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d9ef      	bls.n	80037c2 <Payload_union_converter+0x19e>
			 }
		      Payload.accz=f2u8.fVal;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <Payload_union_converter+0x230>)
 80037e6:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	71bb      	strb	r3, [r7, #6]
 80037ec:	e00c      	b.n	8003808 <Payload_union_converter+0x1e4>
			 {
				  f2u8.array[i]=RS_rx_buffer[i+41];
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80037f4:	79bb      	ldrb	r3, [r7, #6]
 80037f6:	4915      	ldr	r1, [pc, #84]	@ (800384c <Payload_union_converter+0x228>)
 80037f8:	5c8a      	ldrb	r2, [r1, r2]
 80037fa:	3310      	adds	r3, #16
 80037fc:	443b      	add	r3, r7
 80037fe:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8003802:	79bb      	ldrb	r3, [r7, #6]
 8003804:	3301      	adds	r3, #1
 8003806:	71bb      	strb	r3, [r7, #6]
 8003808:	79bb      	ldrb	r3, [r7, #6]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d9ef      	bls.n	80037ee <Payload_union_converter+0x1ca>
			 }
			  Payload.normal=f2u8.fVal;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4a10      	ldr	r2, [pc, #64]	@ (8003854 <Payload_union_converter+0x230>)
 8003812:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8003814:	2300      	movs	r3, #0
 8003816:	717b      	strb	r3, [r7, #5]
 8003818:	e00c      	b.n	8003834 <Payload_union_converter+0x210>
			 {
				  f2u8.array[i]=RS_rx_buffer[i+45];
 800381a:	797b      	ldrb	r3, [r7, #5]
 800381c:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8003820:	797b      	ldrb	r3, [r7, #5]
 8003822:	490a      	ldr	r1, [pc, #40]	@ (800384c <Payload_union_converter+0x228>)
 8003824:	5c8a      	ldrb	r2, [r1, r2]
 8003826:	3310      	adds	r3, #16
 8003828:	443b      	add	r3, r7
 800382a:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800382e:	797b      	ldrb	r3, [r7, #5]
 8003830:	3301      	adds	r3, #1
 8003832:	717b      	strb	r3, [r7, #5]
 8003834:	797b      	ldrb	r3, [r7, #5]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d9ef      	bls.n	800381a <Payload_union_converter+0x1f6>
			 }
			  Payload.pitch=f2u8.fVal;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <Payload_union_converter+0x230>)
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	200005d0 	.word	0x200005d0
 8003850:	2000061c 	.word	0x2000061c
 8003854:	20000720 	.word	0x20000720

08003858 <Enum_State_bs>:
void Enum_State_bs(void){
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

    switch(Booster.mod){
 800385c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <Enum_State_bs+0x240>)
 800385e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003862:	2b08      	cmp	r3, #8
 8003864:	f200 8112 	bhi.w	8003a8c <Enum_State_bs+0x234>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <Enum_State_bs+0x18>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003895 	.word	0x08003895
 8003874:	080038cd 	.word	0x080038cd
 8003878:	08003905 	.word	0x08003905
 800387c:	0800393d 	.word	0x0800393d
 8003880:	08003975 	.word	0x08003975
 8003884:	080039ad 	.word	0x080039ad
 8003888:	080039e5 	.word	0x080039e5
 800388c:	08003a1d 	.word	0x08003a1d
 8003890:	08003a55 	.word	0x08003a55

    case 0:
    	enum_bs[0]='O';
 8003894:	4b81      	ldr	r3, [pc, #516]	@ (8003a9c <Enum_State_bs+0x244>)
 8003896:	224f      	movs	r2, #79	@ 0x4f
 8003898:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='F';
 800389a:	4b80      	ldr	r3, [pc, #512]	@ (8003a9c <Enum_State_bs+0x244>)
 800389c:	2246      	movs	r2, #70	@ 0x46
 800389e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='F';
 80038a0:	4b7e      	ldr	r3, [pc, #504]	@ (8003a9c <Enum_State_bs+0x244>)
 80038a2:	2246      	movs	r2, #70	@ 0x46
 80038a4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='\0';
 80038a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003a9c <Enum_State_bs+0x244>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 80038ac:	4b7b      	ldr	r3, [pc, #492]	@ (8003a9c <Enum_State_bs+0x244>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 80038b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003a9c <Enum_State_bs+0x244>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 80038b8:	4b78      	ldr	r3, [pc, #480]	@ (8003a9c <Enum_State_bs+0x244>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80038be:	4b77      	ldr	r3, [pc, #476]	@ (8003a9c <Enum_State_bs+0x244>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80038c4:	4b75      	ldr	r3, [pc, #468]	@ (8003a9c <Enum_State_bs+0x244>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	721a      	strb	r2, [r3, #8]
    	break;
 80038ca:	e0df      	b.n	8003a8c <Enum_State_bs+0x234>

    case 1:
    	enum_bs[0]='R';
 80038cc:	4b73      	ldr	r3, [pc, #460]	@ (8003a9c <Enum_State_bs+0x244>)
 80038ce:	2252      	movs	r2, #82	@ 0x52
 80038d0:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='A';
 80038d2:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <Enum_State_bs+0x244>)
 80038d4:	2241      	movs	r2, #65	@ 0x41
 80038d6:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='M';
 80038d8:	4b70      	ldr	r3, [pc, #448]	@ (8003a9c <Enum_State_bs+0x244>)
 80038da:	224d      	movs	r2, #77	@ 0x4d
 80038dc:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='P';
 80038de:	4b6f      	ldr	r3, [pc, #444]	@ (8003a9c <Enum_State_bs+0x244>)
 80038e0:	2250      	movs	r2, #80	@ 0x50
 80038e2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='A';
 80038e4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a9c <Enum_State_bs+0x244>)
 80038e6:	2241      	movs	r2, #65	@ 0x41
 80038e8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 80038ea:	4b6c      	ldr	r3, [pc, #432]	@ (8003a9c <Enum_State_bs+0x244>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 80038f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a9c <Enum_State_bs+0x244>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80038f6:	4b69      	ldr	r3, [pc, #420]	@ (8003a9c <Enum_State_bs+0x244>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80038fc:	4b67      	ldr	r3, [pc, #412]	@ (8003a9c <Enum_State_bs+0x244>)
 80038fe:	2200      	movs	r2, #0
 8003900:	721a      	strb	r2, [r3, #8]
    	break;
 8003902:	e0c3      	b.n	8003a8c <Enum_State_bs+0x234>

    case 2:
    	enum_bs[0]='U';
 8003904:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <Enum_State_bs+0x244>)
 8003906:	2255      	movs	r2, #85	@ 0x55
 8003908:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='C';
 800390a:	4b64      	ldr	r3, [pc, #400]	@ (8003a9c <Enum_State_bs+0x244>)
 800390c:	2243      	movs	r2, #67	@ 0x43
 800390e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='U';
 8003910:	4b62      	ldr	r3, [pc, #392]	@ (8003a9c <Enum_State_bs+0x244>)
 8003912:	2255      	movs	r2, #85	@ 0x55
 8003914:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='S';
 8003916:	4b61      	ldr	r3, [pc, #388]	@ (8003a9c <Enum_State_bs+0x244>)
 8003918:	2253      	movs	r2, #83	@ 0x53
 800391a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800391c:	4b5f      	ldr	r3, [pc, #380]	@ (8003a9c <Enum_State_bs+0x244>)
 800391e:	2200      	movs	r2, #0
 8003920:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003922:	4b5e      	ldr	r3, [pc, #376]	@ (8003a9c <Enum_State_bs+0x244>)
 8003924:	2200      	movs	r2, #0
 8003926:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003928:	4b5c      	ldr	r3, [pc, #368]	@ (8003a9c <Enum_State_bs+0x244>)
 800392a:	2200      	movs	r2, #0
 800392c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800392e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a9c <Enum_State_bs+0x244>)
 8003930:	2200      	movs	r2, #0
 8003932:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003934:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa0 <Enum_State_bs+0x248>)
 8003936:	2200      	movs	r2, #0
 8003938:	721a      	strb	r2, [r3, #8]
    	break;
 800393a:	e0a7      	b.n	8003a8c <Enum_State_bs+0x234>
    case 3:
    	enum_bs[0]='B';
 800393c:	4b57      	ldr	r3, [pc, #348]	@ (8003a9c <Enum_State_bs+0x244>)
 800393e:	2242      	movs	r2, #66	@ 0x42
 8003940:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='U';
 8003942:	4b56      	ldr	r3, [pc, #344]	@ (8003a9c <Enum_State_bs+0x244>)
 8003944:	2255      	movs	r2, #85	@ 0x55
 8003946:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003948:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <Enum_State_bs+0x244>)
 800394a:	2252      	movs	r2, #82	@ 0x52
 800394c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='N';
 800394e:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <Enum_State_bs+0x244>)
 8003950:	224e      	movs	r2, #78	@ 0x4e
 8003952:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='O';
 8003954:	4b51      	ldr	r3, [pc, #324]	@ (8003a9c <Enum_State_bs+0x244>)
 8003956:	224f      	movs	r2, #79	@ 0x4f
 8003958:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='U';
 800395a:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <Enum_State_bs+0x244>)
 800395c:	2255      	movs	r2, #85	@ 0x55
 800395e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='T';
 8003960:	4b4e      	ldr	r3, [pc, #312]	@ (8003a9c <Enum_State_bs+0x244>)
 8003962:	2254      	movs	r2, #84	@ 0x54
 8003964:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003966:	4b4d      	ldr	r3, [pc, #308]	@ (8003a9c <Enum_State_bs+0x244>)
 8003968:	2200      	movs	r2, #0
 800396a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 800396c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <Enum_State_bs+0x244>)
 800396e:	2200      	movs	r2, #0
 8003970:	721a      	strb	r2, [r3, #8]
    	break;
 8003972:	e08b      	b.n	8003a8c <Enum_State_bs+0x234>
    case 4:
    	enum_bs[0]='A';
 8003974:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <Enum_State_bs+0x244>)
 8003976:	2241      	movs	r2, #65	@ 0x41
 8003978:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 800397a:	4b48      	ldr	r3, [pc, #288]	@ (8003a9c <Enum_State_bs+0x244>)
 800397c:	2259      	movs	r2, #89	@ 0x59
 800397e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='I';
 8003980:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <Enum_State_bs+0x244>)
 8003982:	2249      	movs	r2, #73	@ 0x49
 8003984:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='R';
 8003986:	4b45      	ldr	r3, [pc, #276]	@ (8003a9c <Enum_State_bs+0x244>)
 8003988:	2252      	movs	r2, #82	@ 0x52
 800398a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800398c:	4b43      	ldr	r3, [pc, #268]	@ (8003a9c <Enum_State_bs+0x244>)
 800398e:	2200      	movs	r2, #0
 8003990:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003992:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <Enum_State_bs+0x244>)
 8003994:	2200      	movs	r2, #0
 8003996:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003998:	4b40      	ldr	r3, [pc, #256]	@ (8003a9c <Enum_State_bs+0x244>)
 800399a:	2200      	movs	r2, #0
 800399c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800399e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a9c <Enum_State_bs+0x244>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80039a4:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <Enum_State_bs+0x244>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	721a      	strb	r2, [r3, #8]
    	break;
 80039aa:	e06f      	b.n	8003a8c <Enum_State_bs+0x234>
    case 5:
    	enum_bs[0]='A';
 80039ac:	4b3b      	ldr	r3, [pc, #236]	@ (8003a9c <Enum_State_bs+0x244>)
 80039ae:	2241      	movs	r2, #65	@ 0x41
 80039b0:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 80039b2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a9c <Enum_State_bs+0x244>)
 80039b4:	2259      	movs	r2, #89	@ 0x59
 80039b6:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 80039b8:	4b38      	ldr	r3, [pc, #224]	@ (8003a9c <Enum_State_bs+0x244>)
 80039ba:	2252      	movs	r2, #82	@ 0x52
 80039bc:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 80039be:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <Enum_State_bs+0x244>)
 80039c0:	2249      	movs	r2, #73	@ 0x49
 80039c2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80039c4:	4b35      	ldr	r3, [pc, #212]	@ (8003a9c <Enum_State_bs+0x244>)
 80039c6:	224c      	movs	r2, #76	@ 0x4c
 80039c8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80039ca:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <Enum_State_bs+0x244>)
 80039cc:	2244      	movs	r2, #68	@ 0x44
 80039ce:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80039d0:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <Enum_State_bs+0x244>)
 80039d2:	2249      	movs	r2, #73	@ 0x49
 80039d4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='?';
 80039d6:	4b31      	ldr	r3, [pc, #196]	@ (8003a9c <Enum_State_bs+0x244>)
 80039d8:	223f      	movs	r2, #63	@ 0x3f
 80039da:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80039dc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a9c <Enum_State_bs+0x244>)
 80039de:	2200      	movs	r2, #0
 80039e0:	721a      	strb	r2, [r3, #8]
    	break;
 80039e2:	e053      	b.n	8003a8c <Enum_State_bs+0x234>
    case 6:
    	enum_bs[0]='A';
 80039e4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <Enum_State_bs+0x244>)
 80039e6:	2241      	movs	r2, #65	@ 0x41
 80039e8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 80039ea:	4b2c      	ldr	r3, [pc, #176]	@ (8003a9c <Enum_State_bs+0x244>)
 80039ec:	2259      	movs	r2, #89	@ 0x59
 80039ee:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 80039f0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a9c <Enum_State_bs+0x244>)
 80039f2:	2252      	movs	r2, #82	@ 0x52
 80039f4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <Enum_State_bs+0x244>)
 80039f8:	2249      	movs	r2, #73	@ 0x49
 80039fa:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <Enum_State_bs+0x244>)
 80039fe:	224c      	movs	r2, #76	@ 0x4c
 8003a00:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 8003a02:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a04:	2244      	movs	r2, #68	@ 0x44
 8003a06:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 8003a08:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a0a:	2249      	movs	r2, #73	@ 0x49
 8003a0c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003a0e:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003a14:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	721a      	strb	r2, [r3, #8]
    	break;
 8003a1a:	e037      	b.n	8003a8c <Enum_State_bs+0x234>
    case 7:
    	enum_bs[0]='A';
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a1e:	2241      	movs	r2, #65	@ 0x41
 8003a20:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003a22:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a24:	2259      	movs	r2, #89	@ 0x59
 8003a26:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003a28:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a2a:	2252      	movs	r2, #82	@ 0x52
 8003a2c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a30:	2249      	movs	r2, #73	@ 0x49
 8003a32:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a36:	224c      	movs	r2, #76	@ 0x4c
 8003a38:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='M';
 8003a3a:	4b18      	ldr	r3, [pc, #96]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a3c:	224d      	movs	r2, #77	@ 0x4d
 8003a3e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='A';
 8003a40:	4b16      	ldr	r3, [pc, #88]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a42:	2241      	movs	r2, #65	@ 0x41
 8003a44:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='D';
 8003a46:	4b15      	ldr	r3, [pc, #84]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a48:	2244      	movs	r2, #68	@ 0x44
 8003a4a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='I';
 8003a4c:	4b13      	ldr	r3, [pc, #76]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a4e:	2249      	movs	r2, #73	@ 0x49
 8003a50:	721a      	strb	r2, [r3, #8]
    	break;
 8003a52:	e01b      	b.n	8003a8c <Enum_State_bs+0x234>
    case 8:
    	enum_bs[0]='F';
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a56:	2246      	movs	r2, #70	@ 0x46
 8003a58:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='I';
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a5c:	2249      	movs	r2, #73	@ 0x49
 8003a5e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='N';
 8003a60:	4b0e      	ldr	r3, [pc, #56]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a62:	224e      	movs	r2, #78	@ 0x4e
 8003a64:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a68:	2249      	movs	r2, #73	@ 0x49
 8003a6a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='S';
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a6e:	2253      	movs	r2, #83	@ 0x53
 8003a70:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='H';
 8003a72:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a74:	2248      	movs	r2, #72	@ 0x48
 8003a76:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003a7e:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	721a      	strb	r2, [r3, #8]
    	break;
 8003a8a:	bf00      	nop

    	 }

    NEXTION_SendString("bs10", &enum_bs);
 8003a8c:	4903      	ldr	r1, [pc, #12]	@ (8003a9c <Enum_State_bs+0x244>)
 8003a8e:	4805      	ldr	r0, [pc, #20]	@ (8003aa4 <Enum_State_bs+0x24c>)
 8003a90:	f7ff fd7e 	bl	8003590 <NEXTION_SendString>


}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000758 	.word	0x20000758
 8003a9c:	2000081c 	.word	0x2000081c
 8003aa0:	20000828 	.word	0x20000828
 8003aa4:	08015288 	.word	0x08015288

08003aa8 <Enum_State_s>:
void Enum_State_s(void){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0

    switch(Sustainer.mod){
 8003aac:	4b7f      	ldr	r3, [pc, #508]	@ (8003cac <Enum_State_s+0x204>)
 8003aae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	f200 80f4 	bhi.w	8003ca0 <Enum_State_s+0x1f8>
 8003ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac0 <Enum_State_s+0x18>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ae1 	.word	0x08003ae1
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003b51 	.word	0x08003b51
 8003acc:	08003b89 	.word	0x08003b89
 8003ad0:	08003bc1 	.word	0x08003bc1
 8003ad4:	08003bf9 	.word	0x08003bf9
 8003ad8:	08003c31 	.word	0x08003c31
 8003adc:	08003c69 	.word	0x08003c69


    case 0:
    	enum_s[0]='O';
 8003ae0:	4b73      	ldr	r3, [pc, #460]	@ (8003cb0 <Enum_State_s+0x208>)
 8003ae2:	224f      	movs	r2, #79	@ 0x4f
 8003ae4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='F';
 8003ae6:	4b72      	ldr	r3, [pc, #456]	@ (8003cb0 <Enum_State_s+0x208>)
 8003ae8:	2246      	movs	r2, #70	@ 0x46
 8003aea:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='F';
 8003aec:	4b70      	ldr	r3, [pc, #448]	@ (8003cb0 <Enum_State_s+0x208>)
 8003aee:	2246      	movs	r2, #70	@ 0x46
 8003af0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='\0';
 8003af2:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb0 <Enum_State_s+0x208>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003af8:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb0 <Enum_State_s+0x208>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003afe:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003b04:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003b0a:	4b69      	ldr	r3, [pc, #420]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b10:	4b67      	ldr	r3, [pc, #412]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	721a      	strb	r2, [r3, #8]
    	break;
 8003b16:	e0c3      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 1:
    	enum_s[0]='R';
 8003b18:	4b65      	ldr	r3, [pc, #404]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b1a:	2252      	movs	r2, #82	@ 0x52
 8003b1c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 8003b1e:	4b64      	ldr	r3, [pc, #400]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b20:	2241      	movs	r2, #65	@ 0x41
 8003b22:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='M';
 8003b24:	4b62      	ldr	r3, [pc, #392]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b26:	224d      	movs	r2, #77	@ 0x4d
 8003b28:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='P';
 8003b2a:	4b61      	ldr	r3, [pc, #388]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b2c:	2250      	movs	r2, #80	@ 0x50
 8003b2e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='A';
 8003b30:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b32:	2241      	movs	r2, #65	@ 0x41
 8003b34:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003b36:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003b42:	4b5b      	ldr	r3, [pc, #364]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b48:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	721a      	strb	r2, [r3, #8]
    	break;
 8003b4e:	e0a7      	b.n	8003ca0 <Enum_State_s+0x1f8>

    case 2:
    	enum_s[0]='U';
 8003b50:	4b57      	ldr	r3, [pc, #348]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b52:	2255      	movs	r2, #85	@ 0x55
 8003b54:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='C';
 8003b56:	4b56      	ldr	r3, [pc, #344]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b58:	2243      	movs	r2, #67	@ 0x43
 8003b5a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='U';
 8003b5c:	4b54      	ldr	r3, [pc, #336]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b5e:	2255      	movs	r2, #85	@ 0x55
 8003b60:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='S';
 8003b62:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b64:	2253      	movs	r2, #83	@ 0x53
 8003b66:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003b68:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003b6e:	4b50      	ldr	r3, [pc, #320]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003b74:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b80:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	721a      	strb	r2, [r3, #8]
    	break;
 8003b86:	e08b      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 3:
    	enum_s[0]='A';
 8003b88:	4b49      	ldr	r3, [pc, #292]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b8a:	2241      	movs	r2, #65	@ 0x41
 8003b8c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 8003b8e:	4b48      	ldr	r3, [pc, #288]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b90:	2259      	movs	r2, #89	@ 0x59
 8003b92:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003b94:	4b46      	ldr	r3, [pc, #280]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b96:	2252      	movs	r2, #82	@ 0x52
 8003b98:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003b9a:	4b45      	ldr	r3, [pc, #276]	@ (8003cb0 <Enum_State_s+0x208>)
 8003b9c:	2249      	movs	r2, #73	@ 0x49
 8003b9e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003ba0:	4b43      	ldr	r3, [pc, #268]	@ (8003cb0 <Enum_State_s+0x208>)
 8003ba2:	224c      	movs	r2, #76	@ 0x4c
 8003ba4:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003ba6:	4b42      	ldr	r3, [pc, #264]	@ (8003cb0 <Enum_State_s+0x208>)
 8003ba8:	2244      	movs	r2, #68	@ 0x44
 8003baa:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003bac:	4b40      	ldr	r3, [pc, #256]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bae:	2249      	movs	r2, #73	@ 0x49
 8003bb0:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='?';
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bb4:	223f      	movs	r2, #63	@ 0x3f
 8003bb6:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	721a      	strb	r2, [r3, #8]
    	break;
 8003bbe:	e06f      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 4:
    	enum_s[0]='A';
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bc2:	2241      	movs	r2, #65	@ 0x41
 8003bc4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bc8:	2259      	movs	r2, #89	@ 0x59
 8003bca:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003bcc:	4b38      	ldr	r3, [pc, #224]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bce:	2252      	movs	r2, #82	@ 0x52
 8003bd0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003bd2:	4b37      	ldr	r3, [pc, #220]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bd4:	2249      	movs	r2, #73	@ 0x49
 8003bd6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003bd8:	4b35      	ldr	r3, [pc, #212]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bda:	224c      	movs	r2, #76	@ 0x4c
 8003bdc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003bde:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <Enum_State_s+0x208>)
 8003be0:	2244      	movs	r2, #68	@ 0x44
 8003be2:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003be4:	4b32      	ldr	r3, [pc, #200]	@ (8003cb0 <Enum_State_s+0x208>)
 8003be6:	2249      	movs	r2, #73	@ 0x49
 8003be8:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003bea:	4b31      	ldr	r3, [pc, #196]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	721a      	strb	r2, [r3, #8]
    	break;
 8003bf6:	e053      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 5:
    	enum_s[0]='A';
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <Enum_State_s+0x208>)
 8003bfa:	2241      	movs	r2, #65	@ 0x41
 8003bfc:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='P';
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c00:	2250      	movs	r2, #80	@ 0x50
 8003c02:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='O';
 8003c04:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c06:	224f      	movs	r2, #79	@ 0x4f
 8003c08:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='G';
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c0c:	2247      	movs	r2, #71	@ 0x47
 8003c0e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='E';
 8003c10:	4b27      	ldr	r3, [pc, #156]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c12:	2245      	movs	r2, #69	@ 0x45
 8003c14:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='E';
 8003c16:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c18:	2245      	movs	r2, #69	@ 0x45
 8003c1a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003c1c:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c22:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c28:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	721a      	strb	r2, [r3, #8]
    	break;
 8003c2e:	e037      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 6:
    	enum_s[0]='M';
 8003c30:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c32:	224d      	movs	r2, #77	@ 0x4d
 8003c34:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 8003c36:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c38:	2241      	movs	r2, #65	@ 0x41
 8003c3a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='I';
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c3e:	2249      	movs	r2, #73	@ 0x49
 8003c40:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='N';
 8003c42:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c44:	224e      	movs	r2, #78	@ 0x4e
 8003c46:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003c4e:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003c54:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c5a:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	721a      	strb	r2, [r3, #8]
    	break;
 8003c66:	e01b      	b.n	8003ca0 <Enum_State_s+0x1f8>
    case 7:
    	enum_s[0]='F';
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c6a:	2246      	movs	r2, #70	@ 0x46
 8003c6c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='I';
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c70:	2249      	movs	r2, #73	@ 0x49
 8003c72:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='N';
 8003c74:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c76:	224e      	movs	r2, #78	@ 0x4e
 8003c78:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c7c:	2249      	movs	r2, #73	@ 0x49
 8003c7e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='S';
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c82:	2253      	movs	r2, #83	@ 0x53
 8003c84:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='H';
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c88:	2248      	movs	r2, #72	@ 0x48
 8003c8a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003c8c:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <Enum_State_s+0x208>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	721a      	strb	r2, [r3, #8]
    	break;
 8003c9e:	bf00      	nop



    	 }

    NEXTION_SendString("s10", &enum_s);
 8003ca0:	4903      	ldr	r1, [pc, #12]	@ (8003cb0 <Enum_State_s+0x208>)
 8003ca2:	4804      	ldr	r0, [pc, #16]	@ (8003cb4 <Enum_State_s+0x20c>)
 8003ca4:	f7ff fc74 	bl	8003590 <NEXTION_SendString>


}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000790 	.word	0x20000790
 8003cb0:	20000828 	.word	0x20000828
 8003cb4:	08015290 	.word	0x08015290

08003cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cbc:	b672      	cpsid	i
}
 8003cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <Error_Handler+0x8>

08003cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a08      	ldr	r2, [pc, #32]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_MspInit+0x4c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	@ (8003da0 <HAL_ADC_MspInit+0x8c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d12f      	bne.n	8003d96 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	4a19      	ldr	r2, [pc, #100]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b13      	ldr	r3, [pc, #76]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	4a12      	ldr	r2, [pc, #72]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_ADC_MspInit+0x90>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d72:	2303      	movs	r3, #3
 8003d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4809      	ldr	r0, [pc, #36]	@ (8003da8 <HAL_ADC_MspInit+0x94>)
 8003d82:	f001 fd85 	bl	8005890 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2012      	movs	r0, #18
 8003d8c:	f001 f947 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d90:	2012      	movs	r0, #18
 8003d92:	f001 f960 	bl	8005056 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003d96:	bf00      	nop
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40012000 	.word	0x40012000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020800 	.word	0x40020800

08003dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <HAL_I2C_MspInit+0x84>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12b      	bne.n	8003e26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dea:	23c0      	movs	r3, #192	@ 0xc0
 8003dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dee:	2312      	movs	r3, #18
 8003df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df6:	2303      	movs	r3, #3
 8003df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	480c      	ldr	r0, [pc, #48]	@ (8003e38 <HAL_I2C_MspInit+0x8c>)
 8003e06:	f001 fd43 	bl	8005890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_I2C_MspInit+0x88>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e26:	bf00      	nop
 8003e28:	3728      	adds	r7, #40	@ 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40005400 	.word	0x40005400
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40020400 	.word	0x40020400

08003e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	@ (8003ec0 <HAL_SPI_MspInit+0x84>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d12b      	bne.n	8003eb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a10      	ldr	r2, [pc, #64]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec4 <HAL_SPI_MspInit+0x88>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e96:	23e0      	movs	r3, #224	@ 0xe0
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4805      	ldr	r0, [pc, #20]	@ (8003ec8 <HAL_SPI_MspInit+0x8c>)
 8003eb2:	f001 fced 	bl	8005890 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	@ 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40013000 	.word	0x40013000
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000

08003ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <HAL_TIM_Base_MspInit+0x48>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d115      	bne.n	8003f0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <HAL_TIM_Base_MspInit+0x4c>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <HAL_TIM_Base_MspInit+0x4c>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <HAL_TIM_Base_MspInit+0x4c>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	201a      	movs	r0, #26
 8003f00:	f001 f88d 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f04:	201a      	movs	r0, #26
 8003f06:	f001 f8a6 	bl	8005056 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40014800 	.word	0x40014800
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08e      	sub	sp, #56	@ 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7a      	ldr	r2, [pc, #488]	@ (8004124 <HAL_UART_MspInit+0x208>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12c      	bne.n	8003f98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	4b79      	ldr	r3, [pc, #484]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	4a78      	ldr	r2, [pc, #480]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4e:	4b76      	ldr	r3, [pc, #472]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	4b72      	ldr	r3, [pc, #456]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	4a71      	ldr	r2, [pc, #452]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f76:	2303      	movs	r3, #3
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f86:	2308      	movs	r3, #8
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4866      	ldr	r0, [pc, #408]	@ (800412c <HAL_UART_MspInit+0x210>)
 8003f92:	f001 fc7d 	bl	8005890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f96:	e0c0      	b.n	800411a <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a64      	ldr	r2, [pc, #400]	@ (8004130 <HAL_UART_MspInit+0x214>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d134      	bne.n	800400c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	4b60      	ldr	r3, [pc, #384]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	4a5f      	ldr	r2, [pc, #380]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	4b59      	ldr	r3, [pc, #356]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a58      	ldr	r2, [pc, #352]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b56      	ldr	r3, [pc, #344]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8003fda:	230c      	movs	r3, #12
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fea:	2307      	movs	r3, #7
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	484d      	ldr	r0, [pc, #308]	@ (800412c <HAL_UART_MspInit+0x210>)
 8003ff6:	f001 fc4b 	bl	8005890 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	2026      	movs	r0, #38	@ 0x26
 8004000:	f001 f80d 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004004:	2026      	movs	r0, #38	@ 0x26
 8004006:	f001 f826 	bl	8005056 <HAL_NVIC_EnableIRQ>
}
 800400a:	e086      	b.n	800411a <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a48      	ldr	r2, [pc, #288]	@ (8004134 <HAL_UART_MspInit+0x218>)
 8004012:	4293      	cmp	r3, r2
 8004014:	f040 8081 	bne.w	800411a <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	4b42      	ldr	r3, [pc, #264]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	4a41      	ldr	r2, [pc, #260]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8004022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004026:	6413      	str	r3, [r2, #64]	@ 0x40
 8004028:	4b3f      	ldr	r3, [pc, #252]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	4a3a      	ldr	r2, [pc, #232]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6313      	str	r3, [r2, #48]	@ 0x30
 8004044:	4b38      	ldr	r3, [pc, #224]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004060:	4b31      	ldr	r3, [pc, #196]	@ (8004128 <HAL_UART_MspInit+0x20c>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 800406c:	2320      	movs	r3, #32
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800407c:	2307      	movs	r3, #7
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8004080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004084:	4619      	mov	r1, r3
 8004086:	482c      	ldr	r0, [pc, #176]	@ (8004138 <HAL_UART_MspInit+0x21c>)
 8004088:	f001 fc02 	bl	8005890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 800408c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800409e:	2307      	movs	r3, #7
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 80040a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a6:	4619      	mov	r1, r3
 80040a8:	4824      	ldr	r0, [pc, #144]	@ (800413c <HAL_UART_MspInit+0x220>)
 80040aa:	f001 fbf1 	bl	8005890 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040ae:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <HAL_UART_MspInit+0x228>)
 80040b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80040b4:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040bc:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040e2:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040ee:	4814      	ldr	r0, [pc, #80]	@ (8004140 <HAL_UART_MspInit+0x224>)
 80040f0:	f000 ffcc 	bl	800508c <HAL_DMA_Init>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 80040fa:	f7ff fddd 	bl	8003cb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a0f      	ldr	r2, [pc, #60]	@ (8004140 <HAL_UART_MspInit+0x224>)
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
 8004104:	4a0e      	ldr	r2, [pc, #56]	@ (8004140 <HAL_UART_MspInit+0x224>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	2027      	movs	r0, #39	@ 0x27
 8004110:	f000 ff85 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004114:	2027      	movs	r0, #39	@ 0x27
 8004116:	f000 ff9e 	bl	8005056 <HAL_NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3738      	adds	r7, #56	@ 0x38
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40004c00 	.word	0x40004c00
 8004128:	40023800 	.word	0x40023800
 800412c:	40020000 	.word	0x40020000
 8004130:	40004400 	.word	0x40004400
 8004134:	40004800 	.word	0x40004800
 8004138:	40020800 	.word	0x40020800
 800413c:	40020400 	.word	0x40020400
 8004140:	20000524 	.word	0x20000524
 8004144:	40026028 	.word	0x40026028

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <NMI_Handler+0x4>

08004150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <HardFault_Handler+0x4>

08004158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <MemManage_Handler+0x4>

08004160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <BusFault_Handler+0x4>

08004168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <UsageFault_Handler+0x4>

08004170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800419e:	f000 f993 	bl	80044c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041ac:	4802      	ldr	r0, [pc, #8]	@ (80041b8 <DMA1_Stream1_IRQHandler+0x10>)
 80041ae:	f001 f905 	bl	80053bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000524 	.word	0x20000524

080041bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041c0:	4802      	ldr	r0, [pc, #8]	@ (80041cc <ADC_IRQHandler+0x10>)
 80041c2:	f000 fae7 	bl	8004794 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2000031c 	.word	0x2000031c

080041d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80041d4:	4802      	ldr	r0, [pc, #8]	@ (80041e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80041d6:	f004 fb71 	bl	80088bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000410 	.word	0x20000410

080041e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041e8:	4802      	ldr	r0, [pc, #8]	@ (80041f4 <USART2_IRQHandler+0x10>)
 80041ea:	f004 fe8b 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	2000049c 	.word	0x2000049c

080041f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041fc:	4802      	ldr	r0, [pc, #8]	@ (8004208 <USART3_IRQHandler+0x10>)
 80041fe:	f004 fe81 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200004e0 	.word	0x200004e0

0800420c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004210:	4802      	ldr	r0, [pc, #8]	@ (800421c <OTG_FS_IRQHandler+0x10>)
 8004212:	f001 ff86 	bl	8006122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20001eb8 	.word	0x20001eb8

08004220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return 1;
 8004224:	2301      	movs	r3, #1
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <_kill>:

int _kill(int pid, int sig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800423a:	f00c f8f1 	bl	8010420 <__errno>
 800423e:	4603      	mov	r3, r0
 8004240:	2216      	movs	r2, #22
 8004242:	601a      	str	r2, [r3, #0]
  return -1;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_exit>:

void _exit (int status)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ffe7 	bl	8004230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004262:	bf00      	nop
 8004264:	e7fd      	b.n	8004262 <_exit+0x12>

08004266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e00a      	b.n	800428e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004278:	f3af 8000 	nop.w
 800427c:	4601      	mov	r1, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	60ba      	str	r2, [r7, #8]
 8004284:	b2ca      	uxtb	r2, r1
 8004286:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	dbf0      	blt.n	8004278 <_read+0x12>
  }

  return len;
 8004296:	687b      	ldr	r3, [r7, #4]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e009      	b.n	80042c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	60ba      	str	r2, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3301      	adds	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	dbf1      	blt.n	80042b2 <_write+0x12>
  }
  return len;
 80042ce:	687b      	ldr	r3, [r7, #4]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_close>:

int _close(int file)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004300:	605a      	str	r2, [r3, #4]
  return 0;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_isatty>:

int _isatty(int file)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <_sbrk+0x5c>)
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <_sbrk+0x60>)
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004354:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <_sbrk+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <_sbrk+0x64>)
 800435e:	4a12      	ldr	r2, [pc, #72]	@ (80043a8 <_sbrk+0x68>)
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <_sbrk+0x64>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d207      	bcs.n	8004380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004370:	f00c f856 	bl	8010420 <__errno>
 8004374:	4603      	mov	r3, r0
 8004376:	220c      	movs	r2, #12
 8004378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e009      	b.n	8004394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004380:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <_sbrk+0x64>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <_sbrk+0x64>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <_sbrk+0x64>)
 8004390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20020000 	.word	0x20020000
 80043a0:	00000400 	.word	0x00000400
 80043a4:	200009bc 	.word	0x200009bc
 80043a8:	20002730 	.word	0x20002730

080043ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <SystemInit+0x20>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	4a05      	ldr	r2, [pc, #20]	@ (80043cc <SystemInit+0x20>)
 80043b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043d4:	480d      	ldr	r0, [pc, #52]	@ (800440c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043d6:	490e      	ldr	r1, [pc, #56]	@ (8004410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043dc:	e002      	b.n	80043e4 <LoopCopyDataInit>

080043de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e2:	3304      	adds	r3, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e8:	d3f9      	bcc.n	80043de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043ec:	4c0b      	ldr	r4, [pc, #44]	@ (800441c <LoopFillZerobss+0x26>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f0:	e001      	b.n	80043f6 <LoopFillZerobss>

080043f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f4:	3204      	adds	r2, #4

080043f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f8:	d3fb      	bcc.n	80043f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043fa:	f7ff ffd7 	bl	80043ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043fe:	f00c f815 	bl	801042c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004402:	f7fd fc05 	bl	8001c10 <main>
  bx  lr    
 8004406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8004414:	080159b0 	.word	0x080159b0
  ldr r2, =_sbss
 8004418:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 800441c:	20002730 	.word	0x20002730

08004420 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <CAN1_RX0_IRQHandler>
	...

08004424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004428:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_Init+0x40>)
 800442e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <HAL_Init+0x40>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800443e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_Init+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_Init+0x40>)
 8004446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800444c:	2003      	movs	r0, #3
 800444e:	f000 fddb 	bl	8005008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004452:	200f      	movs	r0, #15
 8004454:	f000 f808 	bl	8004468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004458:	f7ff fc34 	bl	8003cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023c00 	.word	0x40023c00

08004468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_InitTick+0x54>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_InitTick+0x58>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800447e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdf3 	bl	8005072 <HAL_SYSTICK_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00e      	b.n	80044b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d80a      	bhi.n	80044b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800449c:	2200      	movs	r2, #0
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f000 fdbb 	bl	800501e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a8:	4a06      	ldr	r2, [pc, #24]	@ (80044c4 <HAL_InitTick+0x5c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000004 	.word	0x20000004
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	20000008 	.word	0x20000008

080044c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_IncTick+0x20>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_IncTick+0x24>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <HAL_IncTick+0x24>)
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	2000000c 	.word	0x2000000c
 80044ec:	200009c0 	.word	0x200009c0

080044f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return uwTick;
 80044f4:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <HAL_GetTick+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	200009c0 	.word	0x200009c0

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff ffee 	bl	80044f0 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d005      	beq.n	800452e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_Delay+0x44>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800452e:	bf00      	nop
 8004530:	f7ff ffde 	bl	80044f0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d8f7      	bhi.n	8004530 <HAL_Delay+0x28>
  {
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c

08004550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e033      	b.n	80045ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fbd0 	bl	8003d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004596:	f023 0302 	bic.w	r3, r3, #2
 800459a:	f043 0202 	orr.w	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fb5a 	bl	8004c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80045be:	e001      	b.n	80045c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_Start_IT+0x1a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0bd      	b.n	800476e <HAL_ADC_Start_IT+0x196>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d018      	beq.n	800463a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004618:	4b58      	ldr	r3, [pc, #352]	@ (800477c <HAL_ADC_Start_IT+0x1a4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a58      	ldr	r2, [pc, #352]	@ (8004780 <HAL_ADC_Start_IT+0x1a8>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	0c9a      	lsrs	r2, r3, #18
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800462c:	e002      	b.n	8004634 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f9      	bne.n	800462e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 8085 	bne.w	8004754 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004674:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004688:	d106      	bne.n	8004698 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	f023 0206 	bic.w	r2, r3, #6
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
 8004696:	e002      	b.n	800469e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046a6:	4b37      	ldr	r3, [pc, #220]	@ (8004784 <HAL_ADC_Start_IT+0x1ac>)
 80046a8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046b2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d12a      	bne.n	800472a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <HAL_ADC_Start_IT+0x1b0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d015      	beq.n	800470a <HAL_ADC_Start_IT+0x132>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <HAL_ADC_Start_IT+0x1b4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d105      	bne.n	80046f4 <HAL_ADC_Start_IT+0x11c>
 80046e8:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <HAL_ADC_Start_IT+0x1ac>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <HAL_ADC_Start_IT+0x1b8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d136      	bne.n	800476c <HAL_ADC_Start_IT+0x194>
 80046fe:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_ADC_Start_IT+0x1ac>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d130      	bne.n	800476c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d129      	bne.n	800476c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	e020      	b.n	800476c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a16      	ldr	r2, [pc, #88]	@ (8004788 <HAL_ADC_Start_IT+0x1b0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d11b      	bne.n	800476c <HAL_ADC_Start_IT+0x194>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d114      	bne.n	800476c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e00b      	b.n	800476c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000004 	.word	0x20000004
 8004780:	431bde83 	.word	0x431bde83
 8004784:	40012300 	.word	0x40012300
 8004788:	40012000 	.word	0x40012000
 800478c:	40012100 	.word	0x40012100
 8004790:	40012200 	.word	0x40012200

08004794 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d049      	beq.n	800485e <HAL_ADC_IRQHandler+0xca>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d046      	beq.n	800485e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d12b      	bne.n	800484e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d127      	bne.n	800484e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004816:	2b00      	cmp	r3, #0
 8004818:	d119      	bne.n	800484e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0220 	bic.w	r2, r2, #32
 8004828:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d105      	bne.n	800484e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd f9be 	bl	8001bd0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0212 	mvn.w	r2, #18
 800485c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d057      	beq.n	8004924 <HAL_ADC_IRQHandler+0x190>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d054      	beq.n	8004924 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d139      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12b      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d124      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11d      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d119      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f043 0201 	orr.w	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa9d 	bl	8004e54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 020c 	mvn.w	r2, #12
 8004922:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d017      	beq.n	800496a <HAL_ADC_IRQHandler+0x1d6>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d014      	beq.n	800496a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10d      	bne.n	800496a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f837 	bl	80049ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004978:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_ADC_IRQHandler+0x218>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d012      	beq.n	80049ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	f043 0202 	orr.w	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f06f 0220 	mvn.w	r2, #32
 800499a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f820 	bl	80049e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0220 	mvn.w	r2, #32
 80049aa:	601a      	str	r2, [r3, #0]
  }
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e113      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x244>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	d925      	bls.n	8004a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68d9      	ldr	r1, [r3, #12]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	3b1e      	subs	r3, #30
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43da      	mvns	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	400a      	ands	r2, r1
 8004a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68d9      	ldr	r1, [r3, #12]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4403      	add	r3, r0
 8004a62:	3b1e      	subs	r3, #30
 8004a64:	409a      	lsls	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	e022      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6919      	ldr	r1, [r3, #16]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	2207      	movs	r2, #7
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	400a      	ands	r2, r1
 8004a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6919      	ldr	r1, [r3, #16]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4403      	add	r3, r0
 8004aac:	409a      	lsls	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d824      	bhi.n	8004b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	3b05      	subs	r3, #5
 8004ad0:	221f      	movs	r2, #31
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	400a      	ands	r2, r1
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4618      	mov	r0, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	3b05      	subs	r3, #5
 8004afa:	fa00 f203 	lsl.w	r2, r0, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b06:	e04c      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d824      	bhi.n	8004b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	3b23      	subs	r3, #35	@ 0x23
 8004b22:	221f      	movs	r2, #31
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	400a      	ands	r2, r1
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	3b23      	subs	r3, #35	@ 0x23
 8004b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b58:	e023      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	3b41      	subs	r3, #65	@ 0x41
 8004b6c:	221f      	movs	r2, #31
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43da      	mvns	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	400a      	ands	r2, r1
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	3b41      	subs	r3, #65	@ 0x41
 8004b96:	fa00 f203 	lsl.w	r2, r0, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ba2:	4b29      	ldr	r3, [pc, #164]	@ (8004c48 <HAL_ADC_ConfigChannel+0x250>)
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a28      	ldr	r2, [pc, #160]	@ (8004c4c <HAL_ADC_ConfigChannel+0x254>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10f      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b12      	cmp	r3, #18
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <HAL_ADC_ConfigChannel+0x254>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d12b      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x23a>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <HAL_ADC_ConfigChannel+0x258>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <HAL_ADC_ConfigChannel+0x1f4>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b11      	cmp	r3, #17
 8004bea:	d122      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a11      	ldr	r2, [pc, #68]	@ (8004c50 <HAL_ADC_ConfigChannel+0x258>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_ADC_ConfigChannel+0x25c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a11      	ldr	r2, [pc, #68]	@ (8004c58 <HAL_ADC_ConfigChannel+0x260>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	0c9a      	lsrs	r2, r3, #18
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c24:	e002      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f9      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40012300 	.word	0x40012300
 8004c4c:	40012000 	.word	0x40012000
 8004c50:	10000012 	.word	0x10000012
 8004c54:	20000004 	.word	0x20000004
 8004c58:	431bde83 	.word	0x431bde83

08004c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c64:	4b79      	ldr	r3, [pc, #484]	@ (8004e4c <ADC_Init+0x1f0>)
 8004c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	4a58      	ldr	r2, [pc, #352]	@ (8004e50 <ADC_Init+0x1f4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6899      	ldr	r1, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	e00f      	b.n	8004d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0202 	bic.w	r2, r2, #2
 8004d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7e1b      	ldrb	r3, [r3, #24]
 8004d74:	005a      	lsls	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	3b01      	subs	r3, #1
 8004db4:	035a      	lsls	r2, r3, #13
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e007      	b.n	8004dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	051a      	lsls	r2, r3, #20
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6899      	ldr	r1, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e12:	025a      	lsls	r2, r3, #9
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	029a      	lsls	r2, r3, #10
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40012300 	.word	0x40012300
 8004e50:	0f000001 	.word	0x0f000001

08004e54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e78:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <__NVIC_SetPriorityGrouping+0x44>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e84:	4013      	ands	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9a:	4a04      	ldr	r2, [pc, #16]	@ (8004eac <__NVIC_SetPriorityGrouping+0x44>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	60d3      	str	r3, [r2, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb4:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	f003 0307 	and.w	r3, r3, #7
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db0b      	blt.n	8004ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	4907      	ldr	r1, [pc, #28]	@ (8004f04 <__NVIC_EnableIRQ+0x38>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e100 	.word	0xe000e100

08004f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db0a      	blt.n	8004f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	490c      	ldr	r1, [pc, #48]	@ (8004f54 <__NVIC_SetPriority+0x4c>)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f30:	e00a      	b.n	8004f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4908      	ldr	r1, [pc, #32]	@ (8004f58 <__NVIC_SetPriority+0x50>)
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	440b      	add	r3, r1
 8004f46:	761a      	strb	r2, [r3, #24]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	@ 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f1c3 0307 	rsb	r3, r3, #7
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf28      	it	cs
 8004f7a:	2304      	movcs	r3, #4
 8004f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	d902      	bls.n	8004f8c <NVIC_EncodePriority+0x30>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3b03      	subs	r3, #3
 8004f8a:	e000      	b.n	8004f8e <NVIC_EncodePriority+0x32>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	43d9      	mvns	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb4:	4313      	orrs	r3, r2
         );
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3724      	adds	r7, #36	@ 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fd4:	d301      	bcc.n	8004fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e00f      	b.n	8004ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fda:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <SysTick_Config+0x40>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe2:	210f      	movs	r1, #15
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	f7ff ff8e 	bl	8004f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <SysTick_Config+0x40>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff2:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <SysTick_Config+0x40>)
 8004ff4:	2207      	movs	r2, #7
 8004ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	e000e010 	.word	0xe000e010

08005008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff29 	bl	8004e68 <__NVIC_SetPriorityGrouping>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005030:	f7ff ff3e 	bl	8004eb0 <__NVIC_GetPriorityGrouping>
 8005034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7ff ff8e 	bl	8004f5c <NVIC_EncodePriority>
 8005040:	4602      	mov	r2, r0
 8005042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff5d 	bl	8004f08 <__NVIC_SetPriority>
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	4603      	mov	r3, r0
 800505e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff ff31 	bl	8004ecc <__NVIC_EnableIRQ>
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ffa2 	bl	8004fc4 <SysTick_Config>
 8005080:	4603      	mov	r3, r0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005098:	f7ff fa2a 	bl	80044f0 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e099      	b.n	80051dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c8:	e00f      	b.n	80050ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ca:	f7ff fa11 	bl	80044f0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d908      	bls.n	80050ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2203      	movs	r2, #3
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e078      	b.n	80051dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e8      	bne.n	80050ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4b38      	ldr	r3, [pc, #224]	@ (80051e4 <HAL_DMA_Init+0x158>)
 8005104:	4013      	ands	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005116:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800512e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	2b04      	cmp	r3, #4
 8005142:	d107      	bne.n	8005154 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	4313      	orrs	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	2b04      	cmp	r3, #4
 800517c:	d117      	bne.n	80051ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00e      	beq.n	80051ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb01 	bl	8005798 <DMA_CheckFifoParam>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051aa:	2301      	movs	r3, #1
 80051ac:	e016      	b.n	80051dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fab8 	bl	800572c <DMA_CalcBaseAndBitshift>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	223f      	movs	r2, #63	@ 0x3f
 80051c6:	409a      	lsls	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	f010803f 	.word	0xf010803f

080051e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_DMA_Start_IT+0x26>
 800520a:	2302      	movs	r3, #2
 800520c:	e040      	b.n	8005290 <HAL_DMA_Start_IT+0xa8>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d12f      	bne.n	8005282 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa4a 	bl	80056d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	223f      	movs	r2, #63	@ 0x3f
 8005242:	409a      	lsls	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0216 	orr.w	r2, r2, #22
 8005256:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e005      	b.n	800528e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052a6:	f7ff f923 	bl	80044f0 <HAL_GetTick>
 80052aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d008      	beq.n	80052ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2280      	movs	r2, #128	@ 0x80
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e052      	b.n	8005370 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0216 	bic.w	r2, r2, #22
 80052d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_DMA_Abort+0x62>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0208 	bic.w	r2, r2, #8
 8005308:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800531a:	e013      	b.n	8005344 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800531c:	f7ff f8e8 	bl	80044f0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d90c      	bls.n	8005344 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2203      	movs	r2, #3
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e015      	b.n	8005370 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e4      	bne.n	800531c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	223f      	movs	r2, #63	@ 0x3f
 8005358:	409a      	lsls	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2280      	movs	r2, #128	@ 0x80
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e00c      	b.n	80053b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2205      	movs	r2, #5
 800539a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005604 <HAL_DMA_IRQHandler+0x248>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005608 <HAL_DMA_IRQHandler+0x24c>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e6:	2208      	movs	r2, #8
 80053e8:	409a      	lsls	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005414:	2208      	movs	r2, #8
 8005416:	409a      	lsls	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542c:	2201      	movs	r2, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005462:	2204      	movs	r2, #4
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005480:	2204      	movs	r2, #4
 8005482:	409a      	lsls	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f043 0204 	orr.w	r2, r3, #4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	2210      	movs	r2, #16
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d043      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b6:	2210      	movs	r2, #16
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d018      	beq.n	80054fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
 80054ea:	e01f      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
 80054fc:	e016      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0208 	bic.w	r2, r2, #8
 800551a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005530:	2220      	movs	r2, #32
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808f 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8087 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	2220      	movs	r2, #32
 8005554:	409a      	lsls	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b05      	cmp	r3, #5
 8005564:	d136      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0216 	bic.w	r2, r2, #22
 8005574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_DMA_IRQHandler+0x1da>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0208 	bic.w	r2, r2, #8
 80055a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055aa:	223f      	movs	r2, #63	@ 0x3f
 80055ac:	409a      	lsls	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d07e      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
        }
        return;
 80055d2:	e079      	b.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01d      	beq.n	800561e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d031      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e02c      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
 8005602:	bf00      	nop
 8005604:	20000004 	.word	0x20000004
 8005608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
 800561c:	e01e      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0210 	bic.w	r2, r2, #16
 800563a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	d032      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2205      	movs	r2, #5
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3301      	adds	r3, #1
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d307      	bcc.n	80056a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f2      	bne.n	8005688 <HAL_DMA_IRQHandler+0x2cc>
 80056a2:	e000      	b.n	80056a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80056c8:	bf00      	nop
    }
  }
}
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b40      	cmp	r3, #64	@ 0x40
 80056fc:	d108      	bne.n	8005710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800570e:	e007      	b.n	8005720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	3b10      	subs	r3, #16
 800573c:	4a14      	ldr	r2, [pc, #80]	@ (8005790 <DMA_CalcBaseAndBitshift+0x64>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <DMA_CalcBaseAndBitshift+0x68>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d909      	bls.n	800576e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	659a      	str	r2, [r3, #88]	@ 0x58
 800576c:	e007      	b.n	800577e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	aaaaaaab 	.word	0xaaaaaaab
 8005794:	080152f4 	.word	0x080152f4

08005798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11f      	bne.n	80057f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d856      	bhi.n	8005866 <DMA_CheckFifoParam+0xce>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <DMA_CheckFifoParam+0x28>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	08005867 	.word	0x08005867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d046      	beq.n	800586a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e0:	e043      	b.n	800586a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ea:	d140      	bne.n	800586e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f0:	e03d      	b.n	800586e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fa:	d121      	bne.n	8005840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d837      	bhi.n	8005872 <DMA_CheckFifoParam+0xda>
 8005802:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <DMA_CheckFifoParam+0x70>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	0800581f 	.word	0x0800581f
 8005810:	08005819 	.word	0x08005819
 8005814:	08005831 	.word	0x08005831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e030      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d025      	beq.n	8005876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582e:	e022      	b.n	8005876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005838:	d11f      	bne.n	800587a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800583e:	e01c      	b.n	800587a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d903      	bls.n	800584e <DMA_CheckFifoParam+0xb6>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d003      	beq.n	8005854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800584c:	e018      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      break;
 8005852:	e015      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	e00b      	b.n	800587e <DMA_CheckFifoParam+0xe6>
      break;
 8005866:	bf00      	nop
 8005868:	e00a      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800586a:	bf00      	nop
 800586c:	e008      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800586e:	bf00      	nop
 8005870:	e006      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 8005872:	bf00      	nop
 8005874:	e004      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;   
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
    }
  } 
  
  return status; 
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop

08005890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	@ 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	e165      	b.n	8005b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058ac:	2201      	movs	r2, #1
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	f040 8154 	bne.w	8005b72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d005      	beq.n	80058e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d130      	bne.n	8005944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	2203      	movs	r2, #3
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005918:	2201      	movs	r2, #1
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	091b      	lsrs	r3, r3, #4
 800592e:	f003 0201 	and.w	r2, r3, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	2b03      	cmp	r3, #3
 800594e:	d017      	beq.n	8005980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2203      	movs	r2, #3
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4313      	orrs	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d123      	bne.n	80059d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	08da      	lsrs	r2, r3, #3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3208      	adds	r2, #8
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	220f      	movs	r2, #15
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	08da      	lsrs	r2, r3, #3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3208      	adds	r2, #8
 80059ce:	69b9      	ldr	r1, [r7, #24]
 80059d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 0203 	and.w	r2, r3, #3
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80ae 	beq.w	8005b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005b90 <HAL_GPIO_Init+0x300>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8005b90 <HAL_GPIO_Init+0x300>)
 8005a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a26:	4b5a      	ldr	r3, [pc, #360]	@ (8005b90 <HAL_GPIO_Init+0x300>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a32:	4a58      	ldr	r2, [pc, #352]	@ (8005b94 <HAL_GPIO_Init+0x304>)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	3302      	adds	r3, #2
 8005a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a4f      	ldr	r2, [pc, #316]	@ (8005b98 <HAL_GPIO_Init+0x308>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d025      	beq.n	8005aaa <HAL_GPIO_Init+0x21a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a4e      	ldr	r2, [pc, #312]	@ (8005b9c <HAL_GPIO_Init+0x30c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01f      	beq.n	8005aa6 <HAL_GPIO_Init+0x216>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a4d      	ldr	r2, [pc, #308]	@ (8005ba0 <HAL_GPIO_Init+0x310>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d019      	beq.n	8005aa2 <HAL_GPIO_Init+0x212>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a4c      	ldr	r2, [pc, #304]	@ (8005ba4 <HAL_GPIO_Init+0x314>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_GPIO_Init+0x20e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a4b      	ldr	r2, [pc, #300]	@ (8005ba8 <HAL_GPIO_Init+0x318>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00d      	beq.n	8005a9a <HAL_GPIO_Init+0x20a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a4a      	ldr	r2, [pc, #296]	@ (8005bac <HAL_GPIO_Init+0x31c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <HAL_GPIO_Init+0x206>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a49      	ldr	r2, [pc, #292]	@ (8005bb0 <HAL_GPIO_Init+0x320>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d101      	bne.n	8005a92 <HAL_GPIO_Init+0x202>
 8005a8e:	2306      	movs	r3, #6
 8005a90:	e00c      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005a92:	2307      	movs	r3, #7
 8005a94:	e00a      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005a96:	2305      	movs	r3, #5
 8005a98:	e008      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	e006      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e004      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e002      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_GPIO_Init+0x21c>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	f002 0203 	and.w	r2, r2, #3
 8005ab2:	0092      	lsls	r2, r2, #2
 8005ab4:	4093      	lsls	r3, r2
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005abc:	4935      	ldr	r1, [pc, #212]	@ (8005b94 <HAL_GPIO_Init+0x304>)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aca:	4b3a      	ldr	r3, [pc, #232]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aee:	4a31      	ldr	r2, [pc, #196]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005af4:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4013      	ands	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b18:	4a26      	ldr	r2, [pc, #152]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b1e:	4b25      	ldr	r3, [pc, #148]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b48:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b6c:	4a11      	ldr	r2, [pc, #68]	@ (8005bb4 <HAL_GPIO_Init+0x324>)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	f67f ae96 	bls.w	80058ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	3724      	adds	r7, #36	@ 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40020000 	.word	0x40020000
 8005b9c:	40020400 	.word	0x40020400
 8005ba0:	40020800 	.word	0x40020800
 8005ba4:	40020c00 	.word	0x40020c00
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40021400 	.word	0x40021400
 8005bb0:	40021800 	.word	0x40021800
 8005bb4:	40013c00 	.word	0x40013c00

08005bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc8:	787b      	ldrb	r3, [r7, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005bd4:	e003      	b.n	8005bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	041a      	lsls	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e12b      	b.n	8005e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fe f8ca 	bl	8003dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	@ 0x24
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c50:	f001 fccc 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 8005c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4a81      	ldr	r2, [pc, #516]	@ (8005e60 <HAL_I2C_Init+0x274>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d807      	bhi.n	8005c70 <HAL_I2C_Init+0x84>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a80      	ldr	r2, [pc, #512]	@ (8005e64 <HAL_I2C_Init+0x278>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf94      	ite	ls
 8005c68:	2301      	movls	r3, #1
 8005c6a:	2300      	movhi	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e006      	b.n	8005c7e <HAL_I2C_Init+0x92>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a7d      	ldr	r2, [pc, #500]	@ (8005e68 <HAL_I2C_Init+0x27c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf94      	ite	ls
 8005c78:	2301      	movls	r3, #1
 8005c7a:	2300      	movhi	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e0e7      	b.n	8005e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a78      	ldr	r2, [pc, #480]	@ (8005e6c <HAL_I2C_Init+0x280>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	0c9b      	lsrs	r3, r3, #18
 8005c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e60 <HAL_I2C_Init+0x274>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d802      	bhi.n	8005cc0 <HAL_I2C_Init+0xd4>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	e009      	b.n	8005cd4 <HAL_I2C_Init+0xe8>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	4a69      	ldr	r2, [pc, #420]	@ (8005e70 <HAL_I2C_Init+0x284>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ce6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	495c      	ldr	r1, [pc, #368]	@ (8005e60 <HAL_I2C_Init+0x274>)
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	d819      	bhi.n	8005d28 <HAL_I2C_Init+0x13c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1e59      	subs	r1, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d08:	400b      	ands	r3, r1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_I2C_Init+0x138>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1e59      	subs	r1, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	e051      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e04f      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d111      	bne.n	8005d54 <HAL_I2C_Init+0x168>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1e58      	subs	r0, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	440b      	add	r3, r1
 8005d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d42:	3301      	adds	r3, #1
 8005d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e012      	b.n	8005d7a <HAL_I2C_Init+0x18e>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1e58      	subs	r0, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	0099      	lsls	r1, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_Init+0x196>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e022      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10e      	bne.n	8005da8 <HAL_I2C_Init+0x1bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1e58      	subs	r0, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	440b      	add	r3, r1
 8005d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da6:	e00f      	b.n	8005dc8 <HAL_I2C_Init+0x1dc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1e58      	subs	r0, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	0099      	lsls	r1, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	6809      	ldr	r1, [r1, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005df6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6911      	ldr	r1, [r2, #16]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	4311      	orrs	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	000186a0 	.word	0x000186a0
 8005e64:	001e847f 	.word	0x001e847f
 8005e68:	003d08ff 	.word	0x003d08ff
 8005e6c:	431bde83 	.word	0x431bde83
 8005e70:	10624dd3 	.word	0x10624dd3

08005e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e76:	b08f      	sub	sp, #60	@ 0x3c
 8005e78:	af0a      	add	r7, sp, #40	@ 0x28
 8005e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e116      	b.n	80060b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f008 f875 	bl	800df90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f004 fa62 	bl	800a38e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	687e      	ldr	r6, [r7, #4]
 8005ed2:	466d      	mov	r5, sp
 8005ed4:	f106 0410 	add.w	r4, r6, #16
 8005ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ee8:	1d33      	adds	r3, r6, #4
 8005eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f004 f939 	bl	800a164 <USB_CoreInit>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0d7      	b.n	80060b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 fa50 	bl	800a3b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e04a      	b.n	8005fac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	333d      	adds	r3, #61	@ 0x3d
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	333c      	adds	r3, #60	@ 0x3c
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	b298      	uxth	r0, r3
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3344      	adds	r3, #68	@ 0x44
 8005f52:	4602      	mov	r2, r0
 8005f54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	3340      	adds	r3, #64	@ 0x40
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	3348      	adds	r3, #72	@ 0x48
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	334c      	adds	r3, #76	@ 0x4c
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3354      	adds	r3, #84	@ 0x54
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
 8005fac:	7bfa      	ldrb	r2, [r7, #15]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3af      	bcc.n	8005f16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	e044      	b.n	8006046 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fbc:	7bfa      	ldrb	r2, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006014:	7bfa      	ldrb	r2, [r7, #15]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3301      	adds	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
 8006046:	7bfa      	ldrb	r2, [r7, #15]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d3b5      	bcc.n	8005fbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	687e      	ldr	r6, [r7, #4]
 8006058:	466d      	mov	r5, sp
 800605a:	f106 0410 	add.w	r4, r6, #16
 800605e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800606a:	e885 0003 	stmia.w	r5, {r0, r1}
 800606e:	1d33      	adds	r3, r6, #4
 8006070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006072:	6838      	ldr	r0, [r7, #0]
 8006074:	f004 f9e8 	bl	800a448 <USB_DevInit>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e014      	b.n	80060b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d102      	bne.n	80060a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 f98c 	bl	80073c0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f005 fb2a 	bl	800b706 <USB_DevDisconnect>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_PCD_Start+0x1c>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e020      	b.n	800611a <HAL_PCD_Start+0x5e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d109      	bne.n	80060fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d005      	beq.n	80060fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f004 f933 	bl	800a36c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f005 fada 	bl	800b6c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006122:	b590      	push	{r4, r7, lr}
 8006124:	b08d      	sub	sp, #52	@ 0x34
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f005 fb98 	bl	800b86e <USB_GetMode>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 84b7 	bne.w	8006ab4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f005 fafc 	bl	800b748 <USB_ReadInterrupts>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 84ad 	beq.w	8006ab2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f005 fae9 	bl	800b748 <USB_ReadInterrupts>
 8006176:	4603      	mov	r3, r0
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d107      	bne.n	8006190 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f002 0202 	and.w	r2, r2, #2
 800618e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f005 fad7 	bl	800b748 <USB_ReadInterrupts>
 800619a:	4603      	mov	r3, r0
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d161      	bne.n	8006268 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0210 	bic.w	r2, r2, #16
 80061b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	3304      	adds	r3, #4
 80061d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	0c5b      	lsrs	r3, r3, #17
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d124      	bne.n	800622a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d035      	beq.n	8006258 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	6a38      	ldr	r0, [r7, #32]
 8006200:	f005 f90e 	bl	800b420 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006210:	441a      	add	r2, r3
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006222:	441a      	add	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
 8006228:	e016      	b.n	8006258 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	0c5b      	lsrs	r3, r3, #17
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2b06      	cmp	r3, #6
 8006234:	d110      	bne.n	8006258 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800623c:	2208      	movs	r2, #8
 800623e:	4619      	mov	r1, r3
 8006240:	6a38      	ldr	r0, [r7, #32]
 8006242:	f005 f8ed 	bl	800b420 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006252:	441a      	add	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0210 	orr.w	r2, r2, #16
 8006266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f005 fa6b 	bl	800b748 <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800627c:	f040 80a7 	bne.w	80063ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f005 fa70 	bl	800b76e <USB_ReadDevAllOutEpInterrupt>
 800628e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006290:	e099      	b.n	80063c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 808e 	beq.w	80063ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f005 fa94 	bl	800b7d6 <USB_ReadDevOutEPInterrupt>
 80062ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c6:	461a      	mov	r2, r3
 80062c8:	2301      	movs	r3, #1
 80062ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80062cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fef0 	bl	80070b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2308      	movs	r3, #8
 80062ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80062f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 ffc6 	bl	8007284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	2310      	movs	r3, #16
 8006312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d030      	beq.n	8006380 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d109      	bne.n	800633e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800633c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800633e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	3304      	adds	r3, #4
 8006352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	78db      	ldrb	r3, [r3, #3]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d108      	bne.n	800636e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	b2db      	uxtb	r3, r3
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f007 ff2d 	bl	800e1c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	2302      	movs	r3, #2
 800637e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	2320      	movs	r3, #32
 800639a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f af62 	bne.w	8006292 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f005 f9b8 	bl	800b748 <USB_ReadInterrupts>
 80063d8:	4603      	mov	r3, r0
 80063da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063e2:	f040 80db 	bne.w	800659c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f005 f9d9 	bl	800b7a2 <USB_ReadDevAllInEpInterrupt>
 80063f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80063f6:	e0cd      	b.n	8006594 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80c2 	beq.w	8006588 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f005 f9ff 	bl	800b812 <USB_ReadDevInEPInterrupt>
 8006414:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d057      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	2201      	movs	r2, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	43db      	mvns	r3, r3
 800643a:	69f9      	ldr	r1, [r7, #28]
 800643c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006440:	4013      	ands	r3, r2
 8006442:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006450:	461a      	mov	r2, r3
 8006452:	2301      	movs	r3, #1
 8006454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d132      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	334c      	adds	r3, #76	@ 0x4c
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4403      	add	r3, r0
 800647e:	3348      	adds	r3, #72	@ 0x48
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4419      	add	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4403      	add	r3, r0
 8006492:	334c      	adds	r3, #76	@ 0x4c
 8006494:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d113      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	3354      	adds	r3, #84	@ 0x54
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d108      	bne.n	80064c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80064bc:	461a      	mov	r2, r3
 80064be:	2101      	movs	r1, #1
 80064c0:	f005 fa06 	bl	800b8d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f007 fdf7 	bl	800e0be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	2308      	movs	r3, #8
 80064ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	2310      	movs	r3, #16
 8006506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651e:	461a      	mov	r2, r3
 8006520:	2340      	movs	r3, #64	@ 0x40
 8006522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d023      	beq.n	8006576 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800652e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006530:	6a38      	ldr	r0, [r7, #32]
 8006532:	f004 f8e7 	bl	800a704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	3338      	adds	r3, #56	@ 0x38
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	3304      	adds	r3, #4
 8006548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	78db      	ldrb	r3, [r3, #3]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d108      	bne.n	8006564 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f007 fe44 	bl	800e1ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	2302      	movs	r3, #2
 8006574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fd08 	bl	8006f98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	3301      	adds	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af2e 	bne.w	80063f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f005 f8d1 	bl	800b748 <USB_ReadInterrupts>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065b0:	d122      	bne.n	80065f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d108      	bne.n	80065e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065d8:	2100      	movs	r1, #0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f007 ffbe 	bl	800e55c <HAL_PCDEx_LPM_Callback>
 80065e0:	e002      	b.n	80065e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f007 fde2 	bl	800e1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80065f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f005 f8a3 	bl	800b748 <USB_ReadInterrupts>
 8006602:	4603      	mov	r3, r0
 8006604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800660c:	d112      	bne.n	8006634 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d102      	bne.n	8006624 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f007 fd9e 	bl	800e160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006632:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f005 f885 	bl	800b748 <USB_ReadInterrupts>
 800663e:	4603      	mov	r3, r0
 8006640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006648:	d121      	bne.n	800668e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006658:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d111      	bne.n	8006688 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f007 ff6b 	bl	800e55c <HAL_PCDEx_LPM_Callback>
 8006686:	e002      	b.n	800668e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f007 fd69 	bl	800e160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f005 f858 	bl	800b748 <USB_ReadInterrupts>
 8006698:	4603      	mov	r3, r0
 800669a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a2:	f040 80b7 	bne.w	8006814 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2110      	movs	r1, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f004 f81f 	bl	800a704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ca:	e046      	b.n	800675a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670c:	461a      	mov	r2, r3
 800670e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006712:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800672e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006732:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006752:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	3301      	adds	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006760:	429a      	cmp	r2, r3
 8006762:	d3b3      	bcc.n	80066cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006772:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006776:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006790:	f043 030b 	orr.w	r3, r3, #11
 8006794:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067a6:	f043 030b 	orr.w	r3, r3, #11
 80067aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80067ac:	e015      	b.n	80067da <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80067c0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80067c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d4:	f043 030b 	orr.w	r3, r3, #11
 80067d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067fe:	461a      	mov	r2, r3
 8006800:	f005 f866 	bl	800b8d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f004 ff95 	bl	800b748 <USB_ReadInterrupts>
 800681e:	4603      	mov	r3, r0
 8006820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006828:	d124      	bne.n	8006874 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f005 f82b 	bl	800b88a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f003 ffe0 	bl	800a7fe <USB_GetDevSpeed>
 800683e:	4603      	mov	r3, r0
 8006840:	461a      	mov	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681c      	ldr	r4, [r3, #0]
 800684a:	f000 fec3 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 800684e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	4620      	mov	r0, r4
 800685a:	f003 fce5 	bl	800a228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f007 fc55 	bl	800e10e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006872:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f004 ff65 	bl	800b748 <USB_ReadInterrupts>
 800687e:	4603      	mov	r3, r0
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10a      	bne.n	800689e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f007 fc32 	bl	800e0f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f002 0208 	and.w	r2, r2, #8
 800689c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f004 ff50 	bl	800b748 <USB_ReadInterrupts>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ae:	2b80      	cmp	r3, #128	@ 0x80
 80068b0:	d122      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068be:	2301      	movs	r3, #1
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c2:	e014      	b.n	80068ee <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d105      	bne.n	80068e8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fb27 	bl	8006f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	3301      	adds	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3e5      	bcc.n	80068c4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f004 ff23 	bl	800b748 <USB_ReadInterrupts>
 8006902:	4603      	mov	r3, r0
 8006904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690c:	d13b      	bne.n	8006986 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800690e:	2301      	movs	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	e02b      	b.n	800696c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006928:	4613      	mov	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	3340      	adds	r3, #64	@ 0x40
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d115      	bne.n	8006966 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800693a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800693c:	2b00      	cmp	r3, #0
 800693e:	da12      	bge.n	8006966 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	333f      	adds	r3, #63	@ 0x3f
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fae8 	bl	8006f36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	3301      	adds	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	@ 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006972:	429a      	cmp	r2, r3
 8006974:	d3ce      	bcc.n	8006914 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f004 fedc 	bl	800b748 <USB_ReadInterrupts>
 8006990:	4603      	mov	r3, r0
 8006992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800699a:	d155      	bne.n	8006a48 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a0:	e045      	b.n	8006a2e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d12e      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da2b      	bge.n	8006a28 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80069dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d121      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a24:	6053      	str	r3, [r2, #4]
            break;
 8006a26:	e007      	b.n	8006a38 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d3b4      	bcc.n	80069a2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f004 fe7b 	bl	800b748 <USB_ReadInterrupts>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a5c:	d10a      	bne.n	8006a74 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f007 fbd6 	bl	800e210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f004 fe65 	bl	800b748 <USB_ReadInterrupts>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d115      	bne.n	8006ab4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f007 fbc6 	bl	800e22c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6859      	ldr	r1, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e000      	b.n	8006ab4 <HAL_PCD_IRQHandler+0x992>
      return;
 8006ab2:	bf00      	nop
    }
  }
}
 8006ab4:	3734      	adds	r7, #52	@ 0x34
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}

08006aba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_PCD_SetAddress+0x1a>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e013      	b.n	8006afc <HAL_PCD_SetAddress+0x42>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f004 fdc3 	bl	800b678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	70fb      	strb	r3, [r7, #3]
 8006b16:	460b      	mov	r3, r1
 8006b18:	803b      	strh	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da0f      	bge.n	8006b4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	4613      	mov	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	3338      	adds	r3, #56	@ 0x38
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3304      	adds	r3, #4
 8006b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	705a      	strb	r2, [r3, #1]
 8006b48:	e00f      	b.n	8006b6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	3304      	adds	r3, #4
 8006b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b76:	883a      	ldrh	r2, [r7, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	78ba      	ldrb	r2, [r7, #2]
 8006b80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b94:	78bb      	ldrb	r3, [r7, #2]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d102      	bne.n	8006ba0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_PCD_EP_Open+0xaa>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e00e      	b.n	8006bcc <HAL_PCD_EP_Open+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f003 fe43 	bl	800a848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8006bca:	7afb      	ldrb	r3, [r7, #11]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da0f      	bge.n	8006c08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	3338      	adds	r3, #56	@ 0x38
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	705a      	strb	r2, [r3, #1]
 8006c06:	e00f      	b.n	8006c28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	f003 020f 	and.w	r2, r3, #15
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_PCD_EP_Close+0x6e>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e00e      	b.n	8006c60 <HAL_PCD_EP_Close+0x8c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f003 fe81 	bl	800a958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	460b      	mov	r3, r1
 8006c76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3304      	adds	r3, #4
 8006c90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d102      	bne.n	8006cc4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	f004 f960 	bl	800afa0 <USB_EP0StartXfer>
 8006ce0:	e008      	b.n	8006cf4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	f003 ff0e 	bl	800ab10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8006d20:	681b      	ldr	r3, [r3, #0]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3338      	adds	r3, #56	@ 0x38
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2200      	movs	r2, #0
 8006d66:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d102      	bne.n	8006d88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	f004 f8fe 	bl	800afa0 <USB_EP0StartXfer>
 8006da4:	e008      	b.n	8006db8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	f003 feac 	bl	800ab10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d901      	bls.n	8006de0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e050      	b.n	8006e82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da0f      	bge.n	8006e08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3338      	adds	r3, #56	@ 0x38
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	705a      	strb	r2, [r3, #1]
 8006e06:	e00d      	b.n	8006e24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_PCD_EP_SetStall+0x82>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e01e      	b.n	8006e82 <HAL_PCD_EP_SetStall+0xc0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f004 fb3c 	bl	800b4d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	b2d9      	uxtb	r1, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006e72:	461a      	mov	r2, r3
 8006e74:	f004 fd2c 	bl	800b8d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d901      	bls.n	8006ea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e042      	b.n	8006f2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da0f      	bge.n	8006ed0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 020f 	and.w	r2, r3, #15
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	3338      	adds	r3, #56	@ 0x38
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	705a      	strb	r2, [r3, #1]
 8006ece:	e00f      	b.n	8006ef0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_PCD_EP_ClrStall+0x86>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e00e      	b.n	8006f2e <HAL_PCD_EP_ClrStall+0xa4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68f9      	ldr	r1, [r7, #12]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f004 fb44 	bl	800b5ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	da0c      	bge.n	8006f64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	3338      	adds	r3, #56	@ 0x38
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	3304      	adds	r3, #4
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	e00c      	b.n	8006f7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f004 f963 	bl	800b250 <USB_EPStopXfer>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	@ 0x28
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	3338      	adds	r3, #56	@ 0x38
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1a      	ldr	r2, [r3, #32]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d901      	bls.n	8006fd0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e06c      	b.n	80070aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d902      	bls.n	8006fec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3303      	adds	r3, #3
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ff4:	e02b      	b.n	800704e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	d902      	bls.n	8007012 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3303      	adds	r3, #3
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6919      	ldr	r1, [r3, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800702a:	b2db      	uxtb	r3, r3
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	4603      	mov	r3, r0
 8007030:	6978      	ldr	r0, [r7, #20]
 8007032:	f004 f9b7 	bl	800b3a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	429a      	cmp	r2, r3
 8007062:	d809      	bhi.n	8007078 <PCD_WriteEmptyTxFifo+0xe0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800706c:	429a      	cmp	r2, r3
 800706e:	d203      	bcs.n	8007078 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1be      	bne.n	8006ff6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	429a      	cmp	r2, r3
 8007082:	d811      	bhi.n	80070a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	2201      	movs	r2, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	43db      	mvns	r3, r3
 800709e:	6939      	ldr	r1, [r7, #16]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a4:	4013      	ands	r3, r2
 80070a6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	333c      	adds	r3, #60	@ 0x3c
 80070cc:	3304      	adds	r3, #4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d17b      	bne.n	80071e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d015      	beq.n	8007120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4a61      	ldr	r2, [pc, #388]	@ (800727c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	f240 80b9 	bls.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80b3 	beq.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	461a      	mov	r2, r3
 8007118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800711c:	6093      	str	r3, [r2, #8]
 800711e:	e0a7      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	461a      	mov	r2, r3
 8007138:	2320      	movs	r3, #32
 800713a:	6093      	str	r3, [r2, #8]
 800713c:	e098      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 8093 	bne.w	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	4a4b      	ldr	r2, [pc, #300]	@ (800727c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d90f      	bls.n	8007172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007168:	461a      	mov	r2, r3
 800716a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800716e:	6093      	str	r3, [r2, #8]
 8007170:	e07e      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	3304      	adds	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	440b      	add	r3, r1
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d114      	bne.n	80071d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80071bc:	461a      	mov	r2, r3
 80071be:	2101      	movs	r1, #1
 80071c0:	f004 fb86 	bl	800b8d0 <USB_EP0_OutStart>
 80071c4:	e006      	b.n	80071d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f006 ff54 	bl	800e088 <HAL_PCD_DataOutStageCallback>
 80071e0:	e046      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4a26      	ldr	r2, [pc, #152]	@ (8007280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d124      	bne.n	8007234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007206:	6093      	str	r3, [r2, #8]
 8007208:	e032      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	2320      	movs	r3, #32
 8007224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f006 ff2b 	bl	800e088 <HAL_PCD_DataOutStageCallback>
 8007232:	e01d      	b.n	8007270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d114      	bne.n	8007264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d108      	bne.n	8007264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800725c:	461a      	mov	r2, r3
 800725e:	2100      	movs	r1, #0
 8007260:	f004 fb36 	bl	800b8d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f006 ff0c 	bl	800e088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	4f54300a 	.word	0x4f54300a
 8007280:	4f54310a 	.word	0x4f54310a

08007284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	333c      	adds	r3, #60	@ 0x3c
 800729c:	3304      	adds	r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a15      	ldr	r2, [pc, #84]	@ (800730c <PCD_EP_OutSetupPacket_int+0x88>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d90e      	bls.n	80072d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d0:	461a      	mov	r2, r3
 80072d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f006 fec3 	bl	800e064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	@ (800730c <PCD_EP_OutSetupPacket_int+0x88>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d90c      	bls.n	8007300 <PCD_EP_OutSetupPacket_int+0x7c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d108      	bne.n	8007300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80072f8:	461a      	mov	r2, r3
 80072fa:	2101      	movs	r1, #1
 80072fc:	f004 fae8 	bl	800b8d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	4f54300a 	.word	0x4f54300a

08007310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
 800731c:	4613      	mov	r3, r2
 800731e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800732e:	883b      	ldrh	r3, [r7, #0]
 8007330:	0419      	lsls	r1, r3, #16
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	430a      	orrs	r2, r1
 800733a:	629a      	str	r2, [r3, #40]	@ 0x28
 800733c:	e028      	b.n	8007390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4413      	add	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e00d      	b.n	800736e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	3340      	adds	r3, #64	@ 0x40
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	3301      	adds	r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	3b01      	subs	r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d3ec      	bcc.n	8007352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007378:	883b      	ldrh	r3, [r7, #0]
 800737a:	0418      	lsls	r0, r3, #16
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	3b01      	subs	r3, #1
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4302      	orrs	r2, r0
 8007388:	3340      	adds	r3, #64	@ 0x40
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	f043 0303 	orr.w	r3, r3, #3
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0cc      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800741c:	4b68      	ldr	r3, [pc, #416]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d90c      	bls.n	8007444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742a:	4b65      	ldr	r3, [pc, #404]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007432:	4b63      	ldr	r3, [pc, #396]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0b8      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800745c:	4b59      	ldr	r3, [pc, #356]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4a58      	ldr	r2, [pc, #352]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007474:	4b53      	ldr	r3, [pc, #332]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a52      	ldr	r2, [pc, #328]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800747e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007480:	4b50      	ldr	r3, [pc, #320]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	494d      	ldr	r1, [pc, #308]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d044      	beq.n	8007528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d107      	bne.n	80074b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074a6:	4b47      	ldr	r3, [pc, #284]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d119      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e07f      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d003      	beq.n	80074c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c6:	4b3f      	ldr	r3, [pc, #252]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e06f      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d6:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e067      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074e6:	4b37      	ldr	r3, [pc, #220]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f023 0203 	bic.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4934      	ldr	r1, [pc, #208]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074f8:	f7fc fffa 	bl	80044f0 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007500:	f7fc fff6 	bl	80044f0 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e04f      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	4b2b      	ldr	r3, [pc, #172]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 020c 	and.w	r2, r3, #12
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d1eb      	bne.n	8007500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007528:	4b25      	ldr	r3, [pc, #148]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d20c      	bcs.n	8007550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b22      	ldr	r3, [pc, #136]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800753e:	4b20      	ldr	r3, [pc, #128]	@ (80075c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e032      	b.n	80075b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800755c:	4b19      	ldr	r3, [pc, #100]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4916      	ldr	r1, [pc, #88]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	4313      	orrs	r3, r2
 800756c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	490e      	ldr	r1, [pc, #56]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	4313      	orrs	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800758e:	f000 fb7f 	bl	8007c90 <HAL_RCC_GetSysClockFreq>
 8007592:	4602      	mov	r2, r0
 8007594:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	091b      	lsrs	r3, r3, #4
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	490a      	ldr	r1, [pc, #40]	@ (80075c8 <HAL_RCC_ClockConfig+0x1c0>)
 80075a0:	5ccb      	ldrb	r3, [r1, r3]
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	4a09      	ldr	r2, [pc, #36]	@ (80075cc <HAL_RCC_ClockConfig+0x1c4>)
 80075a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075aa:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fc ff5a 	bl	8004468 <HAL_InitTick>

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40023c00 	.word	0x40023c00
 80075c4:	40023800 	.word	0x40023800
 80075c8:	080152dc 	.word	0x080152dc
 80075cc:	20000004 	.word	0x20000004
 80075d0:	20000008 	.word	0x20000008

080075d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d8:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80075da:	681b      	ldr	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000004 	.word	0x20000004

080075ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075f0:	f7ff fff0 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_RCC_GetPCLK1Freq+0x20>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	0a9b      	lsrs	r3, r3, #10
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4903      	ldr	r1, [pc, #12]	@ (8007610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007608:	4618      	mov	r0, r3
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40023800 	.word	0x40023800
 8007610:	080152ec 	.word	0x080152ec

08007614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007618:	f7ff ffdc 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 800761c:	4602      	mov	r2, r0
 800761e:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	0b5b      	lsrs	r3, r3, #13
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4903      	ldr	r1, [pc, #12]	@ (8007638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800762a:	5ccb      	ldrb	r3, [r1, r3]
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	080152ec 	.word	0x080152ec

0800763c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	@ 0x30
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007674:	4b6f      	ldr	r3, [pc, #444]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800767a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	496c      	ldr	r1, [pc, #432]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007692:	2301      	movs	r3, #1
 8007694:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d010      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80076a2:	4b64      	ldr	r3, [pc, #400]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076a8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b0:	4960      	ldr	r1, [pc, #384]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076d0:	4b58      	ldr	r3, [pc, #352]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076de:	4955      	ldr	r1, [pc, #340]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ee:	d101      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80076f0:	2301      	movs	r3, #1
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80076fc:	2301      	movs	r3, #1
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800770c:	4b49      	ldr	r3, [pc, #292]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800770e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800771a:	4946      	ldr	r1, [pc, #280]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800772a:	d101      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800772c:	2301      	movs	r3, #1
 800772e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007738:	2301      	movs	r3, #1
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 808a 	beq.w	800785e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	4b39      	ldr	r3, [pc, #228]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007752:	4a38      	ldr	r2, [pc, #224]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007758:	6413      	str	r3, [r2, #64]	@ 0x40
 800775a:	4b36      	ldr	r3, [pc, #216]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007766:	4b34      	ldr	r3, [pc, #208]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a33      	ldr	r2, [pc, #204]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800776c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007770:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007772:	f7fc febd 	bl	80044f0 <HAL_GetTick>
 8007776:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007778:	e008      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800777a:	f7fc feb9 	bl	80044f0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e278      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800778c:	4b2a      	ldr	r3, [pc, #168]	@ (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007798:	4b26      	ldr	r3, [pc, #152]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02f      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d028      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077be:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077c0:	4b1e      	ldr	r3, [pc, #120]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077c6:	4b1d      	ldr	r3, [pc, #116]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077cc:	4a19      	ldr	r2, [pc, #100]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077d2:	4b18      	ldr	r3, [pc, #96]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d114      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077de:	f7fc fe87 	bl	80044f0 <HAL_GetTick>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e4:	e00a      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fc fe83 	bl	80044f0 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e240      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007814:	d114      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007816:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007822:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800782a:	4902      	ldr	r1, [pc, #8]	@ (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800782c:	4313      	orrs	r3, r2
 800782e:	608b      	str	r3, [r1, #8]
 8007830:	e00c      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007832:	bf00      	nop
 8007834:	40023800 	.word	0x40023800
 8007838:	40007000 	.word	0x40007000
 800783c:	42470e40 	.word	0x42470e40
 8007840:	4b4a      	ldr	r3, [pc, #296]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4a49      	ldr	r2, [pc, #292]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007846:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800784a:	6093      	str	r3, [r2, #8]
 800784c:	4b47      	ldr	r3, [pc, #284]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800784e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007858:	4944      	ldr	r1, [pc, #272]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800785a:	4313      	orrs	r3, r2
 800785c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007870:	4b3f      	ldr	r3, [pc, #252]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007872:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007880:	4b3a      	ldr	r3, [pc, #232]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007886:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800788e:	4937      	ldr	r1, [pc, #220]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078a2:	4b32      	ldr	r3, [pc, #200]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b0:	492e      	ldr	r1, [pc, #184]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d011      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078c4:	4b29      	ldr	r3, [pc, #164]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ca:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d2:	4926      	ldr	r1, [pc, #152]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078e2:	d101      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80078f4:	4b1d      	ldr	r3, [pc, #116]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007902:	491a      	ldr	r1, [pc, #104]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007916:	4b15      	ldr	r3, [pc, #84]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007924:	4911      	ldr	r1, [pc, #68]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007934:	d101      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007936:	2301      	movs	r3, #1
 8007938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800793a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d005      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007948:	f040 80ff 	bne.w	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800794c:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007952:	f7fc fdcd 	bl	80044f0 <HAL_GetTick>
 8007956:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007958:	e00e      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800795a:	f7fc fdc9 	bl	80044f0 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d907      	bls.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e188      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800796c:	40023800 	.word	0x40023800
 8007970:	424711e0 	.word	0x424711e0
 8007974:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007978:	4b7e      	ldr	r3, [pc, #504]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1ea      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d028      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d124      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80079ac:	4b71      	ldr	r3, [pc, #452]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b2:	0c1b      	lsrs	r3, r3, #16
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	3301      	adds	r3, #1
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079be:	4b6d      	ldr	r3, [pc, #436]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c4:	0e1b      	lsrs	r3, r3, #24
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	019b      	lsls	r3, r3, #6
 80079d6:	431a      	orrs	r2, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	3b01      	subs	r3, #1
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	431a      	orrs	r2, r3
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	4961      	ldr	r1, [pc, #388]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a0a:	d00a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d035      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a20:	d130      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a22:	4b54      	ldr	r3, [pc, #336]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	3301      	adds	r3, #1
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a34:	4b4f      	ldr	r3, [pc, #316]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a3a:	0f1b      	lsrs	r3, r3, #28
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	019b      	lsls	r3, r3, #6
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	3b01      	subs	r3, #1
 8007a54:	041b      	lsls	r3, r3, #16
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	061b      	lsls	r3, r3, #24
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	071b      	lsls	r3, r3, #28
 8007a64:	4943      	ldr	r1, [pc, #268]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a6c:	4b41      	ldr	r3, [pc, #260]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a72:	f023 021f 	bic.w	r2, r3, #31
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	493d      	ldr	r1, [pc, #244]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d029      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a98:	d124      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a9a:	4b36      	ldr	r3, [pc, #216]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aa0:	0c1b      	lsrs	r3, r3, #16
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aac:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	019b      	lsls	r3, r3, #6
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	3b01      	subs	r3, #1
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	061b      	lsls	r3, r3, #24
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	071b      	lsls	r3, r3, #28
 8007adc:	4925      	ldr	r1, [pc, #148]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	3b01      	subs	r3, #1
 8007b04:	041b      	lsls	r3, r3, #16
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	071b      	lsls	r3, r3, #28
 8007b16:	4917      	ldr	r1, [pc, #92]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b1e:	4b16      	ldr	r3, [pc, #88]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b24:	f7fc fce4 	bl	80044f0 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b2c:	f7fc fce0 	bl	80044f0 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e09f      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f0      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	f040 8095 	bne.w	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b52:	4b0a      	ldr	r3, [pc, #40]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b58:	f7fc fcca 	bl	80044f0 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b5e:	e00f      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b60:	f7fc fcc6 	bl	80044f0 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d908      	bls.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e085      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007b72:	bf00      	nop
 8007b74:	40023800 	.word	0x40023800
 8007b78:	42470068 	.word	0x42470068
 8007b7c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b80:	4b41      	ldr	r3, [pc, #260]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b8c:	d0e8      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02b      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d127      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bb6:	4b34      	ldr	r3, [pc, #208]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	019b      	lsls	r3, r3, #6
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	085b      	lsrs	r3, r3, #1
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be2:	061b      	lsls	r3, r3, #24
 8007be4:	4928      	ldr	r1, [pc, #160]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007bec:	4b26      	ldr	r3, [pc, #152]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	4922      	ldr	r1, [pc, #136]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01d      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1a:	d118      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c22:	0e1b      	lsrs	r3, r3, #24
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	019b      	lsls	r3, r3, #6
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	4910      	ldr	r1, [pc, #64]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c54:	f7fc fc4c 	bl	80044f0 <HAL_GetTick>
 8007c58:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c5c:	f7fc fc48 	bl	80044f0 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e007      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c6e:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7a:	d1ef      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3730      	adds	r7, #48	@ 0x30
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	42470070 	.word	0x42470070

08007c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c94:	b0ae      	sub	sp, #184	@ 0xb8
 8007c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cb6:	4bcb      	ldr	r3, [pc, #812]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 030c 	and.w	r3, r3, #12
 8007cbe:	2b0c      	cmp	r3, #12
 8007cc0:	f200 8206 	bhi.w	80080d0 <HAL_RCC_GetSysClockFreq+0x440>
 8007cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <HAL_RCC_GetSysClockFreq+0x3c>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	080080d1 	.word	0x080080d1
 8007cd4:	080080d1 	.word	0x080080d1
 8007cd8:	080080d1 	.word	0x080080d1
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	080080d1 	.word	0x080080d1
 8007ce4:	080080d1 	.word	0x080080d1
 8007ce8:	080080d1 	.word	0x080080d1
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	080080d1 	.word	0x080080d1
 8007cf4:	080080d1 	.word	0x080080d1
 8007cf8:	080080d1 	.word	0x080080d1
 8007cfc:	08007f01 	.word	0x08007f01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d00:	4bb9      	ldr	r3, [pc, #740]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007d06:	e1e7      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d08:	4bb8      	ldr	r3, [pc, #736]	@ (8007fec <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007d0e:	e1e3      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d10:	4bb4      	ldr	r3, [pc, #720]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d1c:	4bb1      	ldr	r3, [pc, #708]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d071      	beq.n	8007e0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d28:	4bae      	ldr	r3, [pc, #696]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	099b      	lsrs	r3, r3, #6
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d4e:	4622      	mov	r2, r4
 8007d50:	462b      	mov	r3, r5
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f04f 0100 	mov.w	r1, #0
 8007d5a:	0159      	lsls	r1, r3, #5
 8007d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d60:	0150      	lsls	r0, r2, #5
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4621      	mov	r1, r4
 8007d68:	1a51      	subs	r1, r2, r1
 8007d6a:	6439      	str	r1, [r7, #64]	@ 0x40
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007d80:	4649      	mov	r1, r9
 8007d82:	018b      	lsls	r3, r1, #6
 8007d84:	4641      	mov	r1, r8
 8007d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d8a:	4641      	mov	r1, r8
 8007d8c:	018a      	lsls	r2, r1, #6
 8007d8e:	4641      	mov	r1, r8
 8007d90:	1a51      	subs	r1, r2, r1
 8007d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d94:	4649      	mov	r1, r9
 8007d96:	eb63 0301 	sbc.w	r3, r3, r1
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007da8:	4649      	mov	r1, r9
 8007daa:	00cb      	lsls	r3, r1, #3
 8007dac:	4641      	mov	r1, r8
 8007dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db2:	4641      	mov	r1, r8
 8007db4:	00ca      	lsls	r2, r1, #3
 8007db6:	4610      	mov	r0, r2
 8007db8:	4619      	mov	r1, r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	eb42 0303 	adc.w	r3, r2, r3
 8007dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007dd8:	4629      	mov	r1, r5
 8007dda:	024b      	lsls	r3, r1, #9
 8007ddc:	4621      	mov	r1, r4
 8007dde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007de2:	4621      	mov	r1, r4
 8007de4:	024a      	lsls	r2, r1, #9
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007df4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007df8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007dfc:	f7f8 ff64 	bl	8000cc8 <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4613      	mov	r3, r2
 8007e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e0a:	e067      	b.n	8007edc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e0c:	4b75      	ldr	r3, [pc, #468]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	099b      	lsrs	r3, r3, #6
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e18:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e26:	2300      	movs	r3, #0
 8007e28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	0159      	lsls	r1, r3, #5
 8007e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e40:	0150      	lsls	r0, r2, #5
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4621      	mov	r1, r4
 8007e48:	1a51      	subs	r1, r2, r1
 8007e4a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007e60:	4649      	mov	r1, r9
 8007e62:	018b      	lsls	r3, r1, #6
 8007e64:	4641      	mov	r1, r8
 8007e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	018a      	lsls	r2, r1, #6
 8007e6e:	4641      	mov	r1, r8
 8007e70:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e74:	4649      	mov	r1, r9
 8007e76:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e8e:	4692      	mov	sl, r2
 8007e90:	469b      	mov	fp, r3
 8007e92:	4623      	mov	r3, r4
 8007e94:	eb1a 0303 	adds.w	r3, sl, r3
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	462b      	mov	r3, r5
 8007e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007eae:	4629      	mov	r1, r5
 8007eb0:	028b      	lsls	r3, r1, #10
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eb8:	4621      	mov	r1, r4
 8007eba:	028a      	lsls	r2, r1, #10
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ec8:	677a      	str	r2, [r7, #116]	@ 0x74
 8007eca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007ece:	f7f8 fefb 	bl	8000cc8 <__aeabi_uldivmod>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007edc:	4b41      	ldr	r3, [pc, #260]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007efe:	e0eb      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f00:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f0c:	4b35      	ldr	r3, [pc, #212]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d06b      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f18:	4b32      	ldr	r3, [pc, #200]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	099b      	lsrs	r3, r3, #6
 8007f1e:	2200      	movs	r2, #0
 8007f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007f34:	4622      	mov	r2, r4
 8007f36:	462b      	mov	r3, r5
 8007f38:	f04f 0000 	mov.w	r0, #0
 8007f3c:	f04f 0100 	mov.w	r1, #0
 8007f40:	0159      	lsls	r1, r3, #5
 8007f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f46:	0150      	lsls	r0, r2, #5
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	1a51      	subs	r1, r2, r1
 8007f50:	61b9      	str	r1, [r7, #24]
 8007f52:	4629      	mov	r1, r5
 8007f54:	eb63 0301 	sbc.w	r3, r3, r1
 8007f58:	61fb      	str	r3, [r7, #28]
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f66:	4659      	mov	r1, fp
 8007f68:	018b      	lsls	r3, r1, #6
 8007f6a:	4651      	mov	r1, sl
 8007f6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f70:	4651      	mov	r1, sl
 8007f72:	018a      	lsls	r2, r1, #6
 8007f74:	4651      	mov	r1, sl
 8007f76:	ebb2 0801 	subs.w	r8, r2, r1
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	eb63 0901 	sbc.w	r9, r3, r1
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f94:	4690      	mov	r8, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	4623      	mov	r3, r4
 8007f9a:	eb18 0303 	adds.w	r3, r8, r3
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	eb49 0303 	adc.w	r3, r9, r3
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	024b      	lsls	r3, r1, #9
 8007fb8:	4621      	mov	r1, r4
 8007fba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	024a      	lsls	r2, r1, #9
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fca:	2200      	movs	r2, #0
 8007fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007fd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fd4:	f7f8 fe78 	bl	8000cc8 <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fe2:	e065      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x420>
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	00f42400 	.word	0x00f42400
 8007fec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	099b      	lsrs	r3, r3, #6
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008000:	653b      	str	r3, [r7, #80]	@ 0x50
 8008002:	2300      	movs	r3, #0
 8008004:	657b      	str	r3, [r7, #84]	@ 0x54
 8008006:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800800a:	4642      	mov	r2, r8
 800800c:	464b      	mov	r3, r9
 800800e:	f04f 0000 	mov.w	r0, #0
 8008012:	f04f 0100 	mov.w	r1, #0
 8008016:	0159      	lsls	r1, r3, #5
 8008018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800801c:	0150      	lsls	r0, r2, #5
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4641      	mov	r1, r8
 8008024:	1a51      	subs	r1, r2, r1
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	4649      	mov	r1, r9
 800802a:	eb63 0301 	sbc.w	r3, r3, r1
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	f04f 0300 	mov.w	r3, #0
 8008038:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800803c:	4659      	mov	r1, fp
 800803e:	018b      	lsls	r3, r1, #6
 8008040:	4651      	mov	r1, sl
 8008042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008046:	4651      	mov	r1, sl
 8008048:	018a      	lsls	r2, r1, #6
 800804a:	4651      	mov	r1, sl
 800804c:	1a54      	subs	r4, r2, r1
 800804e:	4659      	mov	r1, fp
 8008050:	eb63 0501 	sbc.w	r5, r3, r1
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	00eb      	lsls	r3, r5, #3
 800805e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008062:	00e2      	lsls	r2, r4, #3
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	4643      	mov	r3, r8
 800806a:	18e3      	adds	r3, r4, r3
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	464b      	mov	r3, r9
 8008070:	eb45 0303 	adc.w	r3, r5, r3
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008082:	4629      	mov	r1, r5
 8008084:	028b      	lsls	r3, r1, #10
 8008086:	4621      	mov	r1, r4
 8008088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800808c:	4621      	mov	r1, r4
 800808e:	028a      	lsls	r2, r1, #10
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008098:	2200      	movs	r2, #0
 800809a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800809e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080a2:	f7f8 fe11 	bl	8000cc8 <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4613      	mov	r3, r2
 80080ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080b0:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	0f1b      	lsrs	r3, r3, #28
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80080be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080ce:	e003      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080d0:	4b06      	ldr	r3, [pc, #24]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80080d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	37b8      	adds	r7, #184	@ 0xb8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e6:	bf00      	nop
 80080e8:	40023800 	.word	0x40023800
 80080ec:	00f42400 	.word	0x00f42400

080080f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e28d      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8083 	beq.w	8008216 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008110:	4b94      	ldr	r3, [pc, #592]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 030c 	and.w	r3, r3, #12
 8008118:	2b04      	cmp	r3, #4
 800811a:	d019      	beq.n	8008150 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800811c:	4b91      	ldr	r3, [pc, #580]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008124:	2b08      	cmp	r3, #8
 8008126:	d106      	bne.n	8008136 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008128:	4b8e      	ldr	r3, [pc, #568]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008134:	d00c      	beq.n	8008150 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008136:	4b8b      	ldr	r3, [pc, #556]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800813e:	2b0c      	cmp	r3, #12
 8008140:	d112      	bne.n	8008168 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008142:	4b88      	ldr	r3, [pc, #544]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800814a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800814e:	d10b      	bne.n	8008168 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008150:	4b84      	ldr	r3, [pc, #528]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d05b      	beq.n	8008214 <HAL_RCC_OscConfig+0x124>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d157      	bne.n	8008214 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e25a      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008170:	d106      	bne.n	8008180 <HAL_RCC_OscConfig+0x90>
 8008172:	4b7c      	ldr	r3, [pc, #496]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a7b      	ldr	r2, [pc, #492]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e01d      	b.n	80081bc <HAL_RCC_OscConfig+0xcc>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008188:	d10c      	bne.n	80081a4 <HAL_RCC_OscConfig+0xb4>
 800818a:	4b76      	ldr	r3, [pc, #472]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a75      	ldr	r2, [pc, #468]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	4b73      	ldr	r3, [pc, #460]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a72      	ldr	r2, [pc, #456]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 800819c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e00b      	b.n	80081bc <HAL_RCC_OscConfig+0xcc>
 80081a4:	4b6f      	ldr	r3, [pc, #444]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6e      	ldr	r2, [pc, #440]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80081aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a6b      	ldr	r2, [pc, #428]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80081b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d013      	beq.n	80081ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fc f994 	bl	80044f0 <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081cc:	f7fc f990 	bl	80044f0 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b64      	cmp	r3, #100	@ 0x64
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e21f      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081de:	4b61      	ldr	r3, [pc, #388]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0xdc>
 80081ea:	e014      	b.n	8008216 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ec:	f7fc f980 	bl	80044f0 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081f4:	f7fc f97c 	bl	80044f0 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b64      	cmp	r3, #100	@ 0x64
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e20b      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008206:	4b57      	ldr	r3, [pc, #348]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f0      	bne.n	80081f4 <HAL_RCC_OscConfig+0x104>
 8008212:	e000      	b.n	8008216 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d06f      	beq.n	8008302 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008222:	4b50      	ldr	r3, [pc, #320]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 030c 	and.w	r3, r3, #12
 800822a:	2b00      	cmp	r3, #0
 800822c:	d017      	beq.n	800825e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800822e:	4b4d      	ldr	r3, [pc, #308]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008236:	2b08      	cmp	r3, #8
 8008238:	d105      	bne.n	8008246 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800823a:	4b4a      	ldr	r3, [pc, #296]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00b      	beq.n	800825e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008246:	4b47      	ldr	r3, [pc, #284]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800824e:	2b0c      	cmp	r3, #12
 8008250:	d11c      	bne.n	800828c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008252:	4b44      	ldr	r3, [pc, #272]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d116      	bne.n	800828c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800825e:	4b41      	ldr	r3, [pc, #260]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <HAL_RCC_OscConfig+0x186>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d001      	beq.n	8008276 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e1d3      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008276:	4b3b      	ldr	r3, [pc, #236]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4937      	ldr	r1, [pc, #220]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008286:	4313      	orrs	r3, r2
 8008288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800828a:	e03a      	b.n	8008302 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008294:	4b34      	ldr	r3, [pc, #208]	@ (8008368 <HAL_RCC_OscConfig+0x278>)
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829a:	f7fc f929 	bl	80044f0 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a0:	e008      	b.n	80082b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082a2:	f7fc f925 	bl	80044f0 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e1b4      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f0      	beq.n	80082a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c0:	4b28      	ldr	r3, [pc, #160]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	4925      	ldr	r1, [pc, #148]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	600b      	str	r3, [r1, #0]
 80082d4:	e015      	b.n	8008302 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082d6:	4b24      	ldr	r3, [pc, #144]	@ (8008368 <HAL_RCC_OscConfig+0x278>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082dc:	f7fc f908 	bl	80044f0 <HAL_GetTick>
 80082e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082e2:	e008      	b.n	80082f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082e4:	f7fc f904 	bl	80044f0 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e193      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f0      	bne.n	80082e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d036      	beq.n	800837c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d016      	beq.n	8008344 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008316:	4b15      	ldr	r3, [pc, #84]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800831c:	f7fc f8e8 	bl	80044f0 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008324:	f7fc f8e4 	bl	80044f0 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b02      	cmp	r3, #2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e173      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008336:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <HAL_RCC_OscConfig+0x274>)
 8008338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCC_OscConfig+0x234>
 8008342:	e01b      	b.n	800837c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008344:	4b09      	ldr	r3, [pc, #36]	@ (800836c <HAL_RCC_OscConfig+0x27c>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800834a:	f7fc f8d1 	bl	80044f0 <HAL_GetTick>
 800834e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008350:	e00e      	b.n	8008370 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008352:	f7fc f8cd 	bl	80044f0 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d907      	bls.n	8008370 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e15c      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
 8008364:	40023800 	.word	0x40023800
 8008368:	42470000 	.word	0x42470000
 800836c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008370:	4b8a      	ldr	r3, [pc, #552]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ea      	bne.n	8008352 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8097 	beq.w	80084b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800838e:	4b83      	ldr	r3, [pc, #524]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10f      	bne.n	80083ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	4b7f      	ldr	r3, [pc, #508]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a2:	4a7e      	ldr	r2, [pc, #504]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80083a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80083aa:	4b7c      	ldr	r3, [pc, #496]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b2:	60bb      	str	r3, [r7, #8]
 80083b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083b6:	2301      	movs	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ba:	4b79      	ldr	r3, [pc, #484]	@ (80085a0 <HAL_RCC_OscConfig+0x4b0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d118      	bne.n	80083f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083c6:	4b76      	ldr	r3, [pc, #472]	@ (80085a0 <HAL_RCC_OscConfig+0x4b0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a75      	ldr	r2, [pc, #468]	@ (80085a0 <HAL_RCC_OscConfig+0x4b0>)
 80083cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083d2:	f7fc f88d 	bl	80044f0 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d8:	e008      	b.n	80083ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083da:	f7fc f889 	bl	80044f0 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d901      	bls.n	80083ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e118      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ec:	4b6c      	ldr	r3, [pc, #432]	@ (80085a0 <HAL_RCC_OscConfig+0x4b0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0f0      	beq.n	80083da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d106      	bne.n	800840e <HAL_RCC_OscConfig+0x31e>
 8008400:	4b66      	ldr	r3, [pc, #408]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008404:	4a65      	ldr	r2, [pc, #404]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008406:	f043 0301 	orr.w	r3, r3, #1
 800840a:	6713      	str	r3, [r2, #112]	@ 0x70
 800840c:	e01c      	b.n	8008448 <HAL_RCC_OscConfig+0x358>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b05      	cmp	r3, #5
 8008414:	d10c      	bne.n	8008430 <HAL_RCC_OscConfig+0x340>
 8008416:	4b61      	ldr	r3, [pc, #388]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	4a60      	ldr	r2, [pc, #384]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 800841c:	f043 0304 	orr.w	r3, r3, #4
 8008420:	6713      	str	r3, [r2, #112]	@ 0x70
 8008422:	4b5e      	ldr	r3, [pc, #376]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008426:	4a5d      	ldr	r2, [pc, #372]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008428:	f043 0301 	orr.w	r3, r3, #1
 800842c:	6713      	str	r3, [r2, #112]	@ 0x70
 800842e:	e00b      	b.n	8008448 <HAL_RCC_OscConfig+0x358>
 8008430:	4b5a      	ldr	r3, [pc, #360]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008434:	4a59      	ldr	r2, [pc, #356]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008436:	f023 0301 	bic.w	r3, r3, #1
 800843a:	6713      	str	r3, [r2, #112]	@ 0x70
 800843c:	4b57      	ldr	r3, [pc, #348]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008440:	4a56      	ldr	r2, [pc, #344]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008442:	f023 0304 	bic.w	r3, r3, #4
 8008446:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d015      	beq.n	800847c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008450:	f7fc f84e 	bl	80044f0 <HAL_GetTick>
 8008454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008456:	e00a      	b.n	800846e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008458:	f7fc f84a 	bl	80044f0 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008466:	4293      	cmp	r3, r2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e0d7      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800846e:	4b4b      	ldr	r3, [pc, #300]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0ee      	beq.n	8008458 <HAL_RCC_OscConfig+0x368>
 800847a:	e014      	b.n	80084a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847c:	f7fc f838 	bl	80044f0 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008482:	e00a      	b.n	800849a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008484:	f7fc f834 	bl	80044f0 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008492:	4293      	cmp	r3, r2
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e0c1      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800849a:	4b40      	ldr	r3, [pc, #256]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1ee      	bne.n	8008484 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d105      	bne.n	80084b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ac:	4b3b      	ldr	r3, [pc, #236]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80084ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b0:	4a3a      	ldr	r2, [pc, #232]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80084b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80ad 	beq.w	800861c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084c2:	4b36      	ldr	r3, [pc, #216]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d060      	beq.n	8008590 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d145      	bne.n	8008562 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b33      	ldr	r3, [pc, #204]	@ (80085a4 <HAL_RCC_OscConfig+0x4b4>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fc f808 	bl	80044f0 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fc f804 	bl	80044f0 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e093      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f6:	4b29      	ldr	r3, [pc, #164]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	3b01      	subs	r3, #1
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852c:	071b      	lsls	r3, r3, #28
 800852e:	491b      	ldr	r1, [pc, #108]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008530:	4313      	orrs	r3, r2
 8008532:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008534:	4b1b      	ldr	r3, [pc, #108]	@ (80085a4 <HAL_RCC_OscConfig+0x4b4>)
 8008536:	2201      	movs	r2, #1
 8008538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853a:	f7fb ffd9 	bl	80044f0 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008542:	f7fb ffd5 	bl	80044f0 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e064      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008554:	4b11      	ldr	r3, [pc, #68]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0f0      	beq.n	8008542 <HAL_RCC_OscConfig+0x452>
 8008560:	e05c      	b.n	800861c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008562:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <HAL_RCC_OscConfig+0x4b4>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fb ffc2 	bl	80044f0 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008570:	f7fb ffbe 	bl	80044f0 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e04d      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008582:	4b06      	ldr	r3, [pc, #24]	@ (800859c <HAL_RCC_OscConfig+0x4ac>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f0      	bne.n	8008570 <HAL_RCC_OscConfig+0x480>
 800858e:	e045      	b.n	800861c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d107      	bne.n	80085a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e040      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
 800859c:	40023800 	.word	0x40023800
 80085a0:	40007000 	.word	0x40007000
 80085a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008628 <HAL_RCC_OscConfig+0x538>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d030      	beq.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d129      	bne.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d122      	bne.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80085d8:	4013      	ands	r3, r2
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d119      	bne.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	3b01      	subs	r3, #1
 80085f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d10f      	bne.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008604:	429a      	cmp	r2, r3
 8008606:	d107      	bne.n	8008618 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008612:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008614:	429a      	cmp	r2, r3
 8008616:	d001      	beq.n	800861c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40023800 	.word	0x40023800

0800862c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e07b      	b.n	8008736 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d108      	bne.n	8008658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800864e:	d009      	beq.n	8008664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	61da      	str	r2, [r3, #28]
 8008656:	e005      	b.n	8008664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fb fbdc 	bl	8003e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800869a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e8:	ea42 0103 	orr.w	r1, r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	0c1b      	lsrs	r3, r3, #16
 8008702:	f003 0104 	and.w	r1, r3, #4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870a:	f003 0210 	and.w	r2, r3, #16
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69da      	ldr	r2, [r3, #28]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e041      	b.n	80087d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fb fbb1 	bl	8003ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3304      	adds	r3, #4
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f000 f9cd 	bl	8008b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d001      	beq.n	80087f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e04e      	b.n	8008892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a23      	ldr	r2, [pc, #140]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d022      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881e:	d01d      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1f      	ldr	r2, [pc, #124]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d018      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1e      	ldr	r2, [pc, #120]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d013      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1c      	ldr	r2, [pc, #112]	@ (80088ac <HAL_TIM_Base_Start_IT+0xd0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1b      	ldr	r2, [pc, #108]	@ (80088b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a19      	ldr	r2, [pc, #100]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_TIM_Base_Start_IT+0x80>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a18      	ldr	r2, [pc, #96]	@ (80088b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d111      	bne.n	8008880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b06      	cmp	r3, #6
 800886c:	d010      	beq.n	8008890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	e007      	b.n	8008890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40001800 	.word	0x40001800

080088bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d122      	bne.n	8008918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d11b      	bne.n	8008918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0202 	mvn.w	r2, #2
 80088e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8ee 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 8008904:	e005      	b.n	8008912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f8e0 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8f1 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d122      	bne.n	800896c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b04      	cmp	r3, #4
 8008932:	d11b      	bne.n	800896c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0204 	mvn.w	r2, #4
 800893c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f8c4 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 8008958:	e005      	b.n	8008966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f8b6 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8c7 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b08      	cmp	r3, #8
 8008978:	d122      	bne.n	80089c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d11b      	bne.n	80089c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f06f 0208 	mvn.w	r2, #8
 8008990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2204      	movs	r2, #4
 8008996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f89a 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 80089ac:	e005      	b.n	80089ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f88c 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f89d 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b10      	cmp	r3, #16
 80089cc:	d122      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d11b      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f06f 0210 	mvn.w	r2, #16
 80089e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2208      	movs	r2, #8
 80089ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f870 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 8008a00:	e005      	b.n	8008a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f862 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f873 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d10e      	bne.n	8008a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d107      	bne.n	8008a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0201 	mvn.w	r2, #1
 8008a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7f9 f8b2 	bl	8001ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4a:	2b80      	cmp	r3, #128	@ 0x80
 8008a4c:	d10e      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a58:	2b80      	cmp	r3, #128	@ 0x80
 8008a5a:	d107      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f902 	bl	8008c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d10e      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a84:	2b40      	cmp	r3, #64	@ 0x40
 8008a86:	d107      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f838 	bl	8008b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d10e      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d107      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0220 	mvn.w	r2, #32
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8cc 	bl	8008c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a40      	ldr	r2, [pc, #256]	@ (8008c30 <TIM_Base_SetConfig+0x114>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b3a:	d00f      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8008c34 <TIM_Base_SetConfig+0x118>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00b      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a3c      	ldr	r2, [pc, #240]	@ (8008c38 <TIM_Base_SetConfig+0x11c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d007      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8008c3c <TIM_Base_SetConfig+0x120>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a3a      	ldr	r2, [pc, #232]	@ (8008c40 <TIM_Base_SetConfig+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d108      	bne.n	8008b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2f      	ldr	r2, [pc, #188]	@ (8008c30 <TIM_Base_SetConfig+0x114>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d02b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b7c:	d027      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2c      	ldr	r2, [pc, #176]	@ (8008c34 <TIM_Base_SetConfig+0x118>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d023      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2b      	ldr	r2, [pc, #172]	@ (8008c38 <TIM_Base_SetConfig+0x11c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d01f      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2a      	ldr	r2, [pc, #168]	@ (8008c3c <TIM_Base_SetConfig+0x120>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a29      	ldr	r2, [pc, #164]	@ (8008c40 <TIM_Base_SetConfig+0x124>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d017      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a28      	ldr	r2, [pc, #160]	@ (8008c44 <TIM_Base_SetConfig+0x128>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d013      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a27      	ldr	r2, [pc, #156]	@ (8008c48 <TIM_Base_SetConfig+0x12c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00f      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a26      	ldr	r2, [pc, #152]	@ (8008c4c <TIM_Base_SetConfig+0x130>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a25      	ldr	r2, [pc, #148]	@ (8008c50 <TIM_Base_SetConfig+0x134>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d007      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a24      	ldr	r2, [pc, #144]	@ (8008c54 <TIM_Base_SetConfig+0x138>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d003      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a23      	ldr	r2, [pc, #140]	@ (8008c58 <TIM_Base_SetConfig+0x13c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d108      	bne.n	8008be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a0a      	ldr	r2, [pc, #40]	@ (8008c30 <TIM_Base_SetConfig+0x114>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0xf8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008c40 <TIM_Base_SetConfig+0x124>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d103      	bne.n	8008c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	615a      	str	r2, [r3, #20]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40010400 	.word	0x40010400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800
 8008c50:	40001800 	.word	0x40001800
 8008c54:	40001c00 	.word	0x40001c00
 8008c58:	40002000 	.word	0x40002000

08008c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e03f      	b.n	8008d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fb f936 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2224      	movs	r2, #36	@ 0x24
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 ffd7 	bl	8009c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	695a      	ldr	r2, [r3, #20]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68da      	ldr	r2, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b08a      	sub	sp, #40	@ 0x28
 8008d22:	af02      	add	r7, sp, #8
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	603b      	str	r3, [r7, #0]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d17c      	bne.n	8008e38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <HAL_UART_Transmit+0x2c>
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e075      	b.n	8008e3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_UART_Transmit+0x3e>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e06e      	b.n	8008e3a <HAL_UART_Transmit+0x11c>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2221      	movs	r2, #33	@ 0x21
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d72:	f7fb fbbd 	bl	80044f0 <HAL_GetTick>
 8008d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	88fa      	ldrh	r2, [r7, #6]
 8008d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d8c:	d108      	bne.n	8008da0 <HAL_UART_Transmit+0x82>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	61bb      	str	r3, [r7, #24]
 8008d9e:	e003      	b.n	8008da8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008db0:	e02a      	b.n	8008e08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2180      	movs	r1, #128	@ 0x80
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fc51 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e036      	b.n	8008e3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	3302      	adds	r3, #2
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	e007      	b.n	8008dfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1cf      	bne.n	8008db2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2140      	movs	r1, #64	@ 0x40
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 fc21 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e006      	b.n	8008e3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e000      	b.n	8008e3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008e38:	2302      	movs	r3, #2
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3720      	adds	r7, #32
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d11d      	bne.n	8008e98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Receive_IT+0x26>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e016      	b.n	8008e9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Receive_IT+0x38>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e00f      	b.n	8008e9a <HAL_UART_Receive_IT+0x58>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fc56 	bl	8009740 <UART_Start_Receive_IT>
 8008e94:	4603      	mov	r3, r0
 8008e96:	e000      	b.n	8008e9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	4613      	mov	r3, r2
 8008eae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d11d      	bne.n	8008ef8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_UART_Receive_DMA+0x26>
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e016      	b.n	8008efa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Receive_DMA+0x38>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e00f      	b.n	8008efa <HAL_UART_Receive_DMA+0x58>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	461a      	mov	r2, r3
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fc64 	bl	80097bc <UART_Start_Receive_DMA>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	e000      	b.n	8008efa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
  }
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b0ba      	sub	sp, #232	@ 0xe8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10f      	bne.n	8008f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <HAL_UART_IRQHandler+0x66>
 8008f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fdcf 	bl	8009b06 <UART_Receive_IT>
      return;
 8008f68:	e256      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80de 	beq.w	8009130 <HAL_UART_IRQHandler+0x22c>
 8008f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80d1 	beq.w	8009130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xae>
 8008f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008faa:	f043 0201 	orr.w	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <HAL_UART_IRQHandler+0xd2>
 8008fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fce:	f043 0202 	orr.w	r2, r3, #2
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <HAL_UART_IRQHandler+0xf6>
 8008fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	f043 0204 	orr.w	r2, r3, #4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <HAL_UART_IRQHandler+0x126>
 8009006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 81ed 	beq.w	800940e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d008      	beq.n	8009052 <HAL_UART_IRQHandler+0x14e>
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fd5a 	bl	8009b06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905c:	2b40      	cmp	r3, #64	@ 0x40
 800905e:	bf0c      	ite	eq
 8009060:	2301      	moveq	r3, #1
 8009062:	2300      	movne	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <HAL_UART_IRQHandler+0x17a>
 8009076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d04f      	beq.n	800911e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc62 	bl	8009948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908e:	2b40      	cmp	r3, #64	@ 0x40
 8009090:	d141      	bne.n	8009116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3314      	adds	r3, #20
 8009098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1d9      	bne.n	8009092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d013      	beq.n	800910e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	4a7d      	ldr	r2, [pc, #500]	@ (80092e0 <HAL_UART_IRQHandler+0x3dc>)
 80090ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fc f940 	bl	8005378 <HAL_DMA_Abort_IT>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d016      	beq.n	800912c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910c:	e00e      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f99a 	bl	8009448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	e00a      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f996 	bl	8009448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800911c:	e006      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f992 	bl	8009448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800912a:	e170      	b.n	800940e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	bf00      	nop
    return;
 800912e:	e16e      	b.n	800940e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009134:	2b01      	cmp	r3, #1
 8009136:	f040 814a 	bne.w	80093ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8143 	beq.w	80093ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 813c 	beq.w	80093ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009176:	2b40      	cmp	r3, #64	@ 0x40
 8009178:	f040 80b4 	bne.w	80092e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8140 	beq.w	8009412 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800919a:	429a      	cmp	r2, r3
 800919c:	f080 8139 	bcs.w	8009412 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b2:	f000 8088 	beq.w	80092c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1d9      	bne.n	80091b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3314      	adds	r3, #20
 8009208:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009226:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800922a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800922e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e1      	bne.n	8009202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800924e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3314      	adds	r3, #20
 800925e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009264:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e3      	bne.n	800923e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009296:	f023 0310 	bic.w	r3, r3, #16
 800929a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80092a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e3      	bne.n	8009284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fb ffe9 	bl	8005298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8c0 	bl	800945c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092dc:	e099      	b.n	8009412 <HAL_UART_IRQHandler+0x50e>
 80092de:	bf00      	nop
 80092e0:	08009a0f 	.word	0x08009a0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 808b 	beq.w	8009416 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8086 	beq.w	8009416 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800931a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800932e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009330:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800933c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e3      	bne.n	800930a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3314      	adds	r3, #20
 8009348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	623b      	str	r3, [r7, #32]
   return(result);
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3314      	adds	r3, #20
 8009362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009366:	633a      	str	r2, [r7, #48]	@ 0x30
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800936c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e3      	bne.n	8009342 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	60fb      	str	r3, [r7, #12]
   return(result);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093ac:	61fa      	str	r2, [r7, #28]
 80093ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	69b9      	ldr	r1, [r7, #24]
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e3      	bne.n	8009388 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f848 	bl	800945c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093cc:	e023      	b.n	8009416 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <HAL_UART_IRQHandler+0x4ea>
 80093da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fb25 	bl	8009a36 <UART_Transmit_IT>
    return;
 80093ec:	e014      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <HAL_UART_IRQHandler+0x514>
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fb65 	bl	8009ad6 <UART_EndTransmit_IT>
    return;
 800940c:	e004      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
    return;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
      return;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
      return;
 8009416:	bf00      	nop
  }
}
 8009418:	37e8      	adds	r7, #232	@ 0xe8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop

08009420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b09c      	sub	sp, #112	@ 0x70
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d172      	bne.n	8009576 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009492:	2200      	movs	r2, #0
 8009494:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	330c      	adds	r3, #12
 800949c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e5      	bne.n	8009496 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3314      	adds	r3, #20
 80094d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80094e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3314      	adds	r3, #20
 80094e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80094ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e5      	bne.n	80094ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3314      	adds	r3, #20
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	623b      	str	r3, [r7, #32]
   return(result);
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009514:	663b      	str	r3, [r7, #96]	@ 0x60
 8009516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3314      	adds	r3, #20
 800951c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800951e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e5      	bne.n	80094fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009534:	2220      	movs	r2, #32
 8009536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800953c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953e:	2b01      	cmp	r3, #1
 8009540:	d119      	bne.n	8009576 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	60fb      	str	r3, [r7, #12]
   return(result);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 0310 	bic.w	r3, r3, #16
 8009558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800955a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009562:	61fa      	str	r2, [r7, #28]
 8009564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	69b9      	ldr	r1, [r7, #24]
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	617b      	str	r3, [r7, #20]
   return(result);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957a:	2b01      	cmp	r3, #1
 800957c:	d106      	bne.n	800958c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800957e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009582:	4619      	mov	r1, r3
 8009584:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009586:	f7ff ff69 	bl	800945c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800958a:	e002      	b.n	8009592 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800958c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800958e:	f7f8 fab7 	bl	8001b00 <HAL_UART_RxCpltCallback>
}
 8009592:	bf00      	nop
 8009594:	3770      	adds	r7, #112	@ 0x70
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d108      	bne.n	80095c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095b4:	085b      	lsrs	r3, r3, #1
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4619      	mov	r1, r3
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff ff4e 	bl	800945c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095c0:	e002      	b.n	80095c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff ff36 	bl	8009434 <HAL_UART_RxHalfCpltCallback>
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ec:	2b80      	cmp	r3, #128	@ 0x80
 80095ee:	bf0c      	ite	eq
 80095f0:	2301      	moveq	r3, #1
 80095f2:	2300      	movne	r3, #0
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b21      	cmp	r3, #33	@ 0x21
 8009602:	d108      	bne.n	8009616 <UART_DMAError+0x46>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d005      	beq.n	8009616 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f000 f971 	bl	80098f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009620:	2b40      	cmp	r3, #64	@ 0x40
 8009622:	bf0c      	ite	eq
 8009624:	2301      	moveq	r3, #1
 8009626:	2300      	movne	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b22      	cmp	r3, #34	@ 0x22
 8009636:	d108      	bne.n	800964a <UART_DMAError+0x7a>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2200      	movs	r2, #0
 8009642:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009644:	68b8      	ldr	r0, [r7, #8]
 8009646:	f000 f97f 	bl	8009948 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964e:	f043 0210 	orr.w	r2, r3, #16
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009656:	68b8      	ldr	r0, [r7, #8]
 8009658:	f7ff fef6 	bl	8009448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	@ 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	4613      	mov	r3, r2
 8009672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009674:	e050      	b.n	8009718 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d04c      	beq.n	8009718 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800967e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009680:	2b00      	cmp	r3, #0
 8009682:	d007      	beq.n	8009694 <UART_WaitOnFlagUntilTimeout+0x30>
 8009684:	f7fa ff34 	bl	80044f0 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009690:	429a      	cmp	r2, r3
 8009692:	d241      	bcs.n	8009718 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	330c      	adds	r3, #12
 800969a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330c      	adds	r3, #12
 80096b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e5      	bne.n	8009694 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3314      	adds	r3, #20
 80096ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	613b      	str	r3, [r7, #16]
   return(result);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f023 0301 	bic.w	r3, r3, #1
 80096de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3314      	adds	r3, #20
 80096e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e8:	623a      	str	r2, [r7, #32]
 80096ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	69f9      	ldr	r1, [r7, #28]
 80096ee:	6a3a      	ldr	r2, [r7, #32]
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e5      	bne.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e00f      	b.n	8009738 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4013      	ands	r3, r2
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	429a      	cmp	r2, r3
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	461a      	mov	r2, r3
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	429a      	cmp	r2, r3
 8009734:	d09f      	beq.n	8009676 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3740      	adds	r7, #64	@ 0x40
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	88fa      	ldrh	r2, [r7, #6]
 800975e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2222      	movs	r2, #34	@ 0x22
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d007      	beq.n	800978e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800978c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695a      	ldr	r2, [r3, #20]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0220 	orr.w	r2, r2, #32
 80097ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b098      	sub	sp, #96	@ 0x60
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2222      	movs	r2, #34	@ 0x22
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e8:	4a40      	ldr	r2, [pc, #256]	@ (80098ec <UART_Start_Receive_DMA+0x130>)
 80097ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	4a3f      	ldr	r2, [pc, #252]	@ (80098f0 <UART_Start_Receive_DMA+0x134>)
 80097f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f8:	4a3e      	ldr	r2, [pc, #248]	@ (80098f4 <UART_Start_Receive_DMA+0x138>)
 80097fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009800:	2200      	movs	r2, #0
 8009802:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009804:	f107 0308 	add.w	r3, r7, #8
 8009808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	4619      	mov	r1, r3
 8009816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	f7fb fce4 	bl	80051e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d019      	beq.n	800987a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800985c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009866:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009868:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800986c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3314      	adds	r3, #20
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	f043 0301 	orr.w	r3, r3, #1
 8009890:	657b      	str	r3, [r7, #84]	@ 0x54
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800989a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800989c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80098a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3314      	adds	r3, #20
 80098b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	617b      	str	r3, [r7, #20]
   return(result);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3314      	adds	r3, #20
 80098cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80098d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6a39      	ldr	r1, [r7, #32]
 80098d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	61fb      	str	r3, [r7, #28]
   return(result);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3760      	adds	r7, #96	@ 0x60
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	08009475 	.word	0x08009475
 80098f0:	0800959b 	.word	0x0800959b
 80098f4:	080095d1 	.word	0x080095d1

080098f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b089      	sub	sp, #36	@ 0x24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	61ba      	str	r2, [r7, #24]
 8009922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6979      	ldr	r1, [r7, #20]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	613b      	str	r3, [r7, #16]
   return(result);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e5      	bne.n	8009900 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800993c:	bf00      	nop
 800993e:	3724      	adds	r7, #36	@ 0x24
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b095      	sub	sp, #84	@ 0x54
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009970:	643a      	str	r2, [r7, #64]	@ 0x40
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800997e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e5      	bne.n	8009950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3314      	adds	r3, #20
 800998a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	61fb      	str	r3, [r7, #28]
   return(result);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3314      	adds	r3, #20
 80099a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e5      	bne.n	8009984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d119      	bne.n	80099f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f023 0310 	bic.w	r3, r3, #16
 80099d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099e0:	61ba      	str	r2, [r7, #24]
 80099e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6979      	ldr	r1, [r7, #20]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	613b      	str	r3, [r7, #16]
   return(result);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e5      	bne.n	80099c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a02:	bf00      	nop
 8009a04:	3754      	adds	r7, #84	@ 0x54
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fd0d 	bl	8009448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b21      	cmp	r3, #33	@ 0x21
 8009a48:	d13e      	bne.n	8009ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a52:	d114      	bne.n	8009a7e <UART_Transmit_IT+0x48>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d110      	bne.n	8009a7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	1c9a      	adds	r2, r3, #2
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	621a      	str	r2, [r3, #32]
 8009a7c:	e008      	b.n	8009a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	1c59      	adds	r1, r3, #1
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6211      	str	r1, [r2, #32]
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e000      	b.n	8009aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ac8:	2302      	movs	r3, #2
  }
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fc92 	bl	8009420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b08c      	sub	sp, #48	@ 0x30
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b22      	cmp	r3, #34	@ 0x22
 8009b18:	f040 80ab 	bne.w	8009c72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b24:	d117      	bne.n	8009b56 <UART_Receive_IT+0x50>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d113      	bne.n	8009b56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	1c9a      	adds	r2, r3, #2
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b54:	e026      	b.n	8009ba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b68:	d007      	beq.n	8009b7a <UART_Receive_IT+0x74>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <UART_Receive_IT+0x82>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	e008      	b.n	8009b9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d15a      	bne.n	8009c6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0220 	bic.w	r2, r2, #32
 8009bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695a      	ldr	r2, [r3, #20]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0201 	bic.w	r2, r2, #1
 8009be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d135      	bne.n	8009c64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f023 0310 	bic.w	r3, r3, #16
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c1e:	623a      	str	r2, [r7, #32]
 8009c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	69f9      	ldr	r1, [r7, #28]
 8009c24:	6a3a      	ldr	r2, [r7, #32]
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b10      	cmp	r3, #16
 8009c3e:	d10a      	bne.n	8009c56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff fbfd 	bl	800945c <HAL_UARTEx_RxEventCallback>
 8009c62:	e002      	b.n	8009c6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7f7 ff4b 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e002      	b.n	8009c74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e000      	b.n	8009c74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c72:	2302      	movs	r3, #2
  }
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3730      	adds	r7, #48	@ 0x30
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c80:	b0c0      	sub	sp, #256	@ 0x100
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c98:	68d9      	ldr	r1, [r3, #12]
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	ea40 0301 	orr.w	r3, r0, r1
 8009ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009cd4:	f021 010c 	bic.w	r1, r1, #12
 8009cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf6:	6999      	ldr	r1, [r3, #24]
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	ea40 0301 	orr.w	r3, r0, r1
 8009d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8009f48 <UART_SetConfig+0x2cc>)
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d005      	beq.n	8009d1c <UART_SetConfig+0xa0>
 8009d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b8d      	ldr	r3, [pc, #564]	@ (8009f4c <UART_SetConfig+0x2d0>)
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d104      	bne.n	8009d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d1c:	f7fd fc7a 	bl	8007614 <HAL_RCC_GetPCLK2Freq>
 8009d20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d24:	e003      	b.n	8009d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d26:	f7fd fc61 	bl	80075ec <HAL_RCC_GetPCLK1Freq>
 8009d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d38:	f040 810c 	bne.w	8009f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	1891      	adds	r1, r2, r2
 8009d54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d56:	415b      	adcs	r3, r3
 8009d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d5e:	4621      	mov	r1, r4
 8009d60:	eb12 0801 	adds.w	r8, r2, r1
 8009d64:	4629      	mov	r1, r5
 8009d66:	eb43 0901 	adc.w	r9, r3, r1
 8009d6a:	f04f 0200 	mov.w	r2, #0
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d7e:	4690      	mov	r8, r2
 8009d80:	4699      	mov	r9, r3
 8009d82:	4623      	mov	r3, r4
 8009d84:	eb18 0303 	adds.w	r3, r8, r3
 8009d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	eb49 0303 	adc.w	r3, r9, r3
 8009d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009da2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009daa:	460b      	mov	r3, r1
 8009dac:	18db      	adds	r3, r3, r3
 8009dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009db0:	4613      	mov	r3, r2
 8009db2:	eb42 0303 	adc.w	r3, r2, r3
 8009db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009dc0:	f7f6 ff82 	bl	8000cc8 <__aeabi_uldivmod>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4b61      	ldr	r3, [pc, #388]	@ (8009f50 <UART_SetConfig+0x2d4>)
 8009dca:	fba3 2302 	umull	r2, r3, r3, r2
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	011c      	lsls	r4, r3, #4
 8009dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	1891      	adds	r1, r2, r2
 8009dea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009dec:	415b      	adcs	r3, r3
 8009dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009df4:	4641      	mov	r1, r8
 8009df6:	eb12 0a01 	adds.w	sl, r2, r1
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e14:	4692      	mov	sl, r2
 8009e16:	469b      	mov	fp, r3
 8009e18:	4643      	mov	r3, r8
 8009e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e22:	464b      	mov	r3, r9
 8009e24:	eb4b 0303 	adc.w	r3, fp, r3
 8009e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e40:	460b      	mov	r3, r1
 8009e42:	18db      	adds	r3, r3, r3
 8009e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e46:	4613      	mov	r3, r2
 8009e48:	eb42 0303 	adc.w	r3, r2, r3
 8009e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e56:	f7f6 ff37 	bl	8000cc8 <__aeabi_uldivmod>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4b3b      	ldr	r3, [pc, #236]	@ (8009f50 <UART_SetConfig+0x2d4>)
 8009e62:	fba3 2301 	umull	r2, r3, r3, r1
 8009e66:	095b      	lsrs	r3, r3, #5
 8009e68:	2264      	movs	r2, #100	@ 0x64
 8009e6a:	fb02 f303 	mul.w	r3, r2, r3
 8009e6e:	1acb      	subs	r3, r1, r3
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e76:	4b36      	ldr	r3, [pc, #216]	@ (8009f50 <UART_SetConfig+0x2d4>)
 8009e78:	fba3 2302 	umull	r2, r3, r3, r2
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e84:	441c      	add	r4, r3
 8009e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	1891      	adds	r1, r2, r2
 8009e9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ea0:	415b      	adcs	r3, r3
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	1851      	adds	r1, r2, r1
 8009eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eae:	4649      	mov	r1, r9
 8009eb0:	414b      	adcs	r3, r1
 8009eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	00cb      	lsls	r3, r1, #3
 8009ec4:	4651      	mov	r1, sl
 8009ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eca:	4651      	mov	r1, sl
 8009ecc:	00ca      	lsls	r2, r1, #3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	189b      	adds	r3, r3, r2
 8009ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009edc:	464b      	mov	r3, r9
 8009ede:	460a      	mov	r2, r1
 8009ee0:	eb42 0303 	adc.w	r3, r2, r3
 8009ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009efc:	460b      	mov	r3, r1
 8009efe:	18db      	adds	r3, r3, r3
 8009f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f02:	4613      	mov	r3, r2
 8009f04:	eb42 0303 	adc.w	r3, r2, r3
 8009f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009f12:	f7f6 fed9 	bl	8000cc8 <__aeabi_uldivmod>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f50 <UART_SetConfig+0x2d4>)
 8009f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	2164      	movs	r1, #100	@ 0x64
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	3332      	adds	r3, #50	@ 0x32
 8009f2e:	4a08      	ldr	r2, [pc, #32]	@ (8009f50 <UART_SetConfig+0x2d4>)
 8009f30:	fba2 2303 	umull	r2, r3, r2, r3
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	f003 0207 	and.w	r2, r3, #7
 8009f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4422      	add	r2, r4
 8009f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f44:	e106      	b.n	800a154 <UART_SetConfig+0x4d8>
 8009f46:	bf00      	nop
 8009f48:	40011000 	.word	0x40011000
 8009f4c:	40011400 	.word	0x40011400
 8009f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f66:	4642      	mov	r2, r8
 8009f68:	464b      	mov	r3, r9
 8009f6a:	1891      	adds	r1, r2, r2
 8009f6c:	6239      	str	r1, [r7, #32]
 8009f6e:	415b      	adcs	r3, r3
 8009f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f76:	4641      	mov	r1, r8
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	eb43 0501 	adc.w	r5, r3, r1
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	00eb      	lsls	r3, r5, #3
 8009f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f8e:	00e2      	lsls	r2, r4, #3
 8009f90:	4614      	mov	r4, r2
 8009f92:	461d      	mov	r5, r3
 8009f94:	4643      	mov	r3, r8
 8009f96:	18e3      	adds	r3, r4, r3
 8009f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	eb45 0303 	adc.w	r3, r5, r3
 8009fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fb6:	f04f 0200 	mov.w	r2, #0
 8009fba:	f04f 0300 	mov.w	r3, #0
 8009fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	008b      	lsls	r3, r1, #2
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fcc:	4621      	mov	r1, r4
 8009fce:	008a      	lsls	r2, r1, #2
 8009fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fd4:	f7f6 fe78 	bl	8000cc8 <__aeabi_uldivmod>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4b60      	ldr	r3, [pc, #384]	@ (800a160 <UART_SetConfig+0x4e4>)
 8009fde:	fba3 2302 	umull	r2, r3, r3, r2
 8009fe2:	095b      	lsrs	r3, r3, #5
 8009fe4:	011c      	lsls	r4, r3, #4
 8009fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	464b      	mov	r3, r9
 8009ffc:	1891      	adds	r1, r2, r2
 8009ffe:	61b9      	str	r1, [r7, #24]
 800a000:	415b      	adcs	r3, r3
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a008:	4641      	mov	r1, r8
 800a00a:	1851      	adds	r1, r2, r1
 800a00c:	6139      	str	r1, [r7, #16]
 800a00e:	4649      	mov	r1, r9
 800a010:	414b      	adcs	r3, r1
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a020:	4659      	mov	r1, fp
 800a022:	00cb      	lsls	r3, r1, #3
 800a024:	4651      	mov	r1, sl
 800a026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a02a:	4651      	mov	r1, sl
 800a02c:	00ca      	lsls	r2, r1, #3
 800a02e:	4610      	mov	r0, r2
 800a030:	4619      	mov	r1, r3
 800a032:	4603      	mov	r3, r0
 800a034:	4642      	mov	r2, r8
 800a036:	189b      	adds	r3, r3, r2
 800a038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a03c:	464b      	mov	r3, r9
 800a03e:	460a      	mov	r2, r1
 800a040:	eb42 0303 	adc.w	r3, r2, r3
 800a044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a054:	f04f 0200 	mov.w	r2, #0
 800a058:	f04f 0300 	mov.w	r3, #0
 800a05c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a060:	4649      	mov	r1, r9
 800a062:	008b      	lsls	r3, r1, #2
 800a064:	4641      	mov	r1, r8
 800a066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a06a:	4641      	mov	r1, r8
 800a06c:	008a      	lsls	r2, r1, #2
 800a06e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a072:	f7f6 fe29 	bl	8000cc8 <__aeabi_uldivmod>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	4b38      	ldr	r3, [pc, #224]	@ (800a160 <UART_SetConfig+0x4e4>)
 800a07e:	fba3 2301 	umull	r2, r3, r3, r1
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	2264      	movs	r2, #100	@ 0x64
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	1acb      	subs	r3, r1, r3
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	3332      	adds	r3, #50	@ 0x32
 800a090:	4a33      	ldr	r2, [pc, #204]	@ (800a160 <UART_SetConfig+0x4e4>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a09c:	441c      	add	r4, r3
 800a09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a0a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	1891      	adds	r1, r2, r2
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	415b      	adcs	r3, r3
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0bc:	4641      	mov	r1, r8
 800a0be:	1851      	adds	r1, r2, r1
 800a0c0:	6039      	str	r1, [r7, #0]
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	414b      	adcs	r3, r1
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	f04f 0200 	mov.w	r2, #0
 800a0cc:	f04f 0300 	mov.w	r3, #0
 800a0d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	00cb      	lsls	r3, r1, #3
 800a0d8:	4651      	mov	r1, sl
 800a0da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0de:	4651      	mov	r1, sl
 800a0e0:	00ca      	lsls	r2, r1, #3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	189b      	adds	r3, r3, r2
 800a0ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	eb42 0303 	adc.w	r3, r2, r3
 800a0f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	663b      	str	r3, [r7, #96]	@ 0x60
 800a102:	667a      	str	r2, [r7, #100]	@ 0x64
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a110:	4649      	mov	r1, r9
 800a112:	008b      	lsls	r3, r1, #2
 800a114:	4641      	mov	r1, r8
 800a116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a11a:	4641      	mov	r1, r8
 800a11c:	008a      	lsls	r2, r1, #2
 800a11e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a122:	f7f6 fdd1 	bl	8000cc8 <__aeabi_uldivmod>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4b0d      	ldr	r3, [pc, #52]	@ (800a160 <UART_SetConfig+0x4e4>)
 800a12c:	fba3 1302 	umull	r1, r3, r3, r2
 800a130:	095b      	lsrs	r3, r3, #5
 800a132:	2164      	movs	r1, #100	@ 0x64
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	011b      	lsls	r3, r3, #4
 800a13c:	3332      	adds	r3, #50	@ 0x32
 800a13e:	4a08      	ldr	r2, [pc, #32]	@ (800a160 <UART_SetConfig+0x4e4>)
 800a140:	fba2 2303 	umull	r2, r3, r2, r3
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	f003 020f 	and.w	r2, r3, #15
 800a14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4422      	add	r2, r4
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	bf00      	nop
 800a156:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a15a:	46bd      	mov	sp, r7
 800a15c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a160:	51eb851f 	.word	0x51eb851f

0800a164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a164:	b084      	sub	sp, #16
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	f107 001c 	add.w	r0, r7, #28
 800a172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d122      	bne.n	800a1c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a180:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d105      	bne.n	800a1b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f001 fbe8 	bl	800b98c <USB_CoreReset>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]
 800a1c0:	e01a      	b.n	800a1f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 fbdc 	bl	800b98c <USB_CoreReset>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1ea:	e005      	b.n	800a1f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d10b      	bne.n	800a216 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f043 0206 	orr.w	r2, r3, #6
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f043 0220 	orr.w	r2, r3, #32
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a222:	b004      	add	sp, #16
 800a224:	4770      	bx	lr
	...

0800a228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	4613      	mov	r3, r2
 800a234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d165      	bne.n	800a308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4a41      	ldr	r2, [pc, #260]	@ (800a344 <USB_SetTurnaroundTime+0x11c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d906      	bls.n	800a252 <USB_SetTurnaroundTime+0x2a>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a40      	ldr	r2, [pc, #256]	@ (800a348 <USB_SetTurnaroundTime+0x120>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d202      	bcs.n	800a252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a24c:	230f      	movs	r3, #15
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e062      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a3c      	ldr	r2, [pc, #240]	@ (800a348 <USB_SetTurnaroundTime+0x120>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d306      	bcc.n	800a268 <USB_SetTurnaroundTime+0x40>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4a3b      	ldr	r2, [pc, #236]	@ (800a34c <USB_SetTurnaroundTime+0x124>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d202      	bcs.n	800a268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a262:	230e      	movs	r3, #14
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e057      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a38      	ldr	r2, [pc, #224]	@ (800a34c <USB_SetTurnaroundTime+0x124>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d306      	bcc.n	800a27e <USB_SetTurnaroundTime+0x56>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a37      	ldr	r2, [pc, #220]	@ (800a350 <USB_SetTurnaroundTime+0x128>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d202      	bcs.n	800a27e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a278:	230d      	movs	r3, #13
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e04c      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4a33      	ldr	r2, [pc, #204]	@ (800a350 <USB_SetTurnaroundTime+0x128>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d306      	bcc.n	800a294 <USB_SetTurnaroundTime+0x6c>
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	4a32      	ldr	r2, [pc, #200]	@ (800a354 <USB_SetTurnaroundTime+0x12c>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d802      	bhi.n	800a294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a28e:	230c      	movs	r3, #12
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	e041      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4a2f      	ldr	r2, [pc, #188]	@ (800a354 <USB_SetTurnaroundTime+0x12c>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d906      	bls.n	800a2aa <USB_SetTurnaroundTime+0x82>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	4a2e      	ldr	r2, [pc, #184]	@ (800a358 <USB_SetTurnaroundTime+0x130>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d802      	bhi.n	800a2aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a2a4:	230b      	movs	r3, #11
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e036      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a358 <USB_SetTurnaroundTime+0x130>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d906      	bls.n	800a2c0 <USB_SetTurnaroundTime+0x98>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	4a29      	ldr	r2, [pc, #164]	@ (800a35c <USB_SetTurnaroundTime+0x134>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d802      	bhi.n	800a2c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a2ba:	230a      	movs	r3, #10
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	e02b      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4a26      	ldr	r2, [pc, #152]	@ (800a35c <USB_SetTurnaroundTime+0x134>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d906      	bls.n	800a2d6 <USB_SetTurnaroundTime+0xae>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4a25      	ldr	r2, [pc, #148]	@ (800a360 <USB_SetTurnaroundTime+0x138>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d202      	bcs.n	800a2d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a2d0:	2309      	movs	r3, #9
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e020      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4a21      	ldr	r2, [pc, #132]	@ (800a360 <USB_SetTurnaroundTime+0x138>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d306      	bcc.n	800a2ec <USB_SetTurnaroundTime+0xc4>
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	4a20      	ldr	r2, [pc, #128]	@ (800a364 <USB_SetTurnaroundTime+0x13c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d802      	bhi.n	800a2ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2e6:	2308      	movs	r3, #8
 800a2e8:	617b      	str	r3, [r7, #20]
 800a2ea:	e015      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	4a1d      	ldr	r2, [pc, #116]	@ (800a364 <USB_SetTurnaroundTime+0x13c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d906      	bls.n	800a302 <USB_SetTurnaroundTime+0xda>
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a368 <USB_SetTurnaroundTime+0x140>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d202      	bcs.n	800a302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2fc:	2307      	movs	r3, #7
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e00a      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a302:	2306      	movs	r3, #6
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e007      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d102      	bne.n	800a314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a30e:	2309      	movs	r3, #9
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	e001      	b.n	800a318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a314:	2309      	movs	r3, #9
 800a316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	029b      	lsls	r3, r3, #10
 800a32c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a330:	431a      	orrs	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	371c      	adds	r7, #28
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	00d8acbf 	.word	0x00d8acbf
 800a348:	00e4e1c0 	.word	0x00e4e1c0
 800a34c:	00f42400 	.word	0x00f42400
 800a350:	01067380 	.word	0x01067380
 800a354:	011a499f 	.word	0x011a499f
 800a358:	01312cff 	.word	0x01312cff
 800a35c:	014ca43f 	.word	0x014ca43f
 800a360:	016e3600 	.word	0x016e3600
 800a364:	01a6ab1f 	.word	0x01a6ab1f
 800a368:	01e84800 	.word	0x01e84800

0800a36c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f043 0201 	orr.w	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f023 0201 	bic.w	r2, r3, #1
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d115      	bne.n	800a3fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3de:	2001      	movs	r0, #1
 800a3e0:	f7fa f892 	bl	8004508 <HAL_Delay>
      ms++;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 fa3f 	bl	800b86e <USB_GetMode>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d01e      	beq.n	800a434 <USB_SetCurrentMode+0x84>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b31      	cmp	r3, #49	@ 0x31
 800a3fa:	d9f0      	bls.n	800a3de <USB_SetCurrentMode+0x2e>
 800a3fc:	e01a      	b.n	800a434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d115      	bne.n	800a430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a410:	2001      	movs	r0, #1
 800a412:	f7fa f879 	bl	8004508 <HAL_Delay>
      ms++;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3301      	adds	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 fa26 	bl	800b86e <USB_GetMode>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d005      	beq.n	800a434 <USB_SetCurrentMode+0x84>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b31      	cmp	r3, #49	@ 0x31
 800a42c:	d9f0      	bls.n	800a410 <USB_SetCurrentMode+0x60>
 800a42e:	e001      	b.n	800a434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e005      	b.n	800a440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b32      	cmp	r3, #50	@ 0x32
 800a438:	d101      	bne.n	800a43e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b086      	sub	sp, #24
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a462:	2300      	movs	r3, #0
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	e009      	b.n	800a47c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	3340      	adds	r3, #64	@ 0x40
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	2200      	movs	r2, #0
 800a474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	3301      	adds	r3, #1
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2b0e      	cmp	r3, #14
 800a480:	d9f2      	bls.n	800a468 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d11c      	bne.n	800a4c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a496:	f043 0302 	orr.w	r3, r3, #2
 800a49a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e005      	b.n	800a4ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	680b      	ldr	r3, [r1, #0]
 800a4ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d10c      	bne.n	800a50e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d104      	bne.n	800a504 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f965 	bl	800a7cc <USB_SetDevSpeed>
 800a502:	e008      	b.n	800a516 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a504:	2101      	movs	r1, #1
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f960 	bl	800a7cc <USB_SetDevSpeed>
 800a50c:	e003      	b.n	800a516 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a50e:	2103      	movs	r1, #3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f95b 	bl	800a7cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a516:	2110      	movs	r1, #16
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f8f3 	bl	800a704 <USB_FlushTxFifo>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f91f 	bl	800a76c <USB_FlushRxFifo>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a53e:	461a      	mov	r2, r3
 800a540:	2300      	movs	r3, #0
 800a542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a54a:	461a      	mov	r2, r3
 800a54c:	2300      	movs	r3, #0
 800a54e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a556:	461a      	mov	r2, r3
 800a558:	2300      	movs	r3, #0
 800a55a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	e043      	b.n	800a5ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a578:	d118      	bne.n	800a5ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58c:	461a      	mov	r2, r3
 800a58e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	e013      	b.n	800a5be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	e008      	b.n	800a5be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	015a      	lsls	r2, r3, #5
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a5e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	613b      	str	r3, [r7, #16]
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d3b7      	bcc.n	800a562 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	e043      	b.n	800a680 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a60a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a60e:	d118      	bne.n	800a642 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10a      	bne.n	800a62c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a622:	461a      	mov	r2, r3
 800a624:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	e013      	b.n	800a654 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a638:	461a      	mov	r2, r3
 800a63a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	e008      	b.n	800a654 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a64e:	461a      	mov	r2, r3
 800a650:	2300      	movs	r3, #0
 800a652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	461a      	mov	r2, r3
 800a662:	2300      	movs	r3, #0
 800a664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a672:	461a      	mov	r2, r3
 800a674:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3301      	adds	r3, #1
 800a67e:	613b      	str	r3, [r7, #16]
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	429a      	cmp	r2, r3
 800a686:	d3b7      	bcc.n	800a5f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a696:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a69a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a6a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d105      	bne.n	800a6bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f043 0210 	orr.w	r2, r3, #16
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699a      	ldr	r2, [r3, #24]
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a700 <USB_DevInit+0x2b8>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f043 0208 	orr.w	r2, r3, #8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a6da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d107      	bne.n	800a6f0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6fc:	b004      	add	sp, #16
 800a6fe:	4770      	bx	lr
 800a700:	803c3800 	.word	0x803c3800

0800a704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3301      	adds	r3, #1
 800a716:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4a13      	ldr	r2, [pc, #76]	@ (800a768 <USB_FlushTxFifo+0x64>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d901      	bls.n	800a724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e01b      	b.n	800a75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	daf2      	bge.n	800a712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	019b      	lsls	r3, r3, #6
 800a734:	f043 0220 	orr.w	r2, r3, #32
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3301      	adds	r3, #1
 800a740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4a08      	ldr	r2, [pc, #32]	@ (800a768 <USB_FlushTxFifo+0x64>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d901      	bls.n	800a74e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e006      	b.n	800a75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b20      	cmp	r3, #32
 800a758:	d0f0      	beq.n	800a73c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	00030d40 	.word	0x00030d40

0800a76c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4a11      	ldr	r2, [pc, #68]	@ (800a7c8 <USB_FlushRxFifo+0x5c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d901      	bls.n	800a78a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e018      	b.n	800a7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	daf2      	bge.n	800a778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2210      	movs	r2, #16
 800a79a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4a08      	ldr	r2, [pc, #32]	@ (800a7c8 <USB_FlushRxFifo+0x5c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d901      	bls.n	800a7ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e006      	b.n	800a7bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d0f0      	beq.n	800a79c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	00030d40 	.word	0x00030d40

0800a7cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	68f9      	ldr	r1, [r7, #12]
 800a7e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b087      	sub	sp, #28
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f003 0306 	and.w	r3, r3, #6
 800a816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
 800a822:	e00a      	b.n	800a83a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d002      	beq.n	800a830 <USB_GetDevSpeed+0x32>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b06      	cmp	r3, #6
 800a82e:	d102      	bne.n	800a836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a830:	2302      	movs	r3, #2
 800a832:	75fb      	strb	r3, [r7, #23]
 800a834:	e001      	b.n	800a83a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a836:	230f      	movs	r3, #15
 800a838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	371c      	adds	r7, #28
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d13a      	bne.n	800a8da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a86a:	69da      	ldr	r2, [r3, #28]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	f003 030f 	and.w	r3, r3, #15
 800a874:	2101      	movs	r1, #1
 800a876:	fa01 f303 	lsl.w	r3, r1, r3
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	68f9      	ldr	r1, [r7, #12]
 800a87e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a882:	4313      	orrs	r3, r2
 800a884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d155      	bne.n	800a948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	791b      	ldrb	r3, [r3, #4]
 800a8b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	059b      	lsls	r3, r3, #22
 800a8be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	e036      	b.n	800a948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e0:	69da      	ldr	r2, [r3, #28]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f003 030f 	and.w	r3, r3, #15
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d11a      	bne.n	800a948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	791b      	ldrb	r3, [r3, #4]
 800a92c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a92e:	430b      	orrs	r3, r1
 800a930:	4313      	orrs	r3, r2
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	0151      	lsls	r1, r2, #5
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	440a      	add	r2, r1
 800a93a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d161      	bne.n	800aa38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a98a:	d11f      	bne.n	800a9cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	0151      	lsls	r1, r2, #5
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	440a      	add	r2, r1
 800a9a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	f003 030f 	and.w	r3, r3, #15
 800a9dc:	2101      	movs	r1, #1
 800a9de:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	68f9      	ldr	r1, [r7, #12]
 800a9e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f6:	69da      	ldr	r2, [r3, #28]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 030f 	and.w	r3, r3, #15
 800aa00:	2101      	movs	r1, #1
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	43db      	mvns	r3, r3
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa10:	4013      	ands	r3, r2
 800aa12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	0159      	lsls	r1, r3, #5
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	440b      	add	r3, r1
 800aa2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4b35      	ldr	r3, [pc, #212]	@ (800ab08 <USB_DeactivateEndpoint+0x1b0>)
 800aa32:	4013      	ands	r3, r2
 800aa34:	600b      	str	r3, [r1, #0]
 800aa36:	e060      	b.n	800aafa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa4e:	d11f      	bne.n	800aa90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	0151      	lsls	r1, r2, #5
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	440a      	add	r2, r1
 800aa66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	f003 030f 	and.w	r3, r3, #15
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	43db      	mvns	r3, r3
 800aaaa:	68f9      	ldr	r1, [r7, #12]
 800aaac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aab0:	4013      	ands	r3, r2
 800aab2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaba:	69da      	ldr	r2, [r3, #28]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	f003 030f 	and.w	r3, r3, #15
 800aac4:	2101      	movs	r1, #1
 800aac6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaca:	041b      	lsls	r3, r3, #16
 800aacc:	43db      	mvns	r3, r3
 800aace:	68f9      	ldr	r1, [r7, #12]
 800aad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aad4:	4013      	ands	r3, r2
 800aad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	0159      	lsls	r1, r3, #5
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	440b      	add	r3, r1
 800aaee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4b05      	ldr	r3, [pc, #20]	@ (800ab0c <USB_DeactivateEndpoint+0x1b4>)
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	ec337800 	.word	0xec337800
 800ab0c:	eff37800 	.word	0xeff37800

0800ab10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08a      	sub	sp, #40	@ 0x28
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	f040 815c 	bne.w	800adea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d132      	bne.n	800aba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	69fa      	ldr	r2, [r7, #28]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	69fa      	ldr	r2, [r7, #28]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab98:	0cdb      	lsrs	r3, r3, #19
 800ab9a:	04db      	lsls	r3, r3, #19
 800ab9c:	6113      	str	r3, [r2, #16]
 800ab9e:	e074      	b.n	800ac8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	0151      	lsls	r1, r2, #5
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	440a      	add	r2, r1
 800abb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abba:	0cdb      	lsrs	r3, r3, #19
 800abbc:	04db      	lsls	r3, r3, #19
 800abbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	0151      	lsls	r1, r2, #5
 800abd2:	69fa      	ldr	r2, [r7, #28]
 800abd4:	440a      	add	r2, r1
 800abd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	6999      	ldr	r1, [r3, #24]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	440b      	add	r3, r1
 800abfc:	1e59      	subs	r1, r3, #1
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ac08:	4b9d      	ldr	r3, [pc, #628]	@ (800ae80 <USB_EPStartXfer+0x370>)
 800ac0a:	400b      	ands	r3, r1
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	0148      	lsls	r0, r1, #5
 800ac10:	69f9      	ldr	r1, [r7, #28]
 800ac12:	4401      	add	r1, r0
 800ac14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac32:	69b9      	ldr	r1, [r7, #24]
 800ac34:	0148      	lsls	r0, r1, #5
 800ac36:	69f9      	ldr	r1, [r7, #28]
 800ac38:	4401      	add	r1, r0
 800ac3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d11f      	bne.n	800ac8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	0151      	lsls	r1, r2, #5
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	440a      	add	r2, r1
 800ac60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac64:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ac68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d14b      	bne.n	800ad28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d009      	beq.n	800acac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca4:	461a      	mov	r2, r3
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	791b      	ldrb	r3, [r3, #4]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d128      	bne.n	800ad06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d110      	bne.n	800ace6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69ba      	ldr	r2, [r7, #24]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ace2:	6013      	str	r3, [r2, #0]
 800ace4:	e00f      	b.n	800ad06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	0151      	lsls	r1, r2, #5
 800acf8:	69fa      	ldr	r2, [r7, #28]
 800acfa:	440a      	add	r2, r1
 800acfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	e133      	b.n	800af90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	0151      	lsls	r1, r2, #5
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad42:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	791b      	ldrb	r3, [r3, #4]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d015      	beq.n	800ad7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 811b 	beq.w	800af90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad70:	69f9      	ldr	r1, [r7, #28]
 800ad72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad76:	4313      	orrs	r3, r2
 800ad78:	634b      	str	r3, [r1, #52]	@ 0x34
 800ad7a:	e109      	b.n	800af90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d110      	bne.n	800adae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	0151      	lsls	r1, r2, #5
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	440a      	add	r2, r1
 800ada2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ada6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	e00f      	b.n	800adce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	69fa      	ldr	r2, [r7, #28]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	6919      	ldr	r1, [r3, #16]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	781a      	ldrb	r2, [r3, #0]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	b298      	uxth	r0, r3
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4603      	mov	r3, r0
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fade 	bl	800b3a4 <USB_WritePacket>
 800ade8:	e0d2      	b.n	800af90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	69ba      	ldr	r2, [r7, #24]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae04:	0cdb      	lsrs	r3, r3, #19
 800ae06:	04db      	lsls	r3, r3, #19
 800ae08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	015a      	lsls	r2, r3, #5
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	4413      	add	r3, r2
 800ae12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	0151      	lsls	r1, r2, #5
 800ae1c:	69fa      	ldr	r2, [r7, #28]
 800ae1e:	440a      	add	r2, r1
 800ae20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ae28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ae2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d126      	bne.n	800ae84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae4c:	69b9      	ldr	r1, [r7, #24]
 800ae4e:	0148      	lsls	r0, r1, #5
 800ae50:	69f9      	ldr	r1, [r7, #28]
 800ae52:	4401      	add	r1, r0
 800ae54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae7a:	6113      	str	r3, [r2, #16]
 800ae7c:	e03a      	b.n	800aef4 <USB_EPStartXfer+0x3e4>
 800ae7e:	bf00      	nop
 800ae80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	699a      	ldr	r2, [r3, #24]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	1e5a      	subs	r2, r3, #1
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	8afa      	ldrh	r2, [r7, #22]
 800aea0:	fb03 f202 	mul.w	r2, r3, r2
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	8afb      	ldrh	r3, [r7, #22]
 800aeb8:	04d9      	lsls	r1, r3, #19
 800aeba:	4b38      	ldr	r3, [pc, #224]	@ (800af9c <USB_EPStartXfer+0x48c>)
 800aebc:	400b      	ands	r3, r1
 800aebe:	69b9      	ldr	r1, [r7, #24]
 800aec0:	0148      	lsls	r0, r1, #5
 800aec2:	69f9      	ldr	r1, [r7, #28]
 800aec4:	4401      	add	r1, r0
 800aec6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aeca:	4313      	orrs	r3, r2
 800aecc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aee4:	69b9      	ldr	r1, [r7, #24]
 800aee6:	0148      	lsls	r0, r1, #5
 800aee8:	69f9      	ldr	r1, [r7, #28]
 800aeea:	4401      	add	r1, r0
 800aeec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aef0:	4313      	orrs	r3, r2
 800aef2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d10d      	bne.n	800af16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d009      	beq.n	800af16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	6919      	ldr	r1, [r3, #16]
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af12:	460a      	mov	r2, r1
 800af14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	791b      	ldrb	r3, [r3, #4]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d128      	bne.n	800af70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d110      	bne.n	800af50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	4413      	add	r3, r2
 800af36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	440a      	add	r2, r1
 800af44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	e00f      	b.n	800af70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	0151      	lsls	r1, r2, #5
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	440a      	add	r2, r1
 800af86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3720      	adds	r7, #32
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	1ff80000 	.word	0x1ff80000

0800afa0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	4613      	mov	r3, r2
 800afac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	f040 80ce 	bne.w	800b15e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d132      	bne.n	800b030 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	0151      	lsls	r1, r2, #5
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	440a      	add	r2, r1
 800afe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afe4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800afe8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800afec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b008:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b00c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	0151      	lsls	r1, r2, #5
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	440a      	add	r2, r1
 800b024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b028:	0cdb      	lsrs	r3, r3, #19
 800b02a:	04db      	lsls	r3, r3, #19
 800b02c:	6113      	str	r3, [r2, #16]
 800b02e:	e04e      	b.n	800b0ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b04a:	0cdb      	lsrs	r3, r3, #19
 800b04c:	04db      	lsls	r3, r3, #19
 800b04e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	440a      	add	r2, r1
 800b066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b06a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b06e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b072:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d903      	bls.n	800b088 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0be:	6939      	ldr	r1, [r7, #16]
 800b0c0:	0148      	lsls	r0, r1, #5
 800b0c2:	6979      	ldr	r1, [r7, #20]
 800b0c4:	4401      	add	r1, r0
 800b0c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d11e      	bne.n	800b112 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	0151      	lsls	r1, r2, #5
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	440a      	add	r2, r1
 800b106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b10a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	e097      	b.n	800b242 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	015a      	lsls	r2, r3, #5
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	4413      	add	r3, r2
 800b11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	0151      	lsls	r1, r2, #5
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	440a      	add	r2, r1
 800b128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b130:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 8083 	beq.w	800b242 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 030f 	and.w	r3, r3, #15
 800b14c:	2101      	movs	r1, #1
 800b14e:	fa01 f303 	lsl.w	r3, r1, r3
 800b152:	6979      	ldr	r1, [r7, #20]
 800b154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b158:	4313      	orrs	r3, r2
 800b15a:	634b      	str	r3, [r1, #52]	@ 0x34
 800b15c:	e071      	b.n	800b242 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b178:	0cdb      	lsrs	r3, r3, #19
 800b17a:	04db      	lsls	r3, r3, #19
 800b17c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b198:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b19c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b1a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	0151      	lsls	r1, r2, #5
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	440a      	add	r2, r1
 800b1d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1f0:	6939      	ldr	r1, [r7, #16]
 800b1f2:	0148      	lsls	r0, r1, #5
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	4401      	add	r1, r0
 800b1f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d10d      	bne.n	800b222 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6919      	ldr	r1, [r3, #16]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21e:	460a      	mov	r2, r1
 800b220:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	440a      	add	r2, r1
 800b238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b23c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d14a      	bne.n	800b304 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b286:	f040 8086 	bne.w	800b396 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	7812      	ldrb	r2, [r2, #0]
 800b29e:	0151      	lsls	r1, r2, #5
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	440a      	add	r2, r1
 800b2a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	7812      	ldrb	r2, [r2, #0]
 800b2c2:	0151      	lsls	r1, r2, #5
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	440a      	add	r2, r1
 800b2c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d902      	bls.n	800b2e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2e6:	e056      	b.n	800b396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b300:	d0e7      	beq.n	800b2d2 <USB_EPStopXfer+0x82>
 800b302:	e048      	b.n	800b396 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b31c:	d13b      	bne.n	800b396 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b33c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b340:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	7812      	ldrb	r2, [r2, #0]
 800b356:	0151      	lsls	r1, r2, #5
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	440a      	add	r2, r1
 800b35c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3301      	adds	r3, #1
 800b36a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b372:	4293      	cmp	r3, r2
 800b374:	d902      	bls.n	800b37c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	75fb      	strb	r3, [r7, #23]
          break;
 800b37a:	e00c      	b.n	800b396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b394:	d0e7      	beq.n	800b366 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b089      	sub	sp, #36	@ 0x24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	71fb      	strb	r3, [r7, #7]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b3c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d123      	bne.n	800b412 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b3ca:	88bb      	ldrh	r3, [r7, #4]
 800b3cc:	3303      	adds	r3, #3
 800b3ce:	089b      	lsrs	r3, r3, #2
 800b3d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61bb      	str	r3, [r7, #24]
 800b3d6:	e018      	b.n	800b40a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	031a      	lsls	r2, r3, #12
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	3301      	adds	r3, #1
 800b402:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	3301      	adds	r3, #1
 800b408:	61bb      	str	r3, [r7, #24]
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d3e2      	bcc.n	800b3d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3724      	adds	r7, #36	@ 0x24
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b420:	b480      	push	{r7}
 800b422:	b08b      	sub	sp, #44	@ 0x2c
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	089b      	lsrs	r3, r3, #2
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b43e:	88fb      	ldrh	r3, [r7, #6]
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b446:	2300      	movs	r3, #0
 800b448:	623b      	str	r3, [r7, #32]
 800b44a:	e014      	b.n	800b476 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	601a      	str	r2, [r3, #0]
    pDest++;
 800b458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45a:	3301      	adds	r3, #1
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	3301      	adds	r3, #1
 800b462:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	3301      	adds	r3, #1
 800b468:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	3301      	adds	r3, #1
 800b46e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	3301      	adds	r3, #1
 800b474:	623b      	str	r3, [r7, #32]
 800b476:	6a3a      	ldr	r2, [r7, #32]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3e6      	bcc.n	800b44c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b47e:	8bfb      	ldrh	r3, [r7, #30]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d01e      	beq.n	800b4c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b48e:	461a      	mov	r2, r3
 800b490:	f107 0310 	add.w	r3, r7, #16
 800b494:	6812      	ldr	r2, [r2, #0]
 800b496:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	701a      	strb	r2, [r3, #0]
      i++;
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	623b      	str	r3, [r7, #32]
      pDest++;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b4b6:	8bfb      	ldrh	r3, [r7, #30]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b4bc:	8bfb      	ldrh	r3, [r7, #30]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1ea      	bne.n	800b498 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	372c      	adds	r7, #44	@ 0x2c
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d12c      	bne.n	800b546 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	db12      	blt.n	800b524 <USB_EPSetStall+0x54>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00f      	beq.n	800b524 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b51e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b522:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	0151      	lsls	r1, r2, #5
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	440a      	add	r2, r1
 800b53a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b53e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	e02b      	b.n	800b59e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	db12      	blt.n	800b57e <USB_EPSetStall+0xae>
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00f      	beq.n	800b57e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b578:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b57c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	015a      	lsls	r2, r3, #5
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4413      	add	r3, r2
 800b586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	0151      	lsls	r1, r2, #5
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	440a      	add	r2, r1
 800b594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b59c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	785b      	ldrb	r3, [r3, #1]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d128      	bne.n	800b61a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	0151      	lsls	r1, r2, #5
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	440a      	add	r2, r1
 800b5de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	791b      	ldrb	r3, [r3, #4]
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d003      	beq.n	800b5f8 <USB_EPClearStall+0x4c>
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	791b      	ldrb	r3, [r3, #4]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d138      	bne.n	800b66a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	0151      	lsls	r1, r2, #5
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	440a      	add	r2, r1
 800b60e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	e027      	b.n	800b66a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	0151      	lsls	r1, r2, #5
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	440a      	add	r2, r1
 800b630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b634:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d003      	beq.n	800b64a <USB_EPClearStall+0x9e>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	791b      	ldrb	r3, [r3, #4]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d10f      	bne.n	800b66a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	0151      	lsls	r1, r2, #5
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	440a      	add	r2, r1
 800b660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b668:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b696:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b69a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	011b      	lsls	r3, r3, #4
 800b6a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b6ac:	68f9      	ldr	r1, [r7, #12]
 800b6ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b6de:	f023 0303 	bic.w	r3, r3, #3
 800b6e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6f2:	f023 0302 	bic.w	r3, r3, #2
 800b6f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b706:	b480      	push	{r7}
 800b708:	b085      	sub	sp, #20
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b720:	f023 0303 	bic.w	r3, r3, #3
 800b724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b734:	f043 0302 	orr.w	r3, r3, #2
 800b738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4013      	ands	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b760:	68fb      	ldr	r3, [r7, #12]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b76e:	b480      	push	{r7}
 800b770:	b085      	sub	sp, #20
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	4013      	ands	r3, r2
 800b790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	0c1b      	lsrs	r3, r3, #16
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7be:	69db      	ldr	r3, [r3, #28]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	b29b      	uxth	r3, r3
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	015a      	lsls	r2, r3, #5
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	4013      	ands	r3, r2
 800b802:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b804:	68bb      	ldr	r3, [r7, #8]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b812:	b480      	push	{r7}
 800b814:	b087      	sub	sp, #28
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	460b      	mov	r3, r1
 800b81c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b834:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b836:	78fb      	ldrb	r3, [r7, #3]
 800b838:	f003 030f 	and.w	r3, r3, #15
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	fa22 f303 	lsr.w	r3, r2, r3
 800b842:	01db      	lsls	r3, r3, #7
 800b844:	b2db      	uxtb	r3, r3
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b84c:	78fb      	ldrb	r3, [r7, #3]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	4013      	ands	r3, r2
 800b85e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b860:	68bb      	ldr	r3, [r7, #8]
}
 800b862:	4618      	mov	r0, r3
 800b864:	371c      	adds	r7, #28
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	f003 0301 	and.w	r3, r3, #1
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b085      	sub	sp, #20
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b8a8:	f023 0307 	bic.w	r3, r3, #7
 800b8ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	333c      	adds	r3, #60	@ 0x3c
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	4a26      	ldr	r2, [pc, #152]	@ (800b988 <USB_EP0_OutStart+0xb8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d90a      	bls.n	800b90a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b904:	d101      	bne.n	800b90a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	e037      	b.n	800b97a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b910:	461a      	mov	r2, r3
 800b912:	2300      	movs	r3, #0
 800b914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b938:	f043 0318 	orr.w	r3, r3, #24
 800b93c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b94c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d10f      	bne.n	800b978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b95e:	461a      	mov	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b972:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	371c      	adds	r7, #28
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	4f54300a 	.word	0x4f54300a

0800b98c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3301      	adds	r3, #1
 800b99c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4a13      	ldr	r2, [pc, #76]	@ (800b9f0 <USB_CoreReset+0x64>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d901      	bls.n	800b9aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e01b      	b.n	800b9e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	daf2      	bge.n	800b998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f043 0201 	orr.w	r2, r3, #1
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4a09      	ldr	r2, [pc, #36]	@ (800b9f0 <USB_CoreReset+0x64>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d901      	bls.n	800b9d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e006      	b.n	800b9e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d0f0      	beq.n	800b9c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	00030d40 	.word	0x00030d40

0800b9f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b9f8:	4904      	ldr	r1, [pc, #16]	@ (800ba0c <MX_FATFS_Init+0x18>)
 800b9fa:	4805      	ldr	r0, [pc, #20]	@ (800ba10 <MX_FATFS_Init+0x1c>)
 800b9fc:	f002 f8a0 	bl	800db40 <FATFS_LinkDriver>
 800ba00:	4603      	mov	r3, r0
 800ba02:	461a      	mov	r2, r3
 800ba04:	4b03      	ldr	r3, [pc, #12]	@ (800ba14 <MX_FATFS_Init+0x20>)
 800ba06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba08:	bf00      	nop
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200009c8 	.word	0x200009c8
 800ba10:	20000010 	.word	0x20000010
 800ba14:	200009c4 	.word	0x200009c4

0800ba18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ba22:	4b06      	ldr	r3, [pc, #24]	@ (800ba3c <USER_initialize+0x24>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ba28:	4b04      	ldr	r3, [pc, #16]	@ (800ba3c <USER_initialize+0x24>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	2000000d 	.word	0x2000000d

0800ba40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ba4a:	4b06      	ldr	r3, [pc, #24]	@ (800ba64 <USER_status+0x24>)
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ba50:	4b04      	ldr	r3, [pc, #16]	@ (800ba64 <USER_status+0x24>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	2000000d 	.word	0x2000000d

0800ba68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	4603      	mov	r3, r0
 800ba76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ba78:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b085      	sub	sp, #20
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ba96:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	603a      	str	r2, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
 800bab0:	460b      	mov	r3, r1
 800bab2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
    return res;
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
	...

0800bac8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bad4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bad8:	f002 fd8e 	bl	800e5f8 <USBD_static_malloc>
 800badc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	32b0      	adds	r2, #176	@ 0xb0
 800baee:	2100      	movs	r1, #0
 800baf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800baf4:	2302      	movs	r3, #2
 800baf6:	e0d4      	b.n	800bca2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800baf8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bafc:	2100      	movs	r1, #0
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f004 fc19 	bl	8010336 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	32b0      	adds	r2, #176	@ 0xb0
 800bb0e:	68f9      	ldr	r1, [r7, #12]
 800bb10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	32b0      	adds	r2, #176	@ 0xb0
 800bb1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7c1b      	ldrb	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d138      	bne.n	800bba2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb30:	4b5e      	ldr	r3, [pc, #376]	@ (800bcac <USBD_CDC_Init+0x1e4>)
 800bb32:	7819      	ldrb	r1, [r3, #0]
 800bb34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb38:	2202      	movs	r2, #2
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f002 fbeb 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb40:	4b5a      	ldr	r3, [pc, #360]	@ (800bcac <USBD_CDC_Init+0x1e4>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	f003 020f 	and.w	r2, r3, #15
 800bb48:	6879      	ldr	r1, [r7, #4]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	3324      	adds	r3, #36	@ 0x24
 800bb56:	2201      	movs	r2, #1
 800bb58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb5a:	4b55      	ldr	r3, [pc, #340]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bb5c:	7819      	ldrb	r1, [r3, #0]
 800bb5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb62:	2202      	movs	r2, #2
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f002 fbd6 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb6a:	4b51      	ldr	r3, [pc, #324]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f003 020f 	and.w	r2, r3, #15
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb82:	2201      	movs	r2, #1
 800bb84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bb86:	4b4b      	ldr	r3, [pc, #300]	@ (800bcb4 <USBD_CDC_Init+0x1ec>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	f003 020f 	and.w	r2, r3, #15
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	440b      	add	r3, r1
 800bb9a:	3326      	adds	r3, #38	@ 0x26
 800bb9c:	2210      	movs	r2, #16
 800bb9e:	801a      	strh	r2, [r3, #0]
 800bba0:	e035      	b.n	800bc0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bba2:	4b42      	ldr	r3, [pc, #264]	@ (800bcac <USBD_CDC_Init+0x1e4>)
 800bba4:	7819      	ldrb	r1, [r3, #0]
 800bba6:	2340      	movs	r3, #64	@ 0x40
 800bba8:	2202      	movs	r2, #2
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f002 fbb3 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbb0:	4b3e      	ldr	r3, [pc, #248]	@ (800bcac <USBD_CDC_Init+0x1e4>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 020f 	and.w	r2, r3, #15
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3324      	adds	r3, #36	@ 0x24
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bbca:	4b39      	ldr	r3, [pc, #228]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bbcc:	7819      	ldrb	r1, [r3, #0]
 800bbce:	2340      	movs	r3, #64	@ 0x40
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f002 fb9f 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bbd8:	4b35      	ldr	r3, [pc, #212]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	f003 020f 	and.w	r2, r3, #15
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	440b      	add	r3, r1
 800bbec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbf4:	4b2f      	ldr	r3, [pc, #188]	@ (800bcb4 <USBD_CDC_Init+0x1ec>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	f003 020f 	and.w	r2, r3, #15
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3326      	adds	r3, #38	@ 0x26
 800bc0a:	2210      	movs	r2, #16
 800bc0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc0e:	4b29      	ldr	r3, [pc, #164]	@ (800bcb4 <USBD_CDC_Init+0x1ec>)
 800bc10:	7819      	ldrb	r1, [r3, #0]
 800bc12:	2308      	movs	r3, #8
 800bc14:	2203      	movs	r2, #3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f002 fb7d 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bc1c:	4b25      	ldr	r3, [pc, #148]	@ (800bcb4 <USBD_CDC_Init+0x1ec>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	f003 020f 	and.w	r2, r3, #15
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	440b      	add	r3, r1
 800bc30:	3324      	adds	r3, #36	@ 0x24
 800bc32:	2201      	movs	r2, #1
 800bc34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	33b0      	adds	r3, #176	@ 0xb0
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e018      	b.n	800bca2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	7c1b      	ldrb	r3, [r3, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc78:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bc7a:	7819      	ldrb	r1, [r3, #0]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f002 fc34 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800bc8c:	e008      	b.n	800bca0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc8e:	4b08      	ldr	r3, [pc, #32]	@ (800bcb0 <USBD_CDC_Init+0x1e8>)
 800bc90:	7819      	ldrb	r1, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc98:	2340      	movs	r3, #64	@ 0x40
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f002 fc2a 	bl	800e4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200000ab 	.word	0x200000ab
 800bcb0:	200000ac 	.word	0x200000ac
 800bcb4:	200000ad 	.word	0x200000ad

0800bcb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bcc4:	4b3a      	ldr	r3, [pc, #232]	@ (800bdb0 <USBD_CDC_DeInit+0xf8>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f002 fb49 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bcd0:	4b37      	ldr	r3, [pc, #220]	@ (800bdb0 <USBD_CDC_DeInit+0xf8>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	f003 020f 	and.w	r2, r3, #15
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	3324      	adds	r3, #36	@ 0x24
 800bce6:	2200      	movs	r2, #0
 800bce8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bcea:	4b32      	ldr	r3, [pc, #200]	@ (800bdb4 <USBD_CDC_DeInit+0xfc>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f002 fb36 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bcf6:	4b2f      	ldr	r3, [pc, #188]	@ (800bdb4 <USBD_CDC_DeInit+0xfc>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f003 020f 	and.w	r2, r3, #15
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	4613      	mov	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd0e:	2200      	movs	r2, #0
 800bd10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bd12:	4b29      	ldr	r3, [pc, #164]	@ (800bdb8 <USBD_CDC_DeInit+0x100>)
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f002 fb22 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bd1e:	4b26      	ldr	r3, [pc, #152]	@ (800bdb8 <USBD_CDC_DeInit+0x100>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	f003 020f 	and.w	r2, r3, #15
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	3324      	adds	r3, #36	@ 0x24
 800bd34:	2200      	movs	r2, #0
 800bd36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bd38:	4b1f      	ldr	r3, [pc, #124]	@ (800bdb8 <USBD_CDC_DeInit+0x100>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 020f 	and.w	r2, r3, #15
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3326      	adds	r3, #38	@ 0x26
 800bd4e:	2200      	movs	r2, #0
 800bd50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	32b0      	adds	r2, #176	@ 0xb0
 800bd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01f      	beq.n	800bda4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	33b0      	adds	r3, #176	@ 0xb0
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32b0      	adds	r2, #176	@ 0xb0
 800bd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f002 fc44 	bl	800e614 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	32b0      	adds	r2, #176	@ 0xb0
 800bd96:	2100      	movs	r1, #0
 800bd98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	200000ab 	.word	0x200000ab
 800bdb4:	200000ac 	.word	0x200000ac
 800bdb8:	200000ad 	.word	0x200000ad

0800bdbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	32b0      	adds	r2, #176	@ 0xb0
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e0bf      	b.n	800bf6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d050      	beq.n	800be9a <USBD_CDC_Setup+0xde>
 800bdf8:	2b20      	cmp	r3, #32
 800bdfa:	f040 80af 	bne.w	800bf5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	88db      	ldrh	r3, [r3, #6]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d03a      	beq.n	800be7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b25b      	sxtb	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	da1b      	bge.n	800be48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	33b0      	adds	r3, #176	@ 0xb0
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800be26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	88d2      	ldrh	r2, [r2, #6]
 800be2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	88db      	ldrh	r3, [r3, #6]
 800be32:	2b07      	cmp	r3, #7
 800be34:	bf28      	it	cs
 800be36:	2307      	movcs	r3, #7
 800be38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	89fa      	ldrh	r2, [r7, #14]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f001 fdb1 	bl	800d9a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800be46:	e090      	b.n	800bf6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	785a      	ldrb	r2, [r3, #1]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	88db      	ldrh	r3, [r3, #6]
 800be56:	2b3f      	cmp	r3, #63	@ 0x3f
 800be58:	d803      	bhi.n	800be62 <USBD_CDC_Setup+0xa6>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88db      	ldrh	r3, [r3, #6]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	e000      	b.n	800be64 <USBD_CDC_Setup+0xa8>
 800be62:	2240      	movs	r2, #64	@ 0x40
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800be6a:	6939      	ldr	r1, [r7, #16]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800be72:	461a      	mov	r2, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f001 fdc3 	bl	800da00 <USBD_CtlPrepareRx>
      break;
 800be7a:	e076      	b.n	800bf6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	33b0      	adds	r3, #176	@ 0xb0
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	7850      	ldrb	r0, [r2, #1]
 800be92:	2200      	movs	r2, #0
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	4798      	blx	r3
      break;
 800be98:	e067      	b.n	800bf6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	785b      	ldrb	r3, [r3, #1]
 800be9e:	2b0b      	cmp	r3, #11
 800bea0:	d851      	bhi.n	800bf46 <USBD_CDC_Setup+0x18a>
 800bea2:	a201      	add	r2, pc, #4	@ (adr r2, 800bea8 <USBD_CDC_Setup+0xec>)
 800bea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea8:	0800bed9 	.word	0x0800bed9
 800beac:	0800bf55 	.word	0x0800bf55
 800beb0:	0800bf47 	.word	0x0800bf47
 800beb4:	0800bf47 	.word	0x0800bf47
 800beb8:	0800bf47 	.word	0x0800bf47
 800bebc:	0800bf47 	.word	0x0800bf47
 800bec0:	0800bf47 	.word	0x0800bf47
 800bec4:	0800bf47 	.word	0x0800bf47
 800bec8:	0800bf47 	.word	0x0800bf47
 800becc:	0800bf47 	.word	0x0800bf47
 800bed0:	0800bf03 	.word	0x0800bf03
 800bed4:	0800bf2d 	.word	0x0800bf2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d107      	bne.n	800bef4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bee4:	f107 030a 	add.w	r3, r7, #10
 800bee8:	2202      	movs	r2, #2
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 fd5b 	bl	800d9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bef2:	e032      	b.n	800bf5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f001 fce5 	bl	800d8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	75fb      	strb	r3, [r7, #23]
          break;
 800bf00:	e02b      	b.n	800bf5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d107      	bne.n	800bf1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf0e:	f107 030d 	add.w	r3, r7, #13
 800bf12:	2201      	movs	r2, #1
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 fd46 	bl	800d9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf1c:	e01d      	b.n	800bf5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 fcd0 	bl	800d8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf26:	2303      	movs	r3, #3
 800bf28:	75fb      	strb	r3, [r7, #23]
          break;
 800bf2a:	e016      	b.n	800bf5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	d00f      	beq.n	800bf58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 fcc3 	bl	800d8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf40:	2303      	movs	r3, #3
 800bf42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf44:	e008      	b.n	800bf58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 fcbc 	bl	800d8c6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	75fb      	strb	r3, [r7, #23]
          break;
 800bf52:	e002      	b.n	800bf5a <USBD_CDC_Setup+0x19e>
          break;
 800bf54:	bf00      	nop
 800bf56:	e008      	b.n	800bf6a <USBD_CDC_Setup+0x1ae>
          break;
 800bf58:	bf00      	nop
      }
      break;
 800bf5a:	e006      	b.n	800bf6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fcb1 	bl	800d8c6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	75fb      	strb	r3, [r7, #23]
      break;
 800bf68:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	32b0      	adds	r2, #176	@ 0xb0
 800bf92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e065      	b.n	800c06a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	32b0      	adds	r2, #176	@ 0xb0
 800bfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bfae:	78fb      	ldrb	r3, [r7, #3]
 800bfb0:	f003 020f 	and.w	r2, r3, #15
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3318      	adds	r3, #24
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d02f      	beq.n	800c028 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bfc8:	78fb      	ldrb	r3, [r7, #3]
 800bfca:	f003 020f 	and.w	r2, r3, #15
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	440b      	add	r3, r1
 800bfda:	3318      	adds	r3, #24
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	f003 010f 	and.w	r1, r3, #15
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	440b      	add	r3, r1
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4403      	add	r3, r0
 800bff0:	3348      	adds	r3, #72	@ 0x48
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bff8:	fb01 f303 	mul.w	r3, r1, r3
 800bffc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d112      	bne.n	800c028 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c002:	78fb      	ldrb	r3, [r7, #3]
 800c004:	f003 020f 	and.w	r2, r3, #15
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	440b      	add	r3, r1
 800c014:	3318      	adds	r3, #24
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c01a:	78f9      	ldrb	r1, [r7, #3]
 800c01c:	2300      	movs	r3, #0
 800c01e:	2200      	movs	r2, #0
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f002 fa46 	bl	800e4b2 <USBD_LL_Transmit>
 800c026:	e01f      	b.n	800c068 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	33b0      	adds	r3, #176	@ 0xb0
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d010      	beq.n	800c068 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	33b0      	adds	r3, #176	@ 0xb0
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c064:	78fa      	ldrb	r2, [r7, #3]
 800c066:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	32b0      	adds	r2, #176	@ 0xb0
 800c088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c08c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	32b0      	adds	r2, #176	@ 0xb0
 800c098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e01a      	b.n	800c0da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f002 fa44 	bl	800e536 <USBD_LL_GetRxDataSize>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	33b0      	adds	r3, #176	@ 0xb0
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	32b0      	adds	r2, #176	@ 0xb0
 800c0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c100:	2303      	movs	r3, #3
 800c102:	e024      	b.n	800c14e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	33b0      	adds	r3, #176	@ 0xb0
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d019      	beq.n	800c14c <USBD_CDC_EP0_RxReady+0x6a>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c11e:	2bff      	cmp	r3, #255	@ 0xff
 800c120:	d014      	beq.n	800c14c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	33b0      	adds	r3, #176	@ 0xb0
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c13a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c142:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	22ff      	movs	r2, #255	@ 0xff
 800c148:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c160:	2182      	movs	r1, #130	@ 0x82
 800c162:	4818      	ldr	r0, [pc, #96]	@ (800c1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c164:	f000 fd4f 	bl	800cc06 <USBD_GetEpDesc>
 800c168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c16a:	2101      	movs	r1, #1
 800c16c:	4815      	ldr	r0, [pc, #84]	@ (800c1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c16e:	f000 fd4a 	bl	800cc06 <USBD_GetEpDesc>
 800c172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c174:	2181      	movs	r1, #129	@ 0x81
 800c176:	4813      	ldr	r0, [pc, #76]	@ (800c1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c178:	f000 fd45 	bl	800cc06 <USBD_GetEpDesc>
 800c17c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2210      	movs	r2, #16
 800c188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d006      	beq.n	800c19e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2200      	movs	r2, #0
 800c194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c198:	711a      	strb	r2, [r3, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d006      	beq.n	800c1b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1ac:	711a      	strb	r2, [r3, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2243      	movs	r2, #67	@ 0x43
 800c1b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	@ (800c1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000068 	.word	0x20000068

0800c1c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1d0:	2182      	movs	r1, #130	@ 0x82
 800c1d2:	4818      	ldr	r0, [pc, #96]	@ (800c234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c1d4:	f000 fd17 	bl	800cc06 <USBD_GetEpDesc>
 800c1d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4815      	ldr	r0, [pc, #84]	@ (800c234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c1de:	f000 fd12 	bl	800cc06 <USBD_GetEpDesc>
 800c1e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1e4:	2181      	movs	r1, #129	@ 0x81
 800c1e6:	4813      	ldr	r0, [pc, #76]	@ (800c234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c1e8:	f000 fd0d 	bl	800cc06 <USBD_GetEpDesc>
 800c1ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	2210      	movs	r2, #16
 800c1f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d006      	beq.n	800c20e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2200      	movs	r2, #0
 800c204:	711a      	strb	r2, [r3, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	f042 0202 	orr.w	r2, r2, #2
 800c20c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	711a      	strb	r2, [r3, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f042 0202 	orr.w	r2, r2, #2
 800c220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2243      	movs	r2, #67	@ 0x43
 800c226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c228:	4b02      	ldr	r3, [pc, #8]	@ (800c234 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000068 	.word	0x20000068

0800c238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c240:	2182      	movs	r1, #130	@ 0x82
 800c242:	4818      	ldr	r0, [pc, #96]	@ (800c2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c244:	f000 fcdf 	bl	800cc06 <USBD_GetEpDesc>
 800c248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c24a:	2101      	movs	r1, #1
 800c24c:	4815      	ldr	r0, [pc, #84]	@ (800c2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c24e:	f000 fcda 	bl	800cc06 <USBD_GetEpDesc>
 800c252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c254:	2181      	movs	r1, #129	@ 0x81
 800c256:	4813      	ldr	r0, [pc, #76]	@ (800c2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c258:	f000 fcd5 	bl	800cc06 <USBD_GetEpDesc>
 800c25c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2210      	movs	r2, #16
 800c268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	2200      	movs	r2, #0
 800c274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c278:	711a      	strb	r2, [r3, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d006      	beq.n	800c292 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c28c:	711a      	strb	r2, [r3, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2243      	movs	r2, #67	@ 0x43
 800c296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c298:	4b02      	ldr	r3, [pc, #8]	@ (800c2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3718      	adds	r7, #24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20000068 	.word	0x20000068

0800c2a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	220a      	movs	r2, #10
 800c2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c2b6:	4b03      	ldr	r3, [pc, #12]	@ (800c2c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20000024 	.word	0x20000024

0800c2c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e009      	b.n	800c2f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	33b0      	adds	r3, #176	@ 0xb0
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	32b0      	adds	r2, #176	@ 0xb0
 800c312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c316:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c31e:	2303      	movs	r3, #3
 800c320:	e008      	b.n	800c334 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	32b0      	adds	r2, #176	@ 0xb0
 800c354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c358:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c360:	2303      	movs	r3, #3
 800c362:	e004      	b.n	800c36e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
	...

0800c37c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32b0      	adds	r2, #176	@ 0xb0
 800c38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c392:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	32b0      	adds	r2, #176	@ 0xb0
 800c3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d101      	bne.n	800c3ae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e025      	b.n	800c3fa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d11f      	bne.n	800c3f8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c3c0:	4b10      	ldr	r3, [pc, #64]	@ (800c404 <USBD_CDC_TransmitPacket+0x88>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	f003 020f 	and.w	r2, r3, #15
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4403      	add	r3, r0
 800c3da:	3318      	adds	r3, #24
 800c3dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c3de:	4b09      	ldr	r3, [pc, #36]	@ (800c404 <USBD_CDC_TransmitPacket+0x88>)
 800c3e0:	7819      	ldrb	r1, [r3, #0]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f002 f85f 	bl	800e4b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	200000ab 	.word	0x200000ab

0800c408 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	32b0      	adds	r2, #176	@ 0xb0
 800c41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	32b0      	adds	r2, #176	@ 0xb0
 800c42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c432:	2303      	movs	r3, #3
 800c434:	e018      	b.n	800c468 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	7c1b      	ldrb	r3, [r3, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c43e:	4b0c      	ldr	r3, [pc, #48]	@ (800c470 <USBD_CDC_ReceivePacket+0x68>)
 800c440:	7819      	ldrb	r1, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f002 f851 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c452:	e008      	b.n	800c466 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c454:	4b06      	ldr	r3, [pc, #24]	@ (800c470 <USBD_CDC_ReceivePacket+0x68>)
 800c456:	7819      	ldrb	r1, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c45e:	2340      	movs	r3, #64	@ 0x40
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f002 f847 	bl	800e4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200000ac 	.word	0x200000ac

0800c474 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4613      	mov	r3, r2
 800c480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c488:	2303      	movs	r3, #3
 800c48a:	e01f      	b.n	800c4cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	79fa      	ldrb	r2, [r7, #7]
 800c4be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f001 fec1 	bl	800e248 <USBD_LL_Init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e025      	b.n	800c538 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	32ae      	adds	r2, #174	@ 0xae
 800c4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00f      	beq.n	800c528 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	32ae      	adds	r2, #174	@ 0xae
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c518:	f107 020e 	add.w	r2, r7, #14
 800c51c:	4610      	mov	r0, r2
 800c51e:	4798      	blx	r3
 800c520:	4602      	mov	r2, r0
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 fec9 	bl	800e2e0 <USBD_LL_Start>
 800c54e:	4603      	mov	r3, r0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c560:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	460b      	mov	r3, r1
 800c578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d009      	beq.n	800c59c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	78fa      	ldrb	r2, [r7, #3]
 800c592:	4611      	mov	r1, r2
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	78fa      	ldrb	r2, [r7, #3]
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 f930 	bl	800d852 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c600:	461a      	mov	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c60e:	f003 031f 	and.w	r3, r3, #31
 800c612:	2b02      	cmp	r3, #2
 800c614:	d01a      	beq.n	800c64c <USBD_LL_SetupStage+0x72>
 800c616:	2b02      	cmp	r3, #2
 800c618:	d822      	bhi.n	800c660 <USBD_LL_SetupStage+0x86>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <USBD_LL_SetupStage+0x4a>
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d00a      	beq.n	800c638 <USBD_LL_SetupStage+0x5e>
 800c622:	e01d      	b.n	800c660 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fb5d 	bl	800ccec <USBD_StdDevReq>
 800c632:	4603      	mov	r3, r0
 800c634:	73fb      	strb	r3, [r7, #15]
      break;
 800c636:	e020      	b.n	800c67a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fbc5 	bl	800cdd0 <USBD_StdItfReq>
 800c646:	4603      	mov	r3, r0
 800c648:	73fb      	strb	r3, [r7, #15]
      break;
 800c64a:	e016      	b.n	800c67a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c652:	4619      	mov	r1, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fc27 	bl	800cea8 <USBD_StdEPReq>
 800c65a:	4603      	mov	r3, r0
 800c65c:	73fb      	strb	r3, [r7, #15]
      break;
 800c65e:	e00c      	b.n	800c67a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 fe96 	bl	800e3a0 <USBD_LL_StallEP>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]
      break;
 800c678:	bf00      	nop
  }

  return ret;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	460b      	mov	r3, r1
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c696:	7afb      	ldrb	r3, [r7, #11]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d16e      	bne.n	800c77a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c6a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	f040 8098 	bne.w	800c7e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	689a      	ldr	r2, [r3, #8]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d913      	bls.n	800c6e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	1ad2      	subs	r2, r2, r3
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	68da      	ldr	r2, [r3, #12]
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	bf28      	it	cs
 800c6d6:	4613      	movcs	r3, r2
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f001 f9ac 	bl	800da3a <USBD_CtlContinueRx>
 800c6e2:	e07d      	b.n	800c7e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c6ea:	f003 031f 	and.w	r3, r3, #31
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d014      	beq.n	800c71c <USBD_LL_DataOutStage+0x98>
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d81d      	bhi.n	800c732 <USBD_LL_DataOutStage+0xae>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <USBD_LL_DataOutStage+0x7c>
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d003      	beq.n	800c706 <USBD_LL_DataOutStage+0x82>
 800c6fe:	e018      	b.n	800c732 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	75bb      	strb	r3, [r7, #22]
            break;
 800c704:	e018      	b.n	800c738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	4619      	mov	r1, r3
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 fa5e 	bl	800cbd2 <USBD_CoreFindIF>
 800c716:	4603      	mov	r3, r0
 800c718:	75bb      	strb	r3, [r7, #22]
            break;
 800c71a:	e00d      	b.n	800c738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c722:	b2db      	uxtb	r3, r3
 800c724:	4619      	mov	r1, r3
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 fa60 	bl	800cbec <USBD_CoreFindEP>
 800c72c:	4603      	mov	r3, r0
 800c72e:	75bb      	strb	r3, [r7, #22]
            break;
 800c730:	e002      	b.n	800c738 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	75bb      	strb	r3, [r7, #22]
            break;
 800c736:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c738:	7dbb      	ldrb	r3, [r7, #22]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d119      	bne.n	800c772 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b03      	cmp	r3, #3
 800c748:	d113      	bne.n	800c772 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c74a:	7dba      	ldrb	r2, [r7, #22]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	32ae      	adds	r2, #174	@ 0xae
 800c750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00b      	beq.n	800c772 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c75a:	7dba      	ldrb	r2, [r7, #22]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c762:	7dba      	ldrb	r2, [r7, #22]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	32ae      	adds	r2, #174	@ 0xae
 800c768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f001 f972 	bl	800da5c <USBD_CtlSendStatus>
 800c778:	e032      	b.n	800c7e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c77a:	7afb      	ldrb	r3, [r7, #11]
 800c77c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c780:	b2db      	uxtb	r3, r3
 800c782:	4619      	mov	r1, r3
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 fa31 	bl	800cbec <USBD_CoreFindEP>
 800c78a:	4603      	mov	r3, r0
 800c78c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c78e:	7dbb      	ldrb	r3, [r7, #22]
 800c790:	2bff      	cmp	r3, #255	@ 0xff
 800c792:	d025      	beq.n	800c7e0 <USBD_LL_DataOutStage+0x15c>
 800c794:	7dbb      	ldrb	r3, [r7, #22]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d122      	bne.n	800c7e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d117      	bne.n	800c7d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c7a6:	7dba      	ldrb	r2, [r7, #22]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	32ae      	adds	r2, #174	@ 0xae
 800c7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00f      	beq.n	800c7d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c7b6:	7dba      	ldrb	r2, [r7, #22]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c7be:	7dba      	ldrb	r2, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	32ae      	adds	r2, #174	@ 0xae
 800c7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	7afa      	ldrb	r2, [r7, #11]
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	4798      	blx	r3
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d001      	beq.n	800c7e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	e000      	b.n	800c7e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b086      	sub	sp, #24
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	607a      	str	r2, [r7, #4]
 800c7f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d16f      	bne.n	800c8de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3314      	adds	r3, #20
 800c802:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d15a      	bne.n	800c8c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	429a      	cmp	r2, r3
 800c818:	d914      	bls.n	800c844 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	1ad2      	subs	r2, r2, r3
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	461a      	mov	r2, r3
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f001 f8d4 	bl	800d9de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c836:	2300      	movs	r3, #0
 800c838:	2200      	movs	r2, #0
 800c83a:	2100      	movs	r1, #0
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f001 fe59 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c842:	e03f      	b.n	800c8c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	68da      	ldr	r2, [r3, #12]
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d11c      	bne.n	800c88a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c858:	429a      	cmp	r2, r3
 800c85a:	d316      	bcc.n	800c88a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c866:	429a      	cmp	r2, r3
 800c868:	d20f      	bcs.n	800c88a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f001 f8b5 	bl	800d9de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c87c:	2300      	movs	r3, #0
 800c87e:	2200      	movs	r2, #0
 800c880:	2100      	movs	r1, #0
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f001 fe36 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c888:	e01c      	b.n	800c8c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b03      	cmp	r3, #3
 800c894:	d10f      	bne.n	800c8b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8b6:	2180      	movs	r1, #128	@ 0x80
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f001 fd71 	bl	800e3a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f001 f8df 	bl	800da82 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d03a      	beq.n	800c944 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fe42 	bl	800c558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c8dc:	e032      	b.n	800c944 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c8de:	7afb      	ldrb	r3, [r7, #11]
 800c8e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f000 f97f 	bl	800cbec <USBD_CoreFindEP>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	2bff      	cmp	r3, #255	@ 0xff
 800c8f6:	d025      	beq.n	800c944 <USBD_LL_DataInStage+0x15a>
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d122      	bne.n	800c944 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b03      	cmp	r3, #3
 800c908:	d11c      	bne.n	800c944 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c90a:	7dfa      	ldrb	r2, [r7, #23]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	32ae      	adds	r2, #174	@ 0xae
 800c910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d014      	beq.n	800c944 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c91a:	7dfa      	ldrb	r2, [r7, #23]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c922:	7dfa      	ldrb	r2, [r7, #23]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	32ae      	adds	r2, #174	@ 0xae
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	7afa      	ldrb	r2, [r7, #11]
 800c930:	4611      	mov	r1, r2
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	4798      	blx	r3
 800c936:	4603      	mov	r3, r0
 800c938:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c93a:	7dbb      	ldrb	r3, [r7, #22]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c940:	7dbb      	ldrb	r3, [r7, #22]
 800c942:	e000      	b.n	800c946 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c986:	2b00      	cmp	r3, #0
 800c988:	d014      	beq.n	800c9b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00e      	beq.n	800c9b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6852      	ldr	r2, [r2, #4]
 800c9a2:	b2d2      	uxtb	r2, r2
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d001      	beq.n	800c9b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9b4:	2340      	movs	r3, #64	@ 0x40
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f001 fcab 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2240      	movs	r2, #64	@ 0x40
 800c9cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9d0:	2340      	movs	r3, #64	@ 0x40
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	2180      	movs	r1, #128	@ 0x80
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f001 fc9d 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2240      	movs	r2, #64	@ 0x40
 800c9e6:	621a      	str	r2, [r3, #32]

  return ret;
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b083      	sub	sp, #12
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	78fa      	ldrb	r2, [r7, #3]
 800ca02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b083      	sub	sp, #12
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2204      	movs	r2, #4
 800ca2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b04      	cmp	r3, #4
 800ca50:	d106      	bne.n	800ca60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d110      	bne.n	800caa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00b      	beq.n	800caa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	460b      	mov	r3, r1
 800cab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	32ae      	adds	r2, #174	@ 0xae
 800cac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cacc:	2303      	movs	r3, #3
 800cace:	e01c      	b.n	800cb0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d115      	bne.n	800cb08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	32ae      	adds	r2, #174	@ 0xae
 800cae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	32ae      	adds	r2, #174	@ 0xae
 800cafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	78fa      	ldrb	r2, [r7, #3]
 800cb02:	4611      	mov	r1, r2
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	32ae      	adds	r2, #174	@ 0xae
 800cb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb30:	2303      	movs	r3, #3
 800cb32:	e01c      	b.n	800cb6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b03      	cmp	r3, #3
 800cb3e:	d115      	bne.n	800cb6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	32ae      	adds	r2, #174	@ 0xae
 800cb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00b      	beq.n	800cb6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	32ae      	adds	r2, #174	@ 0xae
 800cb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb64:	78fa      	ldrb	r2, [r7, #3]
 800cb66:	4611      	mov	r1, r2
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb76:	b480      	push	{r7}
 800cb78:	b083      	sub	sp, #12
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00e      	beq.n	800cbc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	6852      	ldr	r2, [r2, #4]
 800cbb6:	b2d2      	uxtb	r2, r2
 800cbb8:	4611      	mov	r1, r2
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b083      	sub	sp, #12
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cbde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cbf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b086      	sub	sp, #24
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	885b      	ldrh	r3, [r3, #2]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	7812      	ldrb	r2, [r2, #0]
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d91f      	bls.n	800cc6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc32:	e013      	b.n	800cc5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc34:	f107 030a 	add.w	r3, r7, #10
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6978      	ldr	r0, [r7, #20]
 800cc3c:	f000 f81b 	bl	800cc76 <USBD_GetNextDesc>
 800cc40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	785b      	ldrb	r3, [r3, #1]
 800cc46:	2b05      	cmp	r3, #5
 800cc48:	d108      	bne.n	800cc5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	789b      	ldrb	r3, [r3, #2]
 800cc52:	78fa      	ldrb	r2, [r7, #3]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d008      	beq.n	800cc6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	885b      	ldrh	r3, [r3, #2]
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	897b      	ldrh	r3, [r7, #10]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d8e5      	bhi.n	800cc34 <USBD_GetEpDesc+0x2e>
 800cc68:	e000      	b.n	800cc6c <USBD_GetEpDesc+0x66>
          break;
 800cc6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cc6c:	693b      	ldr	r3, [r7, #16]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cca0:	68fb      	ldr	r3, [r7, #12]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b087      	sub	sp, #28
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cccc:	8a3b      	ldrh	r3, [r7, #16]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	b21a      	sxth	r2, r3
 800ccd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	b21b      	sxth	r3, r3
 800ccda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ccdc:	89fb      	ldrh	r3, [r7, #14]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd02:	2b40      	cmp	r3, #64	@ 0x40
 800cd04:	d005      	beq.n	800cd12 <USBD_StdDevReq+0x26>
 800cd06:	2b40      	cmp	r3, #64	@ 0x40
 800cd08:	d857      	bhi.n	800cdba <USBD_StdDevReq+0xce>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00f      	beq.n	800cd2e <USBD_StdDevReq+0x42>
 800cd0e:	2b20      	cmp	r3, #32
 800cd10:	d153      	bne.n	800cdba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	32ae      	adds	r2, #174	@ 0xae
 800cd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	4798      	blx	r3
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd2c:	e04a      	b.n	800cdc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	2b09      	cmp	r3, #9
 800cd34:	d83b      	bhi.n	800cdae <USBD_StdDevReq+0xc2>
 800cd36:	a201      	add	r2, pc, #4	@ (adr r2, 800cd3c <USBD_StdDevReq+0x50>)
 800cd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3c:	0800cd91 	.word	0x0800cd91
 800cd40:	0800cda5 	.word	0x0800cda5
 800cd44:	0800cdaf 	.word	0x0800cdaf
 800cd48:	0800cd9b 	.word	0x0800cd9b
 800cd4c:	0800cdaf 	.word	0x0800cdaf
 800cd50:	0800cd6f 	.word	0x0800cd6f
 800cd54:	0800cd65 	.word	0x0800cd65
 800cd58:	0800cdaf 	.word	0x0800cdaf
 800cd5c:	0800cd87 	.word	0x0800cd87
 800cd60:	0800cd79 	.word	0x0800cd79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa3c 	bl	800d1e4 <USBD_GetDescriptor>
          break;
 800cd6c:	e024      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fbcb 	bl	800d50c <USBD_SetAddress>
          break;
 800cd76:	e01f      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fc0a 	bl	800d594 <USBD_SetConfig>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73fb      	strb	r3, [r7, #15]
          break;
 800cd84:	e018      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 fcad 	bl	800d6e8 <USBD_GetConfig>
          break;
 800cd8e:	e013      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fcde 	bl	800d754 <USBD_GetStatus>
          break;
 800cd98:	e00e      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fd0d 	bl	800d7bc <USBD_SetFeature>
          break;
 800cda2:	e009      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fd31 	bl	800d80e <USBD_ClrFeature>
          break;
 800cdac:	e004      	b.n	800cdb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 fd88 	bl	800d8c6 <USBD_CtlError>
          break;
 800cdb6:	bf00      	nop
      }
      break;
 800cdb8:	e004      	b.n	800cdc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdba:	6839      	ldr	r1, [r7, #0]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fd82 	bl	800d8c6 <USBD_CtlError>
      break;
 800cdc2:	bf00      	nop
  }

  return ret;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop

0800cdd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cde6:	2b40      	cmp	r3, #64	@ 0x40
 800cde8:	d005      	beq.n	800cdf6 <USBD_StdItfReq+0x26>
 800cdea:	2b40      	cmp	r3, #64	@ 0x40
 800cdec:	d852      	bhi.n	800ce94 <USBD_StdItfReq+0xc4>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <USBD_StdItfReq+0x26>
 800cdf2:	2b20      	cmp	r3, #32
 800cdf4:	d14e      	bne.n	800ce94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d840      	bhi.n	800ce86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	889b      	ldrh	r3, [r3, #4]
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d836      	bhi.n	800ce7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	889b      	ldrh	r3, [r3, #4]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff fedb 	bl	800cbd2 <USBD_CoreFindIF>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce20:	7bbb      	ldrb	r3, [r7, #14]
 800ce22:	2bff      	cmp	r3, #255	@ 0xff
 800ce24:	d01d      	beq.n	800ce62 <USBD_StdItfReq+0x92>
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d11a      	bne.n	800ce62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce2c:	7bba      	ldrb	r2, [r7, #14]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	32ae      	adds	r2, #174	@ 0xae
 800ce32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00f      	beq.n	800ce5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce3c:	7bba      	ldrb	r2, [r7, #14]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce44:	7bba      	ldrb	r2, [r7, #14]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	32ae      	adds	r2, #174	@ 0xae
 800ce4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	4798      	blx	r3
 800ce56:	4603      	mov	r3, r0
 800ce58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce5a:	e004      	b.n	800ce66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce60:	e001      	b.n	800ce66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce62:	2303      	movs	r3, #3
 800ce64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	88db      	ldrh	r3, [r3, #6]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d110      	bne.n	800ce90 <USBD_StdItfReq+0xc0>
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10d      	bne.n	800ce90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fdf1 	bl	800da5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce7a:	e009      	b.n	800ce90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fd21 	bl	800d8c6 <USBD_CtlError>
          break;
 800ce84:	e004      	b.n	800ce90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fd1c 	bl	800d8c6 <USBD_CtlError>
          break;
 800ce8e:	e000      	b.n	800ce92 <USBD_StdItfReq+0xc2>
          break;
 800ce90:	bf00      	nop
      }
      break;
 800ce92:	e004      	b.n	800ce9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fd15 	bl	800d8c6 <USBD_CtlError>
      break;
 800ce9c:	bf00      	nop
  }

  return ret;
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	889b      	ldrh	r3, [r3, #4]
 800ceba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cec4:	2b40      	cmp	r3, #64	@ 0x40
 800cec6:	d007      	beq.n	800ced8 <USBD_StdEPReq+0x30>
 800cec8:	2b40      	cmp	r3, #64	@ 0x40
 800ceca:	f200 817f 	bhi.w	800d1cc <USBD_StdEPReq+0x324>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d02a      	beq.n	800cf28 <USBD_StdEPReq+0x80>
 800ced2:	2b20      	cmp	r3, #32
 800ced4:	f040 817a 	bne.w	800d1cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ced8:	7bbb      	ldrb	r3, [r7, #14]
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fe85 	bl	800cbec <USBD_CoreFindEP>
 800cee2:	4603      	mov	r3, r0
 800cee4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cee6:	7b7b      	ldrb	r3, [r7, #13]
 800cee8:	2bff      	cmp	r3, #255	@ 0xff
 800ceea:	f000 8174 	beq.w	800d1d6 <USBD_StdEPReq+0x32e>
 800ceee:	7b7b      	ldrb	r3, [r7, #13]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f040 8170 	bne.w	800d1d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cef6:	7b7a      	ldrb	r2, [r7, #13]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cefe:	7b7a      	ldrb	r2, [r7, #13]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	32ae      	adds	r2, #174	@ 0xae
 800cf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8163 	beq.w	800d1d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf10:	7b7a      	ldrb	r2, [r7, #13]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	32ae      	adds	r2, #174	@ 0xae
 800cf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf26:	e156      	b.n	800d1d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	785b      	ldrb	r3, [r3, #1]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d008      	beq.n	800cf42 <USBD_StdEPReq+0x9a>
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	f300 8145 	bgt.w	800d1c0 <USBD_StdEPReq+0x318>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 809b 	beq.w	800d072 <USBD_StdEPReq+0x1ca>
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d03c      	beq.n	800cfba <USBD_StdEPReq+0x112>
 800cf40:	e13e      	b.n	800d1c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d002      	beq.n	800cf54 <USBD_StdEPReq+0xac>
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	d016      	beq.n	800cf80 <USBD_StdEPReq+0xd8>
 800cf52:	e02c      	b.n	800cfae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf54:	7bbb      	ldrb	r3, [r7, #14]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00d      	beq.n	800cf76 <USBD_StdEPReq+0xce>
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	2b80      	cmp	r3, #128	@ 0x80
 800cf5e:	d00a      	beq.n	800cf76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 fa1b 	bl	800e3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf6a:	2180      	movs	r1, #128	@ 0x80
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 fa17 	bl	800e3a0 <USBD_LL_StallEP>
 800cf72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf74:	e020      	b.n	800cfb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fca4 	bl	800d8c6 <USBD_CtlError>
              break;
 800cf7e:	e01b      	b.n	800cfb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	885b      	ldrh	r3, [r3, #2]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10e      	bne.n	800cfa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <USBD_StdEPReq+0xfe>
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b80      	cmp	r3, #128	@ 0x80
 800cf92:	d008      	beq.n	800cfa6 <USBD_StdEPReq+0xfe>
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	88db      	ldrh	r3, [r3, #6]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f001 f9fd 	bl	800e3a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fd58 	bl	800da5c <USBD_CtlSendStatus>

              break;
 800cfac:	e004      	b.n	800cfb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fc88 	bl	800d8c6 <USBD_CtlError>
              break;
 800cfb6:	bf00      	nop
          }
          break;
 800cfb8:	e107      	b.n	800d1ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d002      	beq.n	800cfcc <USBD_StdEPReq+0x124>
 800cfc6:	2b03      	cmp	r3, #3
 800cfc8:	d016      	beq.n	800cff8 <USBD_StdEPReq+0x150>
 800cfca:	e04b      	b.n	800d064 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfcc:	7bbb      	ldrb	r3, [r7, #14]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00d      	beq.n	800cfee <USBD_StdEPReq+0x146>
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b80      	cmp	r3, #128	@ 0x80
 800cfd6:	d00a      	beq.n	800cfee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f001 f9df 	bl	800e3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfe2:	2180      	movs	r1, #128	@ 0x80
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 f9db 	bl	800e3a0 <USBD_LL_StallEP>
 800cfea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfec:	e040      	b.n	800d070 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fc68 	bl	800d8c6 <USBD_CtlError>
              break;
 800cff6:	e03b      	b.n	800d070 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	885b      	ldrh	r3, [r3, #2]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d136      	bne.n	800d06e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d006:	2b00      	cmp	r3, #0
 800d008:	d004      	beq.n	800d014 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f001 f9e5 	bl	800e3de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fd21 	bl	800da5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff fde4 	bl	800cbec <USBD_CoreFindEP>
 800d024:	4603      	mov	r3, r0
 800d026:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d028:	7b7b      	ldrb	r3, [r7, #13]
 800d02a:	2bff      	cmp	r3, #255	@ 0xff
 800d02c:	d01f      	beq.n	800d06e <USBD_StdEPReq+0x1c6>
 800d02e:	7b7b      	ldrb	r3, [r7, #13]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d11c      	bne.n	800d06e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d034:	7b7a      	ldrb	r2, [r7, #13]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d03c:	7b7a      	ldrb	r2, [r7, #13]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	32ae      	adds	r2, #174	@ 0xae
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d010      	beq.n	800d06e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d04c:	7b7a      	ldrb	r2, [r7, #13]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	32ae      	adds	r2, #174	@ 0xae
 800d052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	4798      	blx	r3
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d062:	e004      	b.n	800d06e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d064:	6839      	ldr	r1, [r7, #0]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fc2d 	bl	800d8c6 <USBD_CtlError>
              break;
 800d06c:	e000      	b.n	800d070 <USBD_StdEPReq+0x1c8>
              break;
 800d06e:	bf00      	nop
          }
          break;
 800d070:	e0ab      	b.n	800d1ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d002      	beq.n	800d084 <USBD_StdEPReq+0x1dc>
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d032      	beq.n	800d0e8 <USBD_StdEPReq+0x240>
 800d082:	e097      	b.n	800d1b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d084:	7bbb      	ldrb	r3, [r7, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d007      	beq.n	800d09a <USBD_StdEPReq+0x1f2>
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	2b80      	cmp	r3, #128	@ 0x80
 800d08e:	d004      	beq.n	800d09a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fc17 	bl	800d8c6 <USBD_CtlError>
                break;
 800d098:	e091      	b.n	800d1be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d09a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	da0b      	bge.n	800d0ba <USBD_StdEPReq+0x212>
 800d0a2:	7bbb      	ldrb	r3, [r7, #14]
 800d0a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4413      	add	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	3310      	adds	r3, #16
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	e00b      	b.n	800d0d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2202      	movs	r2, #2
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fc61 	bl	800d9a8 <USBD_CtlSendData>
              break;
 800d0e6:	e06a      	b.n	800d1be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	da11      	bge.n	800d114 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	f003 020f 	and.w	r2, r3, #15
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	3324      	adds	r3, #36	@ 0x24
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d117      	bne.n	800d13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fbda 	bl	800d8c6 <USBD_CtlError>
                  break;
 800d112:	e054      	b.n	800d1be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	f003 020f 	and.w	r2, r3, #15
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	4613      	mov	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d12a:	881b      	ldrh	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fbc7 	bl	800d8c6 <USBD_CtlError>
                  break;
 800d138:	e041      	b.n	800d1be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da0b      	bge.n	800d15a <USBD_StdEPReq+0x2b2>
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	3310      	adds	r3, #16
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	4413      	add	r3, r2
 800d156:	3304      	adds	r3, #4
 800d158:	e00b      	b.n	800d172 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	4413      	add	r3, r2
 800d170:	3304      	adds	r3, #4
 800d172:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d174:	7bbb      	ldrb	r3, [r7, #14]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <USBD_StdEPReq+0x2d8>
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	2b80      	cmp	r3, #128	@ 0x80
 800d17e:	d103      	bne.n	800d188 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]
 800d186:	e00e      	b.n	800d1a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 f945 	bl	800e41c <USBD_LL_IsStallEP>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d003      	beq.n	800d1a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2201      	movs	r2, #1
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	e002      	b.n	800d1a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fbfb 	bl	800d9a8 <USBD_CtlSendData>
              break;
 800d1b2:	e004      	b.n	800d1be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fb85 	bl	800d8c6 <USBD_CtlError>
              break;
 800d1bc:	bf00      	nop
          }
          break;
 800d1be:	e004      	b.n	800d1ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fb7f 	bl	800d8c6 <USBD_CtlError>
          break;
 800d1c8:	bf00      	nop
      }
      break;
 800d1ca:	e005      	b.n	800d1d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fb79 	bl	800d8c6 <USBD_CtlError>
      break;
 800d1d4:	e000      	b.n	800d1d8 <USBD_StdEPReq+0x330>
      break;
 800d1d6:	bf00      	nop
  }

  return ret;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
	...

0800d1e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	885b      	ldrh	r3, [r3, #2]
 800d1fe:	0a1b      	lsrs	r3, r3, #8
 800d200:	b29b      	uxth	r3, r3
 800d202:	3b01      	subs	r3, #1
 800d204:	2b0e      	cmp	r3, #14
 800d206:	f200 8152 	bhi.w	800d4ae <USBD_GetDescriptor+0x2ca>
 800d20a:	a201      	add	r2, pc, #4	@ (adr r2, 800d210 <USBD_GetDescriptor+0x2c>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d281 	.word	0x0800d281
 800d214:	0800d299 	.word	0x0800d299
 800d218:	0800d2d9 	.word	0x0800d2d9
 800d21c:	0800d4af 	.word	0x0800d4af
 800d220:	0800d4af 	.word	0x0800d4af
 800d224:	0800d44f 	.word	0x0800d44f
 800d228:	0800d47b 	.word	0x0800d47b
 800d22c:	0800d4af 	.word	0x0800d4af
 800d230:	0800d4af 	.word	0x0800d4af
 800d234:	0800d4af 	.word	0x0800d4af
 800d238:	0800d4af 	.word	0x0800d4af
 800d23c:	0800d4af 	.word	0x0800d4af
 800d240:	0800d4af 	.word	0x0800d4af
 800d244:	0800d4af 	.word	0x0800d4af
 800d248:	0800d24d 	.word	0x0800d24d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d25e:	69db      	ldr	r3, [r3, #28]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	7c12      	ldrb	r2, [r2, #16]
 800d264:	f107 0108 	add.w	r1, r7, #8
 800d268:	4610      	mov	r0, r2
 800d26a:	4798      	blx	r3
 800d26c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d26e:	e126      	b.n	800d4be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fb27 	bl	800d8c6 <USBD_CtlError>
        err++;
 800d278:	7afb      	ldrb	r3, [r7, #11]
 800d27a:	3301      	adds	r3, #1
 800d27c:	72fb      	strb	r3, [r7, #11]
      break;
 800d27e:	e11e      	b.n	800d4be <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	7c12      	ldrb	r2, [r2, #16]
 800d28c:	f107 0108 	add.w	r1, r7, #8
 800d290:	4610      	mov	r0, r2
 800d292:	4798      	blx	r3
 800d294:	60f8      	str	r0, [r7, #12]
      break;
 800d296:	e112      	b.n	800d4be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7c1b      	ldrb	r3, [r3, #16]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10d      	bne.n	800d2bc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a8:	f107 0208 	add.w	r2, r7, #8
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4798      	blx	r3
 800d2b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2ba:	e100      	b.n	800d4be <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	f107 0208 	add.w	r2, r7, #8
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	4798      	blx	r3
 800d2cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	701a      	strb	r2, [r3, #0]
      break;
 800d2d6:	e0f2      	b.n	800d4be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	885b      	ldrh	r3, [r3, #2]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b05      	cmp	r3, #5
 800d2e0:	f200 80ac 	bhi.w	800d43c <USBD_GetDescriptor+0x258>
 800d2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2ec <USBD_GetDescriptor+0x108>)
 800d2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ea:	bf00      	nop
 800d2ec:	0800d305 	.word	0x0800d305
 800d2f0:	0800d339 	.word	0x0800d339
 800d2f4:	0800d36d 	.word	0x0800d36d
 800d2f8:	0800d3a1 	.word	0x0800d3a1
 800d2fc:	0800d3d5 	.word	0x0800d3d5
 800d300:	0800d409 	.word	0x0800d409
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00b      	beq.n	800d328 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	7c12      	ldrb	r2, [r2, #16]
 800d31c:	f107 0108 	add.w	r1, r7, #8
 800d320:	4610      	mov	r0, r2
 800d322:	4798      	blx	r3
 800d324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d326:	e091      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 facb 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d330:	7afb      	ldrb	r3, [r7, #11]
 800d332:	3301      	adds	r3, #1
 800d334:	72fb      	strb	r3, [r7, #11]
          break;
 800d336:	e089      	b.n	800d44c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00b      	beq.n	800d35c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	7c12      	ldrb	r2, [r2, #16]
 800d350:	f107 0108 	add.w	r1, r7, #8
 800d354:	4610      	mov	r0, r2
 800d356:	4798      	blx	r3
 800d358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d35a:	e077      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 fab1 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d364:	7afb      	ldrb	r3, [r7, #11]
 800d366:	3301      	adds	r3, #1
 800d368:	72fb      	strb	r3, [r7, #11]
          break;
 800d36a:	e06f      	b.n	800d44c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	7c12      	ldrb	r2, [r2, #16]
 800d384:	f107 0108 	add.w	r1, r7, #8
 800d388:	4610      	mov	r0, r2
 800d38a:	4798      	blx	r3
 800d38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d38e:	e05d      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fa97 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d398:	7afb      	ldrb	r3, [r7, #11]
 800d39a:	3301      	adds	r3, #1
 800d39c:	72fb      	strb	r3, [r7, #11]
          break;
 800d39e:	e055      	b.n	800d44c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	7c12      	ldrb	r2, [r2, #16]
 800d3b8:	f107 0108 	add.w	r1, r7, #8
 800d3bc:	4610      	mov	r0, r2
 800d3be:	4798      	blx	r3
 800d3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3c2:	e043      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3c4:	6839      	ldr	r1, [r7, #0]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fa7d 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d3cc:	7afb      	ldrb	r3, [r7, #11]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3d2:	e03b      	b.n	800d44c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	7c12      	ldrb	r2, [r2, #16]
 800d3ec:	f107 0108 	add.w	r1, r7, #8
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	4798      	blx	r3
 800d3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3f6:	e029      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fa63 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d400:	7afb      	ldrb	r3, [r7, #11]
 800d402:	3301      	adds	r3, #1
 800d404:	72fb      	strb	r3, [r7, #11]
          break;
 800d406:	e021      	b.n	800d44c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	7c12      	ldrb	r2, [r2, #16]
 800d420:	f107 0108 	add.w	r1, r7, #8
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d42a:	e00f      	b.n	800d44c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fa49 	bl	800d8c6 <USBD_CtlError>
            err++;
 800d434:	7afb      	ldrb	r3, [r7, #11]
 800d436:	3301      	adds	r3, #1
 800d438:	72fb      	strb	r3, [r7, #11]
          break;
 800d43a:	e007      	b.n	800d44c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fa41 	bl	800d8c6 <USBD_CtlError>
          err++;
 800d444:	7afb      	ldrb	r3, [r7, #11]
 800d446:	3301      	adds	r3, #1
 800d448:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d44a:	bf00      	nop
      }
      break;
 800d44c:	e037      	b.n	800d4be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7c1b      	ldrb	r3, [r3, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d109      	bne.n	800d46a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d45e:	f107 0208 	add.w	r2, r7, #8
 800d462:	4610      	mov	r0, r2
 800d464:	4798      	blx	r3
 800d466:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d468:	e029      	b.n	800d4be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fa2a 	bl	800d8c6 <USBD_CtlError>
        err++;
 800d472:	7afb      	ldrb	r3, [r7, #11]
 800d474:	3301      	adds	r3, #1
 800d476:	72fb      	strb	r3, [r7, #11]
      break;
 800d478:	e021      	b.n	800d4be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7c1b      	ldrb	r3, [r3, #16]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10d      	bne.n	800d49e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d48a:	f107 0208 	add.w	r2, r7, #8
 800d48e:	4610      	mov	r0, r2
 800d490:	4798      	blx	r3
 800d492:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	3301      	adds	r3, #1
 800d498:	2207      	movs	r2, #7
 800d49a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d49c:	e00f      	b.n	800d4be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fa10 	bl	800d8c6 <USBD_CtlError>
        err++;
 800d4a6:	7afb      	ldrb	r3, [r7, #11]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d4ac:	e007      	b.n	800d4be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fa08 	bl	800d8c6 <USBD_CtlError>
      err++;
 800d4b6:	7afb      	ldrb	r3, [r7, #11]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d4bc:	bf00      	nop
  }

  if (err != 0U)
 800d4be:	7afb      	ldrb	r3, [r7, #11]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d11e      	bne.n	800d502 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	88db      	ldrh	r3, [r3, #6]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d016      	beq.n	800d4fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d4cc:	893b      	ldrh	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00e      	beq.n	800d4f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	88da      	ldrh	r2, [r3, #6]
 800d4d6:	893b      	ldrh	r3, [r7, #8]
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	bf28      	it	cs
 800d4dc:	4613      	movcs	r3, r2
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4e2:	893b      	ldrh	r3, [r7, #8]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	68f9      	ldr	r1, [r7, #12]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fa5d 	bl	800d9a8 <USBD_CtlSendData>
 800d4ee:	e009      	b.n	800d504 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f9e7 	bl	800d8c6 <USBD_CtlError>
 800d4f8:	e004      	b.n	800d504 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 faae 	bl	800da5c <USBD_CtlSendStatus>
 800d500:	e000      	b.n	800d504 <USBD_GetDescriptor+0x320>
    return;
 800d502:	bf00      	nop
  }
}
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop

0800d50c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	889b      	ldrh	r3, [r3, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d131      	bne.n	800d582 <USBD_SetAddress+0x76>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	88db      	ldrh	r3, [r3, #6]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d12d      	bne.n	800d582 <USBD_SetAddress+0x76>
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	885b      	ldrh	r3, [r3, #2]
 800d52a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d52c:	d829      	bhi.n	800d582 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	885b      	ldrh	r3, [r3, #2]
 800d532:	b2db      	uxtb	r3, r3
 800d534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d538:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b03      	cmp	r3, #3
 800d544:	d104      	bne.n	800d550 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d546:	6839      	ldr	r1, [r7, #0]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f9bc 	bl	800d8c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54e:	e01d      	b.n	800d58c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	7bfa      	ldrb	r2, [r7, #15]
 800d554:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 ff89 	bl	800e474 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fa7a 	bl	800da5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d568:	7bfb      	ldrb	r3, [r7, #15]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d004      	beq.n	800d578 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2202      	movs	r2, #2
 800d572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d576:	e009      	b.n	800d58c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d580:	e004      	b.n	800d58c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f99e 	bl	800d8c6 <USBD_CtlError>
  }
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	885b      	ldrh	r3, [r3, #2]
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	4b4e      	ldr	r3, [pc, #312]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d5aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5ac:	4b4d      	ldr	r3, [pc, #308]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d905      	bls.n	800d5c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f985 	bl	800d8c6 <USBD_CtlError>
    return USBD_FAIL;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	e08c      	b.n	800d6da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d002      	beq.n	800d5d2 <USBD_SetConfig+0x3e>
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d029      	beq.n	800d624 <USBD_SetConfig+0x90>
 800d5d0:	e075      	b.n	800d6be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d5d2:	4b44      	ldr	r3, [pc, #272]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d020      	beq.n	800d61c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d5da:	4b42      	ldr	r3, [pc, #264]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5e4:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7fe ffbf 	bl	800c56e <USBD_SetClassConfig>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d008      	beq.n	800d60c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f962 	bl	800d8c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2202      	movs	r2, #2
 800d606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d60a:	e065      	b.n	800d6d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 fa25 	bl	800da5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2203      	movs	r2, #3
 800d616:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d61a:	e05d      	b.n	800d6d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fa1d 	bl	800da5c <USBD_CtlSendStatus>
      break;
 800d622:	e059      	b.n	800d6d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d624:	4b2f      	ldr	r3, [pc, #188]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d112      	bne.n	800d652 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2202      	movs	r2, #2
 800d630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d634:	4b2b      	ldr	r3, [pc, #172]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d63e:	4b29      	ldr	r3, [pc, #164]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7fe ffae 	bl	800c5a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fa06 	bl	800da5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d650:	e042      	b.n	800d6d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d652:	4b24      	ldr	r3, [pc, #144]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d02a      	beq.n	800d6b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7fe ff9c 	bl	800c5a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d66e:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d678:	4b1a      	ldr	r3, [pc, #104]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7fe ff75 	bl	800c56e <USBD_SetClassConfig>
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00f      	beq.n	800d6ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f918 	bl	800d8c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7fe ff81 	bl	800c5a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d6ac:	e014      	b.n	800d6d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f9d4 	bl	800da5c <USBD_CtlSendStatus>
      break;
 800d6b4:	e010      	b.n	800d6d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f9d0 	bl	800da5c <USBD_CtlSendStatus>
      break;
 800d6bc:	e00c      	b.n	800d6d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f900 	bl	800d8c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6c6:	4b07      	ldr	r3, [pc, #28]	@ (800d6e4 <USBD_SetConfig+0x150>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7fe ff6a 	bl	800c5a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6d6:	bf00      	nop
  }

  return ret;
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	200009cc 	.word	0x200009cc

0800d6e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	88db      	ldrh	r3, [r3, #6]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d004      	beq.n	800d704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f8e2 	bl	800d8c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d702:	e023      	b.n	800d74c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	dc02      	bgt.n	800d716 <USBD_GetConfig+0x2e>
 800d710:	2b00      	cmp	r3, #0
 800d712:	dc03      	bgt.n	800d71c <USBD_GetConfig+0x34>
 800d714:	e015      	b.n	800d742 <USBD_GetConfig+0x5a>
 800d716:	2b03      	cmp	r3, #3
 800d718:	d00b      	beq.n	800d732 <USBD_GetConfig+0x4a>
 800d71a:	e012      	b.n	800d742 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3308      	adds	r3, #8
 800d726:	2201      	movs	r2, #1
 800d728:	4619      	mov	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 f93c 	bl	800d9a8 <USBD_CtlSendData>
        break;
 800d730:	e00c      	b.n	800d74c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	3304      	adds	r3, #4
 800d736:	2201      	movs	r2, #1
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f934 	bl	800d9a8 <USBD_CtlSendData>
        break;
 800d740:	e004      	b.n	800d74c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f8be 	bl	800d8c6 <USBD_CtlError>
        break;
 800d74a:	bf00      	nop
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d81e      	bhi.n	800d7aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	88db      	ldrh	r3, [r3, #6]
 800d770:	2b02      	cmp	r3, #2
 800d772:	d004      	beq.n	800d77e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d774:	6839      	ldr	r1, [r7, #0]
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f8a5 	bl	800d8c6 <USBD_CtlError>
        break;
 800d77c:	e01a      	b.n	800d7b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d005      	beq.n	800d79a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	f043 0202 	orr.w	r2, r3, #2
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	330c      	adds	r3, #12
 800d79e:	2202      	movs	r2, #2
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f900 	bl	800d9a8 <USBD_CtlSendData>
      break;
 800d7a8:	e004      	b.n	800d7b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f88a 	bl	800d8c6 <USBD_CtlError>
      break;
 800d7b2:	bf00      	nop
  }
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d107      	bne.n	800d7de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f940 	bl	800da5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d7dc:	e013      	b.n	800d806 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	885b      	ldrh	r3, [r3, #2]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d10b      	bne.n	800d7fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	889b      	ldrh	r3, [r3, #4]
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f930 	bl	800da5c <USBD_CtlSendStatus>
}
 800d7fc:	e003      	b.n	800d806 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f860 	bl	800d8c6 <USBD_CtlError>
}
 800d806:	bf00      	nop
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	2b02      	cmp	r3, #2
 800d824:	d80b      	bhi.n	800d83e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	885b      	ldrh	r3, [r3, #2]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d10c      	bne.n	800d848 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f910 	bl	800da5c <USBD_CtlSendStatus>
      }
      break;
 800d83c:	e004      	b.n	800d848 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f840 	bl	800d8c6 <USBD_CtlError>
      break;
 800d846:	e000      	b.n	800d84a <USBD_ClrFeature+0x3c>
      break;
 800d848:	bf00      	nop
  }
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b084      	sub	sp, #16
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	781a      	ldrb	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	3301      	adds	r3, #1
 800d86c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	781a      	ldrb	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3301      	adds	r3, #1
 800d87a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7ff fa16 	bl	800ccae <SWAPBYTE>
 800d882:	4603      	mov	r3, r0
 800d884:	461a      	mov	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3301      	adds	r3, #1
 800d88e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3301      	adds	r3, #1
 800d894:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff fa09 	bl	800ccae <SWAPBYTE>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f7ff f9fc 	bl	800ccae <SWAPBYTE>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	80da      	strh	r2, [r3, #6]
}
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8d0:	2180      	movs	r1, #128	@ 0x80
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 fd64 	bl	800e3a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fd60 	bl	800e3a0 <USBD_LL_StallEP>
}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d036      	beq.n	800d96c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d902:	6938      	ldr	r0, [r7, #16]
 800d904:	f000 f836 	bl	800d974 <USBD_GetLen>
 800d908:	4603      	mov	r3, r0
 800d90a:	3301      	adds	r3, #1
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	b29a      	uxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	68ba      	ldr	r2, [r7, #8]
 800d91a:	4413      	add	r3, r2
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	7812      	ldrb	r2, [r2, #0]
 800d920:	701a      	strb	r2, [r3, #0]
  idx++;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
 800d924:	3301      	adds	r3, #1
 800d926:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d928:	7dfb      	ldrb	r3, [r7, #23]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	4413      	add	r3, r2
 800d92e:	2203      	movs	r2, #3
 800d930:	701a      	strb	r2, [r3, #0]
  idx++;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	3301      	adds	r3, #1
 800d936:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d938:	e013      	b.n	800d962 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	4413      	add	r3, r2
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	7812      	ldrb	r2, [r2, #0]
 800d944:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	3301      	adds	r3, #1
 800d94a:	613b      	str	r3, [r7, #16]
    idx++;
 800d94c:	7dfb      	ldrb	r3, [r7, #23]
 800d94e:	3301      	adds	r3, #1
 800d950:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	4413      	add	r3, r2
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	3301      	adds	r3, #1
 800d960:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1e7      	bne.n	800d93a <USBD_GetString+0x52>
 800d96a:	e000      	b.n	800d96e <USBD_GetString+0x86>
    return;
 800d96c:	bf00      	nop
  }
}
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d984:	e005      	b.n	800d992 <USBD_GetLen+0x1e>
  {
    len++;
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	3301      	adds	r3, #1
 800d98a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	3301      	adds	r3, #1
 800d990:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1f5      	bne.n	800d986 <USBD_GetLen+0x12>
  }

  return len;
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2202      	movs	r2, #2
 800d9b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 fd6f 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	60f8      	str	r0, [r7, #12]
 800d9e6:	60b9      	str	r1, [r7, #8]
 800d9e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 fd5e 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2203      	movs	r2, #3
 800da10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	2100      	movs	r1, #0
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 fd62 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	60f8      	str	r0, [r7, #12]
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	2100      	movs	r1, #0
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fd51 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2204      	movs	r2, #4
 800da68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da6c:	2300      	movs	r3, #0
 800da6e:	2200      	movs	r2, #0
 800da70:	2100      	movs	r1, #0
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fd1d 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800da78:	2300      	movs	r3, #0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2205      	movs	r2, #5
 800da8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da92:	2300      	movs	r3, #0
 800da94:	2200      	movs	r2, #0
 800da96:	2100      	movs	r1, #0
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fd2b 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4613      	mov	r3, r2
 800dab4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dab6:	2301      	movs	r3, #1
 800dab8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dabe:	4b1f      	ldr	r3, [pc, #124]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800dac0:	7a5b      	ldrb	r3, [r3, #9]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d131      	bne.n	800db2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dac8:	4b1c      	ldr	r3, [pc, #112]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800daca:	7a5b      	ldrb	r3, [r3, #9]
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	461a      	mov	r2, r3
 800dad0:	4b1a      	ldr	r3, [pc, #104]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800dad2:	2100      	movs	r1, #0
 800dad4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dad6:	4b19      	ldr	r3, [pc, #100]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800dad8:	7a5b      	ldrb	r3, [r3, #9]
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	4a17      	ldr	r2, [pc, #92]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4413      	add	r3, r2
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dae6:	4b15      	ldr	r3, [pc, #84]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800dae8:	7a5b      	ldrb	r3, [r3, #9]
 800daea:	b2db      	uxtb	r3, r3
 800daec:	461a      	mov	r2, r3
 800daee:	4b13      	ldr	r3, [pc, #76]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800daf0:	4413      	add	r3, r2
 800daf2:	79fa      	ldrb	r2, [r7, #7]
 800daf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800daf6:	4b11      	ldr	r3, [pc, #68]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800daf8:	7a5b      	ldrb	r3, [r3, #9]
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	1c5a      	adds	r2, r3, #1
 800dafe:	b2d1      	uxtb	r1, r2
 800db00:	4a0e      	ldr	r2, [pc, #56]	@ (800db3c <FATFS_LinkDriverEx+0x94>)
 800db02:	7251      	strb	r1, [r2, #9]
 800db04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db06:	7dbb      	ldrb	r3, [r7, #22]
 800db08:	3330      	adds	r3, #48	@ 0x30
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	3301      	adds	r3, #1
 800db14:	223a      	movs	r2, #58	@ 0x3a
 800db16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	3302      	adds	r3, #2
 800db1c:	222f      	movs	r2, #47	@ 0x2f
 800db1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	3303      	adds	r3, #3
 800db24:	2200      	movs	r2, #0
 800db26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	200009d0 	.word	0x200009d0

0800db40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db4a:	2200      	movs	r2, #0
 800db4c:	6839      	ldr	r1, [r7, #0]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff ffaa 	bl	800daa8 <FATFS_LinkDriverEx>
 800db54:	4603      	mov	r3, r0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
	...

0800db60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db64:	2200      	movs	r2, #0
 800db66:	4912      	ldr	r1, [pc, #72]	@ (800dbb0 <MX_USB_DEVICE_Init+0x50>)
 800db68:	4812      	ldr	r0, [pc, #72]	@ (800dbb4 <MX_USB_DEVICE_Init+0x54>)
 800db6a:	f7fe fc83 	bl	800c474 <USBD_Init>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db74:	f7f6 f8a0 	bl	8003cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db78:	490f      	ldr	r1, [pc, #60]	@ (800dbb8 <MX_USB_DEVICE_Init+0x58>)
 800db7a:	480e      	ldr	r0, [pc, #56]	@ (800dbb4 <MX_USB_DEVICE_Init+0x54>)
 800db7c:	f7fe fcaa 	bl	800c4d4 <USBD_RegisterClass>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db86:	f7f6 f897 	bl	8003cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db8a:	490c      	ldr	r1, [pc, #48]	@ (800dbbc <MX_USB_DEVICE_Init+0x5c>)
 800db8c:	4809      	ldr	r0, [pc, #36]	@ (800dbb4 <MX_USB_DEVICE_Init+0x54>)
 800db8e:	f7fe fb9b 	bl	800c2c8 <USBD_CDC_RegisterInterface>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db98:	f7f6 f88e 	bl	8003cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db9c:	4805      	ldr	r0, [pc, #20]	@ (800dbb4 <MX_USB_DEVICE_Init+0x54>)
 800db9e:	f7fe fccf 	bl	800c540 <USBD_Start>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dba8:	f7f6 f886 	bl	8003cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dbac:	bf00      	nop
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	200000c4 	.word	0x200000c4
 800dbb4:	200009dc 	.word	0x200009dc
 800dbb8:	20000030 	.word	0x20000030
 800dbbc:	200000b0 	.word	0x200000b0

0800dbc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	4905      	ldr	r1, [pc, #20]	@ (800dbdc <CDC_Init_FS+0x1c>)
 800dbc8:	4805      	ldr	r0, [pc, #20]	@ (800dbe0 <CDC_Init_FS+0x20>)
 800dbca:	f7fe fb97 	bl	800c2fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbce:	4905      	ldr	r1, [pc, #20]	@ (800dbe4 <CDC_Init_FS+0x24>)
 800dbd0:	4803      	ldr	r0, [pc, #12]	@ (800dbe0 <CDC_Init_FS+0x20>)
 800dbd2:	f7fe fbb5 	bl	800c340 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	200014b8 	.word	0x200014b8
 800dbe0:	200009dc 	.word	0x200009dc
 800dbe4:	20000cb8 	.word	0x20000cb8

0800dbe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	6039      	str	r1, [r7, #0]
 800dc02:	71fb      	strb	r3, [r7, #7]
 800dc04:	4613      	mov	r3, r2
 800dc06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc08:	79fb      	ldrb	r3, [r7, #7]
 800dc0a:	2b23      	cmp	r3, #35	@ 0x23
 800dc0c:	d84a      	bhi.n	800dca4 <CDC_Control_FS+0xac>
 800dc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc14 <CDC_Control_FS+0x1c>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dca5 	.word	0x0800dca5
 800dc18:	0800dca5 	.word	0x0800dca5
 800dc1c:	0800dca5 	.word	0x0800dca5
 800dc20:	0800dca5 	.word	0x0800dca5
 800dc24:	0800dca5 	.word	0x0800dca5
 800dc28:	0800dca5 	.word	0x0800dca5
 800dc2c:	0800dca5 	.word	0x0800dca5
 800dc30:	0800dca5 	.word	0x0800dca5
 800dc34:	0800dca5 	.word	0x0800dca5
 800dc38:	0800dca5 	.word	0x0800dca5
 800dc3c:	0800dca5 	.word	0x0800dca5
 800dc40:	0800dca5 	.word	0x0800dca5
 800dc44:	0800dca5 	.word	0x0800dca5
 800dc48:	0800dca5 	.word	0x0800dca5
 800dc4c:	0800dca5 	.word	0x0800dca5
 800dc50:	0800dca5 	.word	0x0800dca5
 800dc54:	0800dca5 	.word	0x0800dca5
 800dc58:	0800dca5 	.word	0x0800dca5
 800dc5c:	0800dca5 	.word	0x0800dca5
 800dc60:	0800dca5 	.word	0x0800dca5
 800dc64:	0800dca5 	.word	0x0800dca5
 800dc68:	0800dca5 	.word	0x0800dca5
 800dc6c:	0800dca5 	.word	0x0800dca5
 800dc70:	0800dca5 	.word	0x0800dca5
 800dc74:	0800dca5 	.word	0x0800dca5
 800dc78:	0800dca5 	.word	0x0800dca5
 800dc7c:	0800dca5 	.word	0x0800dca5
 800dc80:	0800dca5 	.word	0x0800dca5
 800dc84:	0800dca5 	.word	0x0800dca5
 800dc88:	0800dca5 	.word	0x0800dca5
 800dc8c:	0800dca5 	.word	0x0800dca5
 800dc90:	0800dca5 	.word	0x0800dca5
 800dc94:	0800dca5 	.word	0x0800dca5
 800dc98:	0800dca5 	.word	0x0800dca5
 800dc9c:	0800dca5 	.word	0x0800dca5
 800dca0:	0800dca5 	.word	0x0800dca5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dca4:	bf00      	nop
  }

  return (USBD_OK);
 800dca6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dcbe:	6879      	ldr	r1, [r7, #4]
 800dcc0:	4805      	ldr	r0, [pc, #20]	@ (800dcd8 <CDC_Receive_FS+0x24>)
 800dcc2:	f7fe fb3d 	bl	800c340 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcc6:	4804      	ldr	r0, [pc, #16]	@ (800dcd8 <CDC_Receive_FS+0x24>)
 800dcc8:	f7fe fb9e 	bl	800c408 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dccc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200009dc 	.word	0x200009dc

0800dcdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dcec:	4b0d      	ldr	r3, [pc, #52]	@ (800dd24 <CDC_Transmit_FS+0x48>)
 800dcee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dcf2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e00b      	b.n	800dd1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd02:	887b      	ldrh	r3, [r7, #2]
 800dd04:	461a      	mov	r2, r3
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	4806      	ldr	r0, [pc, #24]	@ (800dd24 <CDC_Transmit_FS+0x48>)
 800dd0a:	f7fe faf7 	bl	800c2fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd0e:	4805      	ldr	r0, [pc, #20]	@ (800dd24 <CDC_Transmit_FS+0x48>)
 800dd10:	f7fe fb34 	bl	800c37c <USBD_CDC_TransmitPacket>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200009dc 	.word	0x200009dc

0800dd28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b087      	sub	sp, #28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	4613      	mov	r3, r2
 800dd34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
	...

0800dd4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	6039      	str	r1, [r7, #0]
 800dd56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2212      	movs	r2, #18
 800dd5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd5e:	4b03      	ldr	r3, [pc, #12]	@ (800dd6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	200000e4 	.word	0x200000e4

0800dd70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	6039      	str	r1, [r7, #0]
 800dd7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2204      	movs	r2, #4
 800dd80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd82:	4b03      	ldr	r3, [pc, #12]	@ (800dd90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	20000104 	.word	0x20000104

0800dd94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	6039      	str	r1, [r7, #0]
 800dd9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d105      	bne.n	800ddb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	4907      	ldr	r1, [pc, #28]	@ (800ddc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ddaa:	4808      	ldr	r0, [pc, #32]	@ (800ddcc <USBD_FS_ProductStrDescriptor+0x38>)
 800ddac:	f7ff fd9c 	bl	800d8e8 <USBD_GetString>
 800ddb0:	e004      	b.n	800ddbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	4904      	ldr	r1, [pc, #16]	@ (800ddc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ddb6:	4805      	ldr	r0, [pc, #20]	@ (800ddcc <USBD_FS_ProductStrDescriptor+0x38>)
 800ddb8:	f7ff fd96 	bl	800d8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddbc:	4b02      	ldr	r3, [pc, #8]	@ (800ddc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20001cb8 	.word	0x20001cb8
 800ddcc:	08015294 	.word	0x08015294

0800ddd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	4904      	ldr	r1, [pc, #16]	@ (800ddf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dde0:	4804      	ldr	r0, [pc, #16]	@ (800ddf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dde2:	f7ff fd81 	bl	800d8e8 <USBD_GetString>
  return USBD_StrDesc;
 800dde6:	4b02      	ldr	r3, [pc, #8]	@ (800ddf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	20001cb8 	.word	0x20001cb8
 800ddf4:	080152ac 	.word	0x080152ac

0800ddf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	4603      	mov	r3, r0
 800de00:	6039      	str	r1, [r7, #0]
 800de02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	221a      	movs	r2, #26
 800de08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de0a:	f000 f855 	bl	800deb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de0e:	4b02      	ldr	r3, [pc, #8]	@ (800de18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de10:	4618      	mov	r0, r3
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	20000108 	.word	0x20000108

0800de1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d105      	bne.n	800de3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	4907      	ldr	r1, [pc, #28]	@ (800de50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de32:	4808      	ldr	r0, [pc, #32]	@ (800de54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de34:	f7ff fd58 	bl	800d8e8 <USBD_GetString>
 800de38:	e004      	b.n	800de44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	4904      	ldr	r1, [pc, #16]	@ (800de50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de3e:	4805      	ldr	r0, [pc, #20]	@ (800de54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de40:	f7ff fd52 	bl	800d8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de44:	4b02      	ldr	r3, [pc, #8]	@ (800de50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de46:	4618      	mov	r0, r3
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	20001cb8 	.word	0x20001cb8
 800de54:	080152c0 	.word	0x080152c0

0800de58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	6039      	str	r1, [r7, #0]
 800de62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d105      	bne.n	800de76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	4907      	ldr	r1, [pc, #28]	@ (800de8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de6e:	4808      	ldr	r0, [pc, #32]	@ (800de90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de70:	f7ff fd3a 	bl	800d8e8 <USBD_GetString>
 800de74:	e004      	b.n	800de80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	4904      	ldr	r1, [pc, #16]	@ (800de8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de7a:	4805      	ldr	r0, [pc, #20]	@ (800de90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de7c:	f7ff fd34 	bl	800d8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de80:	4b02      	ldr	r3, [pc, #8]	@ (800de8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de82:	4618      	mov	r0, r3
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20001cb8 	.word	0x20001cb8
 800de90:	080152cc 	.word	0x080152cc

0800de94 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	6039      	str	r1, [r7, #0]
 800de9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	220c      	movs	r2, #12
 800dea4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dea6:	4b03      	ldr	r3, [pc, #12]	@ (800deb4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	200000f8 	.word	0x200000f8

0800deb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800debe:	4b0f      	ldr	r3, [pc, #60]	@ (800defc <Get_SerialNum+0x44>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dec4:	4b0e      	ldr	r3, [pc, #56]	@ (800df00 <Get_SerialNum+0x48>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800deca:	4b0e      	ldr	r3, [pc, #56]	@ (800df04 <Get_SerialNum+0x4c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4413      	add	r3, r2
 800ded6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d009      	beq.n	800def2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dede:	2208      	movs	r2, #8
 800dee0:	4909      	ldr	r1, [pc, #36]	@ (800df08 <Get_SerialNum+0x50>)
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 f814 	bl	800df10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dee8:	2204      	movs	r2, #4
 800deea:	4908      	ldr	r1, [pc, #32]	@ (800df0c <Get_SerialNum+0x54>)
 800deec:	68b8      	ldr	r0, [r7, #8]
 800deee:	f000 f80f 	bl	800df10 <IntToUnicode>
  }
}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	1fff7a10 	.word	0x1fff7a10
 800df00:	1fff7a14 	.word	0x1fff7a14
 800df04:	1fff7a18 	.word	0x1fff7a18
 800df08:	2000010a 	.word	0x2000010a
 800df0c:	2000011a 	.word	0x2000011a

0800df10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df10:	b480      	push	{r7}
 800df12:	b087      	sub	sp, #28
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	4613      	mov	r3, r2
 800df1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df22:	2300      	movs	r3, #0
 800df24:	75fb      	strb	r3, [r7, #23]
 800df26:	e027      	b.n	800df78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	0f1b      	lsrs	r3, r3, #28
 800df2c:	2b09      	cmp	r3, #9
 800df2e:	d80b      	bhi.n	800df48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	0f1b      	lsrs	r3, r3, #28
 800df34:	b2da      	uxtb	r2, r3
 800df36:	7dfb      	ldrb	r3, [r7, #23]
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	4619      	mov	r1, r3
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	440b      	add	r3, r1
 800df40:	3230      	adds	r2, #48	@ 0x30
 800df42:	b2d2      	uxtb	r2, r2
 800df44:	701a      	strb	r2, [r3, #0]
 800df46:	e00a      	b.n	800df5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	0f1b      	lsrs	r3, r3, #28
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	4619      	mov	r1, r3
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	440b      	add	r3, r1
 800df58:	3237      	adds	r2, #55	@ 0x37
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	011b      	lsls	r3, r3, #4
 800df62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df64:	7dfb      	ldrb	r3, [r7, #23]
 800df66:	005b      	lsls	r3, r3, #1
 800df68:	3301      	adds	r3, #1
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	4413      	add	r3, r2
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	3301      	adds	r3, #1
 800df76:	75fb      	strb	r3, [r7, #23]
 800df78:	7dfa      	ldrb	r2, [r7, #23]
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d3d3      	bcc.n	800df28 <IntToUnicode+0x18>
  }
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	371c      	adds	r7, #28
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
	...

0800df90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b0a0      	sub	sp, #128	@ 0x80
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	605a      	str	r2, [r3, #4]
 800dfa2:	609a      	str	r2, [r3, #8]
 800dfa4:	60da      	str	r2, [r3, #12]
 800dfa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfa8:	f107 0310 	add.w	r3, r7, #16
 800dfac:	225c      	movs	r2, #92	@ 0x5c
 800dfae:	2100      	movs	r1, #0
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f002 f9c0 	bl	8010336 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfbe:	d149      	bne.n	800e054 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dfc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dfca:	f107 0310 	add.w	r3, r7, #16
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f9 fb34 	bl	800763c <HAL_RCCEx_PeriphCLKConfig>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800dfda:	f7f5 fe6d 	bl	8003cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	4b1e      	ldr	r3, [pc, #120]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800dfe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfe6:	4a1d      	ldr	r2, [pc, #116]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800dfe8:	f043 0301 	orr.w	r3, r3, #1
 800dfec:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfee:	4b1b      	ldr	r3, [pc, #108]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800dff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dffa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e000:	2302      	movs	r3, #2
 800e002:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e004:	2300      	movs	r3, #0
 800e006:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e008:	2303      	movs	r3, #3
 800e00a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e00c:	230a      	movs	r3, #10
 800e00e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e010:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e014:	4619      	mov	r1, r3
 800e016:	4812      	ldr	r0, [pc, #72]	@ (800e060 <HAL_PCD_MspInit+0xd0>)
 800e018:	f7f7 fc3a 	bl	8005890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e01c:	4b0f      	ldr	r3, [pc, #60]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800e01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e020:	4a0e      	ldr	r2, [pc, #56]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800e022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e026:	6353      	str	r3, [r2, #52]	@ 0x34
 800e028:	2300      	movs	r3, #0
 800e02a:	60bb      	str	r3, [r7, #8]
 800e02c:	4b0b      	ldr	r3, [pc, #44]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800e02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e030:	4a0a      	ldr	r2, [pc, #40]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800e032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e036:	6453      	str	r3, [r2, #68]	@ 0x44
 800e038:	4b08      	ldr	r3, [pc, #32]	@ (800e05c <HAL_PCD_MspInit+0xcc>)
 800e03a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e03c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e040:	60bb      	str	r3, [r7, #8]
 800e042:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e044:	2200      	movs	r2, #0
 800e046:	2100      	movs	r1, #0
 800e048:	2043      	movs	r0, #67	@ 0x43
 800e04a:	f7f6 ffe8 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e04e:	2043      	movs	r0, #67	@ 0x43
 800e050:	f7f7 f801 	bl	8005056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e054:	bf00      	nop
 800e056:	3780      	adds	r7, #128	@ 0x80
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	40023800 	.word	0x40023800
 800e060:	40020000 	.word	0x40020000

0800e064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f7fe faad 	bl	800c5da <USBD_LL_SetupStage>
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800e09a:	78fa      	ldrb	r2, [r7, #3]
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	4413      	add	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	f7fe fae7 	bl	800c684 <USBD_LL_DataOutStage>
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800e0d0:	78fa      	ldrb	r2, [r7, #3]
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	334c      	adds	r3, #76	@ 0x4c
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	78fb      	ldrb	r3, [r7, #3]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	f7fe fb80 	bl	800c7ea <USBD_LL_DataInStage>
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e100:	4618      	mov	r0, r3
 800e102:	f7fe fcb4 	bl	800ca6e <USBD_LL_SOF>
}
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e116:	2301      	movs	r3, #1
 800e118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d102      	bne.n	800e128 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e122:	2300      	movs	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]
 800e126:	e008      	b.n	800e13a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d102      	bne.n	800e136 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
 800e134:	e001      	b.n	800e13a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e136:	f7f5 fdbf 	bl	8003cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e140:	7bfa      	ldrb	r2, [r7, #15]
 800e142:	4611      	mov	r1, r2
 800e144:	4618      	mov	r0, r3
 800e146:	f7fe fc54 	bl	800c9f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e150:	4618      	mov	r0, r3
 800e152:	f7fe fbfc 	bl	800c94e <USBD_LL_Reset>
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fc4f 	bl	800ca12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	6812      	ldr	r2, [r2, #0]
 800e182:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e186:	f043 0301 	orr.w	r3, r3, #1
 800e18a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d005      	beq.n	800e1a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e194:	4b04      	ldr	r3, [pc, #16]	@ (800e1a8 <HAL_PCD_SuspendCallback+0x48>)
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	4a03      	ldr	r2, [pc, #12]	@ (800e1a8 <HAL_PCD_SuspendCallback+0x48>)
 800e19a:	f043 0306 	orr.w	r3, r3, #6
 800e19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	e000ed00 	.word	0xe000ed00

0800e1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fc3f 	bl	800ca3e <USBD_LL_Resume>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e1da:	78fa      	ldrb	r2, [r7, #3]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fc97 	bl	800cb12 <USBD_LL_IsoOUTIncomplete>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e1fe:	78fa      	ldrb	r2, [r7, #3]
 800e200:	4611      	mov	r1, r2
 800e202:	4618      	mov	r0, r3
 800e204:	f7fe fc53 	bl	800caae <USBD_LL_IsoINIncomplete>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fca9 	bl	800cb76 <USBD_LL_DevConnected>
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fca6 	bl	800cb8c <USBD_LL_DevDisconnected>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d13c      	bne.n	800e2d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e258:	4a20      	ldr	r2, [pc, #128]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a1e      	ldr	r2, [pc, #120]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e264:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e268:	4b1c      	ldr	r3, [pc, #112]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e26a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e26e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e270:	4b1a      	ldr	r3, [pc, #104]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e272:	2206      	movs	r2, #6
 800e274:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e276:	4b19      	ldr	r3, [pc, #100]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e278:	2202      	movs	r2, #2
 800e27a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e27c:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e27e:	2200      	movs	r2, #0
 800e280:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e282:	4b16      	ldr	r3, [pc, #88]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e284:	2202      	movs	r2, #2
 800e286:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e288:	4b14      	ldr	r3, [pc, #80]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e28e:	4b13      	ldr	r3, [pc, #76]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e290:	2200      	movs	r2, #0
 800e292:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e294:	4b11      	ldr	r3, [pc, #68]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e296:	2200      	movs	r2, #0
 800e298:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e29a:	4b10      	ldr	r3, [pc, #64]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2a6:	480d      	ldr	r0, [pc, #52]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2a8:	f7f7 fde4 	bl	8005e74 <HAL_PCD_Init>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2b2:	f7f5 fd01 	bl	8003cb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2b6:	2180      	movs	r1, #128	@ 0x80
 800e2b8:	4808      	ldr	r0, [pc, #32]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2ba:	f7f9 f870 	bl	800739e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2be:	2240      	movs	r2, #64	@ 0x40
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4806      	ldr	r0, [pc, #24]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2c4:	f7f9 f824 	bl	8007310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2c8:	2280      	movs	r2, #128	@ 0x80
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	4803      	ldr	r0, [pc, #12]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2ce:	f7f9 f81f 	bl	8007310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20001eb8 	.word	0x20001eb8

0800e2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7f7 fee0 	bl	80060bc <HAL_PCD_Start>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f990 	bl	800e628 <USBD_Get_USB_Status>
 800e308:	4603      	mov	r3, r0
 800e30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
 800e31e:	4608      	mov	r0, r1
 800e320:	4611      	mov	r1, r2
 800e322:	461a      	mov	r2, r3
 800e324:	4603      	mov	r3, r0
 800e326:	70fb      	strb	r3, [r7, #3]
 800e328:	460b      	mov	r3, r1
 800e32a:	70bb      	strb	r3, [r7, #2]
 800e32c:	4613      	mov	r3, r2
 800e32e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e33e:	78bb      	ldrb	r3, [r7, #2]
 800e340:	883a      	ldrh	r2, [r7, #0]
 800e342:	78f9      	ldrb	r1, [r7, #3]
 800e344:	f7f8 fbde 	bl	8006b04 <HAL_PCD_EP_Open>
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 f96a 	bl	800e628 <USBD_Get_USB_Status>
 800e354:	4603      	mov	r3, r0
 800e356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e358:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e37c:	78fa      	ldrb	r2, [r7, #3]
 800e37e:	4611      	mov	r1, r2
 800e380:	4618      	mov	r0, r3
 800e382:	f7f8 fc27 	bl	8006bd4 <HAL_PCD_EP_Close>
 800e386:	4603      	mov	r3, r0
 800e388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f94b 	bl	800e628 <USBD_Get_USB_Status>
 800e392:	4603      	mov	r3, r0
 800e394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e396:	7bbb      	ldrb	r3, [r7, #14]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3ba:	78fa      	ldrb	r2, [r7, #3]
 800e3bc:	4611      	mov	r1, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7f8 fcff 	bl	8006dc2 <HAL_PCD_EP_SetStall>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 f92c 	bl	800e628 <USBD_Get_USB_Status>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f8:	78fa      	ldrb	r2, [r7, #3]
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f8 fd44 	bl	8006e8a <HAL_PCD_EP_ClrStall>
 800e402:	4603      	mov	r3, r0
 800e404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 f90d 	bl	800e628 <USBD_Get_USB_Status>
 800e40e:	4603      	mov	r3, r0
 800e410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e412:	7bbb      	ldrb	r3, [r7, #14]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e42e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e434:	2b00      	cmp	r3, #0
 800e436:	da0b      	bge.n	800e450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e438:	78fb      	ldrb	r3, [r7, #3]
 800e43a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e43e:	68f9      	ldr	r1, [r7, #12]
 800e440:	4613      	mov	r3, r2
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	4413      	add	r3, r2
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	440b      	add	r3, r1
 800e44a:	333e      	adds	r3, #62	@ 0x3e
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	e00b      	b.n	800e468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	4613      	mov	r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	4413      	add	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	440b      	add	r3, r1
 800e462:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800e466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e48e:	78fa      	ldrb	r2, [r7, #3]
 800e490:	4611      	mov	r1, r2
 800e492:	4618      	mov	r0, r3
 800e494:	f7f8 fb11 	bl	8006aba <HAL_PCD_SetAddress>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f8c2 	bl	800e628 <USBD_Get_USB_Status>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b086      	sub	sp, #24
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	603b      	str	r3, [r7, #0]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4d0:	7af9      	ldrb	r1, [r7, #11]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	f7f8 fc2a 	bl	8006d2e <HAL_PCD_EP_Transmit>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 f8a1 	bl	800e628 <USBD_Get_USB_Status>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	607a      	str	r2, [r7, #4]
 800e4fe:	603b      	str	r3, [r7, #0]
 800e500:	460b      	mov	r3, r1
 800e502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e508:	2300      	movs	r3, #0
 800e50a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e512:	7af9      	ldrb	r1, [r7, #11]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	f7f8 fba6 	bl	8006c68 <HAL_PCD_EP_Receive>
 800e51c:	4603      	mov	r3, r0
 800e51e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e520:	7dfb      	ldrb	r3, [r7, #23]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 f880 	bl	800e628 <USBD_Get_USB_Status>
 800e528:	4603      	mov	r3, r0
 800e52a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e52c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e548:	78fa      	ldrb	r2, [r7, #3]
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7f8 fbd6 	bl	8006cfe <HAL_PCD_EP_GetRxCount>
 800e552:	4603      	mov	r3, r0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	460b      	mov	r3, r1
 800e566:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e568:	78fb      	ldrb	r3, [r7, #3]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_PCDEx_LPM_Callback+0x18>
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d01f      	beq.n	800e5b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e572:	e03b      	b.n	800e5ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d007      	beq.n	800e58c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e57c:	f7f4 fbf0 	bl	8002d60 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e580:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	4a1b      	ldr	r2, [pc, #108]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e586:	f023 0306 	bic.w	r3, r3, #6
 800e58a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	6812      	ldr	r2, [r2, #0]
 800e59a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e59e:	f023 0301 	bic.w	r3, r3, #1
 800e5a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fa47 	bl	800ca3e <USBD_LL_Resume>
    break;
 800e5b0:	e01c      	b.n	800e5ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	6812      	ldr	r2, [r2, #0]
 800e5c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5c4:	f043 0301 	orr.w	r3, r3, #1
 800e5c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fa1e 	bl	800ca12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d005      	beq.n	800e5ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5de:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	4a04      	ldr	r2, [pc, #16]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e4:	f043 0306 	orr.w	r3, r3, #6
 800e5e8:	6113      	str	r3, [r2, #16]
    break;
 800e5ea:	bf00      	nop
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	e000ed00 	.word	0xe000ed00

0800e5f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e600:	4b03      	ldr	r3, [pc, #12]	@ (800e610 <USBD_static_malloc+0x18>)
}
 800e602:	4618      	mov	r0, r3
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	200023c4 	.word	0x200023c4

0800e614 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]

}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	4603      	mov	r3, r0
 800e630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d817      	bhi.n	800e66c <USBD_Get_USB_Status+0x44>
 800e63c:	a201      	add	r2, pc, #4	@ (adr r2, 800e644 <USBD_Get_USB_Status+0x1c>)
 800e63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e642:	bf00      	nop
 800e644:	0800e655 	.word	0x0800e655
 800e648:	0800e65b 	.word	0x0800e65b
 800e64c:	0800e661 	.word	0x0800e661
 800e650:	0800e667 	.word	0x0800e667
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	73fb      	strb	r3, [r7, #15]
    break;
 800e658:	e00b      	b.n	800e672 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e65a:	2303      	movs	r3, #3
 800e65c:	73fb      	strb	r3, [r7, #15]
    break;
 800e65e:	e008      	b.n	800e672 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e660:	2301      	movs	r3, #1
 800e662:	73fb      	strb	r3, [r7, #15]
    break;
 800e664:	e005      	b.n	800e672 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e666:	2303      	movs	r3, #3
 800e668:	73fb      	strb	r3, [r7, #15]
    break;
 800e66a:	e002      	b.n	800e672 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e66c:	2303      	movs	r3, #3
 800e66e:	73fb      	strb	r3, [r7, #15]
    break;
 800e670:	bf00      	nop
  }
  return usb_status;
 800e672:	7bfb      	ldrb	r3, [r7, #15]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <malloc>:
 800e680:	4b02      	ldr	r3, [pc, #8]	@ (800e68c <malloc+0xc>)
 800e682:	4601      	mov	r1, r0
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	f000 b825 	b.w	800e6d4 <_malloc_r>
 800e68a:	bf00      	nop
 800e68c:	2000029c 	.word	0x2000029c

0800e690 <sbrk_aligned>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	4e0f      	ldr	r6, [pc, #60]	@ (800e6d0 <sbrk_aligned+0x40>)
 800e694:	460c      	mov	r4, r1
 800e696:	6831      	ldr	r1, [r6, #0]
 800e698:	4605      	mov	r5, r0
 800e69a:	b911      	cbnz	r1, 800e6a2 <sbrk_aligned+0x12>
 800e69c:	f001 fe9e 	bl	80103dc <_sbrk_r>
 800e6a0:	6030      	str	r0, [r6, #0]
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	f001 fe99 	bl	80103dc <_sbrk_r>
 800e6aa:	1c43      	adds	r3, r0, #1
 800e6ac:	d103      	bne.n	800e6b6 <sbrk_aligned+0x26>
 800e6ae:	f04f 34ff 	mov.w	r4, #4294967295
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	bd70      	pop	{r4, r5, r6, pc}
 800e6b6:	1cc4      	adds	r4, r0, #3
 800e6b8:	f024 0403 	bic.w	r4, r4, #3
 800e6bc:	42a0      	cmp	r0, r4
 800e6be:	d0f8      	beq.n	800e6b2 <sbrk_aligned+0x22>
 800e6c0:	1a21      	subs	r1, r4, r0
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f001 fe8a 	bl	80103dc <_sbrk_r>
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	d1f2      	bne.n	800e6b2 <sbrk_aligned+0x22>
 800e6cc:	e7ef      	b.n	800e6ae <sbrk_aligned+0x1e>
 800e6ce:	bf00      	nop
 800e6d0:	200025e4 	.word	0x200025e4

0800e6d4 <_malloc_r>:
 800e6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6d8:	1ccd      	adds	r5, r1, #3
 800e6da:	f025 0503 	bic.w	r5, r5, #3
 800e6de:	3508      	adds	r5, #8
 800e6e0:	2d0c      	cmp	r5, #12
 800e6e2:	bf38      	it	cc
 800e6e4:	250c      	movcc	r5, #12
 800e6e6:	2d00      	cmp	r5, #0
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	db01      	blt.n	800e6f0 <_malloc_r+0x1c>
 800e6ec:	42a9      	cmp	r1, r5
 800e6ee:	d904      	bls.n	800e6fa <_malloc_r+0x26>
 800e6f0:	230c      	movs	r3, #12
 800e6f2:	6033      	str	r3, [r6, #0]
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7d0 <_malloc_r+0xfc>
 800e6fe:	f000 f869 	bl	800e7d4 <__malloc_lock>
 800e702:	f8d8 3000 	ldr.w	r3, [r8]
 800e706:	461c      	mov	r4, r3
 800e708:	bb44      	cbnz	r4, 800e75c <_malloc_r+0x88>
 800e70a:	4629      	mov	r1, r5
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7ff ffbf 	bl	800e690 <sbrk_aligned>
 800e712:	1c43      	adds	r3, r0, #1
 800e714:	4604      	mov	r4, r0
 800e716:	d158      	bne.n	800e7ca <_malloc_r+0xf6>
 800e718:	f8d8 4000 	ldr.w	r4, [r8]
 800e71c:	4627      	mov	r7, r4
 800e71e:	2f00      	cmp	r7, #0
 800e720:	d143      	bne.n	800e7aa <_malloc_r+0xd6>
 800e722:	2c00      	cmp	r4, #0
 800e724:	d04b      	beq.n	800e7be <_malloc_r+0xea>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	4639      	mov	r1, r7
 800e72a:	4630      	mov	r0, r6
 800e72c:	eb04 0903 	add.w	r9, r4, r3
 800e730:	f001 fe54 	bl	80103dc <_sbrk_r>
 800e734:	4581      	cmp	r9, r0
 800e736:	d142      	bne.n	800e7be <_malloc_r+0xea>
 800e738:	6821      	ldr	r1, [r4, #0]
 800e73a:	1a6d      	subs	r5, r5, r1
 800e73c:	4629      	mov	r1, r5
 800e73e:	4630      	mov	r0, r6
 800e740:	f7ff ffa6 	bl	800e690 <sbrk_aligned>
 800e744:	3001      	adds	r0, #1
 800e746:	d03a      	beq.n	800e7be <_malloc_r+0xea>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	442b      	add	r3, r5
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	f8d8 3000 	ldr.w	r3, [r8]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	bb62      	cbnz	r2, 800e7b0 <_malloc_r+0xdc>
 800e756:	f8c8 7000 	str.w	r7, [r8]
 800e75a:	e00f      	b.n	800e77c <_malloc_r+0xa8>
 800e75c:	6822      	ldr	r2, [r4, #0]
 800e75e:	1b52      	subs	r2, r2, r5
 800e760:	d420      	bmi.n	800e7a4 <_malloc_r+0xd0>
 800e762:	2a0b      	cmp	r2, #11
 800e764:	d917      	bls.n	800e796 <_malloc_r+0xc2>
 800e766:	1961      	adds	r1, r4, r5
 800e768:	42a3      	cmp	r3, r4
 800e76a:	6025      	str	r5, [r4, #0]
 800e76c:	bf18      	it	ne
 800e76e:	6059      	strne	r1, [r3, #4]
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	bf08      	it	eq
 800e774:	f8c8 1000 	streq.w	r1, [r8]
 800e778:	5162      	str	r2, [r4, r5]
 800e77a:	604b      	str	r3, [r1, #4]
 800e77c:	4630      	mov	r0, r6
 800e77e:	f000 f82f 	bl	800e7e0 <__malloc_unlock>
 800e782:	f104 000b 	add.w	r0, r4, #11
 800e786:	1d23      	adds	r3, r4, #4
 800e788:	f020 0007 	bic.w	r0, r0, #7
 800e78c:	1ac2      	subs	r2, r0, r3
 800e78e:	bf1c      	itt	ne
 800e790:	1a1b      	subne	r3, r3, r0
 800e792:	50a3      	strne	r3, [r4, r2]
 800e794:	e7af      	b.n	800e6f6 <_malloc_r+0x22>
 800e796:	6862      	ldr	r2, [r4, #4]
 800e798:	42a3      	cmp	r3, r4
 800e79a:	bf0c      	ite	eq
 800e79c:	f8c8 2000 	streq.w	r2, [r8]
 800e7a0:	605a      	strne	r2, [r3, #4]
 800e7a2:	e7eb      	b.n	800e77c <_malloc_r+0xa8>
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	6864      	ldr	r4, [r4, #4]
 800e7a8:	e7ae      	b.n	800e708 <_malloc_r+0x34>
 800e7aa:	463c      	mov	r4, r7
 800e7ac:	687f      	ldr	r7, [r7, #4]
 800e7ae:	e7b6      	b.n	800e71e <_malloc_r+0x4a>
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d1fb      	bne.n	800e7b0 <_malloc_r+0xdc>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	6053      	str	r3, [r2, #4]
 800e7bc:	e7de      	b.n	800e77c <_malloc_r+0xa8>
 800e7be:	230c      	movs	r3, #12
 800e7c0:	6033      	str	r3, [r6, #0]
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f000 f80c 	bl	800e7e0 <__malloc_unlock>
 800e7c8:	e794      	b.n	800e6f4 <_malloc_r+0x20>
 800e7ca:	6005      	str	r5, [r0, #0]
 800e7cc:	e7d6      	b.n	800e77c <_malloc_r+0xa8>
 800e7ce:	bf00      	nop
 800e7d0:	200025e8 	.word	0x200025e8

0800e7d4 <__malloc_lock>:
 800e7d4:	4801      	ldr	r0, [pc, #4]	@ (800e7dc <__malloc_lock+0x8>)
 800e7d6:	f001 be4e 	b.w	8010476 <__retarget_lock_acquire_recursive>
 800e7da:	bf00      	nop
 800e7dc:	2000272c 	.word	0x2000272c

0800e7e0 <__malloc_unlock>:
 800e7e0:	4801      	ldr	r0, [pc, #4]	@ (800e7e8 <__malloc_unlock+0x8>)
 800e7e2:	f001 be49 	b.w	8010478 <__retarget_lock_release_recursive>
 800e7e6:	bf00      	nop
 800e7e8:	2000272c 	.word	0x2000272c

0800e7ec <sulp>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	460d      	mov	r5, r1
 800e7f2:	ec45 4b10 	vmov	d0, r4, r5
 800e7f6:	4616      	mov	r6, r2
 800e7f8:	f003 fbb4 	bl	8011f64 <__ulp>
 800e7fc:	ec51 0b10 	vmov	r0, r1, d0
 800e800:	b17e      	cbz	r6, 800e822 <sulp+0x36>
 800e802:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e806:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	dd09      	ble.n	800e822 <sulp+0x36>
 800e80e:	051b      	lsls	r3, r3, #20
 800e810:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e814:	2400      	movs	r4, #0
 800e816:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e81a:	4622      	mov	r2, r4
 800e81c:	462b      	mov	r3, r5
 800e81e:	f7f1 ff0b 	bl	8000638 <__aeabi_dmul>
 800e822:	ec41 0b10 	vmov	d0, r0, r1
 800e826:	bd70      	pop	{r4, r5, r6, pc}

0800e828 <_strtod_l>:
 800e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82c:	b09f      	sub	sp, #124	@ 0x7c
 800e82e:	460c      	mov	r4, r1
 800e830:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e832:	2200      	movs	r2, #0
 800e834:	921a      	str	r2, [sp, #104]	@ 0x68
 800e836:	9005      	str	r0, [sp, #20]
 800e838:	f04f 0a00 	mov.w	sl, #0
 800e83c:	f04f 0b00 	mov.w	fp, #0
 800e840:	460a      	mov	r2, r1
 800e842:	9219      	str	r2, [sp, #100]	@ 0x64
 800e844:	7811      	ldrb	r1, [r2, #0]
 800e846:	292b      	cmp	r1, #43	@ 0x2b
 800e848:	d04a      	beq.n	800e8e0 <_strtod_l+0xb8>
 800e84a:	d838      	bhi.n	800e8be <_strtod_l+0x96>
 800e84c:	290d      	cmp	r1, #13
 800e84e:	d832      	bhi.n	800e8b6 <_strtod_l+0x8e>
 800e850:	2908      	cmp	r1, #8
 800e852:	d832      	bhi.n	800e8ba <_strtod_l+0x92>
 800e854:	2900      	cmp	r1, #0
 800e856:	d03b      	beq.n	800e8d0 <_strtod_l+0xa8>
 800e858:	2200      	movs	r2, #0
 800e85a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e85c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e85e:	782a      	ldrb	r2, [r5, #0]
 800e860:	2a30      	cmp	r2, #48	@ 0x30
 800e862:	f040 80b3 	bne.w	800e9cc <_strtod_l+0x1a4>
 800e866:	786a      	ldrb	r2, [r5, #1]
 800e868:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e86c:	2a58      	cmp	r2, #88	@ 0x58
 800e86e:	d16e      	bne.n	800e94e <_strtod_l+0x126>
 800e870:	9302      	str	r3, [sp, #8]
 800e872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	ab1a      	add	r3, sp, #104	@ 0x68
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	4a8e      	ldr	r2, [pc, #568]	@ (800eab4 <_strtod_l+0x28c>)
 800e87c:	9805      	ldr	r0, [sp, #20]
 800e87e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e880:	a919      	add	r1, sp, #100	@ 0x64
 800e882:	f002 fd17 	bl	80112b4 <__gethex>
 800e886:	f010 060f 	ands.w	r6, r0, #15
 800e88a:	4604      	mov	r4, r0
 800e88c:	d005      	beq.n	800e89a <_strtod_l+0x72>
 800e88e:	2e06      	cmp	r6, #6
 800e890:	d128      	bne.n	800e8e4 <_strtod_l+0xbc>
 800e892:	3501      	adds	r5, #1
 800e894:	2300      	movs	r3, #0
 800e896:	9519      	str	r5, [sp, #100]	@ 0x64
 800e898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f040 858e 	bne.w	800f3be <_strtod_l+0xb96>
 800e8a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8a4:	b1cb      	cbz	r3, 800e8da <_strtod_l+0xb2>
 800e8a6:	4652      	mov	r2, sl
 800e8a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e8ac:	ec43 2b10 	vmov	d0, r2, r3
 800e8b0:	b01f      	add	sp, #124	@ 0x7c
 800e8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b6:	2920      	cmp	r1, #32
 800e8b8:	d1ce      	bne.n	800e858 <_strtod_l+0x30>
 800e8ba:	3201      	adds	r2, #1
 800e8bc:	e7c1      	b.n	800e842 <_strtod_l+0x1a>
 800e8be:	292d      	cmp	r1, #45	@ 0x2d
 800e8c0:	d1ca      	bne.n	800e858 <_strtod_l+0x30>
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e8c6:	1c51      	adds	r1, r2, #1
 800e8c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8ca:	7852      	ldrb	r2, [r2, #1]
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	d1c5      	bne.n	800e85c <_strtod_l+0x34>
 800e8d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f040 8570 	bne.w	800f3ba <_strtod_l+0xb92>
 800e8da:	4652      	mov	r2, sl
 800e8dc:	465b      	mov	r3, fp
 800e8de:	e7e5      	b.n	800e8ac <_strtod_l+0x84>
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	e7ef      	b.n	800e8c4 <_strtod_l+0x9c>
 800e8e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8e6:	b13a      	cbz	r2, 800e8f8 <_strtod_l+0xd0>
 800e8e8:	2135      	movs	r1, #53	@ 0x35
 800e8ea:	a81c      	add	r0, sp, #112	@ 0x70
 800e8ec:	f003 fc34 	bl	8012158 <__copybits>
 800e8f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8f2:	9805      	ldr	r0, [sp, #20]
 800e8f4:	f003 f802 	bl	80118fc <_Bfree>
 800e8f8:	3e01      	subs	r6, #1
 800e8fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e8fc:	2e04      	cmp	r6, #4
 800e8fe:	d806      	bhi.n	800e90e <_strtod_l+0xe6>
 800e900:	e8df f006 	tbb	[pc, r6]
 800e904:	201d0314 	.word	0x201d0314
 800e908:	14          	.byte	0x14
 800e909:	00          	.byte	0x00
 800e90a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e90e:	05e1      	lsls	r1, r4, #23
 800e910:	bf48      	it	mi
 800e912:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e91a:	0d1b      	lsrs	r3, r3, #20
 800e91c:	051b      	lsls	r3, r3, #20
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1bb      	bne.n	800e89a <_strtod_l+0x72>
 800e922:	f001 fd7d 	bl	8010420 <__errno>
 800e926:	2322      	movs	r3, #34	@ 0x22
 800e928:	6003      	str	r3, [r0, #0]
 800e92a:	e7b6      	b.n	800e89a <_strtod_l+0x72>
 800e92c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e938:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e93c:	e7e7      	b.n	800e90e <_strtod_l+0xe6>
 800e93e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800eabc <_strtod_l+0x294>
 800e942:	e7e4      	b.n	800e90e <_strtod_l+0xe6>
 800e944:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e948:	f04f 3aff 	mov.w	sl, #4294967295
 800e94c:	e7df      	b.n	800e90e <_strtod_l+0xe6>
 800e94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	9219      	str	r2, [sp, #100]	@ 0x64
 800e954:	785b      	ldrb	r3, [r3, #1]
 800e956:	2b30      	cmp	r3, #48	@ 0x30
 800e958:	d0f9      	beq.n	800e94e <_strtod_l+0x126>
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d09d      	beq.n	800e89a <_strtod_l+0x72>
 800e95e:	2301      	movs	r3, #1
 800e960:	9309      	str	r3, [sp, #36]	@ 0x24
 800e962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e964:	930c      	str	r3, [sp, #48]	@ 0x30
 800e966:	2300      	movs	r3, #0
 800e968:	9308      	str	r3, [sp, #32]
 800e96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e96c:	461f      	mov	r7, r3
 800e96e:	220a      	movs	r2, #10
 800e970:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e972:	7805      	ldrb	r5, [r0, #0]
 800e974:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e978:	b2d9      	uxtb	r1, r3
 800e97a:	2909      	cmp	r1, #9
 800e97c:	d928      	bls.n	800e9d0 <_strtod_l+0x1a8>
 800e97e:	494e      	ldr	r1, [pc, #312]	@ (800eab8 <_strtod_l+0x290>)
 800e980:	2201      	movs	r2, #1
 800e982:	f001 fce0 	bl	8010346 <strncmp>
 800e986:	2800      	cmp	r0, #0
 800e988:	d032      	beq.n	800e9f0 <_strtod_l+0x1c8>
 800e98a:	2000      	movs	r0, #0
 800e98c:	462a      	mov	r2, r5
 800e98e:	4681      	mov	r9, r0
 800e990:	463d      	mov	r5, r7
 800e992:	4603      	mov	r3, r0
 800e994:	2a65      	cmp	r2, #101	@ 0x65
 800e996:	d001      	beq.n	800e99c <_strtod_l+0x174>
 800e998:	2a45      	cmp	r2, #69	@ 0x45
 800e99a:	d114      	bne.n	800e9c6 <_strtod_l+0x19e>
 800e99c:	b91d      	cbnz	r5, 800e9a6 <_strtod_l+0x17e>
 800e99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9a0:	4302      	orrs	r2, r0
 800e9a2:	d095      	beq.n	800e8d0 <_strtod_l+0xa8>
 800e9a4:	2500      	movs	r5, #0
 800e9a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e9a8:	1c62      	adds	r2, r4, #1
 800e9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9ac:	7862      	ldrb	r2, [r4, #1]
 800e9ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800e9b0:	d077      	beq.n	800eaa2 <_strtod_l+0x27a>
 800e9b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e9b4:	d07b      	beq.n	800eaae <_strtod_l+0x286>
 800e9b6:	f04f 0c00 	mov.w	ip, #0
 800e9ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e9be:	2909      	cmp	r1, #9
 800e9c0:	f240 8082 	bls.w	800eac8 <_strtod_l+0x2a0>
 800e9c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e9c6:	f04f 0800 	mov.w	r8, #0
 800e9ca:	e0a2      	b.n	800eb12 <_strtod_l+0x2ea>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	e7c7      	b.n	800e960 <_strtod_l+0x138>
 800e9d0:	2f08      	cmp	r7, #8
 800e9d2:	bfd5      	itete	le
 800e9d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e9d6:	9908      	ldrgt	r1, [sp, #32]
 800e9d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e9dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e9e0:	f100 0001 	add.w	r0, r0, #1
 800e9e4:	bfd4      	ite	le
 800e9e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e9e8:	9308      	strgt	r3, [sp, #32]
 800e9ea:	3701      	adds	r7, #1
 800e9ec:	9019      	str	r0, [sp, #100]	@ 0x64
 800e9ee:	e7bf      	b.n	800e970 <_strtod_l+0x148>
 800e9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9f6:	785a      	ldrb	r2, [r3, #1]
 800e9f8:	b37f      	cbz	r7, 800ea5a <_strtod_l+0x232>
 800e9fa:	4681      	mov	r9, r0
 800e9fc:	463d      	mov	r5, r7
 800e9fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ea02:	2b09      	cmp	r3, #9
 800ea04:	d912      	bls.n	800ea2c <_strtod_l+0x204>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e7c4      	b.n	800e994 <_strtod_l+0x16c>
 800ea0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea10:	785a      	ldrb	r2, [r3, #1]
 800ea12:	3001      	adds	r0, #1
 800ea14:	2a30      	cmp	r2, #48	@ 0x30
 800ea16:	d0f8      	beq.n	800ea0a <_strtod_l+0x1e2>
 800ea18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ea1c:	2b08      	cmp	r3, #8
 800ea1e:	f200 84d3 	bhi.w	800f3c8 <_strtod_l+0xba0>
 800ea22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea26:	4681      	mov	r9, r0
 800ea28:	2000      	movs	r0, #0
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	3a30      	subs	r2, #48	@ 0x30
 800ea2e:	f100 0301 	add.w	r3, r0, #1
 800ea32:	d02a      	beq.n	800ea8a <_strtod_l+0x262>
 800ea34:	4499      	add	r9, r3
 800ea36:	eb00 0c05 	add.w	ip, r0, r5
 800ea3a:	462b      	mov	r3, r5
 800ea3c:	210a      	movs	r1, #10
 800ea3e:	4563      	cmp	r3, ip
 800ea40:	d10d      	bne.n	800ea5e <_strtod_l+0x236>
 800ea42:	1c69      	adds	r1, r5, #1
 800ea44:	4401      	add	r1, r0
 800ea46:	4428      	add	r0, r5
 800ea48:	2808      	cmp	r0, #8
 800ea4a:	dc16      	bgt.n	800ea7a <_strtod_l+0x252>
 800ea4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea4e:	230a      	movs	r3, #10
 800ea50:	fb03 2300 	mla	r3, r3, r0, r2
 800ea54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea56:	2300      	movs	r3, #0
 800ea58:	e018      	b.n	800ea8c <_strtod_l+0x264>
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	e7da      	b.n	800ea14 <_strtod_l+0x1ec>
 800ea5e:	2b08      	cmp	r3, #8
 800ea60:	f103 0301 	add.w	r3, r3, #1
 800ea64:	dc03      	bgt.n	800ea6e <_strtod_l+0x246>
 800ea66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ea68:	434e      	muls	r6, r1
 800ea6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ea6c:	e7e7      	b.n	800ea3e <_strtod_l+0x216>
 800ea6e:	2b10      	cmp	r3, #16
 800ea70:	bfde      	ittt	le
 800ea72:	9e08      	ldrle	r6, [sp, #32]
 800ea74:	434e      	mulle	r6, r1
 800ea76:	9608      	strle	r6, [sp, #32]
 800ea78:	e7e1      	b.n	800ea3e <_strtod_l+0x216>
 800ea7a:	280f      	cmp	r0, #15
 800ea7c:	dceb      	bgt.n	800ea56 <_strtod_l+0x22e>
 800ea7e:	9808      	ldr	r0, [sp, #32]
 800ea80:	230a      	movs	r3, #10
 800ea82:	fb03 2300 	mla	r3, r3, r0, r2
 800ea86:	9308      	str	r3, [sp, #32]
 800ea88:	e7e5      	b.n	800ea56 <_strtod_l+0x22e>
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea8e:	1c50      	adds	r0, r2, #1
 800ea90:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea92:	7852      	ldrb	r2, [r2, #1]
 800ea94:	4618      	mov	r0, r3
 800ea96:	460d      	mov	r5, r1
 800ea98:	e7b1      	b.n	800e9fe <_strtod_l+0x1d6>
 800ea9a:	f04f 0900 	mov.w	r9, #0
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e77d      	b.n	800e99e <_strtod_l+0x176>
 800eaa2:	f04f 0c00 	mov.w	ip, #0
 800eaa6:	1ca2      	adds	r2, r4, #2
 800eaa8:	9219      	str	r2, [sp, #100]	@ 0x64
 800eaaa:	78a2      	ldrb	r2, [r4, #2]
 800eaac:	e785      	b.n	800e9ba <_strtod_l+0x192>
 800eaae:	f04f 0c01 	mov.w	ip, #1
 800eab2:	e7f8      	b.n	800eaa6 <_strtod_l+0x27e>
 800eab4:	08015314 	.word	0x08015314
 800eab8:	080152fc 	.word	0x080152fc
 800eabc:	7ff00000 	.word	0x7ff00000
 800eac0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eac2:	1c51      	adds	r1, r2, #1
 800eac4:	9119      	str	r1, [sp, #100]	@ 0x64
 800eac6:	7852      	ldrb	r2, [r2, #1]
 800eac8:	2a30      	cmp	r2, #48	@ 0x30
 800eaca:	d0f9      	beq.n	800eac0 <_strtod_l+0x298>
 800eacc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ead0:	2908      	cmp	r1, #8
 800ead2:	f63f af78 	bhi.w	800e9c6 <_strtod_l+0x19e>
 800ead6:	3a30      	subs	r2, #48	@ 0x30
 800ead8:	920e      	str	r2, [sp, #56]	@ 0x38
 800eada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eadc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eade:	f04f 080a 	mov.w	r8, #10
 800eae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eae4:	1c56      	adds	r6, r2, #1
 800eae6:	9619      	str	r6, [sp, #100]	@ 0x64
 800eae8:	7852      	ldrb	r2, [r2, #1]
 800eaea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eaee:	f1be 0f09 	cmp.w	lr, #9
 800eaf2:	d939      	bls.n	800eb68 <_strtod_l+0x340>
 800eaf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eaf6:	1a76      	subs	r6, r6, r1
 800eaf8:	2e08      	cmp	r6, #8
 800eafa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eafe:	dc03      	bgt.n	800eb08 <_strtod_l+0x2e0>
 800eb00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb02:	4588      	cmp	r8, r1
 800eb04:	bfa8      	it	ge
 800eb06:	4688      	movge	r8, r1
 800eb08:	f1bc 0f00 	cmp.w	ip, #0
 800eb0c:	d001      	beq.n	800eb12 <_strtod_l+0x2ea>
 800eb0e:	f1c8 0800 	rsb	r8, r8, #0
 800eb12:	2d00      	cmp	r5, #0
 800eb14:	d14e      	bne.n	800ebb4 <_strtod_l+0x38c>
 800eb16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb18:	4308      	orrs	r0, r1
 800eb1a:	f47f aebe 	bne.w	800e89a <_strtod_l+0x72>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f47f aed6 	bne.w	800e8d0 <_strtod_l+0xa8>
 800eb24:	2a69      	cmp	r2, #105	@ 0x69
 800eb26:	d028      	beq.n	800eb7a <_strtod_l+0x352>
 800eb28:	dc25      	bgt.n	800eb76 <_strtod_l+0x34e>
 800eb2a:	2a49      	cmp	r2, #73	@ 0x49
 800eb2c:	d025      	beq.n	800eb7a <_strtod_l+0x352>
 800eb2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800eb30:	f47f aece 	bne.w	800e8d0 <_strtod_l+0xa8>
 800eb34:	499b      	ldr	r1, [pc, #620]	@ (800eda4 <_strtod_l+0x57c>)
 800eb36:	a819      	add	r0, sp, #100	@ 0x64
 800eb38:	f002 fdde 	bl	80116f8 <__match>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	f43f aec7 	beq.w	800e8d0 <_strtod_l+0xa8>
 800eb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	2b28      	cmp	r3, #40	@ 0x28
 800eb48:	d12e      	bne.n	800eba8 <_strtod_l+0x380>
 800eb4a:	4997      	ldr	r1, [pc, #604]	@ (800eda8 <_strtod_l+0x580>)
 800eb4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800eb4e:	a819      	add	r0, sp, #100	@ 0x64
 800eb50:	f002 fde6 	bl	8011720 <__hexnan>
 800eb54:	2805      	cmp	r0, #5
 800eb56:	d127      	bne.n	800eba8 <_strtod_l+0x380>
 800eb58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eb5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eb62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eb66:	e698      	b.n	800e89a <_strtod_l+0x72>
 800eb68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb6a:	fb08 2101 	mla	r1, r8, r1, r2
 800eb6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eb72:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb74:	e7b5      	b.n	800eae2 <_strtod_l+0x2ba>
 800eb76:	2a6e      	cmp	r2, #110	@ 0x6e
 800eb78:	e7da      	b.n	800eb30 <_strtod_l+0x308>
 800eb7a:	498c      	ldr	r1, [pc, #560]	@ (800edac <_strtod_l+0x584>)
 800eb7c:	a819      	add	r0, sp, #100	@ 0x64
 800eb7e:	f002 fdbb 	bl	80116f8 <__match>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	f43f aea4 	beq.w	800e8d0 <_strtod_l+0xa8>
 800eb88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb8a:	4989      	ldr	r1, [pc, #548]	@ (800edb0 <_strtod_l+0x588>)
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	a819      	add	r0, sp, #100	@ 0x64
 800eb90:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb92:	f002 fdb1 	bl	80116f8 <__match>
 800eb96:	b910      	cbnz	r0, 800eb9e <_strtod_l+0x376>
 800eb98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800edc0 <_strtod_l+0x598>
 800eba2:	f04f 0a00 	mov.w	sl, #0
 800eba6:	e678      	b.n	800e89a <_strtod_l+0x72>
 800eba8:	4882      	ldr	r0, [pc, #520]	@ (800edb4 <_strtod_l+0x58c>)
 800ebaa:	f001 fc75 	bl	8010498 <nan>
 800ebae:	ec5b ab10 	vmov	sl, fp, d0
 800ebb2:	e672      	b.n	800e89a <_strtod_l+0x72>
 800ebb4:	eba8 0309 	sub.w	r3, r8, r9
 800ebb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ebba:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebbc:	2f00      	cmp	r7, #0
 800ebbe:	bf08      	it	eq
 800ebc0:	462f      	moveq	r7, r5
 800ebc2:	2d10      	cmp	r5, #16
 800ebc4:	462c      	mov	r4, r5
 800ebc6:	bfa8      	it	ge
 800ebc8:	2410      	movge	r4, #16
 800ebca:	f7f1 fcbb 	bl	8000544 <__aeabi_ui2d>
 800ebce:	2d09      	cmp	r5, #9
 800ebd0:	4682      	mov	sl, r0
 800ebd2:	468b      	mov	fp, r1
 800ebd4:	dc13      	bgt.n	800ebfe <_strtod_l+0x3d6>
 800ebd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f43f ae5e 	beq.w	800e89a <_strtod_l+0x72>
 800ebde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe0:	dd78      	ble.n	800ecd4 <_strtod_l+0x4ac>
 800ebe2:	2b16      	cmp	r3, #22
 800ebe4:	dc5f      	bgt.n	800eca6 <_strtod_l+0x47e>
 800ebe6:	4974      	ldr	r1, [pc, #464]	@ (800edb8 <_strtod_l+0x590>)
 800ebe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebf0:	4652      	mov	r2, sl
 800ebf2:	465b      	mov	r3, fp
 800ebf4:	f7f1 fd20 	bl	8000638 <__aeabi_dmul>
 800ebf8:	4682      	mov	sl, r0
 800ebfa:	468b      	mov	fp, r1
 800ebfc:	e64d      	b.n	800e89a <_strtod_l+0x72>
 800ebfe:	4b6e      	ldr	r3, [pc, #440]	@ (800edb8 <_strtod_l+0x590>)
 800ec00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ec08:	f7f1 fd16 	bl	8000638 <__aeabi_dmul>
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	9808      	ldr	r0, [sp, #32]
 800ec10:	468b      	mov	fp, r1
 800ec12:	f7f1 fc97 	bl	8000544 <__aeabi_ui2d>
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4650      	mov	r0, sl
 800ec1c:	4659      	mov	r1, fp
 800ec1e:	f7f1 fb55 	bl	80002cc <__adddf3>
 800ec22:	2d0f      	cmp	r5, #15
 800ec24:	4682      	mov	sl, r0
 800ec26:	468b      	mov	fp, r1
 800ec28:	ddd5      	ble.n	800ebd6 <_strtod_l+0x3ae>
 800ec2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec2c:	1b2c      	subs	r4, r5, r4
 800ec2e:	441c      	add	r4, r3
 800ec30:	2c00      	cmp	r4, #0
 800ec32:	f340 8096 	ble.w	800ed62 <_strtod_l+0x53a>
 800ec36:	f014 030f 	ands.w	r3, r4, #15
 800ec3a:	d00a      	beq.n	800ec52 <_strtod_l+0x42a>
 800ec3c:	495e      	ldr	r1, [pc, #376]	@ (800edb8 <_strtod_l+0x590>)
 800ec3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec42:	4652      	mov	r2, sl
 800ec44:	465b      	mov	r3, fp
 800ec46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec4a:	f7f1 fcf5 	bl	8000638 <__aeabi_dmul>
 800ec4e:	4682      	mov	sl, r0
 800ec50:	468b      	mov	fp, r1
 800ec52:	f034 040f 	bics.w	r4, r4, #15
 800ec56:	d073      	beq.n	800ed40 <_strtod_l+0x518>
 800ec58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ec5c:	dd48      	ble.n	800ecf0 <_strtod_l+0x4c8>
 800ec5e:	2400      	movs	r4, #0
 800ec60:	46a0      	mov	r8, r4
 800ec62:	940a      	str	r4, [sp, #40]	@ 0x28
 800ec64:	46a1      	mov	r9, r4
 800ec66:	9a05      	ldr	r2, [sp, #20]
 800ec68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800edc0 <_strtod_l+0x598>
 800ec6c:	2322      	movs	r3, #34	@ 0x22
 800ec6e:	6013      	str	r3, [r2, #0]
 800ec70:	f04f 0a00 	mov.w	sl, #0
 800ec74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f43f ae0f 	beq.w	800e89a <_strtod_l+0x72>
 800ec7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec7e:	9805      	ldr	r0, [sp, #20]
 800ec80:	f002 fe3c 	bl	80118fc <_Bfree>
 800ec84:	9805      	ldr	r0, [sp, #20]
 800ec86:	4649      	mov	r1, r9
 800ec88:	f002 fe38 	bl	80118fc <_Bfree>
 800ec8c:	9805      	ldr	r0, [sp, #20]
 800ec8e:	4641      	mov	r1, r8
 800ec90:	f002 fe34 	bl	80118fc <_Bfree>
 800ec94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec96:	9805      	ldr	r0, [sp, #20]
 800ec98:	f002 fe30 	bl	80118fc <_Bfree>
 800ec9c:	9805      	ldr	r0, [sp, #20]
 800ec9e:	4621      	mov	r1, r4
 800eca0:	f002 fe2c 	bl	80118fc <_Bfree>
 800eca4:	e5f9      	b.n	800e89a <_strtod_l+0x72>
 800eca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ecac:	4293      	cmp	r3, r2
 800ecae:	dbbc      	blt.n	800ec2a <_strtod_l+0x402>
 800ecb0:	4c41      	ldr	r4, [pc, #260]	@ (800edb8 <_strtod_l+0x590>)
 800ecb2:	f1c5 050f 	rsb	r5, r5, #15
 800ecb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ecba:	4652      	mov	r2, sl
 800ecbc:	465b      	mov	r3, fp
 800ecbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecc2:	f7f1 fcb9 	bl	8000638 <__aeabi_dmul>
 800ecc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecc8:	1b5d      	subs	r5, r3, r5
 800ecca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ecce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ecd2:	e78f      	b.n	800ebf4 <_strtod_l+0x3cc>
 800ecd4:	3316      	adds	r3, #22
 800ecd6:	dba8      	blt.n	800ec2a <_strtod_l+0x402>
 800ecd8:	4b37      	ldr	r3, [pc, #220]	@ (800edb8 <_strtod_l+0x590>)
 800ecda:	eba9 0808 	sub.w	r8, r9, r8
 800ecde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ece2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ece6:	4650      	mov	r0, sl
 800ece8:	4659      	mov	r1, fp
 800ecea:	f7f1 fdcf 	bl	800088c <__aeabi_ddiv>
 800ecee:	e783      	b.n	800ebf8 <_strtod_l+0x3d0>
 800ecf0:	4b32      	ldr	r3, [pc, #200]	@ (800edbc <_strtod_l+0x594>)
 800ecf2:	9308      	str	r3, [sp, #32]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	1124      	asrs	r4, r4, #4
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	4659      	mov	r1, fp
 800ecfc:	461e      	mov	r6, r3
 800ecfe:	2c01      	cmp	r4, #1
 800ed00:	dc21      	bgt.n	800ed46 <_strtod_l+0x51e>
 800ed02:	b10b      	cbz	r3, 800ed08 <_strtod_l+0x4e0>
 800ed04:	4682      	mov	sl, r0
 800ed06:	468b      	mov	fp, r1
 800ed08:	492c      	ldr	r1, [pc, #176]	@ (800edbc <_strtod_l+0x594>)
 800ed0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ed0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ed12:	4652      	mov	r2, sl
 800ed14:	465b      	mov	r3, fp
 800ed16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed1a:	f7f1 fc8d 	bl	8000638 <__aeabi_dmul>
 800ed1e:	4b28      	ldr	r3, [pc, #160]	@ (800edc0 <_strtod_l+0x598>)
 800ed20:	460a      	mov	r2, r1
 800ed22:	400b      	ands	r3, r1
 800ed24:	4927      	ldr	r1, [pc, #156]	@ (800edc4 <_strtod_l+0x59c>)
 800ed26:	428b      	cmp	r3, r1
 800ed28:	4682      	mov	sl, r0
 800ed2a:	d898      	bhi.n	800ec5e <_strtod_l+0x436>
 800ed2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ed30:	428b      	cmp	r3, r1
 800ed32:	bf86      	itte	hi
 800ed34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800edc8 <_strtod_l+0x5a0>
 800ed38:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ed40:	2300      	movs	r3, #0
 800ed42:	9308      	str	r3, [sp, #32]
 800ed44:	e07a      	b.n	800ee3c <_strtod_l+0x614>
 800ed46:	07e2      	lsls	r2, r4, #31
 800ed48:	d505      	bpl.n	800ed56 <_strtod_l+0x52e>
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed50:	f7f1 fc72 	bl	8000638 <__aeabi_dmul>
 800ed54:	2301      	movs	r3, #1
 800ed56:	9a08      	ldr	r2, [sp, #32]
 800ed58:	3208      	adds	r2, #8
 800ed5a:	3601      	adds	r6, #1
 800ed5c:	1064      	asrs	r4, r4, #1
 800ed5e:	9208      	str	r2, [sp, #32]
 800ed60:	e7cd      	b.n	800ecfe <_strtod_l+0x4d6>
 800ed62:	d0ed      	beq.n	800ed40 <_strtod_l+0x518>
 800ed64:	4264      	negs	r4, r4
 800ed66:	f014 020f 	ands.w	r2, r4, #15
 800ed6a:	d00a      	beq.n	800ed82 <_strtod_l+0x55a>
 800ed6c:	4b12      	ldr	r3, [pc, #72]	@ (800edb8 <_strtod_l+0x590>)
 800ed6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed72:	4650      	mov	r0, sl
 800ed74:	4659      	mov	r1, fp
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	f7f1 fd87 	bl	800088c <__aeabi_ddiv>
 800ed7e:	4682      	mov	sl, r0
 800ed80:	468b      	mov	fp, r1
 800ed82:	1124      	asrs	r4, r4, #4
 800ed84:	d0dc      	beq.n	800ed40 <_strtod_l+0x518>
 800ed86:	2c1f      	cmp	r4, #31
 800ed88:	dd20      	ble.n	800edcc <_strtod_l+0x5a4>
 800ed8a:	2400      	movs	r4, #0
 800ed8c:	46a0      	mov	r8, r4
 800ed8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed90:	46a1      	mov	r9, r4
 800ed92:	9a05      	ldr	r2, [sp, #20]
 800ed94:	2322      	movs	r3, #34	@ 0x22
 800ed96:	f04f 0a00 	mov.w	sl, #0
 800ed9a:	f04f 0b00 	mov.w	fp, #0
 800ed9e:	6013      	str	r3, [r2, #0]
 800eda0:	e768      	b.n	800ec74 <_strtod_l+0x44c>
 800eda2:	bf00      	nop
 800eda4:	0801535d 	.word	0x0801535d
 800eda8:	08015300 	.word	0x08015300
 800edac:	08015355 	.word	0x08015355
 800edb0:	08015394 	.word	0x08015394
 800edb4:	08015725 	.word	0x08015725
 800edb8:	08015510 	.word	0x08015510
 800edbc:	080154e8 	.word	0x080154e8
 800edc0:	7ff00000 	.word	0x7ff00000
 800edc4:	7ca00000 	.word	0x7ca00000
 800edc8:	7fefffff 	.word	0x7fefffff
 800edcc:	f014 0310 	ands.w	r3, r4, #16
 800edd0:	bf18      	it	ne
 800edd2:	236a      	movne	r3, #106	@ 0x6a
 800edd4:	4ea9      	ldr	r6, [pc, #676]	@ (800f07c <_strtod_l+0x854>)
 800edd6:	9308      	str	r3, [sp, #32]
 800edd8:	4650      	mov	r0, sl
 800edda:	4659      	mov	r1, fp
 800eddc:	2300      	movs	r3, #0
 800edde:	07e2      	lsls	r2, r4, #31
 800ede0:	d504      	bpl.n	800edec <_strtod_l+0x5c4>
 800ede2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ede6:	f7f1 fc27 	bl	8000638 <__aeabi_dmul>
 800edea:	2301      	movs	r3, #1
 800edec:	1064      	asrs	r4, r4, #1
 800edee:	f106 0608 	add.w	r6, r6, #8
 800edf2:	d1f4      	bne.n	800edde <_strtod_l+0x5b6>
 800edf4:	b10b      	cbz	r3, 800edfa <_strtod_l+0x5d2>
 800edf6:	4682      	mov	sl, r0
 800edf8:	468b      	mov	fp, r1
 800edfa:	9b08      	ldr	r3, [sp, #32]
 800edfc:	b1b3      	cbz	r3, 800ee2c <_strtod_l+0x604>
 800edfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ee02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	4659      	mov	r1, fp
 800ee0a:	dd0f      	ble.n	800ee2c <_strtod_l+0x604>
 800ee0c:	2b1f      	cmp	r3, #31
 800ee0e:	dd55      	ble.n	800eebc <_strtod_l+0x694>
 800ee10:	2b34      	cmp	r3, #52	@ 0x34
 800ee12:	bfde      	ittt	le
 800ee14:	f04f 33ff 	movle.w	r3, #4294967295
 800ee18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ee1c:	4093      	lslle	r3, r2
 800ee1e:	f04f 0a00 	mov.w	sl, #0
 800ee22:	bfcc      	ite	gt
 800ee24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ee28:	ea03 0b01 	andle.w	fp, r3, r1
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2300      	movs	r3, #0
 800ee30:	4650      	mov	r0, sl
 800ee32:	4659      	mov	r1, fp
 800ee34:	f7f1 fe68 	bl	8000b08 <__aeabi_dcmpeq>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d1a6      	bne.n	800ed8a <_strtod_l+0x562>
 800ee3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ee42:	9805      	ldr	r0, [sp, #20]
 800ee44:	462b      	mov	r3, r5
 800ee46:	463a      	mov	r2, r7
 800ee48:	f002 fdc0 	bl	80119cc <__s2b>
 800ee4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	f43f af05 	beq.w	800ec5e <_strtod_l+0x436>
 800ee54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee56:	2a00      	cmp	r2, #0
 800ee58:	eba9 0308 	sub.w	r3, r9, r8
 800ee5c:	bfa8      	it	ge
 800ee5e:	2300      	movge	r3, #0
 800ee60:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee62:	2400      	movs	r4, #0
 800ee64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee68:	9316      	str	r3, [sp, #88]	@ 0x58
 800ee6a:	46a0      	mov	r8, r4
 800ee6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee6e:	9805      	ldr	r0, [sp, #20]
 800ee70:	6859      	ldr	r1, [r3, #4]
 800ee72:	f002 fd03 	bl	801187c <_Balloc>
 800ee76:	4681      	mov	r9, r0
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f43f aef4 	beq.w	800ec66 <_strtod_l+0x43e>
 800ee7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee80:	691a      	ldr	r2, [r3, #16]
 800ee82:	3202      	adds	r2, #2
 800ee84:	f103 010c 	add.w	r1, r3, #12
 800ee88:	0092      	lsls	r2, r2, #2
 800ee8a:	300c      	adds	r0, #12
 800ee8c:	f001 faf5 	bl	801047a <memcpy>
 800ee90:	ec4b ab10 	vmov	d0, sl, fp
 800ee94:	9805      	ldr	r0, [sp, #20]
 800ee96:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee98:	a91b      	add	r1, sp, #108	@ 0x6c
 800ee9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ee9e:	f003 f8d1 	bl	8012044 <__d2b>
 800eea2:	901a      	str	r0, [sp, #104]	@ 0x68
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f43f aede 	beq.w	800ec66 <_strtod_l+0x43e>
 800eeaa:	9805      	ldr	r0, [sp, #20]
 800eeac:	2101      	movs	r1, #1
 800eeae:	f002 fe23 	bl	8011af8 <__i2b>
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	b948      	cbnz	r0, 800eeca <_strtod_l+0x6a2>
 800eeb6:	f04f 0800 	mov.w	r8, #0
 800eeba:	e6d4      	b.n	800ec66 <_strtod_l+0x43e>
 800eebc:	f04f 32ff 	mov.w	r2, #4294967295
 800eec0:	fa02 f303 	lsl.w	r3, r2, r3
 800eec4:	ea03 0a0a 	and.w	sl, r3, sl
 800eec8:	e7b0      	b.n	800ee2c <_strtod_l+0x604>
 800eeca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eecc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eece:	2d00      	cmp	r5, #0
 800eed0:	bfab      	itete	ge
 800eed2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eed4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eed6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eed8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eeda:	bfac      	ite	ge
 800eedc:	18ef      	addge	r7, r5, r3
 800eede:	1b5e      	sublt	r6, r3, r5
 800eee0:	9b08      	ldr	r3, [sp, #32]
 800eee2:	1aed      	subs	r5, r5, r3
 800eee4:	4415      	add	r5, r2
 800eee6:	4b66      	ldr	r3, [pc, #408]	@ (800f080 <_strtod_l+0x858>)
 800eee8:	3d01      	subs	r5, #1
 800eeea:	429d      	cmp	r5, r3
 800eeec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eef0:	da50      	bge.n	800ef94 <_strtod_l+0x76c>
 800eef2:	1b5b      	subs	r3, r3, r5
 800eef4:	2b1f      	cmp	r3, #31
 800eef6:	eba2 0203 	sub.w	r2, r2, r3
 800eefa:	f04f 0101 	mov.w	r1, #1
 800eefe:	dc3d      	bgt.n	800ef7c <_strtod_l+0x754>
 800ef00:	fa01 f303 	lsl.w	r3, r1, r3
 800ef04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef06:	2300      	movs	r3, #0
 800ef08:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef0a:	18bd      	adds	r5, r7, r2
 800ef0c:	9b08      	ldr	r3, [sp, #32]
 800ef0e:	42af      	cmp	r7, r5
 800ef10:	4416      	add	r6, r2
 800ef12:	441e      	add	r6, r3
 800ef14:	463b      	mov	r3, r7
 800ef16:	bfa8      	it	ge
 800ef18:	462b      	movge	r3, r5
 800ef1a:	42b3      	cmp	r3, r6
 800ef1c:	bfa8      	it	ge
 800ef1e:	4633      	movge	r3, r6
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bfc2      	ittt	gt
 800ef24:	1aed      	subgt	r5, r5, r3
 800ef26:	1af6      	subgt	r6, r6, r3
 800ef28:	1aff      	subgt	r7, r7, r3
 800ef2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dd16      	ble.n	800ef5e <_strtod_l+0x736>
 800ef30:	4641      	mov	r1, r8
 800ef32:	9805      	ldr	r0, [sp, #20]
 800ef34:	461a      	mov	r2, r3
 800ef36:	f002 fe9f 	bl	8011c78 <__pow5mult>
 800ef3a:	4680      	mov	r8, r0
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d0ba      	beq.n	800eeb6 <_strtod_l+0x68e>
 800ef40:	4601      	mov	r1, r0
 800ef42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef44:	9805      	ldr	r0, [sp, #20]
 800ef46:	f002 fded 	bl	8011b24 <__multiply>
 800ef4a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	f43f ae8a 	beq.w	800ec66 <_strtod_l+0x43e>
 800ef52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef54:	9805      	ldr	r0, [sp, #20]
 800ef56:	f002 fcd1 	bl	80118fc <_Bfree>
 800ef5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef5e:	2d00      	cmp	r5, #0
 800ef60:	dc1d      	bgt.n	800ef9e <_strtod_l+0x776>
 800ef62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	dd23      	ble.n	800efb0 <_strtod_l+0x788>
 800ef68:	4649      	mov	r1, r9
 800ef6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ef6c:	9805      	ldr	r0, [sp, #20]
 800ef6e:	f002 fe83 	bl	8011c78 <__pow5mult>
 800ef72:	4681      	mov	r9, r0
 800ef74:	b9e0      	cbnz	r0, 800efb0 <_strtod_l+0x788>
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	e674      	b.n	800ec66 <_strtod_l+0x43e>
 800ef7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ef80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ef84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ef88:	35e2      	adds	r5, #226	@ 0xe2
 800ef8a:	fa01 f305 	lsl.w	r3, r1, r5
 800ef8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef90:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ef92:	e7ba      	b.n	800ef0a <_strtod_l+0x6e2>
 800ef94:	2300      	movs	r3, #0
 800ef96:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef98:	2301      	movs	r3, #1
 800ef9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef9c:	e7b5      	b.n	800ef0a <_strtod_l+0x6e2>
 800ef9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efa0:	9805      	ldr	r0, [sp, #20]
 800efa2:	462a      	mov	r2, r5
 800efa4:	f002 fec2 	bl	8011d2c <__lshift>
 800efa8:	901a      	str	r0, [sp, #104]	@ 0x68
 800efaa:	2800      	cmp	r0, #0
 800efac:	d1d9      	bne.n	800ef62 <_strtod_l+0x73a>
 800efae:	e65a      	b.n	800ec66 <_strtod_l+0x43e>
 800efb0:	2e00      	cmp	r6, #0
 800efb2:	dd07      	ble.n	800efc4 <_strtod_l+0x79c>
 800efb4:	4649      	mov	r1, r9
 800efb6:	9805      	ldr	r0, [sp, #20]
 800efb8:	4632      	mov	r2, r6
 800efba:	f002 feb7 	bl	8011d2c <__lshift>
 800efbe:	4681      	mov	r9, r0
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0d8      	beq.n	800ef76 <_strtod_l+0x74e>
 800efc4:	2f00      	cmp	r7, #0
 800efc6:	dd08      	ble.n	800efda <_strtod_l+0x7b2>
 800efc8:	4641      	mov	r1, r8
 800efca:	9805      	ldr	r0, [sp, #20]
 800efcc:	463a      	mov	r2, r7
 800efce:	f002 fead 	bl	8011d2c <__lshift>
 800efd2:	4680      	mov	r8, r0
 800efd4:	2800      	cmp	r0, #0
 800efd6:	f43f ae46 	beq.w	800ec66 <_strtod_l+0x43e>
 800efda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efdc:	9805      	ldr	r0, [sp, #20]
 800efde:	464a      	mov	r2, r9
 800efe0:	f002 ff2c 	bl	8011e3c <__mdiff>
 800efe4:	4604      	mov	r4, r0
 800efe6:	2800      	cmp	r0, #0
 800efe8:	f43f ae3d 	beq.w	800ec66 <_strtod_l+0x43e>
 800efec:	68c3      	ldr	r3, [r0, #12]
 800efee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eff0:	2300      	movs	r3, #0
 800eff2:	60c3      	str	r3, [r0, #12]
 800eff4:	4641      	mov	r1, r8
 800eff6:	f002 ff05 	bl	8011e04 <__mcmp>
 800effa:	2800      	cmp	r0, #0
 800effc:	da46      	bge.n	800f08c <_strtod_l+0x864>
 800effe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f000:	ea53 030a 	orrs.w	r3, r3, sl
 800f004:	d16c      	bne.n	800f0e0 <_strtod_l+0x8b8>
 800f006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d168      	bne.n	800f0e0 <_strtod_l+0x8b8>
 800f00e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f012:	0d1b      	lsrs	r3, r3, #20
 800f014:	051b      	lsls	r3, r3, #20
 800f016:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f01a:	d961      	bls.n	800f0e0 <_strtod_l+0x8b8>
 800f01c:	6963      	ldr	r3, [r4, #20]
 800f01e:	b913      	cbnz	r3, 800f026 <_strtod_l+0x7fe>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	2b01      	cmp	r3, #1
 800f024:	dd5c      	ble.n	800f0e0 <_strtod_l+0x8b8>
 800f026:	4621      	mov	r1, r4
 800f028:	2201      	movs	r2, #1
 800f02a:	9805      	ldr	r0, [sp, #20]
 800f02c:	f002 fe7e 	bl	8011d2c <__lshift>
 800f030:	4641      	mov	r1, r8
 800f032:	4604      	mov	r4, r0
 800f034:	f002 fee6 	bl	8011e04 <__mcmp>
 800f038:	2800      	cmp	r0, #0
 800f03a:	dd51      	ble.n	800f0e0 <_strtod_l+0x8b8>
 800f03c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f040:	9a08      	ldr	r2, [sp, #32]
 800f042:	0d1b      	lsrs	r3, r3, #20
 800f044:	051b      	lsls	r3, r3, #20
 800f046:	2a00      	cmp	r2, #0
 800f048:	d06b      	beq.n	800f122 <_strtod_l+0x8fa>
 800f04a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f04e:	d868      	bhi.n	800f122 <_strtod_l+0x8fa>
 800f050:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f054:	f67f ae9d 	bls.w	800ed92 <_strtod_l+0x56a>
 800f058:	4b0a      	ldr	r3, [pc, #40]	@ (800f084 <_strtod_l+0x85c>)
 800f05a:	4650      	mov	r0, sl
 800f05c:	4659      	mov	r1, fp
 800f05e:	2200      	movs	r2, #0
 800f060:	f7f1 faea 	bl	8000638 <__aeabi_dmul>
 800f064:	4b08      	ldr	r3, [pc, #32]	@ (800f088 <_strtod_l+0x860>)
 800f066:	400b      	ands	r3, r1
 800f068:	4682      	mov	sl, r0
 800f06a:	468b      	mov	fp, r1
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f47f ae05 	bne.w	800ec7c <_strtod_l+0x454>
 800f072:	9a05      	ldr	r2, [sp, #20]
 800f074:	2322      	movs	r3, #34	@ 0x22
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	e600      	b.n	800ec7c <_strtod_l+0x454>
 800f07a:	bf00      	nop
 800f07c:	08015328 	.word	0x08015328
 800f080:	fffffc02 	.word	0xfffffc02
 800f084:	39500000 	.word	0x39500000
 800f088:	7ff00000 	.word	0x7ff00000
 800f08c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f090:	d165      	bne.n	800f15e <_strtod_l+0x936>
 800f092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f098:	b35a      	cbz	r2, 800f0f2 <_strtod_l+0x8ca>
 800f09a:	4a9f      	ldr	r2, [pc, #636]	@ (800f318 <_strtod_l+0xaf0>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d12b      	bne.n	800f0f8 <_strtod_l+0x8d0>
 800f0a0:	9b08      	ldr	r3, [sp, #32]
 800f0a2:	4651      	mov	r1, sl
 800f0a4:	b303      	cbz	r3, 800f0e8 <_strtod_l+0x8c0>
 800f0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800f31c <_strtod_l+0xaf4>)
 800f0a8:	465a      	mov	r2, fp
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b4:	d81b      	bhi.n	800f0ee <_strtod_l+0x8c6>
 800f0b6:	0d1b      	lsrs	r3, r3, #20
 800f0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c0:	4299      	cmp	r1, r3
 800f0c2:	d119      	bne.n	800f0f8 <_strtod_l+0x8d0>
 800f0c4:	4b96      	ldr	r3, [pc, #600]	@ (800f320 <_strtod_l+0xaf8>)
 800f0c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d102      	bne.n	800f0d2 <_strtod_l+0x8aa>
 800f0cc:	3101      	adds	r1, #1
 800f0ce:	f43f adca 	beq.w	800ec66 <_strtod_l+0x43e>
 800f0d2:	4b92      	ldr	r3, [pc, #584]	@ (800f31c <_strtod_l+0xaf4>)
 800f0d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0d6:	401a      	ands	r2, r3
 800f0d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f0dc:	f04f 0a00 	mov.w	sl, #0
 800f0e0:	9b08      	ldr	r3, [sp, #32]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1b8      	bne.n	800f058 <_strtod_l+0x830>
 800f0e6:	e5c9      	b.n	800ec7c <_strtod_l+0x454>
 800f0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ec:	e7e8      	b.n	800f0c0 <_strtod_l+0x898>
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	e7e6      	b.n	800f0c0 <_strtod_l+0x898>
 800f0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800f0f6:	d0a1      	beq.n	800f03c <_strtod_l+0x814>
 800f0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0fa:	b1db      	cbz	r3, 800f134 <_strtod_l+0x90c>
 800f0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0fe:	4213      	tst	r3, r2
 800f100:	d0ee      	beq.n	800f0e0 <_strtod_l+0x8b8>
 800f102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f104:	9a08      	ldr	r2, [sp, #32]
 800f106:	4650      	mov	r0, sl
 800f108:	4659      	mov	r1, fp
 800f10a:	b1bb      	cbz	r3, 800f13c <_strtod_l+0x914>
 800f10c:	f7ff fb6e 	bl	800e7ec <sulp>
 800f110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f114:	ec53 2b10 	vmov	r2, r3, d0
 800f118:	f7f1 f8d8 	bl	80002cc <__adddf3>
 800f11c:	4682      	mov	sl, r0
 800f11e:	468b      	mov	fp, r1
 800f120:	e7de      	b.n	800f0e0 <_strtod_l+0x8b8>
 800f122:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f126:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f12a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f12e:	f04f 3aff 	mov.w	sl, #4294967295
 800f132:	e7d5      	b.n	800f0e0 <_strtod_l+0x8b8>
 800f134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f136:	ea13 0f0a 	tst.w	r3, sl
 800f13a:	e7e1      	b.n	800f100 <_strtod_l+0x8d8>
 800f13c:	f7ff fb56 	bl	800e7ec <sulp>
 800f140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f144:	ec53 2b10 	vmov	r2, r3, d0
 800f148:	f7f1 f8be 	bl	80002c8 <__aeabi_dsub>
 800f14c:	2200      	movs	r2, #0
 800f14e:	2300      	movs	r3, #0
 800f150:	4682      	mov	sl, r0
 800f152:	468b      	mov	fp, r1
 800f154:	f7f1 fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d0c1      	beq.n	800f0e0 <_strtod_l+0x8b8>
 800f15c:	e619      	b.n	800ed92 <_strtod_l+0x56a>
 800f15e:	4641      	mov	r1, r8
 800f160:	4620      	mov	r0, r4
 800f162:	f002 ffc7 	bl	80120f4 <__ratio>
 800f166:	ec57 6b10 	vmov	r6, r7, d0
 800f16a:	2200      	movs	r2, #0
 800f16c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f170:	4630      	mov	r0, r6
 800f172:	4639      	mov	r1, r7
 800f174:	f7f1 fcdc 	bl	8000b30 <__aeabi_dcmple>
 800f178:	2800      	cmp	r0, #0
 800f17a:	d06f      	beq.n	800f25c <_strtod_l+0xa34>
 800f17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d17a      	bne.n	800f278 <_strtod_l+0xa50>
 800f182:	f1ba 0f00 	cmp.w	sl, #0
 800f186:	d158      	bne.n	800f23a <_strtod_l+0xa12>
 800f188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d15a      	bne.n	800f248 <_strtod_l+0xa20>
 800f192:	4b64      	ldr	r3, [pc, #400]	@ (800f324 <_strtod_l+0xafc>)
 800f194:	2200      	movs	r2, #0
 800f196:	4630      	mov	r0, r6
 800f198:	4639      	mov	r1, r7
 800f19a:	f7f1 fcbf 	bl	8000b1c <__aeabi_dcmplt>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d159      	bne.n	800f256 <_strtod_l+0xa2e>
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	4639      	mov	r1, r7
 800f1a6:	4b60      	ldr	r3, [pc, #384]	@ (800f328 <_strtod_l+0xb00>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f7f1 fa45 	bl	8000638 <__aeabi_dmul>
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	460f      	mov	r7, r1
 800f1b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f1b6:	9606      	str	r6, [sp, #24]
 800f1b8:	9307      	str	r3, [sp, #28]
 800f1ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1be:	4d57      	ldr	r5, [pc, #348]	@ (800f31c <_strtod_l+0xaf4>)
 800f1c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1c6:	401d      	ands	r5, r3
 800f1c8:	4b58      	ldr	r3, [pc, #352]	@ (800f32c <_strtod_l+0xb04>)
 800f1ca:	429d      	cmp	r5, r3
 800f1cc:	f040 80b2 	bne.w	800f334 <_strtod_l+0xb0c>
 800f1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f1d6:	ec4b ab10 	vmov	d0, sl, fp
 800f1da:	f002 fec3 	bl	8011f64 <__ulp>
 800f1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1e2:	ec51 0b10 	vmov	r0, r1, d0
 800f1e6:	f7f1 fa27 	bl	8000638 <__aeabi_dmul>
 800f1ea:	4652      	mov	r2, sl
 800f1ec:	465b      	mov	r3, fp
 800f1ee:	f7f1 f86d 	bl	80002cc <__adddf3>
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4949      	ldr	r1, [pc, #292]	@ (800f31c <_strtod_l+0xaf4>)
 800f1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800f330 <_strtod_l+0xb08>)
 800f1f8:	4019      	ands	r1, r3
 800f1fa:	4291      	cmp	r1, r2
 800f1fc:	4682      	mov	sl, r0
 800f1fe:	d942      	bls.n	800f286 <_strtod_l+0xa5e>
 800f200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f202:	4b47      	ldr	r3, [pc, #284]	@ (800f320 <_strtod_l+0xaf8>)
 800f204:	429a      	cmp	r2, r3
 800f206:	d103      	bne.n	800f210 <_strtod_l+0x9e8>
 800f208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f20a:	3301      	adds	r3, #1
 800f20c:	f43f ad2b 	beq.w	800ec66 <_strtod_l+0x43e>
 800f210:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f320 <_strtod_l+0xaf8>
 800f214:	f04f 3aff 	mov.w	sl, #4294967295
 800f218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f21a:	9805      	ldr	r0, [sp, #20]
 800f21c:	f002 fb6e 	bl	80118fc <_Bfree>
 800f220:	9805      	ldr	r0, [sp, #20]
 800f222:	4649      	mov	r1, r9
 800f224:	f002 fb6a 	bl	80118fc <_Bfree>
 800f228:	9805      	ldr	r0, [sp, #20]
 800f22a:	4641      	mov	r1, r8
 800f22c:	f002 fb66 	bl	80118fc <_Bfree>
 800f230:	9805      	ldr	r0, [sp, #20]
 800f232:	4621      	mov	r1, r4
 800f234:	f002 fb62 	bl	80118fc <_Bfree>
 800f238:	e618      	b.n	800ee6c <_strtod_l+0x644>
 800f23a:	f1ba 0f01 	cmp.w	sl, #1
 800f23e:	d103      	bne.n	800f248 <_strtod_l+0xa20>
 800f240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f242:	2b00      	cmp	r3, #0
 800f244:	f43f ada5 	beq.w	800ed92 <_strtod_l+0x56a>
 800f248:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f2f8 <_strtod_l+0xad0>
 800f24c:	4f35      	ldr	r7, [pc, #212]	@ (800f324 <_strtod_l+0xafc>)
 800f24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f252:	2600      	movs	r6, #0
 800f254:	e7b1      	b.n	800f1ba <_strtod_l+0x992>
 800f256:	4f34      	ldr	r7, [pc, #208]	@ (800f328 <_strtod_l+0xb00>)
 800f258:	2600      	movs	r6, #0
 800f25a:	e7aa      	b.n	800f1b2 <_strtod_l+0x98a>
 800f25c:	4b32      	ldr	r3, [pc, #200]	@ (800f328 <_strtod_l+0xb00>)
 800f25e:	4630      	mov	r0, r6
 800f260:	4639      	mov	r1, r7
 800f262:	2200      	movs	r2, #0
 800f264:	f7f1 f9e8 	bl	8000638 <__aeabi_dmul>
 800f268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f26a:	4606      	mov	r6, r0
 800f26c:	460f      	mov	r7, r1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d09f      	beq.n	800f1b2 <_strtod_l+0x98a>
 800f272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f276:	e7a0      	b.n	800f1ba <_strtod_l+0x992>
 800f278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f300 <_strtod_l+0xad8>
 800f27c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f280:	ec57 6b17 	vmov	r6, r7, d7
 800f284:	e799      	b.n	800f1ba <_strtod_l+0x992>
 800f286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f28a:	9b08      	ldr	r3, [sp, #32]
 800f28c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1c1      	bne.n	800f218 <_strtod_l+0x9f0>
 800f294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f298:	0d1b      	lsrs	r3, r3, #20
 800f29a:	051b      	lsls	r3, r3, #20
 800f29c:	429d      	cmp	r5, r3
 800f29e:	d1bb      	bne.n	800f218 <_strtod_l+0x9f0>
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	f7f1 fd28 	bl	8000cf8 <__aeabi_d2lz>
 800f2a8:	f7f1 f998 	bl	80005dc <__aeabi_l2d>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	f7f1 f808 	bl	80002c8 <__aeabi_dsub>
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f2c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2c6:	ea46 060a 	orr.w	r6, r6, sl
 800f2ca:	431e      	orrs	r6, r3
 800f2cc:	d06f      	beq.n	800f3ae <_strtod_l+0xb86>
 800f2ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800f308 <_strtod_l+0xae0>)
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f7f1 fc22 	bl	8000b1c <__aeabi_dcmplt>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	f47f accf 	bne.w	800ec7c <_strtod_l+0x454>
 800f2de:	a30c      	add	r3, pc, #48	@ (adr r3, 800f310 <_strtod_l+0xae8>)
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2e8:	f7f1 fc36 	bl	8000b58 <__aeabi_dcmpgt>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d093      	beq.n	800f218 <_strtod_l+0x9f0>
 800f2f0:	e4c4      	b.n	800ec7c <_strtod_l+0x454>
 800f2f2:	bf00      	nop
 800f2f4:	f3af 8000 	nop.w
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	bff00000 	.word	0xbff00000
 800f300:	00000000 	.word	0x00000000
 800f304:	3ff00000 	.word	0x3ff00000
 800f308:	94a03595 	.word	0x94a03595
 800f30c:	3fdfffff 	.word	0x3fdfffff
 800f310:	35afe535 	.word	0x35afe535
 800f314:	3fe00000 	.word	0x3fe00000
 800f318:	000fffff 	.word	0x000fffff
 800f31c:	7ff00000 	.word	0x7ff00000
 800f320:	7fefffff 	.word	0x7fefffff
 800f324:	3ff00000 	.word	0x3ff00000
 800f328:	3fe00000 	.word	0x3fe00000
 800f32c:	7fe00000 	.word	0x7fe00000
 800f330:	7c9fffff 	.word	0x7c9fffff
 800f334:	9b08      	ldr	r3, [sp, #32]
 800f336:	b323      	cbz	r3, 800f382 <_strtod_l+0xb5a>
 800f338:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f33c:	d821      	bhi.n	800f382 <_strtod_l+0xb5a>
 800f33e:	a328      	add	r3, pc, #160	@ (adr r3, 800f3e0 <_strtod_l+0xbb8>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 fbf2 	bl	8000b30 <__aeabi_dcmple>
 800f34c:	b1a0      	cbz	r0, 800f378 <_strtod_l+0xb50>
 800f34e:	4639      	mov	r1, r7
 800f350:	4630      	mov	r0, r6
 800f352:	f7f1 fc49 	bl	8000be8 <__aeabi_d2uiz>
 800f356:	2801      	cmp	r0, #1
 800f358:	bf38      	it	cc
 800f35a:	2001      	movcc	r0, #1
 800f35c:	f7f1 f8f2 	bl	8000544 <__aeabi_ui2d>
 800f360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f362:	4606      	mov	r6, r0
 800f364:	460f      	mov	r7, r1
 800f366:	b9fb      	cbnz	r3, 800f3a8 <_strtod_l+0xb80>
 800f368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f36c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f36e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f370:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f37a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f37e:	1b5b      	subs	r3, r3, r5
 800f380:	9311      	str	r3, [sp, #68]	@ 0x44
 800f382:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f386:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f38a:	f002 fdeb 	bl	8011f64 <__ulp>
 800f38e:	4650      	mov	r0, sl
 800f390:	ec53 2b10 	vmov	r2, r3, d0
 800f394:	4659      	mov	r1, fp
 800f396:	f7f1 f94f 	bl	8000638 <__aeabi_dmul>
 800f39a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f39e:	f7f0 ff95 	bl	80002cc <__adddf3>
 800f3a2:	4682      	mov	sl, r0
 800f3a4:	468b      	mov	fp, r1
 800f3a6:	e770      	b.n	800f28a <_strtod_l+0xa62>
 800f3a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f3ac:	e7e0      	b.n	800f370 <_strtod_l+0xb48>
 800f3ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3e8 <_strtod_l+0xbc0>)
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	f7f1 fbb2 	bl	8000b1c <__aeabi_dcmplt>
 800f3b8:	e798      	b.n	800f2ec <_strtod_l+0xac4>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3c2:	6013      	str	r3, [r2, #0]
 800f3c4:	f7ff ba6d 	b.w	800e8a2 <_strtod_l+0x7a>
 800f3c8:	2a65      	cmp	r2, #101	@ 0x65
 800f3ca:	f43f ab66 	beq.w	800ea9a <_strtod_l+0x272>
 800f3ce:	2a45      	cmp	r2, #69	@ 0x45
 800f3d0:	f43f ab63 	beq.w	800ea9a <_strtod_l+0x272>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f7ff bb9e 	b.w	800eb16 <_strtod_l+0x2ee>
 800f3da:	bf00      	nop
 800f3dc:	f3af 8000 	nop.w
 800f3e0:	ffc00000 	.word	0xffc00000
 800f3e4:	41dfffff 	.word	0x41dfffff
 800f3e8:	94a03595 	.word	0x94a03595
 800f3ec:	3fcfffff 	.word	0x3fcfffff

0800f3f0 <_strtod_r>:
 800f3f0:	4b01      	ldr	r3, [pc, #4]	@ (800f3f8 <_strtod_r+0x8>)
 800f3f2:	f7ff ba19 	b.w	800e828 <_strtod_l>
 800f3f6:	bf00      	nop
 800f3f8:	20000130 	.word	0x20000130

0800f3fc <strtod>:
 800f3fc:	460a      	mov	r2, r1
 800f3fe:	4601      	mov	r1, r0
 800f400:	4802      	ldr	r0, [pc, #8]	@ (800f40c <strtod+0x10>)
 800f402:	4b03      	ldr	r3, [pc, #12]	@ (800f410 <strtod+0x14>)
 800f404:	6800      	ldr	r0, [r0, #0]
 800f406:	f7ff ba0f 	b.w	800e828 <_strtod_l>
 800f40a:	bf00      	nop
 800f40c:	2000029c 	.word	0x2000029c
 800f410:	20000130 	.word	0x20000130

0800f414 <__cvt>:
 800f414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	ec57 6b10 	vmov	r6, r7, d0
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	460c      	mov	r4, r1
 800f420:	4619      	mov	r1, r3
 800f422:	463b      	mov	r3, r7
 800f424:	bfbb      	ittet	lt
 800f426:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f42a:	461f      	movlt	r7, r3
 800f42c:	2300      	movge	r3, #0
 800f42e:	232d      	movlt	r3, #45	@ 0x2d
 800f430:	700b      	strb	r3, [r1, #0]
 800f432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f434:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f438:	4691      	mov	r9, r2
 800f43a:	f023 0820 	bic.w	r8, r3, #32
 800f43e:	bfbc      	itt	lt
 800f440:	4632      	movlt	r2, r6
 800f442:	4616      	movlt	r6, r2
 800f444:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f448:	d005      	beq.n	800f456 <__cvt+0x42>
 800f44a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f44e:	d100      	bne.n	800f452 <__cvt+0x3e>
 800f450:	3401      	adds	r4, #1
 800f452:	2102      	movs	r1, #2
 800f454:	e000      	b.n	800f458 <__cvt+0x44>
 800f456:	2103      	movs	r1, #3
 800f458:	ab03      	add	r3, sp, #12
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	ab02      	add	r3, sp, #8
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	ec47 6b10 	vmov	d0, r6, r7
 800f464:	4653      	mov	r3, sl
 800f466:	4622      	mov	r2, r4
 800f468:	f001 f8ae 	bl	80105c8 <_dtoa_r>
 800f46c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f470:	4605      	mov	r5, r0
 800f472:	d119      	bne.n	800f4a8 <__cvt+0x94>
 800f474:	f019 0f01 	tst.w	r9, #1
 800f478:	d00e      	beq.n	800f498 <__cvt+0x84>
 800f47a:	eb00 0904 	add.w	r9, r0, r4
 800f47e:	2200      	movs	r2, #0
 800f480:	2300      	movs	r3, #0
 800f482:	4630      	mov	r0, r6
 800f484:	4639      	mov	r1, r7
 800f486:	f7f1 fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 800f48a:	b108      	cbz	r0, 800f490 <__cvt+0x7c>
 800f48c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f490:	2230      	movs	r2, #48	@ 0x30
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	454b      	cmp	r3, r9
 800f496:	d31e      	bcc.n	800f4d6 <__cvt+0xc2>
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f49c:	1b5b      	subs	r3, r3, r5
 800f49e:	4628      	mov	r0, r5
 800f4a0:	6013      	str	r3, [r2, #0]
 800f4a2:	b004      	add	sp, #16
 800f4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f4ac:	eb00 0904 	add.w	r9, r0, r4
 800f4b0:	d1e5      	bne.n	800f47e <__cvt+0x6a>
 800f4b2:	7803      	ldrb	r3, [r0, #0]
 800f4b4:	2b30      	cmp	r3, #48	@ 0x30
 800f4b6:	d10a      	bne.n	800f4ce <__cvt+0xba>
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	4630      	mov	r0, r6
 800f4be:	4639      	mov	r1, r7
 800f4c0:	f7f1 fb22 	bl	8000b08 <__aeabi_dcmpeq>
 800f4c4:	b918      	cbnz	r0, 800f4ce <__cvt+0xba>
 800f4c6:	f1c4 0401 	rsb	r4, r4, #1
 800f4ca:	f8ca 4000 	str.w	r4, [sl]
 800f4ce:	f8da 3000 	ldr.w	r3, [sl]
 800f4d2:	4499      	add	r9, r3
 800f4d4:	e7d3      	b.n	800f47e <__cvt+0x6a>
 800f4d6:	1c59      	adds	r1, r3, #1
 800f4d8:	9103      	str	r1, [sp, #12]
 800f4da:	701a      	strb	r2, [r3, #0]
 800f4dc:	e7d9      	b.n	800f492 <__cvt+0x7e>

0800f4de <__exponent>:
 800f4de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4e0:	2900      	cmp	r1, #0
 800f4e2:	bfba      	itte	lt
 800f4e4:	4249      	neglt	r1, r1
 800f4e6:	232d      	movlt	r3, #45	@ 0x2d
 800f4e8:	232b      	movge	r3, #43	@ 0x2b
 800f4ea:	2909      	cmp	r1, #9
 800f4ec:	7002      	strb	r2, [r0, #0]
 800f4ee:	7043      	strb	r3, [r0, #1]
 800f4f0:	dd29      	ble.n	800f546 <__exponent+0x68>
 800f4f2:	f10d 0307 	add.w	r3, sp, #7
 800f4f6:	461d      	mov	r5, r3
 800f4f8:	270a      	movs	r7, #10
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800f500:	fb07 1416 	mls	r4, r7, r6, r1
 800f504:	3430      	adds	r4, #48	@ 0x30
 800f506:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f50a:	460c      	mov	r4, r1
 800f50c:	2c63      	cmp	r4, #99	@ 0x63
 800f50e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f512:	4631      	mov	r1, r6
 800f514:	dcf1      	bgt.n	800f4fa <__exponent+0x1c>
 800f516:	3130      	adds	r1, #48	@ 0x30
 800f518:	1e94      	subs	r4, r2, #2
 800f51a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f51e:	1c41      	adds	r1, r0, #1
 800f520:	4623      	mov	r3, r4
 800f522:	42ab      	cmp	r3, r5
 800f524:	d30a      	bcc.n	800f53c <__exponent+0x5e>
 800f526:	f10d 0309 	add.w	r3, sp, #9
 800f52a:	1a9b      	subs	r3, r3, r2
 800f52c:	42ac      	cmp	r4, r5
 800f52e:	bf88      	it	hi
 800f530:	2300      	movhi	r3, #0
 800f532:	3302      	adds	r3, #2
 800f534:	4403      	add	r3, r0
 800f536:	1a18      	subs	r0, r3, r0
 800f538:	b003      	add	sp, #12
 800f53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f53c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f540:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f544:	e7ed      	b.n	800f522 <__exponent+0x44>
 800f546:	2330      	movs	r3, #48	@ 0x30
 800f548:	3130      	adds	r1, #48	@ 0x30
 800f54a:	7083      	strb	r3, [r0, #2]
 800f54c:	70c1      	strb	r1, [r0, #3]
 800f54e:	1d03      	adds	r3, r0, #4
 800f550:	e7f1      	b.n	800f536 <__exponent+0x58>
	...

0800f554 <_printf_float>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	b08d      	sub	sp, #52	@ 0x34
 800f55a:	460c      	mov	r4, r1
 800f55c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f560:	4616      	mov	r6, r2
 800f562:	461f      	mov	r7, r3
 800f564:	4605      	mov	r5, r0
 800f566:	f000 ff01 	bl	801036c <_localeconv_r>
 800f56a:	6803      	ldr	r3, [r0, #0]
 800f56c:	9304      	str	r3, [sp, #16]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f0 fe9e 	bl	80002b0 <strlen>
 800f574:	2300      	movs	r3, #0
 800f576:	930a      	str	r3, [sp, #40]	@ 0x28
 800f578:	f8d8 3000 	ldr.w	r3, [r8]
 800f57c:	9005      	str	r0, [sp, #20]
 800f57e:	3307      	adds	r3, #7
 800f580:	f023 0307 	bic.w	r3, r3, #7
 800f584:	f103 0208 	add.w	r2, r3, #8
 800f588:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f58c:	f8d4 b000 	ldr.w	fp, [r4]
 800f590:	f8c8 2000 	str.w	r2, [r8]
 800f594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f598:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f59c:	9307      	str	r3, [sp, #28]
 800f59e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f5a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5aa:	4b9c      	ldr	r3, [pc, #624]	@ (800f81c <_printf_float+0x2c8>)
 800f5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b0:	f7f1 fadc 	bl	8000b6c <__aeabi_dcmpun>
 800f5b4:	bb70      	cbnz	r0, 800f614 <_printf_float+0xc0>
 800f5b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ba:	4b98      	ldr	r3, [pc, #608]	@ (800f81c <_printf_float+0x2c8>)
 800f5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c0:	f7f1 fab6 	bl	8000b30 <__aeabi_dcmple>
 800f5c4:	bb30      	cbnz	r0, 800f614 <_printf_float+0xc0>
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4640      	mov	r0, r8
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	f7f1 faa5 	bl	8000b1c <__aeabi_dcmplt>
 800f5d2:	b110      	cbz	r0, 800f5da <_printf_float+0x86>
 800f5d4:	232d      	movs	r3, #45	@ 0x2d
 800f5d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5da:	4a91      	ldr	r2, [pc, #580]	@ (800f820 <_printf_float+0x2cc>)
 800f5dc:	4b91      	ldr	r3, [pc, #580]	@ (800f824 <_printf_float+0x2d0>)
 800f5de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f5e2:	bf94      	ite	ls
 800f5e4:	4690      	movls	r8, r2
 800f5e6:	4698      	movhi	r8, r3
 800f5e8:	2303      	movs	r3, #3
 800f5ea:	6123      	str	r3, [r4, #16]
 800f5ec:	f02b 0304 	bic.w	r3, fp, #4
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	f04f 0900 	mov.w	r9, #0
 800f5f6:	9700      	str	r7, [sp, #0]
 800f5f8:	4633      	mov	r3, r6
 800f5fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f5fc:	4621      	mov	r1, r4
 800f5fe:	4628      	mov	r0, r5
 800f600:	f000 f9d2 	bl	800f9a8 <_printf_common>
 800f604:	3001      	adds	r0, #1
 800f606:	f040 808d 	bne.w	800f724 <_printf_float+0x1d0>
 800f60a:	f04f 30ff 	mov.w	r0, #4294967295
 800f60e:	b00d      	add	sp, #52	@ 0x34
 800f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f614:	4642      	mov	r2, r8
 800f616:	464b      	mov	r3, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	4649      	mov	r1, r9
 800f61c:	f7f1 faa6 	bl	8000b6c <__aeabi_dcmpun>
 800f620:	b140      	cbz	r0, 800f634 <_printf_float+0xe0>
 800f622:	464b      	mov	r3, r9
 800f624:	2b00      	cmp	r3, #0
 800f626:	bfbc      	itt	lt
 800f628:	232d      	movlt	r3, #45	@ 0x2d
 800f62a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f62e:	4a7e      	ldr	r2, [pc, #504]	@ (800f828 <_printf_float+0x2d4>)
 800f630:	4b7e      	ldr	r3, [pc, #504]	@ (800f82c <_printf_float+0x2d8>)
 800f632:	e7d4      	b.n	800f5de <_printf_float+0x8a>
 800f634:	6863      	ldr	r3, [r4, #4]
 800f636:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f63a:	9206      	str	r2, [sp, #24]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	d13b      	bne.n	800f6b8 <_printf_float+0x164>
 800f640:	2306      	movs	r3, #6
 800f642:	6063      	str	r3, [r4, #4]
 800f644:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f648:	2300      	movs	r3, #0
 800f64a:	6022      	str	r2, [r4, #0]
 800f64c:	9303      	str	r3, [sp, #12]
 800f64e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f650:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f654:	ab09      	add	r3, sp, #36	@ 0x24
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	6861      	ldr	r1, [r4, #4]
 800f65a:	ec49 8b10 	vmov	d0, r8, r9
 800f65e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f662:	4628      	mov	r0, r5
 800f664:	f7ff fed6 	bl	800f414 <__cvt>
 800f668:	9b06      	ldr	r3, [sp, #24]
 800f66a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f66c:	2b47      	cmp	r3, #71	@ 0x47
 800f66e:	4680      	mov	r8, r0
 800f670:	d129      	bne.n	800f6c6 <_printf_float+0x172>
 800f672:	1cc8      	adds	r0, r1, #3
 800f674:	db02      	blt.n	800f67c <_printf_float+0x128>
 800f676:	6863      	ldr	r3, [r4, #4]
 800f678:	4299      	cmp	r1, r3
 800f67a:	dd41      	ble.n	800f700 <_printf_float+0x1ac>
 800f67c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f680:	fa5f fa8a 	uxtb.w	sl, sl
 800f684:	3901      	subs	r1, #1
 800f686:	4652      	mov	r2, sl
 800f688:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f68c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f68e:	f7ff ff26 	bl	800f4de <__exponent>
 800f692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f694:	1813      	adds	r3, r2, r0
 800f696:	2a01      	cmp	r2, #1
 800f698:	4681      	mov	r9, r0
 800f69a:	6123      	str	r3, [r4, #16]
 800f69c:	dc02      	bgt.n	800f6a4 <_printf_float+0x150>
 800f69e:	6822      	ldr	r2, [r4, #0]
 800f6a0:	07d2      	lsls	r2, r2, #31
 800f6a2:	d501      	bpl.n	800f6a8 <_printf_float+0x154>
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	6123      	str	r3, [r4, #16]
 800f6a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d0a2      	beq.n	800f5f6 <_printf_float+0xa2>
 800f6b0:	232d      	movs	r3, #45	@ 0x2d
 800f6b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6b6:	e79e      	b.n	800f5f6 <_printf_float+0xa2>
 800f6b8:	9a06      	ldr	r2, [sp, #24]
 800f6ba:	2a47      	cmp	r2, #71	@ 0x47
 800f6bc:	d1c2      	bne.n	800f644 <_printf_float+0xf0>
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1c0      	bne.n	800f644 <_printf_float+0xf0>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e7bd      	b.n	800f642 <_printf_float+0xee>
 800f6c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f6ca:	d9db      	bls.n	800f684 <_printf_float+0x130>
 800f6cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f6d0:	d118      	bne.n	800f704 <_printf_float+0x1b0>
 800f6d2:	2900      	cmp	r1, #0
 800f6d4:	6863      	ldr	r3, [r4, #4]
 800f6d6:	dd0b      	ble.n	800f6f0 <_printf_float+0x19c>
 800f6d8:	6121      	str	r1, [r4, #16]
 800f6da:	b913      	cbnz	r3, 800f6e2 <_printf_float+0x18e>
 800f6dc:	6822      	ldr	r2, [r4, #0]
 800f6de:	07d0      	lsls	r0, r2, #31
 800f6e0:	d502      	bpl.n	800f6e8 <_printf_float+0x194>
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	440b      	add	r3, r1
 800f6e6:	6123      	str	r3, [r4, #16]
 800f6e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f6ea:	f04f 0900 	mov.w	r9, #0
 800f6ee:	e7db      	b.n	800f6a8 <_printf_float+0x154>
 800f6f0:	b913      	cbnz	r3, 800f6f8 <_printf_float+0x1a4>
 800f6f2:	6822      	ldr	r2, [r4, #0]
 800f6f4:	07d2      	lsls	r2, r2, #31
 800f6f6:	d501      	bpl.n	800f6fc <_printf_float+0x1a8>
 800f6f8:	3302      	adds	r3, #2
 800f6fa:	e7f4      	b.n	800f6e6 <_printf_float+0x192>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e7f2      	b.n	800f6e6 <_printf_float+0x192>
 800f700:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f706:	4299      	cmp	r1, r3
 800f708:	db05      	blt.n	800f716 <_printf_float+0x1c2>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	6121      	str	r1, [r4, #16]
 800f70e:	07d8      	lsls	r0, r3, #31
 800f710:	d5ea      	bpl.n	800f6e8 <_printf_float+0x194>
 800f712:	1c4b      	adds	r3, r1, #1
 800f714:	e7e7      	b.n	800f6e6 <_printf_float+0x192>
 800f716:	2900      	cmp	r1, #0
 800f718:	bfd4      	ite	le
 800f71a:	f1c1 0202 	rsble	r2, r1, #2
 800f71e:	2201      	movgt	r2, #1
 800f720:	4413      	add	r3, r2
 800f722:	e7e0      	b.n	800f6e6 <_printf_float+0x192>
 800f724:	6823      	ldr	r3, [r4, #0]
 800f726:	055a      	lsls	r2, r3, #21
 800f728:	d407      	bmi.n	800f73a <_printf_float+0x1e6>
 800f72a:	6923      	ldr	r3, [r4, #16]
 800f72c:	4642      	mov	r2, r8
 800f72e:	4631      	mov	r1, r6
 800f730:	4628      	mov	r0, r5
 800f732:	47b8      	blx	r7
 800f734:	3001      	adds	r0, #1
 800f736:	d12b      	bne.n	800f790 <_printf_float+0x23c>
 800f738:	e767      	b.n	800f60a <_printf_float+0xb6>
 800f73a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f73e:	f240 80dd 	bls.w	800f8fc <_printf_float+0x3a8>
 800f742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f746:	2200      	movs	r2, #0
 800f748:	2300      	movs	r3, #0
 800f74a:	f7f1 f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d033      	beq.n	800f7ba <_printf_float+0x266>
 800f752:	4a37      	ldr	r2, [pc, #220]	@ (800f830 <_printf_float+0x2dc>)
 800f754:	2301      	movs	r3, #1
 800f756:	4631      	mov	r1, r6
 800f758:	4628      	mov	r0, r5
 800f75a:	47b8      	blx	r7
 800f75c:	3001      	adds	r0, #1
 800f75e:	f43f af54 	beq.w	800f60a <_printf_float+0xb6>
 800f762:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f766:	4543      	cmp	r3, r8
 800f768:	db02      	blt.n	800f770 <_printf_float+0x21c>
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	07d8      	lsls	r0, r3, #31
 800f76e:	d50f      	bpl.n	800f790 <_printf_float+0x23c>
 800f770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f774:	4631      	mov	r1, r6
 800f776:	4628      	mov	r0, r5
 800f778:	47b8      	blx	r7
 800f77a:	3001      	adds	r0, #1
 800f77c:	f43f af45 	beq.w	800f60a <_printf_float+0xb6>
 800f780:	f04f 0900 	mov.w	r9, #0
 800f784:	f108 38ff 	add.w	r8, r8, #4294967295
 800f788:	f104 0a1a 	add.w	sl, r4, #26
 800f78c:	45c8      	cmp	r8, r9
 800f78e:	dc09      	bgt.n	800f7a4 <_printf_float+0x250>
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	079b      	lsls	r3, r3, #30
 800f794:	f100 8103 	bmi.w	800f99e <_printf_float+0x44a>
 800f798:	68e0      	ldr	r0, [r4, #12]
 800f79a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f79c:	4298      	cmp	r0, r3
 800f79e:	bfb8      	it	lt
 800f7a0:	4618      	movlt	r0, r3
 800f7a2:	e734      	b.n	800f60e <_printf_float+0xba>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	4652      	mov	r2, sl
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	47b8      	blx	r7
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	f43f af2b 	beq.w	800f60a <_printf_float+0xb6>
 800f7b4:	f109 0901 	add.w	r9, r9, #1
 800f7b8:	e7e8      	b.n	800f78c <_printf_float+0x238>
 800f7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dc39      	bgt.n	800f834 <_printf_float+0x2e0>
 800f7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800f830 <_printf_float+0x2dc>)
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	47b8      	blx	r7
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	f43f af1d 	beq.w	800f60a <_printf_float+0xb6>
 800f7d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f7d4:	ea59 0303 	orrs.w	r3, r9, r3
 800f7d8:	d102      	bne.n	800f7e0 <_printf_float+0x28c>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	07d9      	lsls	r1, r3, #31
 800f7de:	d5d7      	bpl.n	800f790 <_printf_float+0x23c>
 800f7e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b8      	blx	r7
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f43f af0d 	beq.w	800f60a <_printf_float+0xb6>
 800f7f0:	f04f 0a00 	mov.w	sl, #0
 800f7f4:	f104 0b1a 	add.w	fp, r4, #26
 800f7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fa:	425b      	negs	r3, r3
 800f7fc:	4553      	cmp	r3, sl
 800f7fe:	dc01      	bgt.n	800f804 <_printf_float+0x2b0>
 800f800:	464b      	mov	r3, r9
 800f802:	e793      	b.n	800f72c <_printf_float+0x1d8>
 800f804:	2301      	movs	r3, #1
 800f806:	465a      	mov	r2, fp
 800f808:	4631      	mov	r1, r6
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b8      	blx	r7
 800f80e:	3001      	adds	r0, #1
 800f810:	f43f aefb 	beq.w	800f60a <_printf_float+0xb6>
 800f814:	f10a 0a01 	add.w	sl, sl, #1
 800f818:	e7ee      	b.n	800f7f8 <_printf_float+0x2a4>
 800f81a:	bf00      	nop
 800f81c:	7fefffff 	.word	0x7fefffff
 800f820:	08015350 	.word	0x08015350
 800f824:	08015354 	.word	0x08015354
 800f828:	08015358 	.word	0x08015358
 800f82c:	0801535c 	.word	0x0801535c
 800f830:	08015360 	.word	0x08015360
 800f834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f836:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f83a:	4553      	cmp	r3, sl
 800f83c:	bfa8      	it	ge
 800f83e:	4653      	movge	r3, sl
 800f840:	2b00      	cmp	r3, #0
 800f842:	4699      	mov	r9, r3
 800f844:	dc36      	bgt.n	800f8b4 <_printf_float+0x360>
 800f846:	f04f 0b00 	mov.w	fp, #0
 800f84a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f84e:	f104 021a 	add.w	r2, r4, #26
 800f852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f854:	9306      	str	r3, [sp, #24]
 800f856:	eba3 0309 	sub.w	r3, r3, r9
 800f85a:	455b      	cmp	r3, fp
 800f85c:	dc31      	bgt.n	800f8c2 <_printf_float+0x36e>
 800f85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f860:	459a      	cmp	sl, r3
 800f862:	dc3a      	bgt.n	800f8da <_printf_float+0x386>
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	07da      	lsls	r2, r3, #31
 800f868:	d437      	bmi.n	800f8da <_printf_float+0x386>
 800f86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f86c:	ebaa 0903 	sub.w	r9, sl, r3
 800f870:	9b06      	ldr	r3, [sp, #24]
 800f872:	ebaa 0303 	sub.w	r3, sl, r3
 800f876:	4599      	cmp	r9, r3
 800f878:	bfa8      	it	ge
 800f87a:	4699      	movge	r9, r3
 800f87c:	f1b9 0f00 	cmp.w	r9, #0
 800f880:	dc33      	bgt.n	800f8ea <_printf_float+0x396>
 800f882:	f04f 0800 	mov.w	r8, #0
 800f886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88a:	f104 0b1a 	add.w	fp, r4, #26
 800f88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f890:	ebaa 0303 	sub.w	r3, sl, r3
 800f894:	eba3 0309 	sub.w	r3, r3, r9
 800f898:	4543      	cmp	r3, r8
 800f89a:	f77f af79 	ble.w	800f790 <_printf_float+0x23c>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	465a      	mov	r2, fp
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b8      	blx	r7
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	f43f aeae 	beq.w	800f60a <_printf_float+0xb6>
 800f8ae:	f108 0801 	add.w	r8, r8, #1
 800f8b2:	e7ec      	b.n	800f88e <_printf_float+0x33a>
 800f8b4:	4642      	mov	r2, r8
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	47b8      	blx	r7
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d1c2      	bne.n	800f846 <_printf_float+0x2f2>
 800f8c0:	e6a3      	b.n	800f60a <_printf_float+0xb6>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	9206      	str	r2, [sp, #24]
 800f8ca:	47b8      	blx	r7
 800f8cc:	3001      	adds	r0, #1
 800f8ce:	f43f ae9c 	beq.w	800f60a <_printf_float+0xb6>
 800f8d2:	9a06      	ldr	r2, [sp, #24]
 800f8d4:	f10b 0b01 	add.w	fp, fp, #1
 800f8d8:	e7bb      	b.n	800f852 <_printf_float+0x2fe>
 800f8da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d1c0      	bne.n	800f86a <_printf_float+0x316>
 800f8e8:	e68f      	b.n	800f60a <_printf_float+0xb6>
 800f8ea:	9a06      	ldr	r2, [sp, #24]
 800f8ec:	464b      	mov	r3, r9
 800f8ee:	4442      	add	r2, r8
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d1c3      	bne.n	800f882 <_printf_float+0x32e>
 800f8fa:	e686      	b.n	800f60a <_printf_float+0xb6>
 800f8fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f900:	f1ba 0f01 	cmp.w	sl, #1
 800f904:	dc01      	bgt.n	800f90a <_printf_float+0x3b6>
 800f906:	07db      	lsls	r3, r3, #31
 800f908:	d536      	bpl.n	800f978 <_printf_float+0x424>
 800f90a:	2301      	movs	r3, #1
 800f90c:	4642      	mov	r2, r8
 800f90e:	4631      	mov	r1, r6
 800f910:	4628      	mov	r0, r5
 800f912:	47b8      	blx	r7
 800f914:	3001      	adds	r0, #1
 800f916:	f43f ae78 	beq.w	800f60a <_printf_float+0xb6>
 800f91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f91e:	4631      	mov	r1, r6
 800f920:	4628      	mov	r0, r5
 800f922:	47b8      	blx	r7
 800f924:	3001      	adds	r0, #1
 800f926:	f43f ae70 	beq.w	800f60a <_printf_float+0xb6>
 800f92a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f92e:	2200      	movs	r2, #0
 800f930:	2300      	movs	r3, #0
 800f932:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f936:	f7f1 f8e7 	bl	8000b08 <__aeabi_dcmpeq>
 800f93a:	b9c0      	cbnz	r0, 800f96e <_printf_float+0x41a>
 800f93c:	4653      	mov	r3, sl
 800f93e:	f108 0201 	add.w	r2, r8, #1
 800f942:	4631      	mov	r1, r6
 800f944:	4628      	mov	r0, r5
 800f946:	47b8      	blx	r7
 800f948:	3001      	adds	r0, #1
 800f94a:	d10c      	bne.n	800f966 <_printf_float+0x412>
 800f94c:	e65d      	b.n	800f60a <_printf_float+0xb6>
 800f94e:	2301      	movs	r3, #1
 800f950:	465a      	mov	r2, fp
 800f952:	4631      	mov	r1, r6
 800f954:	4628      	mov	r0, r5
 800f956:	47b8      	blx	r7
 800f958:	3001      	adds	r0, #1
 800f95a:	f43f ae56 	beq.w	800f60a <_printf_float+0xb6>
 800f95e:	f108 0801 	add.w	r8, r8, #1
 800f962:	45d0      	cmp	r8, sl
 800f964:	dbf3      	blt.n	800f94e <_printf_float+0x3fa>
 800f966:	464b      	mov	r3, r9
 800f968:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f96c:	e6df      	b.n	800f72e <_printf_float+0x1da>
 800f96e:	f04f 0800 	mov.w	r8, #0
 800f972:	f104 0b1a 	add.w	fp, r4, #26
 800f976:	e7f4      	b.n	800f962 <_printf_float+0x40e>
 800f978:	2301      	movs	r3, #1
 800f97a:	4642      	mov	r2, r8
 800f97c:	e7e1      	b.n	800f942 <_printf_float+0x3ee>
 800f97e:	2301      	movs	r3, #1
 800f980:	464a      	mov	r2, r9
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	f43f ae3e 	beq.w	800f60a <_printf_float+0xb6>
 800f98e:	f108 0801 	add.w	r8, r8, #1
 800f992:	68e3      	ldr	r3, [r4, #12]
 800f994:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f996:	1a5b      	subs	r3, r3, r1
 800f998:	4543      	cmp	r3, r8
 800f99a:	dcf0      	bgt.n	800f97e <_printf_float+0x42a>
 800f99c:	e6fc      	b.n	800f798 <_printf_float+0x244>
 800f99e:	f04f 0800 	mov.w	r8, #0
 800f9a2:	f104 0919 	add.w	r9, r4, #25
 800f9a6:	e7f4      	b.n	800f992 <_printf_float+0x43e>

0800f9a8 <_printf_common>:
 800f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	4698      	mov	r8, r3
 800f9b0:	688a      	ldr	r2, [r1, #8]
 800f9b2:	690b      	ldr	r3, [r1, #16]
 800f9b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	bfb8      	it	lt
 800f9bc:	4613      	movlt	r3, r2
 800f9be:	6033      	str	r3, [r6, #0]
 800f9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	b10a      	cbz	r2, 800f9ce <_printf_common+0x26>
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	6033      	str	r3, [r6, #0]
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	0699      	lsls	r1, r3, #26
 800f9d2:	bf42      	ittt	mi
 800f9d4:	6833      	ldrmi	r3, [r6, #0]
 800f9d6:	3302      	addmi	r3, #2
 800f9d8:	6033      	strmi	r3, [r6, #0]
 800f9da:	6825      	ldr	r5, [r4, #0]
 800f9dc:	f015 0506 	ands.w	r5, r5, #6
 800f9e0:	d106      	bne.n	800f9f0 <_printf_common+0x48>
 800f9e2:	f104 0a19 	add.w	sl, r4, #25
 800f9e6:	68e3      	ldr	r3, [r4, #12]
 800f9e8:	6832      	ldr	r2, [r6, #0]
 800f9ea:	1a9b      	subs	r3, r3, r2
 800f9ec:	42ab      	cmp	r3, r5
 800f9ee:	dc26      	bgt.n	800fa3e <_printf_common+0x96>
 800f9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f9f4:	6822      	ldr	r2, [r4, #0]
 800f9f6:	3b00      	subs	r3, #0
 800f9f8:	bf18      	it	ne
 800f9fa:	2301      	movne	r3, #1
 800f9fc:	0692      	lsls	r2, r2, #26
 800f9fe:	d42b      	bmi.n	800fa58 <_printf_common+0xb0>
 800fa00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa04:	4641      	mov	r1, r8
 800fa06:	4638      	mov	r0, r7
 800fa08:	47c8      	blx	r9
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	d01e      	beq.n	800fa4c <_printf_common+0xa4>
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	6922      	ldr	r2, [r4, #16]
 800fa12:	f003 0306 	and.w	r3, r3, #6
 800fa16:	2b04      	cmp	r3, #4
 800fa18:	bf02      	ittt	eq
 800fa1a:	68e5      	ldreq	r5, [r4, #12]
 800fa1c:	6833      	ldreq	r3, [r6, #0]
 800fa1e:	1aed      	subeq	r5, r5, r3
 800fa20:	68a3      	ldr	r3, [r4, #8]
 800fa22:	bf0c      	ite	eq
 800fa24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa28:	2500      	movne	r5, #0
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	bfc4      	itt	gt
 800fa2e:	1a9b      	subgt	r3, r3, r2
 800fa30:	18ed      	addgt	r5, r5, r3
 800fa32:	2600      	movs	r6, #0
 800fa34:	341a      	adds	r4, #26
 800fa36:	42b5      	cmp	r5, r6
 800fa38:	d11a      	bne.n	800fa70 <_printf_common+0xc8>
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	e008      	b.n	800fa50 <_printf_common+0xa8>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	4652      	mov	r2, sl
 800fa42:	4641      	mov	r1, r8
 800fa44:	4638      	mov	r0, r7
 800fa46:	47c8      	blx	r9
 800fa48:	3001      	adds	r0, #1
 800fa4a:	d103      	bne.n	800fa54 <_printf_common+0xac>
 800fa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa54:	3501      	adds	r5, #1
 800fa56:	e7c6      	b.n	800f9e6 <_printf_common+0x3e>
 800fa58:	18e1      	adds	r1, r4, r3
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	2030      	movs	r0, #48	@ 0x30
 800fa5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa62:	4422      	add	r2, r4
 800fa64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa6c:	3302      	adds	r3, #2
 800fa6e:	e7c7      	b.n	800fa00 <_printf_common+0x58>
 800fa70:	2301      	movs	r3, #1
 800fa72:	4622      	mov	r2, r4
 800fa74:	4641      	mov	r1, r8
 800fa76:	4638      	mov	r0, r7
 800fa78:	47c8      	blx	r9
 800fa7a:	3001      	adds	r0, #1
 800fa7c:	d0e6      	beq.n	800fa4c <_printf_common+0xa4>
 800fa7e:	3601      	adds	r6, #1
 800fa80:	e7d9      	b.n	800fa36 <_printf_common+0x8e>
	...

0800fa84 <_printf_i>:
 800fa84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa88:	7e0f      	ldrb	r7, [r1, #24]
 800fa8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa8c:	2f78      	cmp	r7, #120	@ 0x78
 800fa8e:	4691      	mov	r9, r2
 800fa90:	4680      	mov	r8, r0
 800fa92:	460c      	mov	r4, r1
 800fa94:	469a      	mov	sl, r3
 800fa96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fa9a:	d807      	bhi.n	800faac <_printf_i+0x28>
 800fa9c:	2f62      	cmp	r7, #98	@ 0x62
 800fa9e:	d80a      	bhi.n	800fab6 <_printf_i+0x32>
 800faa0:	2f00      	cmp	r7, #0
 800faa2:	f000 80d2 	beq.w	800fc4a <_printf_i+0x1c6>
 800faa6:	2f58      	cmp	r7, #88	@ 0x58
 800faa8:	f000 80b9 	beq.w	800fc1e <_printf_i+0x19a>
 800faac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fab4:	e03a      	b.n	800fb2c <_printf_i+0xa8>
 800fab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800faba:	2b15      	cmp	r3, #21
 800fabc:	d8f6      	bhi.n	800faac <_printf_i+0x28>
 800fabe:	a101      	add	r1, pc, #4	@ (adr r1, 800fac4 <_printf_i+0x40>)
 800fac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fac4:	0800fb1d 	.word	0x0800fb1d
 800fac8:	0800fb31 	.word	0x0800fb31
 800facc:	0800faad 	.word	0x0800faad
 800fad0:	0800faad 	.word	0x0800faad
 800fad4:	0800faad 	.word	0x0800faad
 800fad8:	0800faad 	.word	0x0800faad
 800fadc:	0800fb31 	.word	0x0800fb31
 800fae0:	0800faad 	.word	0x0800faad
 800fae4:	0800faad 	.word	0x0800faad
 800fae8:	0800faad 	.word	0x0800faad
 800faec:	0800faad 	.word	0x0800faad
 800faf0:	0800fc31 	.word	0x0800fc31
 800faf4:	0800fb5b 	.word	0x0800fb5b
 800faf8:	0800fbeb 	.word	0x0800fbeb
 800fafc:	0800faad 	.word	0x0800faad
 800fb00:	0800faad 	.word	0x0800faad
 800fb04:	0800fc53 	.word	0x0800fc53
 800fb08:	0800faad 	.word	0x0800faad
 800fb0c:	0800fb5b 	.word	0x0800fb5b
 800fb10:	0800faad 	.word	0x0800faad
 800fb14:	0800faad 	.word	0x0800faad
 800fb18:	0800fbf3 	.word	0x0800fbf3
 800fb1c:	6833      	ldr	r3, [r6, #0]
 800fb1e:	1d1a      	adds	r2, r3, #4
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	6032      	str	r2, [r6, #0]
 800fb24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e09d      	b.n	800fc6c <_printf_i+0x1e8>
 800fb30:	6833      	ldr	r3, [r6, #0]
 800fb32:	6820      	ldr	r0, [r4, #0]
 800fb34:	1d19      	adds	r1, r3, #4
 800fb36:	6031      	str	r1, [r6, #0]
 800fb38:	0606      	lsls	r6, r0, #24
 800fb3a:	d501      	bpl.n	800fb40 <_printf_i+0xbc>
 800fb3c:	681d      	ldr	r5, [r3, #0]
 800fb3e:	e003      	b.n	800fb48 <_printf_i+0xc4>
 800fb40:	0645      	lsls	r5, r0, #25
 800fb42:	d5fb      	bpl.n	800fb3c <_printf_i+0xb8>
 800fb44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb48:	2d00      	cmp	r5, #0
 800fb4a:	da03      	bge.n	800fb54 <_printf_i+0xd0>
 800fb4c:	232d      	movs	r3, #45	@ 0x2d
 800fb4e:	426d      	negs	r5, r5
 800fb50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb54:	4859      	ldr	r0, [pc, #356]	@ (800fcbc <_printf_i+0x238>)
 800fb56:	230a      	movs	r3, #10
 800fb58:	e011      	b.n	800fb7e <_printf_i+0xfa>
 800fb5a:	6821      	ldr	r1, [r4, #0]
 800fb5c:	6833      	ldr	r3, [r6, #0]
 800fb5e:	0608      	lsls	r0, r1, #24
 800fb60:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb64:	d402      	bmi.n	800fb6c <_printf_i+0xe8>
 800fb66:	0649      	lsls	r1, r1, #25
 800fb68:	bf48      	it	mi
 800fb6a:	b2ad      	uxthmi	r5, r5
 800fb6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb6e:	4853      	ldr	r0, [pc, #332]	@ (800fcbc <_printf_i+0x238>)
 800fb70:	6033      	str	r3, [r6, #0]
 800fb72:	bf14      	ite	ne
 800fb74:	230a      	movne	r3, #10
 800fb76:	2308      	moveq	r3, #8
 800fb78:	2100      	movs	r1, #0
 800fb7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb7e:	6866      	ldr	r6, [r4, #4]
 800fb80:	60a6      	str	r6, [r4, #8]
 800fb82:	2e00      	cmp	r6, #0
 800fb84:	bfa2      	ittt	ge
 800fb86:	6821      	ldrge	r1, [r4, #0]
 800fb88:	f021 0104 	bicge.w	r1, r1, #4
 800fb8c:	6021      	strge	r1, [r4, #0]
 800fb8e:	b90d      	cbnz	r5, 800fb94 <_printf_i+0x110>
 800fb90:	2e00      	cmp	r6, #0
 800fb92:	d04b      	beq.n	800fc2c <_printf_i+0x1a8>
 800fb94:	4616      	mov	r6, r2
 800fb96:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb9a:	fb03 5711 	mls	r7, r3, r1, r5
 800fb9e:	5dc7      	ldrb	r7, [r0, r7]
 800fba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fba4:	462f      	mov	r7, r5
 800fba6:	42bb      	cmp	r3, r7
 800fba8:	460d      	mov	r5, r1
 800fbaa:	d9f4      	bls.n	800fb96 <_printf_i+0x112>
 800fbac:	2b08      	cmp	r3, #8
 800fbae:	d10b      	bne.n	800fbc8 <_printf_i+0x144>
 800fbb0:	6823      	ldr	r3, [r4, #0]
 800fbb2:	07df      	lsls	r7, r3, #31
 800fbb4:	d508      	bpl.n	800fbc8 <_printf_i+0x144>
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	6861      	ldr	r1, [r4, #4]
 800fbba:	4299      	cmp	r1, r3
 800fbbc:	bfde      	ittt	le
 800fbbe:	2330      	movle	r3, #48	@ 0x30
 800fbc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbc8:	1b92      	subs	r2, r2, r6
 800fbca:	6122      	str	r2, [r4, #16]
 800fbcc:	f8cd a000 	str.w	sl, [sp]
 800fbd0:	464b      	mov	r3, r9
 800fbd2:	aa03      	add	r2, sp, #12
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	4640      	mov	r0, r8
 800fbd8:	f7ff fee6 	bl	800f9a8 <_printf_common>
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d14a      	bne.n	800fc76 <_printf_i+0x1f2>
 800fbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe4:	b004      	add	sp, #16
 800fbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	f043 0320 	orr.w	r3, r3, #32
 800fbf0:	6023      	str	r3, [r4, #0]
 800fbf2:	4833      	ldr	r0, [pc, #204]	@ (800fcc0 <_printf_i+0x23c>)
 800fbf4:	2778      	movs	r7, #120	@ 0x78
 800fbf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	6831      	ldr	r1, [r6, #0]
 800fbfe:	061f      	lsls	r7, r3, #24
 800fc00:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc04:	d402      	bmi.n	800fc0c <_printf_i+0x188>
 800fc06:	065f      	lsls	r7, r3, #25
 800fc08:	bf48      	it	mi
 800fc0a:	b2ad      	uxthmi	r5, r5
 800fc0c:	6031      	str	r1, [r6, #0]
 800fc0e:	07d9      	lsls	r1, r3, #31
 800fc10:	bf44      	itt	mi
 800fc12:	f043 0320 	orrmi.w	r3, r3, #32
 800fc16:	6023      	strmi	r3, [r4, #0]
 800fc18:	b11d      	cbz	r5, 800fc22 <_printf_i+0x19e>
 800fc1a:	2310      	movs	r3, #16
 800fc1c:	e7ac      	b.n	800fb78 <_printf_i+0xf4>
 800fc1e:	4827      	ldr	r0, [pc, #156]	@ (800fcbc <_printf_i+0x238>)
 800fc20:	e7e9      	b.n	800fbf6 <_printf_i+0x172>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	f023 0320 	bic.w	r3, r3, #32
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	e7f6      	b.n	800fc1a <_printf_i+0x196>
 800fc2c:	4616      	mov	r6, r2
 800fc2e:	e7bd      	b.n	800fbac <_printf_i+0x128>
 800fc30:	6833      	ldr	r3, [r6, #0]
 800fc32:	6825      	ldr	r5, [r4, #0]
 800fc34:	6961      	ldr	r1, [r4, #20]
 800fc36:	1d18      	adds	r0, r3, #4
 800fc38:	6030      	str	r0, [r6, #0]
 800fc3a:	062e      	lsls	r6, r5, #24
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	d501      	bpl.n	800fc44 <_printf_i+0x1c0>
 800fc40:	6019      	str	r1, [r3, #0]
 800fc42:	e002      	b.n	800fc4a <_printf_i+0x1c6>
 800fc44:	0668      	lsls	r0, r5, #25
 800fc46:	d5fb      	bpl.n	800fc40 <_printf_i+0x1bc>
 800fc48:	8019      	strh	r1, [r3, #0]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	6123      	str	r3, [r4, #16]
 800fc4e:	4616      	mov	r6, r2
 800fc50:	e7bc      	b.n	800fbcc <_printf_i+0x148>
 800fc52:	6833      	ldr	r3, [r6, #0]
 800fc54:	1d1a      	adds	r2, r3, #4
 800fc56:	6032      	str	r2, [r6, #0]
 800fc58:	681e      	ldr	r6, [r3, #0]
 800fc5a:	6862      	ldr	r2, [r4, #4]
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4630      	mov	r0, r6
 800fc60:	f7f0 fad6 	bl	8000210 <memchr>
 800fc64:	b108      	cbz	r0, 800fc6a <_printf_i+0x1e6>
 800fc66:	1b80      	subs	r0, r0, r6
 800fc68:	6060      	str	r0, [r4, #4]
 800fc6a:	6863      	ldr	r3, [r4, #4]
 800fc6c:	6123      	str	r3, [r4, #16]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc74:	e7aa      	b.n	800fbcc <_printf_i+0x148>
 800fc76:	6923      	ldr	r3, [r4, #16]
 800fc78:	4632      	mov	r2, r6
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	47d0      	blx	sl
 800fc80:	3001      	adds	r0, #1
 800fc82:	d0ad      	beq.n	800fbe0 <_printf_i+0x15c>
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	079b      	lsls	r3, r3, #30
 800fc88:	d413      	bmi.n	800fcb2 <_printf_i+0x22e>
 800fc8a:	68e0      	ldr	r0, [r4, #12]
 800fc8c:	9b03      	ldr	r3, [sp, #12]
 800fc8e:	4298      	cmp	r0, r3
 800fc90:	bfb8      	it	lt
 800fc92:	4618      	movlt	r0, r3
 800fc94:	e7a6      	b.n	800fbe4 <_printf_i+0x160>
 800fc96:	2301      	movs	r3, #1
 800fc98:	4632      	mov	r2, r6
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	4640      	mov	r0, r8
 800fc9e:	47d0      	blx	sl
 800fca0:	3001      	adds	r0, #1
 800fca2:	d09d      	beq.n	800fbe0 <_printf_i+0x15c>
 800fca4:	3501      	adds	r5, #1
 800fca6:	68e3      	ldr	r3, [r4, #12]
 800fca8:	9903      	ldr	r1, [sp, #12]
 800fcaa:	1a5b      	subs	r3, r3, r1
 800fcac:	42ab      	cmp	r3, r5
 800fcae:	dcf2      	bgt.n	800fc96 <_printf_i+0x212>
 800fcb0:	e7eb      	b.n	800fc8a <_printf_i+0x206>
 800fcb2:	2500      	movs	r5, #0
 800fcb4:	f104 0619 	add.w	r6, r4, #25
 800fcb8:	e7f5      	b.n	800fca6 <_printf_i+0x222>
 800fcba:	bf00      	nop
 800fcbc:	08015362 	.word	0x08015362
 800fcc0:	08015373 	.word	0x08015373

0800fcc4 <_scanf_float>:
 800fcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc8:	b087      	sub	sp, #28
 800fcca:	4617      	mov	r7, r2
 800fccc:	9303      	str	r3, [sp, #12]
 800fcce:	688b      	ldr	r3, [r1, #8]
 800fcd0:	1e5a      	subs	r2, r3, #1
 800fcd2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fcd6:	bf81      	itttt	hi
 800fcd8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fcdc:	eb03 0b05 	addhi.w	fp, r3, r5
 800fce0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fce4:	608b      	strhi	r3, [r1, #8]
 800fce6:	680b      	ldr	r3, [r1, #0]
 800fce8:	460a      	mov	r2, r1
 800fcea:	f04f 0500 	mov.w	r5, #0
 800fcee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fcf2:	f842 3b1c 	str.w	r3, [r2], #28
 800fcf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fcfa:	4680      	mov	r8, r0
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	bf98      	it	ls
 800fd00:	f04f 0b00 	movls.w	fp, #0
 800fd04:	9201      	str	r2, [sp, #4]
 800fd06:	4616      	mov	r6, r2
 800fd08:	46aa      	mov	sl, r5
 800fd0a:	46a9      	mov	r9, r5
 800fd0c:	9502      	str	r5, [sp, #8]
 800fd0e:	68a2      	ldr	r2, [r4, #8]
 800fd10:	b152      	cbz	r2, 800fd28 <_scanf_float+0x64>
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	2b4e      	cmp	r3, #78	@ 0x4e
 800fd18:	d864      	bhi.n	800fde4 <_scanf_float+0x120>
 800fd1a:	2b40      	cmp	r3, #64	@ 0x40
 800fd1c:	d83c      	bhi.n	800fd98 <_scanf_float+0xd4>
 800fd1e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fd22:	b2c8      	uxtb	r0, r1
 800fd24:	280e      	cmp	r0, #14
 800fd26:	d93a      	bls.n	800fd9e <_scanf_float+0xda>
 800fd28:	f1b9 0f00 	cmp.w	r9, #0
 800fd2c:	d003      	beq.n	800fd36 <_scanf_float+0x72>
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd3a:	f1ba 0f01 	cmp.w	sl, #1
 800fd3e:	f200 8117 	bhi.w	800ff70 <_scanf_float+0x2ac>
 800fd42:	9b01      	ldr	r3, [sp, #4]
 800fd44:	429e      	cmp	r6, r3
 800fd46:	f200 8108 	bhi.w	800ff5a <_scanf_float+0x296>
 800fd4a:	2001      	movs	r0, #1
 800fd4c:	b007      	add	sp, #28
 800fd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd52:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fd56:	2a0d      	cmp	r2, #13
 800fd58:	d8e6      	bhi.n	800fd28 <_scanf_float+0x64>
 800fd5a:	a101      	add	r1, pc, #4	@ (adr r1, 800fd60 <_scanf_float+0x9c>)
 800fd5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd60:	0800fea7 	.word	0x0800fea7
 800fd64:	0800fd29 	.word	0x0800fd29
 800fd68:	0800fd29 	.word	0x0800fd29
 800fd6c:	0800fd29 	.word	0x0800fd29
 800fd70:	0800ff07 	.word	0x0800ff07
 800fd74:	0800fedf 	.word	0x0800fedf
 800fd78:	0800fd29 	.word	0x0800fd29
 800fd7c:	0800fd29 	.word	0x0800fd29
 800fd80:	0800feb5 	.word	0x0800feb5
 800fd84:	0800fd29 	.word	0x0800fd29
 800fd88:	0800fd29 	.word	0x0800fd29
 800fd8c:	0800fd29 	.word	0x0800fd29
 800fd90:	0800fd29 	.word	0x0800fd29
 800fd94:	0800fe6d 	.word	0x0800fe6d
 800fd98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fd9c:	e7db      	b.n	800fd56 <_scanf_float+0x92>
 800fd9e:	290e      	cmp	r1, #14
 800fda0:	d8c2      	bhi.n	800fd28 <_scanf_float+0x64>
 800fda2:	a001      	add	r0, pc, #4	@ (adr r0, 800fda8 <_scanf_float+0xe4>)
 800fda4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fda8:	0800fe5d 	.word	0x0800fe5d
 800fdac:	0800fd29 	.word	0x0800fd29
 800fdb0:	0800fe5d 	.word	0x0800fe5d
 800fdb4:	0800fef3 	.word	0x0800fef3
 800fdb8:	0800fd29 	.word	0x0800fd29
 800fdbc:	0800fe05 	.word	0x0800fe05
 800fdc0:	0800fe43 	.word	0x0800fe43
 800fdc4:	0800fe43 	.word	0x0800fe43
 800fdc8:	0800fe43 	.word	0x0800fe43
 800fdcc:	0800fe43 	.word	0x0800fe43
 800fdd0:	0800fe43 	.word	0x0800fe43
 800fdd4:	0800fe43 	.word	0x0800fe43
 800fdd8:	0800fe43 	.word	0x0800fe43
 800fddc:	0800fe43 	.word	0x0800fe43
 800fde0:	0800fe43 	.word	0x0800fe43
 800fde4:	2b6e      	cmp	r3, #110	@ 0x6e
 800fde6:	d809      	bhi.n	800fdfc <_scanf_float+0x138>
 800fde8:	2b60      	cmp	r3, #96	@ 0x60
 800fdea:	d8b2      	bhi.n	800fd52 <_scanf_float+0x8e>
 800fdec:	2b54      	cmp	r3, #84	@ 0x54
 800fdee:	d07b      	beq.n	800fee8 <_scanf_float+0x224>
 800fdf0:	2b59      	cmp	r3, #89	@ 0x59
 800fdf2:	d199      	bne.n	800fd28 <_scanf_float+0x64>
 800fdf4:	2d07      	cmp	r5, #7
 800fdf6:	d197      	bne.n	800fd28 <_scanf_float+0x64>
 800fdf8:	2508      	movs	r5, #8
 800fdfa:	e02c      	b.n	800fe56 <_scanf_float+0x192>
 800fdfc:	2b74      	cmp	r3, #116	@ 0x74
 800fdfe:	d073      	beq.n	800fee8 <_scanf_float+0x224>
 800fe00:	2b79      	cmp	r3, #121	@ 0x79
 800fe02:	e7f6      	b.n	800fdf2 <_scanf_float+0x12e>
 800fe04:	6821      	ldr	r1, [r4, #0]
 800fe06:	05c8      	lsls	r0, r1, #23
 800fe08:	d51b      	bpl.n	800fe42 <_scanf_float+0x17e>
 800fe0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fe0e:	6021      	str	r1, [r4, #0]
 800fe10:	f109 0901 	add.w	r9, r9, #1
 800fe14:	f1bb 0f00 	cmp.w	fp, #0
 800fe18:	d003      	beq.n	800fe22 <_scanf_float+0x15e>
 800fe1a:	3201      	adds	r2, #1
 800fe1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe20:	60a2      	str	r2, [r4, #8]
 800fe22:	68a3      	ldr	r3, [r4, #8]
 800fe24:	3b01      	subs	r3, #1
 800fe26:	60a3      	str	r3, [r4, #8]
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	6123      	str	r3, [r4, #16]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3b01      	subs	r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	607b      	str	r3, [r7, #4]
 800fe36:	f340 8087 	ble.w	800ff48 <_scanf_float+0x284>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	603b      	str	r3, [r7, #0]
 800fe40:	e765      	b.n	800fd0e <_scanf_float+0x4a>
 800fe42:	eb1a 0105 	adds.w	r1, sl, r5
 800fe46:	f47f af6f 	bne.w	800fd28 <_scanf_float+0x64>
 800fe4a:	6822      	ldr	r2, [r4, #0]
 800fe4c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fe50:	6022      	str	r2, [r4, #0]
 800fe52:	460d      	mov	r5, r1
 800fe54:	468a      	mov	sl, r1
 800fe56:	f806 3b01 	strb.w	r3, [r6], #1
 800fe5a:	e7e2      	b.n	800fe22 <_scanf_float+0x15e>
 800fe5c:	6822      	ldr	r2, [r4, #0]
 800fe5e:	0610      	lsls	r0, r2, #24
 800fe60:	f57f af62 	bpl.w	800fd28 <_scanf_float+0x64>
 800fe64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fe68:	6022      	str	r2, [r4, #0]
 800fe6a:	e7f4      	b.n	800fe56 <_scanf_float+0x192>
 800fe6c:	f1ba 0f00 	cmp.w	sl, #0
 800fe70:	d10e      	bne.n	800fe90 <_scanf_float+0x1cc>
 800fe72:	f1b9 0f00 	cmp.w	r9, #0
 800fe76:	d10e      	bne.n	800fe96 <_scanf_float+0x1d2>
 800fe78:	6822      	ldr	r2, [r4, #0]
 800fe7a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fe7e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fe82:	d108      	bne.n	800fe96 <_scanf_float+0x1d2>
 800fe84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fe88:	6022      	str	r2, [r4, #0]
 800fe8a:	f04f 0a01 	mov.w	sl, #1
 800fe8e:	e7e2      	b.n	800fe56 <_scanf_float+0x192>
 800fe90:	f1ba 0f02 	cmp.w	sl, #2
 800fe94:	d055      	beq.n	800ff42 <_scanf_float+0x27e>
 800fe96:	2d01      	cmp	r5, #1
 800fe98:	d002      	beq.n	800fea0 <_scanf_float+0x1dc>
 800fe9a:	2d04      	cmp	r5, #4
 800fe9c:	f47f af44 	bne.w	800fd28 <_scanf_float+0x64>
 800fea0:	3501      	adds	r5, #1
 800fea2:	b2ed      	uxtb	r5, r5
 800fea4:	e7d7      	b.n	800fe56 <_scanf_float+0x192>
 800fea6:	f1ba 0f01 	cmp.w	sl, #1
 800feaa:	f47f af3d 	bne.w	800fd28 <_scanf_float+0x64>
 800feae:	f04f 0a02 	mov.w	sl, #2
 800feb2:	e7d0      	b.n	800fe56 <_scanf_float+0x192>
 800feb4:	b97d      	cbnz	r5, 800fed6 <_scanf_float+0x212>
 800feb6:	f1b9 0f00 	cmp.w	r9, #0
 800feba:	f47f af38 	bne.w	800fd2e <_scanf_float+0x6a>
 800febe:	6822      	ldr	r2, [r4, #0]
 800fec0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fec4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fec8:	f040 8108 	bne.w	80100dc <_scanf_float+0x418>
 800fecc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fed0:	6022      	str	r2, [r4, #0]
 800fed2:	2501      	movs	r5, #1
 800fed4:	e7bf      	b.n	800fe56 <_scanf_float+0x192>
 800fed6:	2d03      	cmp	r5, #3
 800fed8:	d0e2      	beq.n	800fea0 <_scanf_float+0x1dc>
 800feda:	2d05      	cmp	r5, #5
 800fedc:	e7de      	b.n	800fe9c <_scanf_float+0x1d8>
 800fede:	2d02      	cmp	r5, #2
 800fee0:	f47f af22 	bne.w	800fd28 <_scanf_float+0x64>
 800fee4:	2503      	movs	r5, #3
 800fee6:	e7b6      	b.n	800fe56 <_scanf_float+0x192>
 800fee8:	2d06      	cmp	r5, #6
 800feea:	f47f af1d 	bne.w	800fd28 <_scanf_float+0x64>
 800feee:	2507      	movs	r5, #7
 800fef0:	e7b1      	b.n	800fe56 <_scanf_float+0x192>
 800fef2:	6822      	ldr	r2, [r4, #0]
 800fef4:	0591      	lsls	r1, r2, #22
 800fef6:	f57f af17 	bpl.w	800fd28 <_scanf_float+0x64>
 800fefa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fefe:	6022      	str	r2, [r4, #0]
 800ff00:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff04:	e7a7      	b.n	800fe56 <_scanf_float+0x192>
 800ff06:	6822      	ldr	r2, [r4, #0]
 800ff08:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ff0c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ff10:	d006      	beq.n	800ff20 <_scanf_float+0x25c>
 800ff12:	0550      	lsls	r0, r2, #21
 800ff14:	f57f af08 	bpl.w	800fd28 <_scanf_float+0x64>
 800ff18:	f1b9 0f00 	cmp.w	r9, #0
 800ff1c:	f000 80de 	beq.w	80100dc <_scanf_float+0x418>
 800ff20:	0591      	lsls	r1, r2, #22
 800ff22:	bf58      	it	pl
 800ff24:	9902      	ldrpl	r1, [sp, #8]
 800ff26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ff2a:	bf58      	it	pl
 800ff2c:	eba9 0101 	subpl.w	r1, r9, r1
 800ff30:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ff34:	bf58      	it	pl
 800ff36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff3a:	6022      	str	r2, [r4, #0]
 800ff3c:	f04f 0900 	mov.w	r9, #0
 800ff40:	e789      	b.n	800fe56 <_scanf_float+0x192>
 800ff42:	f04f 0a03 	mov.w	sl, #3
 800ff46:	e786      	b.n	800fe56 <_scanf_float+0x192>
 800ff48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	4640      	mov	r0, r8
 800ff50:	4798      	blx	r3
 800ff52:	2800      	cmp	r0, #0
 800ff54:	f43f aedb 	beq.w	800fd0e <_scanf_float+0x4a>
 800ff58:	e6e6      	b.n	800fd28 <_scanf_float+0x64>
 800ff5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ff5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff62:	463a      	mov	r2, r7
 800ff64:	4640      	mov	r0, r8
 800ff66:	4798      	blx	r3
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	6123      	str	r3, [r4, #16]
 800ff6e:	e6e8      	b.n	800fd42 <_scanf_float+0x7e>
 800ff70:	1e6b      	subs	r3, r5, #1
 800ff72:	2b06      	cmp	r3, #6
 800ff74:	d824      	bhi.n	800ffc0 <_scanf_float+0x2fc>
 800ff76:	2d02      	cmp	r5, #2
 800ff78:	d836      	bhi.n	800ffe8 <_scanf_float+0x324>
 800ff7a:	9b01      	ldr	r3, [sp, #4]
 800ff7c:	429e      	cmp	r6, r3
 800ff7e:	f67f aee4 	bls.w	800fd4a <_scanf_float+0x86>
 800ff82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ff86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff8a:	463a      	mov	r2, r7
 800ff8c:	4640      	mov	r0, r8
 800ff8e:	4798      	blx	r3
 800ff90:	6923      	ldr	r3, [r4, #16]
 800ff92:	3b01      	subs	r3, #1
 800ff94:	6123      	str	r3, [r4, #16]
 800ff96:	e7f0      	b.n	800ff7a <_scanf_float+0x2b6>
 800ff98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ff9c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	4798      	blx	r3
 800ffa6:	6923      	ldr	r3, [r4, #16]
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffb0:	fa5f fa8a 	uxtb.w	sl, sl
 800ffb4:	f1ba 0f02 	cmp.w	sl, #2
 800ffb8:	d1ee      	bne.n	800ff98 <_scanf_float+0x2d4>
 800ffba:	3d03      	subs	r5, #3
 800ffbc:	b2ed      	uxtb	r5, r5
 800ffbe:	1b76      	subs	r6, r6, r5
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	05da      	lsls	r2, r3, #23
 800ffc4:	d530      	bpl.n	8010028 <_scanf_float+0x364>
 800ffc6:	055b      	lsls	r3, r3, #21
 800ffc8:	d511      	bpl.n	800ffee <_scanf_float+0x32a>
 800ffca:	9b01      	ldr	r3, [sp, #4]
 800ffcc:	429e      	cmp	r6, r3
 800ffce:	f67f aebc 	bls.w	800fd4a <_scanf_float+0x86>
 800ffd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ffd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffda:	463a      	mov	r2, r7
 800ffdc:	4640      	mov	r0, r8
 800ffde:	4798      	blx	r3
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	e7f0      	b.n	800ffca <_scanf_float+0x306>
 800ffe8:	46aa      	mov	sl, r5
 800ffea:	46b3      	mov	fp, r6
 800ffec:	e7de      	b.n	800ffac <_scanf_float+0x2e8>
 800ffee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fff2:	6923      	ldr	r3, [r4, #16]
 800fff4:	2965      	cmp	r1, #101	@ 0x65
 800fff6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fffa:	f106 35ff 	add.w	r5, r6, #4294967295
 800fffe:	6123      	str	r3, [r4, #16]
 8010000:	d00c      	beq.n	801001c <_scanf_float+0x358>
 8010002:	2945      	cmp	r1, #69	@ 0x45
 8010004:	d00a      	beq.n	801001c <_scanf_float+0x358>
 8010006:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801000a:	463a      	mov	r2, r7
 801000c:	4640      	mov	r0, r8
 801000e:	4798      	blx	r3
 8010010:	6923      	ldr	r3, [r4, #16]
 8010012:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010016:	3b01      	subs	r3, #1
 8010018:	1eb5      	subs	r5, r6, #2
 801001a:	6123      	str	r3, [r4, #16]
 801001c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010020:	463a      	mov	r2, r7
 8010022:	4640      	mov	r0, r8
 8010024:	4798      	blx	r3
 8010026:	462e      	mov	r6, r5
 8010028:	6822      	ldr	r2, [r4, #0]
 801002a:	f012 0210 	ands.w	r2, r2, #16
 801002e:	d001      	beq.n	8010034 <_scanf_float+0x370>
 8010030:	2000      	movs	r0, #0
 8010032:	e68b      	b.n	800fd4c <_scanf_float+0x88>
 8010034:	7032      	strb	r2, [r6, #0]
 8010036:	6823      	ldr	r3, [r4, #0]
 8010038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801003c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010040:	d11c      	bne.n	801007c <_scanf_float+0x3b8>
 8010042:	9b02      	ldr	r3, [sp, #8]
 8010044:	454b      	cmp	r3, r9
 8010046:	eba3 0209 	sub.w	r2, r3, r9
 801004a:	d123      	bne.n	8010094 <_scanf_float+0x3d0>
 801004c:	9901      	ldr	r1, [sp, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	4640      	mov	r0, r8
 8010052:	f7ff f9cd 	bl	800f3f0 <_strtod_r>
 8010056:	9b03      	ldr	r3, [sp, #12]
 8010058:	6821      	ldr	r1, [r4, #0]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f011 0f02 	tst.w	r1, #2
 8010060:	ec57 6b10 	vmov	r6, r7, d0
 8010064:	f103 0204 	add.w	r2, r3, #4
 8010068:	d01f      	beq.n	80100aa <_scanf_float+0x3e6>
 801006a:	9903      	ldr	r1, [sp, #12]
 801006c:	600a      	str	r2, [r1, #0]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	e9c3 6700 	strd	r6, r7, [r3]
 8010074:	68e3      	ldr	r3, [r4, #12]
 8010076:	3301      	adds	r3, #1
 8010078:	60e3      	str	r3, [r4, #12]
 801007a:	e7d9      	b.n	8010030 <_scanf_float+0x36c>
 801007c:	9b04      	ldr	r3, [sp, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d0e4      	beq.n	801004c <_scanf_float+0x388>
 8010082:	9905      	ldr	r1, [sp, #20]
 8010084:	230a      	movs	r3, #10
 8010086:	3101      	adds	r1, #1
 8010088:	4640      	mov	r0, r8
 801008a:	f002 f923 	bl	80122d4 <_strtol_r>
 801008e:	9b04      	ldr	r3, [sp, #16]
 8010090:	9e05      	ldr	r6, [sp, #20]
 8010092:	1ac2      	subs	r2, r0, r3
 8010094:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010098:	429e      	cmp	r6, r3
 801009a:	bf28      	it	cs
 801009c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80100a0:	4910      	ldr	r1, [pc, #64]	@ (80100e4 <_scanf_float+0x420>)
 80100a2:	4630      	mov	r0, r6
 80100a4:	f000 f8e4 	bl	8010270 <siprintf>
 80100a8:	e7d0      	b.n	801004c <_scanf_float+0x388>
 80100aa:	f011 0f04 	tst.w	r1, #4
 80100ae:	9903      	ldr	r1, [sp, #12]
 80100b0:	600a      	str	r2, [r1, #0]
 80100b2:	d1dc      	bne.n	801006e <_scanf_float+0x3aa>
 80100b4:	681d      	ldr	r5, [r3, #0]
 80100b6:	4632      	mov	r2, r6
 80100b8:	463b      	mov	r3, r7
 80100ba:	4630      	mov	r0, r6
 80100bc:	4639      	mov	r1, r7
 80100be:	f7f0 fd55 	bl	8000b6c <__aeabi_dcmpun>
 80100c2:	b128      	cbz	r0, 80100d0 <_scanf_float+0x40c>
 80100c4:	4808      	ldr	r0, [pc, #32]	@ (80100e8 <_scanf_float+0x424>)
 80100c6:	f000 f9ef 	bl	80104a8 <nanf>
 80100ca:	ed85 0a00 	vstr	s0, [r5]
 80100ce:	e7d1      	b.n	8010074 <_scanf_float+0x3b0>
 80100d0:	4630      	mov	r0, r6
 80100d2:	4639      	mov	r1, r7
 80100d4:	f7f0 fda8 	bl	8000c28 <__aeabi_d2f>
 80100d8:	6028      	str	r0, [r5, #0]
 80100da:	e7cb      	b.n	8010074 <_scanf_float+0x3b0>
 80100dc:	f04f 0900 	mov.w	r9, #0
 80100e0:	e629      	b.n	800fd36 <_scanf_float+0x72>
 80100e2:	bf00      	nop
 80100e4:	08015384 	.word	0x08015384
 80100e8:	08015725 	.word	0x08015725

080100ec <std>:
 80100ec:	2300      	movs	r3, #0
 80100ee:	b510      	push	{r4, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	e9c0 3300 	strd	r3, r3, [r0]
 80100f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100fa:	6083      	str	r3, [r0, #8]
 80100fc:	8181      	strh	r1, [r0, #12]
 80100fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010100:	81c2      	strh	r2, [r0, #14]
 8010102:	6183      	str	r3, [r0, #24]
 8010104:	4619      	mov	r1, r3
 8010106:	2208      	movs	r2, #8
 8010108:	305c      	adds	r0, #92	@ 0x5c
 801010a:	f000 f914 	bl	8010336 <memset>
 801010e:	4b0d      	ldr	r3, [pc, #52]	@ (8010144 <std+0x58>)
 8010110:	6263      	str	r3, [r4, #36]	@ 0x24
 8010112:	4b0d      	ldr	r3, [pc, #52]	@ (8010148 <std+0x5c>)
 8010114:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010116:	4b0d      	ldr	r3, [pc, #52]	@ (801014c <std+0x60>)
 8010118:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801011a:	4b0d      	ldr	r3, [pc, #52]	@ (8010150 <std+0x64>)
 801011c:	6323      	str	r3, [r4, #48]	@ 0x30
 801011e:	4b0d      	ldr	r3, [pc, #52]	@ (8010154 <std+0x68>)
 8010120:	6224      	str	r4, [r4, #32]
 8010122:	429c      	cmp	r4, r3
 8010124:	d006      	beq.n	8010134 <std+0x48>
 8010126:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801012a:	4294      	cmp	r4, r2
 801012c:	d002      	beq.n	8010134 <std+0x48>
 801012e:	33d0      	adds	r3, #208	@ 0xd0
 8010130:	429c      	cmp	r4, r3
 8010132:	d105      	bne.n	8010140 <std+0x54>
 8010134:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013c:	f000 b99a 	b.w	8010474 <__retarget_lock_init_recursive>
 8010140:	bd10      	pop	{r4, pc}
 8010142:	bf00      	nop
 8010144:	080102b1 	.word	0x080102b1
 8010148:	080102d3 	.word	0x080102d3
 801014c:	0801030b 	.word	0x0801030b
 8010150:	0801032f 	.word	0x0801032f
 8010154:	200025ec 	.word	0x200025ec

08010158 <stdio_exit_handler>:
 8010158:	4a02      	ldr	r2, [pc, #8]	@ (8010164 <stdio_exit_handler+0xc>)
 801015a:	4903      	ldr	r1, [pc, #12]	@ (8010168 <stdio_exit_handler+0x10>)
 801015c:	4803      	ldr	r0, [pc, #12]	@ (801016c <stdio_exit_handler+0x14>)
 801015e:	f000 b869 	b.w	8010234 <_fwalk_sglue>
 8010162:	bf00      	nop
 8010164:	20000124 	.word	0x20000124
 8010168:	080126a9 	.word	0x080126a9
 801016c:	200002a0 	.word	0x200002a0

08010170 <cleanup_stdio>:
 8010170:	6841      	ldr	r1, [r0, #4]
 8010172:	4b0c      	ldr	r3, [pc, #48]	@ (80101a4 <cleanup_stdio+0x34>)
 8010174:	4299      	cmp	r1, r3
 8010176:	b510      	push	{r4, lr}
 8010178:	4604      	mov	r4, r0
 801017a:	d001      	beq.n	8010180 <cleanup_stdio+0x10>
 801017c:	f002 fa94 	bl	80126a8 <_fflush_r>
 8010180:	68a1      	ldr	r1, [r4, #8]
 8010182:	4b09      	ldr	r3, [pc, #36]	@ (80101a8 <cleanup_stdio+0x38>)
 8010184:	4299      	cmp	r1, r3
 8010186:	d002      	beq.n	801018e <cleanup_stdio+0x1e>
 8010188:	4620      	mov	r0, r4
 801018a:	f002 fa8d 	bl	80126a8 <_fflush_r>
 801018e:	68e1      	ldr	r1, [r4, #12]
 8010190:	4b06      	ldr	r3, [pc, #24]	@ (80101ac <cleanup_stdio+0x3c>)
 8010192:	4299      	cmp	r1, r3
 8010194:	d004      	beq.n	80101a0 <cleanup_stdio+0x30>
 8010196:	4620      	mov	r0, r4
 8010198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801019c:	f002 ba84 	b.w	80126a8 <_fflush_r>
 80101a0:	bd10      	pop	{r4, pc}
 80101a2:	bf00      	nop
 80101a4:	200025ec 	.word	0x200025ec
 80101a8:	20002654 	.word	0x20002654
 80101ac:	200026bc 	.word	0x200026bc

080101b0 <global_stdio_init.part.0>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	4b0b      	ldr	r3, [pc, #44]	@ (80101e0 <global_stdio_init.part.0+0x30>)
 80101b4:	4c0b      	ldr	r4, [pc, #44]	@ (80101e4 <global_stdio_init.part.0+0x34>)
 80101b6:	4a0c      	ldr	r2, [pc, #48]	@ (80101e8 <global_stdio_init.part.0+0x38>)
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	4620      	mov	r0, r4
 80101bc:	2200      	movs	r2, #0
 80101be:	2104      	movs	r1, #4
 80101c0:	f7ff ff94 	bl	80100ec <std>
 80101c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80101c8:	2201      	movs	r2, #1
 80101ca:	2109      	movs	r1, #9
 80101cc:	f7ff ff8e 	bl	80100ec <std>
 80101d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80101d4:	2202      	movs	r2, #2
 80101d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101da:	2112      	movs	r1, #18
 80101dc:	f7ff bf86 	b.w	80100ec <std>
 80101e0:	20002724 	.word	0x20002724
 80101e4:	200025ec 	.word	0x200025ec
 80101e8:	08010159 	.word	0x08010159

080101ec <__sfp_lock_acquire>:
 80101ec:	4801      	ldr	r0, [pc, #4]	@ (80101f4 <__sfp_lock_acquire+0x8>)
 80101ee:	f000 b942 	b.w	8010476 <__retarget_lock_acquire_recursive>
 80101f2:	bf00      	nop
 80101f4:	2000272d 	.word	0x2000272d

080101f8 <__sfp_lock_release>:
 80101f8:	4801      	ldr	r0, [pc, #4]	@ (8010200 <__sfp_lock_release+0x8>)
 80101fa:	f000 b93d 	b.w	8010478 <__retarget_lock_release_recursive>
 80101fe:	bf00      	nop
 8010200:	2000272d 	.word	0x2000272d

08010204 <__sinit>:
 8010204:	b510      	push	{r4, lr}
 8010206:	4604      	mov	r4, r0
 8010208:	f7ff fff0 	bl	80101ec <__sfp_lock_acquire>
 801020c:	6a23      	ldr	r3, [r4, #32]
 801020e:	b11b      	cbz	r3, 8010218 <__sinit+0x14>
 8010210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010214:	f7ff bff0 	b.w	80101f8 <__sfp_lock_release>
 8010218:	4b04      	ldr	r3, [pc, #16]	@ (801022c <__sinit+0x28>)
 801021a:	6223      	str	r3, [r4, #32]
 801021c:	4b04      	ldr	r3, [pc, #16]	@ (8010230 <__sinit+0x2c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1f5      	bne.n	8010210 <__sinit+0xc>
 8010224:	f7ff ffc4 	bl	80101b0 <global_stdio_init.part.0>
 8010228:	e7f2      	b.n	8010210 <__sinit+0xc>
 801022a:	bf00      	nop
 801022c:	08010171 	.word	0x08010171
 8010230:	20002724 	.word	0x20002724

08010234 <_fwalk_sglue>:
 8010234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010238:	4607      	mov	r7, r0
 801023a:	4688      	mov	r8, r1
 801023c:	4614      	mov	r4, r2
 801023e:	2600      	movs	r6, #0
 8010240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010244:	f1b9 0901 	subs.w	r9, r9, #1
 8010248:	d505      	bpl.n	8010256 <_fwalk_sglue+0x22>
 801024a:	6824      	ldr	r4, [r4, #0]
 801024c:	2c00      	cmp	r4, #0
 801024e:	d1f7      	bne.n	8010240 <_fwalk_sglue+0xc>
 8010250:	4630      	mov	r0, r6
 8010252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010256:	89ab      	ldrh	r3, [r5, #12]
 8010258:	2b01      	cmp	r3, #1
 801025a:	d907      	bls.n	801026c <_fwalk_sglue+0x38>
 801025c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010260:	3301      	adds	r3, #1
 8010262:	d003      	beq.n	801026c <_fwalk_sglue+0x38>
 8010264:	4629      	mov	r1, r5
 8010266:	4638      	mov	r0, r7
 8010268:	47c0      	blx	r8
 801026a:	4306      	orrs	r6, r0
 801026c:	3568      	adds	r5, #104	@ 0x68
 801026e:	e7e9      	b.n	8010244 <_fwalk_sglue+0x10>

08010270 <siprintf>:
 8010270:	b40e      	push	{r1, r2, r3}
 8010272:	b500      	push	{lr}
 8010274:	b09c      	sub	sp, #112	@ 0x70
 8010276:	ab1d      	add	r3, sp, #116	@ 0x74
 8010278:	9002      	str	r0, [sp, #8]
 801027a:	9006      	str	r0, [sp, #24]
 801027c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010280:	4809      	ldr	r0, [pc, #36]	@ (80102a8 <siprintf+0x38>)
 8010282:	9107      	str	r1, [sp, #28]
 8010284:	9104      	str	r1, [sp, #16]
 8010286:	4909      	ldr	r1, [pc, #36]	@ (80102ac <siprintf+0x3c>)
 8010288:	f853 2b04 	ldr.w	r2, [r3], #4
 801028c:	9105      	str	r1, [sp, #20]
 801028e:	6800      	ldr	r0, [r0, #0]
 8010290:	9301      	str	r3, [sp, #4]
 8010292:	a902      	add	r1, sp, #8
 8010294:	f002 f888 	bl	80123a8 <_svfiprintf_r>
 8010298:	9b02      	ldr	r3, [sp, #8]
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	b01c      	add	sp, #112	@ 0x70
 80102a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102a4:	b003      	add	sp, #12
 80102a6:	4770      	bx	lr
 80102a8:	2000029c 	.word	0x2000029c
 80102ac:	ffff0208 	.word	0xffff0208

080102b0 <__sread>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	f000 f87e 	bl	80103b8 <_read_r>
 80102bc:	2800      	cmp	r0, #0
 80102be:	bfab      	itete	ge
 80102c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80102c2:	89a3      	ldrhlt	r3, [r4, #12]
 80102c4:	181b      	addge	r3, r3, r0
 80102c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80102ca:	bfac      	ite	ge
 80102cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80102ce:	81a3      	strhlt	r3, [r4, #12]
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <__swrite>:
 80102d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d6:	461f      	mov	r7, r3
 80102d8:	898b      	ldrh	r3, [r1, #12]
 80102da:	05db      	lsls	r3, r3, #23
 80102dc:	4605      	mov	r5, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	4616      	mov	r6, r2
 80102e2:	d505      	bpl.n	80102f0 <__swrite+0x1e>
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	2302      	movs	r3, #2
 80102ea:	2200      	movs	r2, #0
 80102ec:	f000 f852 	bl	8010394 <_lseek_r>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	4632      	mov	r2, r6
 80102fe:	463b      	mov	r3, r7
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010306:	f000 b879 	b.w	80103fc <_write_r>

0801030a <__sseek>:
 801030a:	b510      	push	{r4, lr}
 801030c:	460c      	mov	r4, r1
 801030e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010312:	f000 f83f 	bl	8010394 <_lseek_r>
 8010316:	1c43      	adds	r3, r0, #1
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	bf15      	itete	ne
 801031c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801031e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010322:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010326:	81a3      	strheq	r3, [r4, #12]
 8010328:	bf18      	it	ne
 801032a:	81a3      	strhne	r3, [r4, #12]
 801032c:	bd10      	pop	{r4, pc}

0801032e <__sclose>:
 801032e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010332:	f000 b81f 	b.w	8010374 <_close_r>

08010336 <memset>:
 8010336:	4402      	add	r2, r0
 8010338:	4603      	mov	r3, r0
 801033a:	4293      	cmp	r3, r2
 801033c:	d100      	bne.n	8010340 <memset+0xa>
 801033e:	4770      	bx	lr
 8010340:	f803 1b01 	strb.w	r1, [r3], #1
 8010344:	e7f9      	b.n	801033a <memset+0x4>

08010346 <strncmp>:
 8010346:	b510      	push	{r4, lr}
 8010348:	b16a      	cbz	r2, 8010366 <strncmp+0x20>
 801034a:	3901      	subs	r1, #1
 801034c:	1884      	adds	r4, r0, r2
 801034e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010352:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010356:	429a      	cmp	r2, r3
 8010358:	d103      	bne.n	8010362 <strncmp+0x1c>
 801035a:	42a0      	cmp	r0, r4
 801035c:	d001      	beq.n	8010362 <strncmp+0x1c>
 801035e:	2a00      	cmp	r2, #0
 8010360:	d1f5      	bne.n	801034e <strncmp+0x8>
 8010362:	1ad0      	subs	r0, r2, r3
 8010364:	bd10      	pop	{r4, pc}
 8010366:	4610      	mov	r0, r2
 8010368:	e7fc      	b.n	8010364 <strncmp+0x1e>
	...

0801036c <_localeconv_r>:
 801036c:	4800      	ldr	r0, [pc, #0]	@ (8010370 <_localeconv_r+0x4>)
 801036e:	4770      	bx	lr
 8010370:	20000220 	.word	0x20000220

08010374 <_close_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d06      	ldr	r5, [pc, #24]	@ (8010390 <_close_r+0x1c>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	602b      	str	r3, [r5, #0]
 8010380:	f7f3 ffaa 	bl	80042d8 <_close>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_close_r+0x1a>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_close_r+0x1a>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	20002728 	.word	0x20002728

08010394 <_lseek_r>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	4d07      	ldr	r5, [pc, #28]	@ (80103b4 <_lseek_r+0x20>)
 8010398:	4604      	mov	r4, r0
 801039a:	4608      	mov	r0, r1
 801039c:	4611      	mov	r1, r2
 801039e:	2200      	movs	r2, #0
 80103a0:	602a      	str	r2, [r5, #0]
 80103a2:	461a      	mov	r2, r3
 80103a4:	f7f3 ffbf 	bl	8004326 <_lseek>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_lseek_r+0x1e>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_lseek_r+0x1e>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	20002728 	.word	0x20002728

080103b8 <_read_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4d07      	ldr	r5, [pc, #28]	@ (80103d8 <_read_r+0x20>)
 80103bc:	4604      	mov	r4, r0
 80103be:	4608      	mov	r0, r1
 80103c0:	4611      	mov	r1, r2
 80103c2:	2200      	movs	r2, #0
 80103c4:	602a      	str	r2, [r5, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	f7f3 ff4d 	bl	8004266 <_read>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d102      	bne.n	80103d6 <_read_r+0x1e>
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	b103      	cbz	r3, 80103d6 <_read_r+0x1e>
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	20002728 	.word	0x20002728

080103dc <_sbrk_r>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	4d06      	ldr	r5, [pc, #24]	@ (80103f8 <_sbrk_r+0x1c>)
 80103e0:	2300      	movs	r3, #0
 80103e2:	4604      	mov	r4, r0
 80103e4:	4608      	mov	r0, r1
 80103e6:	602b      	str	r3, [r5, #0]
 80103e8:	f7f3 ffaa 	bl	8004340 <_sbrk>
 80103ec:	1c43      	adds	r3, r0, #1
 80103ee:	d102      	bne.n	80103f6 <_sbrk_r+0x1a>
 80103f0:	682b      	ldr	r3, [r5, #0]
 80103f2:	b103      	cbz	r3, 80103f6 <_sbrk_r+0x1a>
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	bd38      	pop	{r3, r4, r5, pc}
 80103f8:	20002728 	.word	0x20002728

080103fc <_write_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d07      	ldr	r5, [pc, #28]	@ (801041c <_write_r+0x20>)
 8010400:	4604      	mov	r4, r0
 8010402:	4608      	mov	r0, r1
 8010404:	4611      	mov	r1, r2
 8010406:	2200      	movs	r2, #0
 8010408:	602a      	str	r2, [r5, #0]
 801040a:	461a      	mov	r2, r3
 801040c:	f7f3 ff48 	bl	80042a0 <_write>
 8010410:	1c43      	adds	r3, r0, #1
 8010412:	d102      	bne.n	801041a <_write_r+0x1e>
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	b103      	cbz	r3, 801041a <_write_r+0x1e>
 8010418:	6023      	str	r3, [r4, #0]
 801041a:	bd38      	pop	{r3, r4, r5, pc}
 801041c:	20002728 	.word	0x20002728

08010420 <__errno>:
 8010420:	4b01      	ldr	r3, [pc, #4]	@ (8010428 <__errno+0x8>)
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	2000029c 	.word	0x2000029c

0801042c <__libc_init_array>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	4d0d      	ldr	r5, [pc, #52]	@ (8010464 <__libc_init_array+0x38>)
 8010430:	4c0d      	ldr	r4, [pc, #52]	@ (8010468 <__libc_init_array+0x3c>)
 8010432:	1b64      	subs	r4, r4, r5
 8010434:	10a4      	asrs	r4, r4, #2
 8010436:	2600      	movs	r6, #0
 8010438:	42a6      	cmp	r6, r4
 801043a:	d109      	bne.n	8010450 <__libc_init_array+0x24>
 801043c:	4d0b      	ldr	r5, [pc, #44]	@ (801046c <__libc_init_array+0x40>)
 801043e:	4c0c      	ldr	r4, [pc, #48]	@ (8010470 <__libc_init_array+0x44>)
 8010440:	f004 fe7e 	bl	8015140 <_init>
 8010444:	1b64      	subs	r4, r4, r5
 8010446:	10a4      	asrs	r4, r4, #2
 8010448:	2600      	movs	r6, #0
 801044a:	42a6      	cmp	r6, r4
 801044c:	d105      	bne.n	801045a <__libc_init_array+0x2e>
 801044e:	bd70      	pop	{r4, r5, r6, pc}
 8010450:	f855 3b04 	ldr.w	r3, [r5], #4
 8010454:	4798      	blx	r3
 8010456:	3601      	adds	r6, #1
 8010458:	e7ee      	b.n	8010438 <__libc_init_array+0xc>
 801045a:	f855 3b04 	ldr.w	r3, [r5], #4
 801045e:	4798      	blx	r3
 8010460:	3601      	adds	r6, #1
 8010462:	e7f2      	b.n	801044a <__libc_init_array+0x1e>
 8010464:	080159a8 	.word	0x080159a8
 8010468:	080159a8 	.word	0x080159a8
 801046c:	080159a8 	.word	0x080159a8
 8010470:	080159ac 	.word	0x080159ac

08010474 <__retarget_lock_init_recursive>:
 8010474:	4770      	bx	lr

08010476 <__retarget_lock_acquire_recursive>:
 8010476:	4770      	bx	lr

08010478 <__retarget_lock_release_recursive>:
 8010478:	4770      	bx	lr

0801047a <memcpy>:
 801047a:	440a      	add	r2, r1
 801047c:	4291      	cmp	r1, r2
 801047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010482:	d100      	bne.n	8010486 <memcpy+0xc>
 8010484:	4770      	bx	lr
 8010486:	b510      	push	{r4, lr}
 8010488:	f811 4b01 	ldrb.w	r4, [r1], #1
 801048c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010490:	4291      	cmp	r1, r2
 8010492:	d1f9      	bne.n	8010488 <memcpy+0xe>
 8010494:	bd10      	pop	{r4, pc}
	...

08010498 <nan>:
 8010498:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80104a0 <nan+0x8>
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	00000000 	.word	0x00000000
 80104a4:	7ff80000 	.word	0x7ff80000

080104a8 <nanf>:
 80104a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80104b0 <nanf+0x8>
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	7fc00000 	.word	0x7fc00000

080104b4 <quorem>:
 80104b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	6903      	ldr	r3, [r0, #16]
 80104ba:	690c      	ldr	r4, [r1, #16]
 80104bc:	42a3      	cmp	r3, r4
 80104be:	4607      	mov	r7, r0
 80104c0:	db7e      	blt.n	80105c0 <quorem+0x10c>
 80104c2:	3c01      	subs	r4, #1
 80104c4:	f101 0814 	add.w	r8, r1, #20
 80104c8:	00a3      	lsls	r3, r4, #2
 80104ca:	f100 0514 	add.w	r5, r0, #20
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104de:	3301      	adds	r3, #1
 80104e0:	429a      	cmp	r2, r3
 80104e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80104ea:	d32e      	bcc.n	801054a <quorem+0x96>
 80104ec:	f04f 0a00 	mov.w	sl, #0
 80104f0:	46c4      	mov	ip, r8
 80104f2:	46ae      	mov	lr, r5
 80104f4:	46d3      	mov	fp, sl
 80104f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104fa:	b298      	uxth	r0, r3
 80104fc:	fb06 a000 	mla	r0, r6, r0, sl
 8010500:	0c02      	lsrs	r2, r0, #16
 8010502:	0c1b      	lsrs	r3, r3, #16
 8010504:	fb06 2303 	mla	r3, r6, r3, r2
 8010508:	f8de 2000 	ldr.w	r2, [lr]
 801050c:	b280      	uxth	r0, r0
 801050e:	b292      	uxth	r2, r2
 8010510:	1a12      	subs	r2, r2, r0
 8010512:	445a      	add	r2, fp
 8010514:	f8de 0000 	ldr.w	r0, [lr]
 8010518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801051c:	b29b      	uxth	r3, r3
 801051e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010522:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010526:	b292      	uxth	r2, r2
 8010528:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801052c:	45e1      	cmp	r9, ip
 801052e:	f84e 2b04 	str.w	r2, [lr], #4
 8010532:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010536:	d2de      	bcs.n	80104f6 <quorem+0x42>
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	58eb      	ldr	r3, [r5, r3]
 801053c:	b92b      	cbnz	r3, 801054a <quorem+0x96>
 801053e:	9b01      	ldr	r3, [sp, #4]
 8010540:	3b04      	subs	r3, #4
 8010542:	429d      	cmp	r5, r3
 8010544:	461a      	mov	r2, r3
 8010546:	d32f      	bcc.n	80105a8 <quorem+0xf4>
 8010548:	613c      	str	r4, [r7, #16]
 801054a:	4638      	mov	r0, r7
 801054c:	f001 fc5a 	bl	8011e04 <__mcmp>
 8010550:	2800      	cmp	r0, #0
 8010552:	db25      	blt.n	80105a0 <quorem+0xec>
 8010554:	4629      	mov	r1, r5
 8010556:	2000      	movs	r0, #0
 8010558:	f858 2b04 	ldr.w	r2, [r8], #4
 801055c:	f8d1 c000 	ldr.w	ip, [r1]
 8010560:	fa1f fe82 	uxth.w	lr, r2
 8010564:	fa1f f38c 	uxth.w	r3, ip
 8010568:	eba3 030e 	sub.w	r3, r3, lr
 801056c:	4403      	add	r3, r0
 801056e:	0c12      	lsrs	r2, r2, #16
 8010570:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010574:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010578:	b29b      	uxth	r3, r3
 801057a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801057e:	45c1      	cmp	r9, r8
 8010580:	f841 3b04 	str.w	r3, [r1], #4
 8010584:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010588:	d2e6      	bcs.n	8010558 <quorem+0xa4>
 801058a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801058e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010592:	b922      	cbnz	r2, 801059e <quorem+0xea>
 8010594:	3b04      	subs	r3, #4
 8010596:	429d      	cmp	r5, r3
 8010598:	461a      	mov	r2, r3
 801059a:	d30b      	bcc.n	80105b4 <quorem+0x100>
 801059c:	613c      	str	r4, [r7, #16]
 801059e:	3601      	adds	r6, #1
 80105a0:	4630      	mov	r0, r6
 80105a2:	b003      	add	sp, #12
 80105a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a8:	6812      	ldr	r2, [r2, #0]
 80105aa:	3b04      	subs	r3, #4
 80105ac:	2a00      	cmp	r2, #0
 80105ae:	d1cb      	bne.n	8010548 <quorem+0x94>
 80105b0:	3c01      	subs	r4, #1
 80105b2:	e7c6      	b.n	8010542 <quorem+0x8e>
 80105b4:	6812      	ldr	r2, [r2, #0]
 80105b6:	3b04      	subs	r3, #4
 80105b8:	2a00      	cmp	r2, #0
 80105ba:	d1ef      	bne.n	801059c <quorem+0xe8>
 80105bc:	3c01      	subs	r4, #1
 80105be:	e7ea      	b.n	8010596 <quorem+0xe2>
 80105c0:	2000      	movs	r0, #0
 80105c2:	e7ee      	b.n	80105a2 <quorem+0xee>
 80105c4:	0000      	movs	r0, r0
	...

080105c8 <_dtoa_r>:
 80105c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105cc:	69c7      	ldr	r7, [r0, #28]
 80105ce:	b099      	sub	sp, #100	@ 0x64
 80105d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80105d4:	ec55 4b10 	vmov	r4, r5, d0
 80105d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80105da:	9109      	str	r1, [sp, #36]	@ 0x24
 80105dc:	4683      	mov	fp, r0
 80105de:	920e      	str	r2, [sp, #56]	@ 0x38
 80105e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80105e2:	b97f      	cbnz	r7, 8010604 <_dtoa_r+0x3c>
 80105e4:	2010      	movs	r0, #16
 80105e6:	f7fe f84b 	bl	800e680 <malloc>
 80105ea:	4602      	mov	r2, r0
 80105ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80105f0:	b920      	cbnz	r0, 80105fc <_dtoa_r+0x34>
 80105f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010890 <_dtoa_r+0x2c8>)
 80105f4:	21ef      	movs	r1, #239	@ 0xef
 80105f6:	48a7      	ldr	r0, [pc, #668]	@ (8010894 <_dtoa_r+0x2cc>)
 80105f8:	f002 f898 	bl	801272c <__assert_func>
 80105fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010600:	6007      	str	r7, [r0, #0]
 8010602:	60c7      	str	r7, [r0, #12]
 8010604:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010608:	6819      	ldr	r1, [r3, #0]
 801060a:	b159      	cbz	r1, 8010624 <_dtoa_r+0x5c>
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	604a      	str	r2, [r1, #4]
 8010610:	2301      	movs	r3, #1
 8010612:	4093      	lsls	r3, r2
 8010614:	608b      	str	r3, [r1, #8]
 8010616:	4658      	mov	r0, fp
 8010618:	f001 f970 	bl	80118fc <_Bfree>
 801061c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	1e2b      	subs	r3, r5, #0
 8010626:	bfb9      	ittee	lt
 8010628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801062c:	9303      	strlt	r3, [sp, #12]
 801062e:	2300      	movge	r3, #0
 8010630:	6033      	strge	r3, [r6, #0]
 8010632:	9f03      	ldr	r7, [sp, #12]
 8010634:	4b98      	ldr	r3, [pc, #608]	@ (8010898 <_dtoa_r+0x2d0>)
 8010636:	bfbc      	itt	lt
 8010638:	2201      	movlt	r2, #1
 801063a:	6032      	strlt	r2, [r6, #0]
 801063c:	43bb      	bics	r3, r7
 801063e:	d112      	bne.n	8010666 <_dtoa_r+0x9e>
 8010640:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801064c:	4323      	orrs	r3, r4
 801064e:	f000 854d 	beq.w	80110ec <_dtoa_r+0xb24>
 8010652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010654:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80108ac <_dtoa_r+0x2e4>
 8010658:	2b00      	cmp	r3, #0
 801065a:	f000 854f 	beq.w	80110fc <_dtoa_r+0xb34>
 801065e:	f10a 0303 	add.w	r3, sl, #3
 8010662:	f000 bd49 	b.w	80110f8 <_dtoa_r+0xb30>
 8010666:	ed9d 7b02 	vldr	d7, [sp, #8]
 801066a:	2200      	movs	r2, #0
 801066c:	ec51 0b17 	vmov	r0, r1, d7
 8010670:	2300      	movs	r3, #0
 8010672:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010676:	f7f0 fa47 	bl	8000b08 <__aeabi_dcmpeq>
 801067a:	4680      	mov	r8, r0
 801067c:	b158      	cbz	r0, 8010696 <_dtoa_r+0xce>
 801067e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010680:	2301      	movs	r3, #1
 8010682:	6013      	str	r3, [r2, #0]
 8010684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010686:	b113      	cbz	r3, 801068e <_dtoa_r+0xc6>
 8010688:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801068a:	4b84      	ldr	r3, [pc, #528]	@ (801089c <_dtoa_r+0x2d4>)
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80108b0 <_dtoa_r+0x2e8>
 8010692:	f000 bd33 	b.w	80110fc <_dtoa_r+0xb34>
 8010696:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801069a:	aa16      	add	r2, sp, #88	@ 0x58
 801069c:	a917      	add	r1, sp, #92	@ 0x5c
 801069e:	4658      	mov	r0, fp
 80106a0:	f001 fcd0 	bl	8012044 <__d2b>
 80106a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80106a8:	4681      	mov	r9, r0
 80106aa:	2e00      	cmp	r6, #0
 80106ac:	d077      	beq.n	801079e <_dtoa_r+0x1d6>
 80106ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80106b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80106c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80106c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80106c8:	4619      	mov	r1, r3
 80106ca:	2200      	movs	r2, #0
 80106cc:	4b74      	ldr	r3, [pc, #464]	@ (80108a0 <_dtoa_r+0x2d8>)
 80106ce:	f7ef fdfb 	bl	80002c8 <__aeabi_dsub>
 80106d2:	a369      	add	r3, pc, #420	@ (adr r3, 8010878 <_dtoa_r+0x2b0>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef ffae 	bl	8000638 <__aeabi_dmul>
 80106dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010880 <_dtoa_r+0x2b8>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fdf3 	bl	80002cc <__adddf3>
 80106e6:	4604      	mov	r4, r0
 80106e8:	4630      	mov	r0, r6
 80106ea:	460d      	mov	r5, r1
 80106ec:	f7ef ff3a 	bl	8000564 <__aeabi_i2d>
 80106f0:	a365      	add	r3, pc, #404	@ (adr r3, 8010888 <_dtoa_r+0x2c0>)
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7ef ff9f 	bl	8000638 <__aeabi_dmul>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	4620      	mov	r0, r4
 8010700:	4629      	mov	r1, r5
 8010702:	f7ef fde3 	bl	80002cc <__adddf3>
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	f7f0 fa45 	bl	8000b98 <__aeabi_d2iz>
 801070e:	2200      	movs	r2, #0
 8010710:	4607      	mov	r7, r0
 8010712:	2300      	movs	r3, #0
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7f0 fa00 	bl	8000b1c <__aeabi_dcmplt>
 801071c:	b140      	cbz	r0, 8010730 <_dtoa_r+0x168>
 801071e:	4638      	mov	r0, r7
 8010720:	f7ef ff20 	bl	8000564 <__aeabi_i2d>
 8010724:	4622      	mov	r2, r4
 8010726:	462b      	mov	r3, r5
 8010728:	f7f0 f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 801072c:	b900      	cbnz	r0, 8010730 <_dtoa_r+0x168>
 801072e:	3f01      	subs	r7, #1
 8010730:	2f16      	cmp	r7, #22
 8010732:	d851      	bhi.n	80107d8 <_dtoa_r+0x210>
 8010734:	4b5b      	ldr	r3, [pc, #364]	@ (80108a4 <_dtoa_r+0x2dc>)
 8010736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010742:	f7f0 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8010746:	2800      	cmp	r0, #0
 8010748:	d048      	beq.n	80107dc <_dtoa_r+0x214>
 801074a:	3f01      	subs	r7, #1
 801074c:	2300      	movs	r3, #0
 801074e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010752:	1b9b      	subs	r3, r3, r6
 8010754:	1e5a      	subs	r2, r3, #1
 8010756:	bf44      	itt	mi
 8010758:	f1c3 0801 	rsbmi	r8, r3, #1
 801075c:	2300      	movmi	r3, #0
 801075e:	9208      	str	r2, [sp, #32]
 8010760:	bf54      	ite	pl
 8010762:	f04f 0800 	movpl.w	r8, #0
 8010766:	9308      	strmi	r3, [sp, #32]
 8010768:	2f00      	cmp	r7, #0
 801076a:	db39      	blt.n	80107e0 <_dtoa_r+0x218>
 801076c:	9b08      	ldr	r3, [sp, #32]
 801076e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010770:	443b      	add	r3, r7
 8010772:	9308      	str	r3, [sp, #32]
 8010774:	2300      	movs	r3, #0
 8010776:	930a      	str	r3, [sp, #40]	@ 0x28
 8010778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801077a:	2b09      	cmp	r3, #9
 801077c:	d864      	bhi.n	8010848 <_dtoa_r+0x280>
 801077e:	2b05      	cmp	r3, #5
 8010780:	bfc4      	itt	gt
 8010782:	3b04      	subgt	r3, #4
 8010784:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010788:	f1a3 0302 	sub.w	r3, r3, #2
 801078c:	bfcc      	ite	gt
 801078e:	2400      	movgt	r4, #0
 8010790:	2401      	movle	r4, #1
 8010792:	2b03      	cmp	r3, #3
 8010794:	d863      	bhi.n	801085e <_dtoa_r+0x296>
 8010796:	e8df f003 	tbb	[pc, r3]
 801079a:	372a      	.short	0x372a
 801079c:	5535      	.short	0x5535
 801079e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80107a2:	441e      	add	r6, r3
 80107a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80107a8:	2b20      	cmp	r3, #32
 80107aa:	bfc1      	itttt	gt
 80107ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80107b0:	409f      	lslgt	r7, r3
 80107b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80107b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80107ba:	bfd6      	itet	le
 80107bc:	f1c3 0320 	rsble	r3, r3, #32
 80107c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80107c4:	fa04 f003 	lslle.w	r0, r4, r3
 80107c8:	f7ef febc 	bl	8000544 <__aeabi_ui2d>
 80107cc:	2201      	movs	r2, #1
 80107ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80107d2:	3e01      	subs	r6, #1
 80107d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80107d6:	e777      	b.n	80106c8 <_dtoa_r+0x100>
 80107d8:	2301      	movs	r3, #1
 80107da:	e7b8      	b.n	801074e <_dtoa_r+0x186>
 80107dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80107de:	e7b7      	b.n	8010750 <_dtoa_r+0x188>
 80107e0:	427b      	negs	r3, r7
 80107e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80107e4:	2300      	movs	r3, #0
 80107e6:	eba8 0807 	sub.w	r8, r8, r7
 80107ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80107ec:	e7c4      	b.n	8010778 <_dtoa_r+0x1b0>
 80107ee:	2300      	movs	r3, #0
 80107f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	dc35      	bgt.n	8010864 <_dtoa_r+0x29c>
 80107f8:	2301      	movs	r3, #1
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	9307      	str	r3, [sp, #28]
 80107fe:	461a      	mov	r2, r3
 8010800:	920e      	str	r2, [sp, #56]	@ 0x38
 8010802:	e00b      	b.n	801081c <_dtoa_r+0x254>
 8010804:	2301      	movs	r3, #1
 8010806:	e7f3      	b.n	80107f0 <_dtoa_r+0x228>
 8010808:	2300      	movs	r3, #0
 801080a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801080c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801080e:	18fb      	adds	r3, r7, r3
 8010810:	9300      	str	r3, [sp, #0]
 8010812:	3301      	adds	r3, #1
 8010814:	2b01      	cmp	r3, #1
 8010816:	9307      	str	r3, [sp, #28]
 8010818:	bfb8      	it	lt
 801081a:	2301      	movlt	r3, #1
 801081c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010820:	2100      	movs	r1, #0
 8010822:	2204      	movs	r2, #4
 8010824:	f102 0514 	add.w	r5, r2, #20
 8010828:	429d      	cmp	r5, r3
 801082a:	d91f      	bls.n	801086c <_dtoa_r+0x2a4>
 801082c:	6041      	str	r1, [r0, #4]
 801082e:	4658      	mov	r0, fp
 8010830:	f001 f824 	bl	801187c <_Balloc>
 8010834:	4682      	mov	sl, r0
 8010836:	2800      	cmp	r0, #0
 8010838:	d13c      	bne.n	80108b4 <_dtoa_r+0x2ec>
 801083a:	4b1b      	ldr	r3, [pc, #108]	@ (80108a8 <_dtoa_r+0x2e0>)
 801083c:	4602      	mov	r2, r0
 801083e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010842:	e6d8      	b.n	80105f6 <_dtoa_r+0x2e>
 8010844:	2301      	movs	r3, #1
 8010846:	e7e0      	b.n	801080a <_dtoa_r+0x242>
 8010848:	2401      	movs	r4, #1
 801084a:	2300      	movs	r3, #0
 801084c:	9309      	str	r3, [sp, #36]	@ 0x24
 801084e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010850:	f04f 33ff 	mov.w	r3, #4294967295
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	9307      	str	r3, [sp, #28]
 8010858:	2200      	movs	r2, #0
 801085a:	2312      	movs	r3, #18
 801085c:	e7d0      	b.n	8010800 <_dtoa_r+0x238>
 801085e:	2301      	movs	r3, #1
 8010860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010862:	e7f5      	b.n	8010850 <_dtoa_r+0x288>
 8010864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	9307      	str	r3, [sp, #28]
 801086a:	e7d7      	b.n	801081c <_dtoa_r+0x254>
 801086c:	3101      	adds	r1, #1
 801086e:	0052      	lsls	r2, r2, #1
 8010870:	e7d8      	b.n	8010824 <_dtoa_r+0x25c>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
 8010878:	636f4361 	.word	0x636f4361
 801087c:	3fd287a7 	.word	0x3fd287a7
 8010880:	8b60c8b3 	.word	0x8b60c8b3
 8010884:	3fc68a28 	.word	0x3fc68a28
 8010888:	509f79fb 	.word	0x509f79fb
 801088c:	3fd34413 	.word	0x3fd34413
 8010890:	0801539e 	.word	0x0801539e
 8010894:	080153b5 	.word	0x080153b5
 8010898:	7ff00000 	.word	0x7ff00000
 801089c:	08015361 	.word	0x08015361
 80108a0:	3ff80000 	.word	0x3ff80000
 80108a4:	08015510 	.word	0x08015510
 80108a8:	0801540d 	.word	0x0801540d
 80108ac:	0801539a 	.word	0x0801539a
 80108b0:	08015360 	.word	0x08015360
 80108b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80108b8:	6018      	str	r0, [r3, #0]
 80108ba:	9b07      	ldr	r3, [sp, #28]
 80108bc:	2b0e      	cmp	r3, #14
 80108be:	f200 80a4 	bhi.w	8010a0a <_dtoa_r+0x442>
 80108c2:	2c00      	cmp	r4, #0
 80108c4:	f000 80a1 	beq.w	8010a0a <_dtoa_r+0x442>
 80108c8:	2f00      	cmp	r7, #0
 80108ca:	dd33      	ble.n	8010934 <_dtoa_r+0x36c>
 80108cc:	4bad      	ldr	r3, [pc, #692]	@ (8010b84 <_dtoa_r+0x5bc>)
 80108ce:	f007 020f 	and.w	r2, r7, #15
 80108d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108d6:	ed93 7b00 	vldr	d7, [r3]
 80108da:	05f8      	lsls	r0, r7, #23
 80108dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80108e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80108e4:	d516      	bpl.n	8010914 <_dtoa_r+0x34c>
 80108e6:	4ba8      	ldr	r3, [pc, #672]	@ (8010b88 <_dtoa_r+0x5c0>)
 80108e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80108ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108f0:	f7ef ffcc 	bl	800088c <__aeabi_ddiv>
 80108f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108f8:	f004 040f 	and.w	r4, r4, #15
 80108fc:	2603      	movs	r6, #3
 80108fe:	4da2      	ldr	r5, [pc, #648]	@ (8010b88 <_dtoa_r+0x5c0>)
 8010900:	b954      	cbnz	r4, 8010918 <_dtoa_r+0x350>
 8010902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801090a:	f7ef ffbf 	bl	800088c <__aeabi_ddiv>
 801090e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010912:	e028      	b.n	8010966 <_dtoa_r+0x39e>
 8010914:	2602      	movs	r6, #2
 8010916:	e7f2      	b.n	80108fe <_dtoa_r+0x336>
 8010918:	07e1      	lsls	r1, r4, #31
 801091a:	d508      	bpl.n	801092e <_dtoa_r+0x366>
 801091c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010924:	f7ef fe88 	bl	8000638 <__aeabi_dmul>
 8010928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801092c:	3601      	adds	r6, #1
 801092e:	1064      	asrs	r4, r4, #1
 8010930:	3508      	adds	r5, #8
 8010932:	e7e5      	b.n	8010900 <_dtoa_r+0x338>
 8010934:	f000 80d2 	beq.w	8010adc <_dtoa_r+0x514>
 8010938:	427c      	negs	r4, r7
 801093a:	4b92      	ldr	r3, [pc, #584]	@ (8010b84 <_dtoa_r+0x5bc>)
 801093c:	4d92      	ldr	r5, [pc, #584]	@ (8010b88 <_dtoa_r+0x5c0>)
 801093e:	f004 020f 	and.w	r2, r4, #15
 8010942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801094e:	f7ef fe73 	bl	8000638 <__aeabi_dmul>
 8010952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010956:	1124      	asrs	r4, r4, #4
 8010958:	2300      	movs	r3, #0
 801095a:	2602      	movs	r6, #2
 801095c:	2c00      	cmp	r4, #0
 801095e:	f040 80b2 	bne.w	8010ac6 <_dtoa_r+0x4fe>
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1d3      	bne.n	801090e <_dtoa_r+0x346>
 8010966:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010968:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 80b7 	beq.w	8010ae0 <_dtoa_r+0x518>
 8010972:	4b86      	ldr	r3, [pc, #536]	@ (8010b8c <_dtoa_r+0x5c4>)
 8010974:	2200      	movs	r2, #0
 8010976:	4620      	mov	r0, r4
 8010978:	4629      	mov	r1, r5
 801097a:	f7f0 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801097e:	2800      	cmp	r0, #0
 8010980:	f000 80ae 	beq.w	8010ae0 <_dtoa_r+0x518>
 8010984:	9b07      	ldr	r3, [sp, #28]
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 80aa 	beq.w	8010ae0 <_dtoa_r+0x518>
 801098c:	9b00      	ldr	r3, [sp, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	dd37      	ble.n	8010a02 <_dtoa_r+0x43a>
 8010992:	1e7b      	subs	r3, r7, #1
 8010994:	9304      	str	r3, [sp, #16]
 8010996:	4620      	mov	r0, r4
 8010998:	4b7d      	ldr	r3, [pc, #500]	@ (8010b90 <_dtoa_r+0x5c8>)
 801099a:	2200      	movs	r2, #0
 801099c:	4629      	mov	r1, r5
 801099e:	f7ef fe4b 	bl	8000638 <__aeabi_dmul>
 80109a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109a6:	9c00      	ldr	r4, [sp, #0]
 80109a8:	3601      	adds	r6, #1
 80109aa:	4630      	mov	r0, r6
 80109ac:	f7ef fdda 	bl	8000564 <__aeabi_i2d>
 80109b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b4:	f7ef fe40 	bl	8000638 <__aeabi_dmul>
 80109b8:	4b76      	ldr	r3, [pc, #472]	@ (8010b94 <_dtoa_r+0x5cc>)
 80109ba:	2200      	movs	r2, #0
 80109bc:	f7ef fc86 	bl	80002cc <__adddf3>
 80109c0:	4605      	mov	r5, r0
 80109c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80109c6:	2c00      	cmp	r4, #0
 80109c8:	f040 808d 	bne.w	8010ae6 <_dtoa_r+0x51e>
 80109cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109d0:	4b71      	ldr	r3, [pc, #452]	@ (8010b98 <_dtoa_r+0x5d0>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	f7ef fc78 	bl	80002c8 <__aeabi_dsub>
 80109d8:	4602      	mov	r2, r0
 80109da:	460b      	mov	r3, r1
 80109dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109e0:	462a      	mov	r2, r5
 80109e2:	4633      	mov	r3, r6
 80109e4:	f7f0 f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	f040 828b 	bne.w	8010f04 <_dtoa_r+0x93c>
 80109ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109f2:	462a      	mov	r2, r5
 80109f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80109f8:	f7f0 f890 	bl	8000b1c <__aeabi_dcmplt>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	f040 8128 	bne.w	8010c52 <_dtoa_r+0x68a>
 8010a02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010a06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010a0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f2c0 815a 	blt.w	8010cc6 <_dtoa_r+0x6fe>
 8010a12:	2f0e      	cmp	r7, #14
 8010a14:	f300 8157 	bgt.w	8010cc6 <_dtoa_r+0x6fe>
 8010a18:	4b5a      	ldr	r3, [pc, #360]	@ (8010b84 <_dtoa_r+0x5bc>)
 8010a1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010a1e:	ed93 7b00 	vldr	d7, [r3]
 8010a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	ed8d 7b00 	vstr	d7, [sp]
 8010a2a:	da03      	bge.n	8010a34 <_dtoa_r+0x46c>
 8010a2c:	9b07      	ldr	r3, [sp, #28]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f340 8101 	ble.w	8010c36 <_dtoa_r+0x66e>
 8010a34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a38:	4656      	mov	r6, sl
 8010a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4629      	mov	r1, r5
 8010a42:	f7ef ff23 	bl	800088c <__aeabi_ddiv>
 8010a46:	f7f0 f8a7 	bl	8000b98 <__aeabi_d2iz>
 8010a4a:	4680      	mov	r8, r0
 8010a4c:	f7ef fd8a 	bl	8000564 <__aeabi_i2d>
 8010a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a54:	f7ef fdf0 	bl	8000638 <__aeabi_dmul>
 8010a58:	4602      	mov	r2, r0
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	4629      	mov	r1, r5
 8010a60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010a64:	f7ef fc30 	bl	80002c8 <__aeabi_dsub>
 8010a68:	f806 4b01 	strb.w	r4, [r6], #1
 8010a6c:	9d07      	ldr	r5, [sp, #28]
 8010a6e:	eba6 040a 	sub.w	r4, r6, sl
 8010a72:	42a5      	cmp	r5, r4
 8010a74:	4602      	mov	r2, r0
 8010a76:	460b      	mov	r3, r1
 8010a78:	f040 8117 	bne.w	8010caa <_dtoa_r+0x6e2>
 8010a7c:	f7ef fc26 	bl	80002cc <__adddf3>
 8010a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a84:	4604      	mov	r4, r0
 8010a86:	460d      	mov	r5, r1
 8010a88:	f7f0 f866 	bl	8000b58 <__aeabi_dcmpgt>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	f040 80f9 	bne.w	8010c84 <_dtoa_r+0x6bc>
 8010a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a96:	4620      	mov	r0, r4
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7f0 f835 	bl	8000b08 <__aeabi_dcmpeq>
 8010a9e:	b118      	cbz	r0, 8010aa8 <_dtoa_r+0x4e0>
 8010aa0:	f018 0f01 	tst.w	r8, #1
 8010aa4:	f040 80ee 	bne.w	8010c84 <_dtoa_r+0x6bc>
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	4658      	mov	r0, fp
 8010aac:	f000 ff26 	bl	80118fc <_Bfree>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	7033      	strb	r3, [r6, #0]
 8010ab4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010ab6:	3701      	adds	r7, #1
 8010ab8:	601f      	str	r7, [r3, #0]
 8010aba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 831d 	beq.w	80110fc <_dtoa_r+0xb34>
 8010ac2:	601e      	str	r6, [r3, #0]
 8010ac4:	e31a      	b.n	80110fc <_dtoa_r+0xb34>
 8010ac6:	07e2      	lsls	r2, r4, #31
 8010ac8:	d505      	bpl.n	8010ad6 <_dtoa_r+0x50e>
 8010aca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010ace:	f7ef fdb3 	bl	8000638 <__aeabi_dmul>
 8010ad2:	3601      	adds	r6, #1
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	1064      	asrs	r4, r4, #1
 8010ad8:	3508      	adds	r5, #8
 8010ada:	e73f      	b.n	801095c <_dtoa_r+0x394>
 8010adc:	2602      	movs	r6, #2
 8010ade:	e742      	b.n	8010966 <_dtoa_r+0x39e>
 8010ae0:	9c07      	ldr	r4, [sp, #28]
 8010ae2:	9704      	str	r7, [sp, #16]
 8010ae4:	e761      	b.n	80109aa <_dtoa_r+0x3e2>
 8010ae6:	4b27      	ldr	r3, [pc, #156]	@ (8010b84 <_dtoa_r+0x5bc>)
 8010ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010aee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010af2:	4454      	add	r4, sl
 8010af4:	2900      	cmp	r1, #0
 8010af6:	d053      	beq.n	8010ba0 <_dtoa_r+0x5d8>
 8010af8:	4928      	ldr	r1, [pc, #160]	@ (8010b9c <_dtoa_r+0x5d4>)
 8010afa:	2000      	movs	r0, #0
 8010afc:	f7ef fec6 	bl	800088c <__aeabi_ddiv>
 8010b00:	4633      	mov	r3, r6
 8010b02:	462a      	mov	r2, r5
 8010b04:	f7ef fbe0 	bl	80002c8 <__aeabi_dsub>
 8010b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010b0c:	4656      	mov	r6, sl
 8010b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b12:	f7f0 f841 	bl	8000b98 <__aeabi_d2iz>
 8010b16:	4605      	mov	r5, r0
 8010b18:	f7ef fd24 	bl	8000564 <__aeabi_i2d>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b24:	f7ef fbd0 	bl	80002c8 <__aeabi_dsub>
 8010b28:	3530      	adds	r5, #48	@ 0x30
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b32:	f806 5b01 	strb.w	r5, [r6], #1
 8010b36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010b3a:	f7ef ffef 	bl	8000b1c <__aeabi_dcmplt>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d171      	bne.n	8010c26 <_dtoa_r+0x65e>
 8010b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b46:	4911      	ldr	r1, [pc, #68]	@ (8010b8c <_dtoa_r+0x5c4>)
 8010b48:	2000      	movs	r0, #0
 8010b4a:	f7ef fbbd 	bl	80002c8 <__aeabi_dsub>
 8010b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010b52:	f7ef ffe3 	bl	8000b1c <__aeabi_dcmplt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f040 8095 	bne.w	8010c86 <_dtoa_r+0x6be>
 8010b5c:	42a6      	cmp	r6, r4
 8010b5e:	f43f af50 	beq.w	8010a02 <_dtoa_r+0x43a>
 8010b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010b66:	4b0a      	ldr	r3, [pc, #40]	@ (8010b90 <_dtoa_r+0x5c8>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f7ef fd65 	bl	8000638 <__aeabi_dmul>
 8010b6e:	4b08      	ldr	r3, [pc, #32]	@ (8010b90 <_dtoa_r+0x5c8>)
 8010b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010b74:	2200      	movs	r2, #0
 8010b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b7a:	f7ef fd5d 	bl	8000638 <__aeabi_dmul>
 8010b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b82:	e7c4      	b.n	8010b0e <_dtoa_r+0x546>
 8010b84:	08015510 	.word	0x08015510
 8010b88:	080154e8 	.word	0x080154e8
 8010b8c:	3ff00000 	.word	0x3ff00000
 8010b90:	40240000 	.word	0x40240000
 8010b94:	401c0000 	.word	0x401c0000
 8010b98:	40140000 	.word	0x40140000
 8010b9c:	3fe00000 	.word	0x3fe00000
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f7ef fd48 	bl	8000638 <__aeabi_dmul>
 8010ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010bac:	9415      	str	r4, [sp, #84]	@ 0x54
 8010bae:	4656      	mov	r6, sl
 8010bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bb4:	f7ef fff0 	bl	8000b98 <__aeabi_d2iz>
 8010bb8:	4605      	mov	r5, r0
 8010bba:	f7ef fcd3 	bl	8000564 <__aeabi_i2d>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bc6:	f7ef fb7f 	bl	80002c8 <__aeabi_dsub>
 8010bca:	3530      	adds	r5, #48	@ 0x30
 8010bcc:	f806 5b01 	strb.w	r5, [r6], #1
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	42a6      	cmp	r6, r4
 8010bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bda:	f04f 0200 	mov.w	r2, #0
 8010bde:	d124      	bne.n	8010c2a <_dtoa_r+0x662>
 8010be0:	4bac      	ldr	r3, [pc, #688]	@ (8010e94 <_dtoa_r+0x8cc>)
 8010be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010be6:	f7ef fb71 	bl	80002cc <__adddf3>
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bf2:	f7ef ffb1 	bl	8000b58 <__aeabi_dcmpgt>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	d145      	bne.n	8010c86 <_dtoa_r+0x6be>
 8010bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010bfe:	49a5      	ldr	r1, [pc, #660]	@ (8010e94 <_dtoa_r+0x8cc>)
 8010c00:	2000      	movs	r0, #0
 8010c02:	f7ef fb61 	bl	80002c8 <__aeabi_dsub>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c0e:	f7ef ff85 	bl	8000b1c <__aeabi_dcmplt>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f43f aef5 	beq.w	8010a02 <_dtoa_r+0x43a>
 8010c18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010c1a:	1e73      	subs	r3, r6, #1
 8010c1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010c1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c22:	2b30      	cmp	r3, #48	@ 0x30
 8010c24:	d0f8      	beq.n	8010c18 <_dtoa_r+0x650>
 8010c26:	9f04      	ldr	r7, [sp, #16]
 8010c28:	e73e      	b.n	8010aa8 <_dtoa_r+0x4e0>
 8010c2a:	4b9b      	ldr	r3, [pc, #620]	@ (8010e98 <_dtoa_r+0x8d0>)
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c34:	e7bc      	b.n	8010bb0 <_dtoa_r+0x5e8>
 8010c36:	d10c      	bne.n	8010c52 <_dtoa_r+0x68a>
 8010c38:	4b98      	ldr	r3, [pc, #608]	@ (8010e9c <_dtoa_r+0x8d4>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c40:	f7ef fcfa 	bl	8000638 <__aeabi_dmul>
 8010c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c48:	f7ef ff7c 	bl	8000b44 <__aeabi_dcmpge>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	f000 8157 	beq.w	8010f00 <_dtoa_r+0x938>
 8010c52:	2400      	movs	r4, #0
 8010c54:	4625      	mov	r5, r4
 8010c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c58:	43db      	mvns	r3, r3
 8010c5a:	9304      	str	r3, [sp, #16]
 8010c5c:	4656      	mov	r6, sl
 8010c5e:	2700      	movs	r7, #0
 8010c60:	4621      	mov	r1, r4
 8010c62:	4658      	mov	r0, fp
 8010c64:	f000 fe4a 	bl	80118fc <_Bfree>
 8010c68:	2d00      	cmp	r5, #0
 8010c6a:	d0dc      	beq.n	8010c26 <_dtoa_r+0x65e>
 8010c6c:	b12f      	cbz	r7, 8010c7a <_dtoa_r+0x6b2>
 8010c6e:	42af      	cmp	r7, r5
 8010c70:	d003      	beq.n	8010c7a <_dtoa_r+0x6b2>
 8010c72:	4639      	mov	r1, r7
 8010c74:	4658      	mov	r0, fp
 8010c76:	f000 fe41 	bl	80118fc <_Bfree>
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	f000 fe3d 	bl	80118fc <_Bfree>
 8010c82:	e7d0      	b.n	8010c26 <_dtoa_r+0x65e>
 8010c84:	9704      	str	r7, [sp, #16]
 8010c86:	4633      	mov	r3, r6
 8010c88:	461e      	mov	r6, r3
 8010c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c8e:	2a39      	cmp	r2, #57	@ 0x39
 8010c90:	d107      	bne.n	8010ca2 <_dtoa_r+0x6da>
 8010c92:	459a      	cmp	sl, r3
 8010c94:	d1f8      	bne.n	8010c88 <_dtoa_r+0x6c0>
 8010c96:	9a04      	ldr	r2, [sp, #16]
 8010c98:	3201      	adds	r2, #1
 8010c9a:	9204      	str	r2, [sp, #16]
 8010c9c:	2230      	movs	r2, #48	@ 0x30
 8010c9e:	f88a 2000 	strb.w	r2, [sl]
 8010ca2:	781a      	ldrb	r2, [r3, #0]
 8010ca4:	3201      	adds	r2, #1
 8010ca6:	701a      	strb	r2, [r3, #0]
 8010ca8:	e7bd      	b.n	8010c26 <_dtoa_r+0x65e>
 8010caa:	4b7b      	ldr	r3, [pc, #492]	@ (8010e98 <_dtoa_r+0x8d0>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	f7ef fcc3 	bl	8000638 <__aeabi_dmul>
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	460d      	mov	r5, r1
 8010cba:	f7ef ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	f43f aebb 	beq.w	8010a3a <_dtoa_r+0x472>
 8010cc4:	e6f0      	b.n	8010aa8 <_dtoa_r+0x4e0>
 8010cc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010cc8:	2a00      	cmp	r2, #0
 8010cca:	f000 80db 	beq.w	8010e84 <_dtoa_r+0x8bc>
 8010cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cd0:	2a01      	cmp	r2, #1
 8010cd2:	f300 80bf 	bgt.w	8010e54 <_dtoa_r+0x88c>
 8010cd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010cd8:	2a00      	cmp	r2, #0
 8010cda:	f000 80b7 	beq.w	8010e4c <_dtoa_r+0x884>
 8010cde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010ce2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010ce4:	4646      	mov	r6, r8
 8010ce6:	9a08      	ldr	r2, [sp, #32]
 8010ce8:	2101      	movs	r1, #1
 8010cea:	441a      	add	r2, r3
 8010cec:	4658      	mov	r0, fp
 8010cee:	4498      	add	r8, r3
 8010cf0:	9208      	str	r2, [sp, #32]
 8010cf2:	f000 ff01 	bl	8011af8 <__i2b>
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	b15e      	cbz	r6, 8010d12 <_dtoa_r+0x74a>
 8010cfa:	9b08      	ldr	r3, [sp, #32]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dd08      	ble.n	8010d12 <_dtoa_r+0x74a>
 8010d00:	42b3      	cmp	r3, r6
 8010d02:	9a08      	ldr	r2, [sp, #32]
 8010d04:	bfa8      	it	ge
 8010d06:	4633      	movge	r3, r6
 8010d08:	eba8 0803 	sub.w	r8, r8, r3
 8010d0c:	1af6      	subs	r6, r6, r3
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	9308      	str	r3, [sp, #32]
 8010d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d14:	b1f3      	cbz	r3, 8010d54 <_dtoa_r+0x78c>
 8010d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 80b7 	beq.w	8010e8c <_dtoa_r+0x8c4>
 8010d1e:	b18c      	cbz	r4, 8010d44 <_dtoa_r+0x77c>
 8010d20:	4629      	mov	r1, r5
 8010d22:	4622      	mov	r2, r4
 8010d24:	4658      	mov	r0, fp
 8010d26:	f000 ffa7 	bl	8011c78 <__pow5mult>
 8010d2a:	464a      	mov	r2, r9
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	4605      	mov	r5, r0
 8010d30:	4658      	mov	r0, fp
 8010d32:	f000 fef7 	bl	8011b24 <__multiply>
 8010d36:	4649      	mov	r1, r9
 8010d38:	9004      	str	r0, [sp, #16]
 8010d3a:	4658      	mov	r0, fp
 8010d3c:	f000 fdde 	bl	80118fc <_Bfree>
 8010d40:	9b04      	ldr	r3, [sp, #16]
 8010d42:	4699      	mov	r9, r3
 8010d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d46:	1b1a      	subs	r2, r3, r4
 8010d48:	d004      	beq.n	8010d54 <_dtoa_r+0x78c>
 8010d4a:	4649      	mov	r1, r9
 8010d4c:	4658      	mov	r0, fp
 8010d4e:	f000 ff93 	bl	8011c78 <__pow5mult>
 8010d52:	4681      	mov	r9, r0
 8010d54:	2101      	movs	r1, #1
 8010d56:	4658      	mov	r0, fp
 8010d58:	f000 fece 	bl	8011af8 <__i2b>
 8010d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d5e:	4604      	mov	r4, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 81cf 	beq.w	8011104 <_dtoa_r+0xb3c>
 8010d66:	461a      	mov	r2, r3
 8010d68:	4601      	mov	r1, r0
 8010d6a:	4658      	mov	r0, fp
 8010d6c:	f000 ff84 	bl	8011c78 <__pow5mult>
 8010d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	4604      	mov	r4, r0
 8010d76:	f300 8095 	bgt.w	8010ea4 <_dtoa_r+0x8dc>
 8010d7a:	9b02      	ldr	r3, [sp, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f040 8087 	bne.w	8010e90 <_dtoa_r+0x8c8>
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f040 8089 	bne.w	8010ea0 <_dtoa_r+0x8d8>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d94:	0d1b      	lsrs	r3, r3, #20
 8010d96:	051b      	lsls	r3, r3, #20
 8010d98:	b12b      	cbz	r3, 8010da6 <_dtoa_r+0x7de>
 8010d9a:	9b08      	ldr	r3, [sp, #32]
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	9308      	str	r3, [sp, #32]
 8010da0:	f108 0801 	add.w	r8, r8, #1
 8010da4:	2301      	movs	r3, #1
 8010da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 81b0 	beq.w	8011110 <_dtoa_r+0xb48>
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010db6:	6918      	ldr	r0, [r3, #16]
 8010db8:	f000 fe52 	bl	8011a60 <__hi0bits>
 8010dbc:	f1c0 0020 	rsb	r0, r0, #32
 8010dc0:	9b08      	ldr	r3, [sp, #32]
 8010dc2:	4418      	add	r0, r3
 8010dc4:	f010 001f 	ands.w	r0, r0, #31
 8010dc8:	d077      	beq.n	8010eba <_dtoa_r+0x8f2>
 8010dca:	f1c0 0320 	rsb	r3, r0, #32
 8010dce:	2b04      	cmp	r3, #4
 8010dd0:	dd6b      	ble.n	8010eaa <_dtoa_r+0x8e2>
 8010dd2:	9b08      	ldr	r3, [sp, #32]
 8010dd4:	f1c0 001c 	rsb	r0, r0, #28
 8010dd8:	4403      	add	r3, r0
 8010dda:	4480      	add	r8, r0
 8010ddc:	4406      	add	r6, r0
 8010dde:	9308      	str	r3, [sp, #32]
 8010de0:	f1b8 0f00 	cmp.w	r8, #0
 8010de4:	dd05      	ble.n	8010df2 <_dtoa_r+0x82a>
 8010de6:	4649      	mov	r1, r9
 8010de8:	4642      	mov	r2, r8
 8010dea:	4658      	mov	r0, fp
 8010dec:	f000 ff9e 	bl	8011d2c <__lshift>
 8010df0:	4681      	mov	r9, r0
 8010df2:	9b08      	ldr	r3, [sp, #32]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	dd05      	ble.n	8010e04 <_dtoa_r+0x83c>
 8010df8:	4621      	mov	r1, r4
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	4658      	mov	r0, fp
 8010dfe:	f000 ff95 	bl	8011d2c <__lshift>
 8010e02:	4604      	mov	r4, r0
 8010e04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d059      	beq.n	8010ebe <_dtoa_r+0x8f6>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4648      	mov	r0, r9
 8010e0e:	f000 fff9 	bl	8011e04 <__mcmp>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	da53      	bge.n	8010ebe <_dtoa_r+0x8f6>
 8010e16:	1e7b      	subs	r3, r7, #1
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	220a      	movs	r2, #10
 8010e20:	4658      	mov	r0, fp
 8010e22:	f000 fd8d 	bl	8011940 <__multadd>
 8010e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e28:	4681      	mov	r9, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	f000 8172 	beq.w	8011114 <_dtoa_r+0xb4c>
 8010e30:	2300      	movs	r3, #0
 8010e32:	4629      	mov	r1, r5
 8010e34:	220a      	movs	r2, #10
 8010e36:	4658      	mov	r0, fp
 8010e38:	f000 fd82 	bl	8011940 <__multadd>
 8010e3c:	9b00      	ldr	r3, [sp, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	4605      	mov	r5, r0
 8010e42:	dc67      	bgt.n	8010f14 <_dtoa_r+0x94c>
 8010e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	dc41      	bgt.n	8010ece <_dtoa_r+0x906>
 8010e4a:	e063      	b.n	8010f14 <_dtoa_r+0x94c>
 8010e4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010e52:	e746      	b.n	8010ce2 <_dtoa_r+0x71a>
 8010e54:	9b07      	ldr	r3, [sp, #28]
 8010e56:	1e5c      	subs	r4, r3, #1
 8010e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e5a:	42a3      	cmp	r3, r4
 8010e5c:	bfbf      	itttt	lt
 8010e5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010e60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010e62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010e64:	1ae3      	sublt	r3, r4, r3
 8010e66:	bfb4      	ite	lt
 8010e68:	18d2      	addlt	r2, r2, r3
 8010e6a:	1b1c      	subge	r4, r3, r4
 8010e6c:	9b07      	ldr	r3, [sp, #28]
 8010e6e:	bfbc      	itt	lt
 8010e70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010e72:	2400      	movlt	r4, #0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	bfb5      	itete	lt
 8010e78:	eba8 0603 	sublt.w	r6, r8, r3
 8010e7c:	9b07      	ldrge	r3, [sp, #28]
 8010e7e:	2300      	movlt	r3, #0
 8010e80:	4646      	movge	r6, r8
 8010e82:	e730      	b.n	8010ce6 <_dtoa_r+0x71e>
 8010e84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010e86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010e88:	4646      	mov	r6, r8
 8010e8a:	e735      	b.n	8010cf8 <_dtoa_r+0x730>
 8010e8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e8e:	e75c      	b.n	8010d4a <_dtoa_r+0x782>
 8010e90:	2300      	movs	r3, #0
 8010e92:	e788      	b.n	8010da6 <_dtoa_r+0x7de>
 8010e94:	3fe00000 	.word	0x3fe00000
 8010e98:	40240000 	.word	0x40240000
 8010e9c:	40140000 	.word	0x40140000
 8010ea0:	9b02      	ldr	r3, [sp, #8]
 8010ea2:	e780      	b.n	8010da6 <_dtoa_r+0x7de>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ea8:	e782      	b.n	8010db0 <_dtoa_r+0x7e8>
 8010eaa:	d099      	beq.n	8010de0 <_dtoa_r+0x818>
 8010eac:	9a08      	ldr	r2, [sp, #32]
 8010eae:	331c      	adds	r3, #28
 8010eb0:	441a      	add	r2, r3
 8010eb2:	4498      	add	r8, r3
 8010eb4:	441e      	add	r6, r3
 8010eb6:	9208      	str	r2, [sp, #32]
 8010eb8:	e792      	b.n	8010de0 <_dtoa_r+0x818>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	e7f6      	b.n	8010eac <_dtoa_r+0x8e4>
 8010ebe:	9b07      	ldr	r3, [sp, #28]
 8010ec0:	9704      	str	r7, [sp, #16]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dc20      	bgt.n	8010f08 <_dtoa_r+0x940>
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eca:	2b02      	cmp	r3, #2
 8010ecc:	dd1e      	ble.n	8010f0c <_dtoa_r+0x944>
 8010ece:	9b00      	ldr	r3, [sp, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f47f aec0 	bne.w	8010c56 <_dtoa_r+0x68e>
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	2205      	movs	r2, #5
 8010eda:	4658      	mov	r0, fp
 8010edc:	f000 fd30 	bl	8011940 <__multadd>
 8010ee0:	4601      	mov	r1, r0
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4648      	mov	r0, r9
 8010ee6:	f000 ff8d 	bl	8011e04 <__mcmp>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	f77f aeb3 	ble.w	8010c56 <_dtoa_r+0x68e>
 8010ef0:	4656      	mov	r6, sl
 8010ef2:	2331      	movs	r3, #49	@ 0x31
 8010ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ef8:	9b04      	ldr	r3, [sp, #16]
 8010efa:	3301      	adds	r3, #1
 8010efc:	9304      	str	r3, [sp, #16]
 8010efe:	e6ae      	b.n	8010c5e <_dtoa_r+0x696>
 8010f00:	9c07      	ldr	r4, [sp, #28]
 8010f02:	9704      	str	r7, [sp, #16]
 8010f04:	4625      	mov	r5, r4
 8010f06:	e7f3      	b.n	8010ef0 <_dtoa_r+0x928>
 8010f08:	9b07      	ldr	r3, [sp, #28]
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f000 8104 	beq.w	801111c <_dtoa_r+0xb54>
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	dd05      	ble.n	8010f24 <_dtoa_r+0x95c>
 8010f18:	4629      	mov	r1, r5
 8010f1a:	4632      	mov	r2, r6
 8010f1c:	4658      	mov	r0, fp
 8010f1e:	f000 ff05 	bl	8011d2c <__lshift>
 8010f22:	4605      	mov	r5, r0
 8010f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d05a      	beq.n	8010fe0 <_dtoa_r+0xa18>
 8010f2a:	6869      	ldr	r1, [r5, #4]
 8010f2c:	4658      	mov	r0, fp
 8010f2e:	f000 fca5 	bl	801187c <_Balloc>
 8010f32:	4606      	mov	r6, r0
 8010f34:	b928      	cbnz	r0, 8010f42 <_dtoa_r+0x97a>
 8010f36:	4b84      	ldr	r3, [pc, #528]	@ (8011148 <_dtoa_r+0xb80>)
 8010f38:	4602      	mov	r2, r0
 8010f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010f3e:	f7ff bb5a 	b.w	80105f6 <_dtoa_r+0x2e>
 8010f42:	692a      	ldr	r2, [r5, #16]
 8010f44:	3202      	adds	r2, #2
 8010f46:	0092      	lsls	r2, r2, #2
 8010f48:	f105 010c 	add.w	r1, r5, #12
 8010f4c:	300c      	adds	r0, #12
 8010f4e:	f7ff fa94 	bl	801047a <memcpy>
 8010f52:	2201      	movs	r2, #1
 8010f54:	4631      	mov	r1, r6
 8010f56:	4658      	mov	r0, fp
 8010f58:	f000 fee8 	bl	8011d2c <__lshift>
 8010f5c:	f10a 0301 	add.w	r3, sl, #1
 8010f60:	9307      	str	r3, [sp, #28]
 8010f62:	9b00      	ldr	r3, [sp, #0]
 8010f64:	4453      	add	r3, sl
 8010f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	f003 0301 	and.w	r3, r3, #1
 8010f6e:	462f      	mov	r7, r5
 8010f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f72:	4605      	mov	r5, r0
 8010f74:	9b07      	ldr	r3, [sp, #28]
 8010f76:	4621      	mov	r1, r4
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	4648      	mov	r0, r9
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	f7ff fa99 	bl	80104b4 <quorem>
 8010f82:	4639      	mov	r1, r7
 8010f84:	9002      	str	r0, [sp, #8]
 8010f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010f8a:	4648      	mov	r0, r9
 8010f8c:	f000 ff3a 	bl	8011e04 <__mcmp>
 8010f90:	462a      	mov	r2, r5
 8010f92:	9008      	str	r0, [sp, #32]
 8010f94:	4621      	mov	r1, r4
 8010f96:	4658      	mov	r0, fp
 8010f98:	f000 ff50 	bl	8011e3c <__mdiff>
 8010f9c:	68c2      	ldr	r2, [r0, #12]
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	bb02      	cbnz	r2, 8010fe4 <_dtoa_r+0xa1c>
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	4648      	mov	r0, r9
 8010fa6:	f000 ff2d 	bl	8011e04 <__mcmp>
 8010faa:	4602      	mov	r2, r0
 8010fac:	4631      	mov	r1, r6
 8010fae:	4658      	mov	r0, fp
 8010fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010fb2:	f000 fca3 	bl	80118fc <_Bfree>
 8010fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010fba:	9e07      	ldr	r6, [sp, #28]
 8010fbc:	ea43 0102 	orr.w	r1, r3, r2
 8010fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fc2:	4319      	orrs	r1, r3
 8010fc4:	d110      	bne.n	8010fe8 <_dtoa_r+0xa20>
 8010fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010fca:	d029      	beq.n	8011020 <_dtoa_r+0xa58>
 8010fcc:	9b08      	ldr	r3, [sp, #32]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	dd02      	ble.n	8010fd8 <_dtoa_r+0xa10>
 8010fd2:	9b02      	ldr	r3, [sp, #8]
 8010fd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010fd8:	9b00      	ldr	r3, [sp, #0]
 8010fda:	f883 8000 	strb.w	r8, [r3]
 8010fde:	e63f      	b.n	8010c60 <_dtoa_r+0x698>
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	e7bb      	b.n	8010f5c <_dtoa_r+0x994>
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	e7e1      	b.n	8010fac <_dtoa_r+0x9e4>
 8010fe8:	9b08      	ldr	r3, [sp, #32]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	db04      	blt.n	8010ff8 <_dtoa_r+0xa30>
 8010fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ff0:	430b      	orrs	r3, r1
 8010ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ff4:	430b      	orrs	r3, r1
 8010ff6:	d120      	bne.n	801103a <_dtoa_r+0xa72>
 8010ff8:	2a00      	cmp	r2, #0
 8010ffa:	dded      	ble.n	8010fd8 <_dtoa_r+0xa10>
 8010ffc:	4649      	mov	r1, r9
 8010ffe:	2201      	movs	r2, #1
 8011000:	4658      	mov	r0, fp
 8011002:	f000 fe93 	bl	8011d2c <__lshift>
 8011006:	4621      	mov	r1, r4
 8011008:	4681      	mov	r9, r0
 801100a:	f000 fefb 	bl	8011e04 <__mcmp>
 801100e:	2800      	cmp	r0, #0
 8011010:	dc03      	bgt.n	801101a <_dtoa_r+0xa52>
 8011012:	d1e1      	bne.n	8010fd8 <_dtoa_r+0xa10>
 8011014:	f018 0f01 	tst.w	r8, #1
 8011018:	d0de      	beq.n	8010fd8 <_dtoa_r+0xa10>
 801101a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801101e:	d1d8      	bne.n	8010fd2 <_dtoa_r+0xa0a>
 8011020:	9a00      	ldr	r2, [sp, #0]
 8011022:	2339      	movs	r3, #57	@ 0x39
 8011024:	7013      	strb	r3, [r2, #0]
 8011026:	4633      	mov	r3, r6
 8011028:	461e      	mov	r6, r3
 801102a:	3b01      	subs	r3, #1
 801102c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011030:	2a39      	cmp	r2, #57	@ 0x39
 8011032:	d052      	beq.n	80110da <_dtoa_r+0xb12>
 8011034:	3201      	adds	r2, #1
 8011036:	701a      	strb	r2, [r3, #0]
 8011038:	e612      	b.n	8010c60 <_dtoa_r+0x698>
 801103a:	2a00      	cmp	r2, #0
 801103c:	dd07      	ble.n	801104e <_dtoa_r+0xa86>
 801103e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011042:	d0ed      	beq.n	8011020 <_dtoa_r+0xa58>
 8011044:	9a00      	ldr	r2, [sp, #0]
 8011046:	f108 0301 	add.w	r3, r8, #1
 801104a:	7013      	strb	r3, [r2, #0]
 801104c:	e608      	b.n	8010c60 <_dtoa_r+0x698>
 801104e:	9b07      	ldr	r3, [sp, #28]
 8011050:	9a07      	ldr	r2, [sp, #28]
 8011052:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011058:	4293      	cmp	r3, r2
 801105a:	d028      	beq.n	80110ae <_dtoa_r+0xae6>
 801105c:	4649      	mov	r1, r9
 801105e:	2300      	movs	r3, #0
 8011060:	220a      	movs	r2, #10
 8011062:	4658      	mov	r0, fp
 8011064:	f000 fc6c 	bl	8011940 <__multadd>
 8011068:	42af      	cmp	r7, r5
 801106a:	4681      	mov	r9, r0
 801106c:	f04f 0300 	mov.w	r3, #0
 8011070:	f04f 020a 	mov.w	r2, #10
 8011074:	4639      	mov	r1, r7
 8011076:	4658      	mov	r0, fp
 8011078:	d107      	bne.n	801108a <_dtoa_r+0xac2>
 801107a:	f000 fc61 	bl	8011940 <__multadd>
 801107e:	4607      	mov	r7, r0
 8011080:	4605      	mov	r5, r0
 8011082:	9b07      	ldr	r3, [sp, #28]
 8011084:	3301      	adds	r3, #1
 8011086:	9307      	str	r3, [sp, #28]
 8011088:	e774      	b.n	8010f74 <_dtoa_r+0x9ac>
 801108a:	f000 fc59 	bl	8011940 <__multadd>
 801108e:	4629      	mov	r1, r5
 8011090:	4607      	mov	r7, r0
 8011092:	2300      	movs	r3, #0
 8011094:	220a      	movs	r2, #10
 8011096:	4658      	mov	r0, fp
 8011098:	f000 fc52 	bl	8011940 <__multadd>
 801109c:	4605      	mov	r5, r0
 801109e:	e7f0      	b.n	8011082 <_dtoa_r+0xaba>
 80110a0:	9b00      	ldr	r3, [sp, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	bfcc      	ite	gt
 80110a6:	461e      	movgt	r6, r3
 80110a8:	2601      	movle	r6, #1
 80110aa:	4456      	add	r6, sl
 80110ac:	2700      	movs	r7, #0
 80110ae:	4649      	mov	r1, r9
 80110b0:	2201      	movs	r2, #1
 80110b2:	4658      	mov	r0, fp
 80110b4:	f000 fe3a 	bl	8011d2c <__lshift>
 80110b8:	4621      	mov	r1, r4
 80110ba:	4681      	mov	r9, r0
 80110bc:	f000 fea2 	bl	8011e04 <__mcmp>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	dcb0      	bgt.n	8011026 <_dtoa_r+0xa5e>
 80110c4:	d102      	bne.n	80110cc <_dtoa_r+0xb04>
 80110c6:	f018 0f01 	tst.w	r8, #1
 80110ca:	d1ac      	bne.n	8011026 <_dtoa_r+0xa5e>
 80110cc:	4633      	mov	r3, r6
 80110ce:	461e      	mov	r6, r3
 80110d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110d4:	2a30      	cmp	r2, #48	@ 0x30
 80110d6:	d0fa      	beq.n	80110ce <_dtoa_r+0xb06>
 80110d8:	e5c2      	b.n	8010c60 <_dtoa_r+0x698>
 80110da:	459a      	cmp	sl, r3
 80110dc:	d1a4      	bne.n	8011028 <_dtoa_r+0xa60>
 80110de:	9b04      	ldr	r3, [sp, #16]
 80110e0:	3301      	adds	r3, #1
 80110e2:	9304      	str	r3, [sp, #16]
 80110e4:	2331      	movs	r3, #49	@ 0x31
 80110e6:	f88a 3000 	strb.w	r3, [sl]
 80110ea:	e5b9      	b.n	8010c60 <_dtoa_r+0x698>
 80110ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801114c <_dtoa_r+0xb84>
 80110f2:	b11b      	cbz	r3, 80110fc <_dtoa_r+0xb34>
 80110f4:	f10a 0308 	add.w	r3, sl, #8
 80110f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	4650      	mov	r0, sl
 80110fe:	b019      	add	sp, #100	@ 0x64
 8011100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011106:	2b01      	cmp	r3, #1
 8011108:	f77f ae37 	ble.w	8010d7a <_dtoa_r+0x7b2>
 801110c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801110e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011110:	2001      	movs	r0, #1
 8011112:	e655      	b.n	8010dc0 <_dtoa_r+0x7f8>
 8011114:	9b00      	ldr	r3, [sp, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	f77f aed6 	ble.w	8010ec8 <_dtoa_r+0x900>
 801111c:	4656      	mov	r6, sl
 801111e:	4621      	mov	r1, r4
 8011120:	4648      	mov	r0, r9
 8011122:	f7ff f9c7 	bl	80104b4 <quorem>
 8011126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801112a:	f806 8b01 	strb.w	r8, [r6], #1
 801112e:	9b00      	ldr	r3, [sp, #0]
 8011130:	eba6 020a 	sub.w	r2, r6, sl
 8011134:	4293      	cmp	r3, r2
 8011136:	ddb3      	ble.n	80110a0 <_dtoa_r+0xad8>
 8011138:	4649      	mov	r1, r9
 801113a:	2300      	movs	r3, #0
 801113c:	220a      	movs	r2, #10
 801113e:	4658      	mov	r0, fp
 8011140:	f000 fbfe 	bl	8011940 <__multadd>
 8011144:	4681      	mov	r9, r0
 8011146:	e7ea      	b.n	801111e <_dtoa_r+0xb56>
 8011148:	0801540d 	.word	0x0801540d
 801114c:	08015391 	.word	0x08015391

08011150 <_free_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4605      	mov	r5, r0
 8011154:	2900      	cmp	r1, #0
 8011156:	d041      	beq.n	80111dc <_free_r+0x8c>
 8011158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115c:	1f0c      	subs	r4, r1, #4
 801115e:	2b00      	cmp	r3, #0
 8011160:	bfb8      	it	lt
 8011162:	18e4      	addlt	r4, r4, r3
 8011164:	f7fd fb36 	bl	800e7d4 <__malloc_lock>
 8011168:	4a1d      	ldr	r2, [pc, #116]	@ (80111e0 <_free_r+0x90>)
 801116a:	6813      	ldr	r3, [r2, #0]
 801116c:	b933      	cbnz	r3, 801117c <_free_r+0x2c>
 801116e:	6063      	str	r3, [r4, #4]
 8011170:	6014      	str	r4, [r2, #0]
 8011172:	4628      	mov	r0, r5
 8011174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011178:	f7fd bb32 	b.w	800e7e0 <__malloc_unlock>
 801117c:	42a3      	cmp	r3, r4
 801117e:	d908      	bls.n	8011192 <_free_r+0x42>
 8011180:	6820      	ldr	r0, [r4, #0]
 8011182:	1821      	adds	r1, r4, r0
 8011184:	428b      	cmp	r3, r1
 8011186:	bf01      	itttt	eq
 8011188:	6819      	ldreq	r1, [r3, #0]
 801118a:	685b      	ldreq	r3, [r3, #4]
 801118c:	1809      	addeq	r1, r1, r0
 801118e:	6021      	streq	r1, [r4, #0]
 8011190:	e7ed      	b.n	801116e <_free_r+0x1e>
 8011192:	461a      	mov	r2, r3
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	b10b      	cbz	r3, 801119c <_free_r+0x4c>
 8011198:	42a3      	cmp	r3, r4
 801119a:	d9fa      	bls.n	8011192 <_free_r+0x42>
 801119c:	6811      	ldr	r1, [r2, #0]
 801119e:	1850      	adds	r0, r2, r1
 80111a0:	42a0      	cmp	r0, r4
 80111a2:	d10b      	bne.n	80111bc <_free_r+0x6c>
 80111a4:	6820      	ldr	r0, [r4, #0]
 80111a6:	4401      	add	r1, r0
 80111a8:	1850      	adds	r0, r2, r1
 80111aa:	4283      	cmp	r3, r0
 80111ac:	6011      	str	r1, [r2, #0]
 80111ae:	d1e0      	bne.n	8011172 <_free_r+0x22>
 80111b0:	6818      	ldr	r0, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	6053      	str	r3, [r2, #4]
 80111b6:	4408      	add	r0, r1
 80111b8:	6010      	str	r0, [r2, #0]
 80111ba:	e7da      	b.n	8011172 <_free_r+0x22>
 80111bc:	d902      	bls.n	80111c4 <_free_r+0x74>
 80111be:	230c      	movs	r3, #12
 80111c0:	602b      	str	r3, [r5, #0]
 80111c2:	e7d6      	b.n	8011172 <_free_r+0x22>
 80111c4:	6820      	ldr	r0, [r4, #0]
 80111c6:	1821      	adds	r1, r4, r0
 80111c8:	428b      	cmp	r3, r1
 80111ca:	bf04      	itt	eq
 80111cc:	6819      	ldreq	r1, [r3, #0]
 80111ce:	685b      	ldreq	r3, [r3, #4]
 80111d0:	6063      	str	r3, [r4, #4]
 80111d2:	bf04      	itt	eq
 80111d4:	1809      	addeq	r1, r1, r0
 80111d6:	6021      	streq	r1, [r4, #0]
 80111d8:	6054      	str	r4, [r2, #4]
 80111da:	e7ca      	b.n	8011172 <_free_r+0x22>
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	bf00      	nop
 80111e0:	200025e8 	.word	0x200025e8

080111e4 <rshift>:
 80111e4:	6903      	ldr	r3, [r0, #16]
 80111e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80111ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80111f2:	f100 0414 	add.w	r4, r0, #20
 80111f6:	dd45      	ble.n	8011284 <rshift+0xa0>
 80111f8:	f011 011f 	ands.w	r1, r1, #31
 80111fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011200:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011204:	d10c      	bne.n	8011220 <rshift+0x3c>
 8011206:	f100 0710 	add.w	r7, r0, #16
 801120a:	4629      	mov	r1, r5
 801120c:	42b1      	cmp	r1, r6
 801120e:	d334      	bcc.n	801127a <rshift+0x96>
 8011210:	1a9b      	subs	r3, r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	1eea      	subs	r2, r5, #3
 8011216:	4296      	cmp	r6, r2
 8011218:	bf38      	it	cc
 801121a:	2300      	movcc	r3, #0
 801121c:	4423      	add	r3, r4
 801121e:	e015      	b.n	801124c <rshift+0x68>
 8011220:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011224:	f1c1 0820 	rsb	r8, r1, #32
 8011228:	40cf      	lsrs	r7, r1
 801122a:	f105 0e04 	add.w	lr, r5, #4
 801122e:	46a1      	mov	r9, r4
 8011230:	4576      	cmp	r6, lr
 8011232:	46f4      	mov	ip, lr
 8011234:	d815      	bhi.n	8011262 <rshift+0x7e>
 8011236:	1a9a      	subs	r2, r3, r2
 8011238:	0092      	lsls	r2, r2, #2
 801123a:	3a04      	subs	r2, #4
 801123c:	3501      	adds	r5, #1
 801123e:	42ae      	cmp	r6, r5
 8011240:	bf38      	it	cc
 8011242:	2200      	movcc	r2, #0
 8011244:	18a3      	adds	r3, r4, r2
 8011246:	50a7      	str	r7, [r4, r2]
 8011248:	b107      	cbz	r7, 801124c <rshift+0x68>
 801124a:	3304      	adds	r3, #4
 801124c:	1b1a      	subs	r2, r3, r4
 801124e:	42a3      	cmp	r3, r4
 8011250:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011254:	bf08      	it	eq
 8011256:	2300      	moveq	r3, #0
 8011258:	6102      	str	r2, [r0, #16]
 801125a:	bf08      	it	eq
 801125c:	6143      	streq	r3, [r0, #20]
 801125e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011262:	f8dc c000 	ldr.w	ip, [ip]
 8011266:	fa0c fc08 	lsl.w	ip, ip, r8
 801126a:	ea4c 0707 	orr.w	r7, ip, r7
 801126e:	f849 7b04 	str.w	r7, [r9], #4
 8011272:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011276:	40cf      	lsrs	r7, r1
 8011278:	e7da      	b.n	8011230 <rshift+0x4c>
 801127a:	f851 cb04 	ldr.w	ip, [r1], #4
 801127e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011282:	e7c3      	b.n	801120c <rshift+0x28>
 8011284:	4623      	mov	r3, r4
 8011286:	e7e1      	b.n	801124c <rshift+0x68>

08011288 <__hexdig_fun>:
 8011288:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801128c:	2b09      	cmp	r3, #9
 801128e:	d802      	bhi.n	8011296 <__hexdig_fun+0xe>
 8011290:	3820      	subs	r0, #32
 8011292:	b2c0      	uxtb	r0, r0
 8011294:	4770      	bx	lr
 8011296:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801129a:	2b05      	cmp	r3, #5
 801129c:	d801      	bhi.n	80112a2 <__hexdig_fun+0x1a>
 801129e:	3847      	subs	r0, #71	@ 0x47
 80112a0:	e7f7      	b.n	8011292 <__hexdig_fun+0xa>
 80112a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80112a6:	2b05      	cmp	r3, #5
 80112a8:	d801      	bhi.n	80112ae <__hexdig_fun+0x26>
 80112aa:	3827      	subs	r0, #39	@ 0x27
 80112ac:	e7f1      	b.n	8011292 <__hexdig_fun+0xa>
 80112ae:	2000      	movs	r0, #0
 80112b0:	4770      	bx	lr
	...

080112b4 <__gethex>:
 80112b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	b085      	sub	sp, #20
 80112ba:	468a      	mov	sl, r1
 80112bc:	9302      	str	r3, [sp, #8]
 80112be:	680b      	ldr	r3, [r1, #0]
 80112c0:	9001      	str	r0, [sp, #4]
 80112c2:	4690      	mov	r8, r2
 80112c4:	1c9c      	adds	r4, r3, #2
 80112c6:	46a1      	mov	r9, r4
 80112c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80112cc:	2830      	cmp	r0, #48	@ 0x30
 80112ce:	d0fa      	beq.n	80112c6 <__gethex+0x12>
 80112d0:	eba9 0303 	sub.w	r3, r9, r3
 80112d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80112d8:	f7ff ffd6 	bl	8011288 <__hexdig_fun>
 80112dc:	4605      	mov	r5, r0
 80112de:	2800      	cmp	r0, #0
 80112e0:	d168      	bne.n	80113b4 <__gethex+0x100>
 80112e2:	49a0      	ldr	r1, [pc, #640]	@ (8011564 <__gethex+0x2b0>)
 80112e4:	2201      	movs	r2, #1
 80112e6:	4648      	mov	r0, r9
 80112e8:	f7ff f82d 	bl	8010346 <strncmp>
 80112ec:	4607      	mov	r7, r0
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d167      	bne.n	80113c2 <__gethex+0x10e>
 80112f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80112f6:	4626      	mov	r6, r4
 80112f8:	f7ff ffc6 	bl	8011288 <__hexdig_fun>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d062      	beq.n	80113c6 <__gethex+0x112>
 8011300:	4623      	mov	r3, r4
 8011302:	7818      	ldrb	r0, [r3, #0]
 8011304:	2830      	cmp	r0, #48	@ 0x30
 8011306:	4699      	mov	r9, r3
 8011308:	f103 0301 	add.w	r3, r3, #1
 801130c:	d0f9      	beq.n	8011302 <__gethex+0x4e>
 801130e:	f7ff ffbb 	bl	8011288 <__hexdig_fun>
 8011312:	fab0 f580 	clz	r5, r0
 8011316:	096d      	lsrs	r5, r5, #5
 8011318:	f04f 0b01 	mov.w	fp, #1
 801131c:	464a      	mov	r2, r9
 801131e:	4616      	mov	r6, r2
 8011320:	3201      	adds	r2, #1
 8011322:	7830      	ldrb	r0, [r6, #0]
 8011324:	f7ff ffb0 	bl	8011288 <__hexdig_fun>
 8011328:	2800      	cmp	r0, #0
 801132a:	d1f8      	bne.n	801131e <__gethex+0x6a>
 801132c:	498d      	ldr	r1, [pc, #564]	@ (8011564 <__gethex+0x2b0>)
 801132e:	2201      	movs	r2, #1
 8011330:	4630      	mov	r0, r6
 8011332:	f7ff f808 	bl	8010346 <strncmp>
 8011336:	2800      	cmp	r0, #0
 8011338:	d13f      	bne.n	80113ba <__gethex+0x106>
 801133a:	b944      	cbnz	r4, 801134e <__gethex+0x9a>
 801133c:	1c74      	adds	r4, r6, #1
 801133e:	4622      	mov	r2, r4
 8011340:	4616      	mov	r6, r2
 8011342:	3201      	adds	r2, #1
 8011344:	7830      	ldrb	r0, [r6, #0]
 8011346:	f7ff ff9f 	bl	8011288 <__hexdig_fun>
 801134a:	2800      	cmp	r0, #0
 801134c:	d1f8      	bne.n	8011340 <__gethex+0x8c>
 801134e:	1ba4      	subs	r4, r4, r6
 8011350:	00a7      	lsls	r7, r4, #2
 8011352:	7833      	ldrb	r3, [r6, #0]
 8011354:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011358:	2b50      	cmp	r3, #80	@ 0x50
 801135a:	d13e      	bne.n	80113da <__gethex+0x126>
 801135c:	7873      	ldrb	r3, [r6, #1]
 801135e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011360:	d033      	beq.n	80113ca <__gethex+0x116>
 8011362:	2b2d      	cmp	r3, #45	@ 0x2d
 8011364:	d034      	beq.n	80113d0 <__gethex+0x11c>
 8011366:	1c71      	adds	r1, r6, #1
 8011368:	2400      	movs	r4, #0
 801136a:	7808      	ldrb	r0, [r1, #0]
 801136c:	f7ff ff8c 	bl	8011288 <__hexdig_fun>
 8011370:	1e43      	subs	r3, r0, #1
 8011372:	b2db      	uxtb	r3, r3
 8011374:	2b18      	cmp	r3, #24
 8011376:	d830      	bhi.n	80113da <__gethex+0x126>
 8011378:	f1a0 0210 	sub.w	r2, r0, #16
 801137c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011380:	f7ff ff82 	bl	8011288 <__hexdig_fun>
 8011384:	f100 3cff 	add.w	ip, r0, #4294967295
 8011388:	fa5f fc8c 	uxtb.w	ip, ip
 801138c:	f1bc 0f18 	cmp.w	ip, #24
 8011390:	f04f 030a 	mov.w	r3, #10
 8011394:	d91e      	bls.n	80113d4 <__gethex+0x120>
 8011396:	b104      	cbz	r4, 801139a <__gethex+0xe6>
 8011398:	4252      	negs	r2, r2
 801139a:	4417      	add	r7, r2
 801139c:	f8ca 1000 	str.w	r1, [sl]
 80113a0:	b1ed      	cbz	r5, 80113de <__gethex+0x12a>
 80113a2:	f1bb 0f00 	cmp.w	fp, #0
 80113a6:	bf0c      	ite	eq
 80113a8:	2506      	moveq	r5, #6
 80113aa:	2500      	movne	r5, #0
 80113ac:	4628      	mov	r0, r5
 80113ae:	b005      	add	sp, #20
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	2500      	movs	r5, #0
 80113b6:	462c      	mov	r4, r5
 80113b8:	e7b0      	b.n	801131c <__gethex+0x68>
 80113ba:	2c00      	cmp	r4, #0
 80113bc:	d1c7      	bne.n	801134e <__gethex+0x9a>
 80113be:	4627      	mov	r7, r4
 80113c0:	e7c7      	b.n	8011352 <__gethex+0x9e>
 80113c2:	464e      	mov	r6, r9
 80113c4:	462f      	mov	r7, r5
 80113c6:	2501      	movs	r5, #1
 80113c8:	e7c3      	b.n	8011352 <__gethex+0x9e>
 80113ca:	2400      	movs	r4, #0
 80113cc:	1cb1      	adds	r1, r6, #2
 80113ce:	e7cc      	b.n	801136a <__gethex+0xb6>
 80113d0:	2401      	movs	r4, #1
 80113d2:	e7fb      	b.n	80113cc <__gethex+0x118>
 80113d4:	fb03 0002 	mla	r0, r3, r2, r0
 80113d8:	e7ce      	b.n	8011378 <__gethex+0xc4>
 80113da:	4631      	mov	r1, r6
 80113dc:	e7de      	b.n	801139c <__gethex+0xe8>
 80113de:	eba6 0309 	sub.w	r3, r6, r9
 80113e2:	3b01      	subs	r3, #1
 80113e4:	4629      	mov	r1, r5
 80113e6:	2b07      	cmp	r3, #7
 80113e8:	dc0a      	bgt.n	8011400 <__gethex+0x14c>
 80113ea:	9801      	ldr	r0, [sp, #4]
 80113ec:	f000 fa46 	bl	801187c <_Balloc>
 80113f0:	4604      	mov	r4, r0
 80113f2:	b940      	cbnz	r0, 8011406 <__gethex+0x152>
 80113f4:	4b5c      	ldr	r3, [pc, #368]	@ (8011568 <__gethex+0x2b4>)
 80113f6:	4602      	mov	r2, r0
 80113f8:	21e4      	movs	r1, #228	@ 0xe4
 80113fa:	485c      	ldr	r0, [pc, #368]	@ (801156c <__gethex+0x2b8>)
 80113fc:	f001 f996 	bl	801272c <__assert_func>
 8011400:	3101      	adds	r1, #1
 8011402:	105b      	asrs	r3, r3, #1
 8011404:	e7ef      	b.n	80113e6 <__gethex+0x132>
 8011406:	f100 0a14 	add.w	sl, r0, #20
 801140a:	2300      	movs	r3, #0
 801140c:	4655      	mov	r5, sl
 801140e:	469b      	mov	fp, r3
 8011410:	45b1      	cmp	r9, r6
 8011412:	d337      	bcc.n	8011484 <__gethex+0x1d0>
 8011414:	f845 bb04 	str.w	fp, [r5], #4
 8011418:	eba5 050a 	sub.w	r5, r5, sl
 801141c:	10ad      	asrs	r5, r5, #2
 801141e:	6125      	str	r5, [r4, #16]
 8011420:	4658      	mov	r0, fp
 8011422:	f000 fb1d 	bl	8011a60 <__hi0bits>
 8011426:	016d      	lsls	r5, r5, #5
 8011428:	f8d8 6000 	ldr.w	r6, [r8]
 801142c:	1a2d      	subs	r5, r5, r0
 801142e:	42b5      	cmp	r5, r6
 8011430:	dd54      	ble.n	80114dc <__gethex+0x228>
 8011432:	1bad      	subs	r5, r5, r6
 8011434:	4629      	mov	r1, r5
 8011436:	4620      	mov	r0, r4
 8011438:	f000 feb1 	bl	801219e <__any_on>
 801143c:	4681      	mov	r9, r0
 801143e:	b178      	cbz	r0, 8011460 <__gethex+0x1ac>
 8011440:	1e6b      	subs	r3, r5, #1
 8011442:	1159      	asrs	r1, r3, #5
 8011444:	f003 021f 	and.w	r2, r3, #31
 8011448:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801144c:	f04f 0901 	mov.w	r9, #1
 8011450:	fa09 f202 	lsl.w	r2, r9, r2
 8011454:	420a      	tst	r2, r1
 8011456:	d003      	beq.n	8011460 <__gethex+0x1ac>
 8011458:	454b      	cmp	r3, r9
 801145a:	dc36      	bgt.n	80114ca <__gethex+0x216>
 801145c:	f04f 0902 	mov.w	r9, #2
 8011460:	4629      	mov	r1, r5
 8011462:	4620      	mov	r0, r4
 8011464:	f7ff febe 	bl	80111e4 <rshift>
 8011468:	442f      	add	r7, r5
 801146a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801146e:	42bb      	cmp	r3, r7
 8011470:	da42      	bge.n	80114f8 <__gethex+0x244>
 8011472:	9801      	ldr	r0, [sp, #4]
 8011474:	4621      	mov	r1, r4
 8011476:	f000 fa41 	bl	80118fc <_Bfree>
 801147a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801147c:	2300      	movs	r3, #0
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	25a3      	movs	r5, #163	@ 0xa3
 8011482:	e793      	b.n	80113ac <__gethex+0xf8>
 8011484:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011488:	2a2e      	cmp	r2, #46	@ 0x2e
 801148a:	d012      	beq.n	80114b2 <__gethex+0x1fe>
 801148c:	2b20      	cmp	r3, #32
 801148e:	d104      	bne.n	801149a <__gethex+0x1e6>
 8011490:	f845 bb04 	str.w	fp, [r5], #4
 8011494:	f04f 0b00 	mov.w	fp, #0
 8011498:	465b      	mov	r3, fp
 801149a:	7830      	ldrb	r0, [r6, #0]
 801149c:	9303      	str	r3, [sp, #12]
 801149e:	f7ff fef3 	bl	8011288 <__hexdig_fun>
 80114a2:	9b03      	ldr	r3, [sp, #12]
 80114a4:	f000 000f 	and.w	r0, r0, #15
 80114a8:	4098      	lsls	r0, r3
 80114aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80114ae:	3304      	adds	r3, #4
 80114b0:	e7ae      	b.n	8011410 <__gethex+0x15c>
 80114b2:	45b1      	cmp	r9, r6
 80114b4:	d8ea      	bhi.n	801148c <__gethex+0x1d8>
 80114b6:	492b      	ldr	r1, [pc, #172]	@ (8011564 <__gethex+0x2b0>)
 80114b8:	9303      	str	r3, [sp, #12]
 80114ba:	2201      	movs	r2, #1
 80114bc:	4630      	mov	r0, r6
 80114be:	f7fe ff42 	bl	8010346 <strncmp>
 80114c2:	9b03      	ldr	r3, [sp, #12]
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1e1      	bne.n	801148c <__gethex+0x1d8>
 80114c8:	e7a2      	b.n	8011410 <__gethex+0x15c>
 80114ca:	1ea9      	subs	r1, r5, #2
 80114cc:	4620      	mov	r0, r4
 80114ce:	f000 fe66 	bl	801219e <__any_on>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	d0c2      	beq.n	801145c <__gethex+0x1a8>
 80114d6:	f04f 0903 	mov.w	r9, #3
 80114da:	e7c1      	b.n	8011460 <__gethex+0x1ac>
 80114dc:	da09      	bge.n	80114f2 <__gethex+0x23e>
 80114de:	1b75      	subs	r5, r6, r5
 80114e0:	4621      	mov	r1, r4
 80114e2:	9801      	ldr	r0, [sp, #4]
 80114e4:	462a      	mov	r2, r5
 80114e6:	f000 fc21 	bl	8011d2c <__lshift>
 80114ea:	1b7f      	subs	r7, r7, r5
 80114ec:	4604      	mov	r4, r0
 80114ee:	f100 0a14 	add.w	sl, r0, #20
 80114f2:	f04f 0900 	mov.w	r9, #0
 80114f6:	e7b8      	b.n	801146a <__gethex+0x1b6>
 80114f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80114fc:	42bd      	cmp	r5, r7
 80114fe:	dd6f      	ble.n	80115e0 <__gethex+0x32c>
 8011500:	1bed      	subs	r5, r5, r7
 8011502:	42ae      	cmp	r6, r5
 8011504:	dc34      	bgt.n	8011570 <__gethex+0x2bc>
 8011506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801150a:	2b02      	cmp	r3, #2
 801150c:	d022      	beq.n	8011554 <__gethex+0x2a0>
 801150e:	2b03      	cmp	r3, #3
 8011510:	d024      	beq.n	801155c <__gethex+0x2a8>
 8011512:	2b01      	cmp	r3, #1
 8011514:	d115      	bne.n	8011542 <__gethex+0x28e>
 8011516:	42ae      	cmp	r6, r5
 8011518:	d113      	bne.n	8011542 <__gethex+0x28e>
 801151a:	2e01      	cmp	r6, #1
 801151c:	d10b      	bne.n	8011536 <__gethex+0x282>
 801151e:	9a02      	ldr	r2, [sp, #8]
 8011520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011524:	6013      	str	r3, [r2, #0]
 8011526:	2301      	movs	r3, #1
 8011528:	6123      	str	r3, [r4, #16]
 801152a:	f8ca 3000 	str.w	r3, [sl]
 801152e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011530:	2562      	movs	r5, #98	@ 0x62
 8011532:	601c      	str	r4, [r3, #0]
 8011534:	e73a      	b.n	80113ac <__gethex+0xf8>
 8011536:	1e71      	subs	r1, r6, #1
 8011538:	4620      	mov	r0, r4
 801153a:	f000 fe30 	bl	801219e <__any_on>
 801153e:	2800      	cmp	r0, #0
 8011540:	d1ed      	bne.n	801151e <__gethex+0x26a>
 8011542:	9801      	ldr	r0, [sp, #4]
 8011544:	4621      	mov	r1, r4
 8011546:	f000 f9d9 	bl	80118fc <_Bfree>
 801154a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801154c:	2300      	movs	r3, #0
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	2550      	movs	r5, #80	@ 0x50
 8011552:	e72b      	b.n	80113ac <__gethex+0xf8>
 8011554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1f3      	bne.n	8011542 <__gethex+0x28e>
 801155a:	e7e0      	b.n	801151e <__gethex+0x26a>
 801155c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1dd      	bne.n	801151e <__gethex+0x26a>
 8011562:	e7ee      	b.n	8011542 <__gethex+0x28e>
 8011564:	080152fc 	.word	0x080152fc
 8011568:	0801540d 	.word	0x0801540d
 801156c:	0801541e 	.word	0x0801541e
 8011570:	1e6f      	subs	r7, r5, #1
 8011572:	f1b9 0f00 	cmp.w	r9, #0
 8011576:	d130      	bne.n	80115da <__gethex+0x326>
 8011578:	b127      	cbz	r7, 8011584 <__gethex+0x2d0>
 801157a:	4639      	mov	r1, r7
 801157c:	4620      	mov	r0, r4
 801157e:	f000 fe0e 	bl	801219e <__any_on>
 8011582:	4681      	mov	r9, r0
 8011584:	117a      	asrs	r2, r7, #5
 8011586:	2301      	movs	r3, #1
 8011588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801158c:	f007 071f 	and.w	r7, r7, #31
 8011590:	40bb      	lsls	r3, r7
 8011592:	4213      	tst	r3, r2
 8011594:	4629      	mov	r1, r5
 8011596:	4620      	mov	r0, r4
 8011598:	bf18      	it	ne
 801159a:	f049 0902 	orrne.w	r9, r9, #2
 801159e:	f7ff fe21 	bl	80111e4 <rshift>
 80115a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80115a6:	1b76      	subs	r6, r6, r5
 80115a8:	2502      	movs	r5, #2
 80115aa:	f1b9 0f00 	cmp.w	r9, #0
 80115ae:	d047      	beq.n	8011640 <__gethex+0x38c>
 80115b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d015      	beq.n	80115e4 <__gethex+0x330>
 80115b8:	2b03      	cmp	r3, #3
 80115ba:	d017      	beq.n	80115ec <__gethex+0x338>
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d109      	bne.n	80115d4 <__gethex+0x320>
 80115c0:	f019 0f02 	tst.w	r9, #2
 80115c4:	d006      	beq.n	80115d4 <__gethex+0x320>
 80115c6:	f8da 3000 	ldr.w	r3, [sl]
 80115ca:	ea49 0903 	orr.w	r9, r9, r3
 80115ce:	f019 0f01 	tst.w	r9, #1
 80115d2:	d10e      	bne.n	80115f2 <__gethex+0x33e>
 80115d4:	f045 0510 	orr.w	r5, r5, #16
 80115d8:	e032      	b.n	8011640 <__gethex+0x38c>
 80115da:	f04f 0901 	mov.w	r9, #1
 80115de:	e7d1      	b.n	8011584 <__gethex+0x2d0>
 80115e0:	2501      	movs	r5, #1
 80115e2:	e7e2      	b.n	80115aa <__gethex+0x2f6>
 80115e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115e6:	f1c3 0301 	rsb	r3, r3, #1
 80115ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80115ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0f0      	beq.n	80115d4 <__gethex+0x320>
 80115f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80115f6:	f104 0314 	add.w	r3, r4, #20
 80115fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80115fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011602:	f04f 0c00 	mov.w	ip, #0
 8011606:	4618      	mov	r0, r3
 8011608:	f853 2b04 	ldr.w	r2, [r3], #4
 801160c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011610:	d01b      	beq.n	801164a <__gethex+0x396>
 8011612:	3201      	adds	r2, #1
 8011614:	6002      	str	r2, [r0, #0]
 8011616:	2d02      	cmp	r5, #2
 8011618:	f104 0314 	add.w	r3, r4, #20
 801161c:	d13c      	bne.n	8011698 <__gethex+0x3e4>
 801161e:	f8d8 2000 	ldr.w	r2, [r8]
 8011622:	3a01      	subs	r2, #1
 8011624:	42b2      	cmp	r2, r6
 8011626:	d109      	bne.n	801163c <__gethex+0x388>
 8011628:	1171      	asrs	r1, r6, #5
 801162a:	2201      	movs	r2, #1
 801162c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011630:	f006 061f 	and.w	r6, r6, #31
 8011634:	fa02 f606 	lsl.w	r6, r2, r6
 8011638:	421e      	tst	r6, r3
 801163a:	d13a      	bne.n	80116b2 <__gethex+0x3fe>
 801163c:	f045 0520 	orr.w	r5, r5, #32
 8011640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011642:	601c      	str	r4, [r3, #0]
 8011644:	9b02      	ldr	r3, [sp, #8]
 8011646:	601f      	str	r7, [r3, #0]
 8011648:	e6b0      	b.n	80113ac <__gethex+0xf8>
 801164a:	4299      	cmp	r1, r3
 801164c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011650:	d8d9      	bhi.n	8011606 <__gethex+0x352>
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	459b      	cmp	fp, r3
 8011656:	db17      	blt.n	8011688 <__gethex+0x3d4>
 8011658:	6861      	ldr	r1, [r4, #4]
 801165a:	9801      	ldr	r0, [sp, #4]
 801165c:	3101      	adds	r1, #1
 801165e:	f000 f90d 	bl	801187c <_Balloc>
 8011662:	4681      	mov	r9, r0
 8011664:	b918      	cbnz	r0, 801166e <__gethex+0x3ba>
 8011666:	4b1a      	ldr	r3, [pc, #104]	@ (80116d0 <__gethex+0x41c>)
 8011668:	4602      	mov	r2, r0
 801166a:	2184      	movs	r1, #132	@ 0x84
 801166c:	e6c5      	b.n	80113fa <__gethex+0x146>
 801166e:	6922      	ldr	r2, [r4, #16]
 8011670:	3202      	adds	r2, #2
 8011672:	f104 010c 	add.w	r1, r4, #12
 8011676:	0092      	lsls	r2, r2, #2
 8011678:	300c      	adds	r0, #12
 801167a:	f7fe fefe 	bl	801047a <memcpy>
 801167e:	4621      	mov	r1, r4
 8011680:	9801      	ldr	r0, [sp, #4]
 8011682:	f000 f93b 	bl	80118fc <_Bfree>
 8011686:	464c      	mov	r4, r9
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011690:	6122      	str	r2, [r4, #16]
 8011692:	2201      	movs	r2, #1
 8011694:	615a      	str	r2, [r3, #20]
 8011696:	e7be      	b.n	8011616 <__gethex+0x362>
 8011698:	6922      	ldr	r2, [r4, #16]
 801169a:	455a      	cmp	r2, fp
 801169c:	dd0b      	ble.n	80116b6 <__gethex+0x402>
 801169e:	2101      	movs	r1, #1
 80116a0:	4620      	mov	r0, r4
 80116a2:	f7ff fd9f 	bl	80111e4 <rshift>
 80116a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116aa:	3701      	adds	r7, #1
 80116ac:	42bb      	cmp	r3, r7
 80116ae:	f6ff aee0 	blt.w	8011472 <__gethex+0x1be>
 80116b2:	2501      	movs	r5, #1
 80116b4:	e7c2      	b.n	801163c <__gethex+0x388>
 80116b6:	f016 061f 	ands.w	r6, r6, #31
 80116ba:	d0fa      	beq.n	80116b2 <__gethex+0x3fe>
 80116bc:	4453      	add	r3, sl
 80116be:	f1c6 0620 	rsb	r6, r6, #32
 80116c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116c6:	f000 f9cb 	bl	8011a60 <__hi0bits>
 80116ca:	42b0      	cmp	r0, r6
 80116cc:	dbe7      	blt.n	801169e <__gethex+0x3ea>
 80116ce:	e7f0      	b.n	80116b2 <__gethex+0x3fe>
 80116d0:	0801540d 	.word	0x0801540d

080116d4 <L_shift>:
 80116d4:	f1c2 0208 	rsb	r2, r2, #8
 80116d8:	0092      	lsls	r2, r2, #2
 80116da:	b570      	push	{r4, r5, r6, lr}
 80116dc:	f1c2 0620 	rsb	r6, r2, #32
 80116e0:	6843      	ldr	r3, [r0, #4]
 80116e2:	6804      	ldr	r4, [r0, #0]
 80116e4:	fa03 f506 	lsl.w	r5, r3, r6
 80116e8:	432c      	orrs	r4, r5
 80116ea:	40d3      	lsrs	r3, r2
 80116ec:	6004      	str	r4, [r0, #0]
 80116ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80116f2:	4288      	cmp	r0, r1
 80116f4:	d3f4      	bcc.n	80116e0 <L_shift+0xc>
 80116f6:	bd70      	pop	{r4, r5, r6, pc}

080116f8 <__match>:
 80116f8:	b530      	push	{r4, r5, lr}
 80116fa:	6803      	ldr	r3, [r0, #0]
 80116fc:	3301      	adds	r3, #1
 80116fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011702:	b914      	cbnz	r4, 801170a <__match+0x12>
 8011704:	6003      	str	r3, [r0, #0]
 8011706:	2001      	movs	r0, #1
 8011708:	bd30      	pop	{r4, r5, pc}
 801170a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801170e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011712:	2d19      	cmp	r5, #25
 8011714:	bf98      	it	ls
 8011716:	3220      	addls	r2, #32
 8011718:	42a2      	cmp	r2, r4
 801171a:	d0f0      	beq.n	80116fe <__match+0x6>
 801171c:	2000      	movs	r0, #0
 801171e:	e7f3      	b.n	8011708 <__match+0x10>

08011720 <__hexnan>:
 8011720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	680b      	ldr	r3, [r1, #0]
 8011726:	6801      	ldr	r1, [r0, #0]
 8011728:	115e      	asrs	r6, r3, #5
 801172a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801172e:	f013 031f 	ands.w	r3, r3, #31
 8011732:	b087      	sub	sp, #28
 8011734:	bf18      	it	ne
 8011736:	3604      	addne	r6, #4
 8011738:	2500      	movs	r5, #0
 801173a:	1f37      	subs	r7, r6, #4
 801173c:	4682      	mov	sl, r0
 801173e:	4690      	mov	r8, r2
 8011740:	9301      	str	r3, [sp, #4]
 8011742:	f846 5c04 	str.w	r5, [r6, #-4]
 8011746:	46b9      	mov	r9, r7
 8011748:	463c      	mov	r4, r7
 801174a:	9502      	str	r5, [sp, #8]
 801174c:	46ab      	mov	fp, r5
 801174e:	784a      	ldrb	r2, [r1, #1]
 8011750:	1c4b      	adds	r3, r1, #1
 8011752:	9303      	str	r3, [sp, #12]
 8011754:	b342      	cbz	r2, 80117a8 <__hexnan+0x88>
 8011756:	4610      	mov	r0, r2
 8011758:	9105      	str	r1, [sp, #20]
 801175a:	9204      	str	r2, [sp, #16]
 801175c:	f7ff fd94 	bl	8011288 <__hexdig_fun>
 8011760:	2800      	cmp	r0, #0
 8011762:	d151      	bne.n	8011808 <__hexnan+0xe8>
 8011764:	9a04      	ldr	r2, [sp, #16]
 8011766:	9905      	ldr	r1, [sp, #20]
 8011768:	2a20      	cmp	r2, #32
 801176a:	d818      	bhi.n	801179e <__hexnan+0x7e>
 801176c:	9b02      	ldr	r3, [sp, #8]
 801176e:	459b      	cmp	fp, r3
 8011770:	dd13      	ble.n	801179a <__hexnan+0x7a>
 8011772:	454c      	cmp	r4, r9
 8011774:	d206      	bcs.n	8011784 <__hexnan+0x64>
 8011776:	2d07      	cmp	r5, #7
 8011778:	dc04      	bgt.n	8011784 <__hexnan+0x64>
 801177a:	462a      	mov	r2, r5
 801177c:	4649      	mov	r1, r9
 801177e:	4620      	mov	r0, r4
 8011780:	f7ff ffa8 	bl	80116d4 <L_shift>
 8011784:	4544      	cmp	r4, r8
 8011786:	d952      	bls.n	801182e <__hexnan+0x10e>
 8011788:	2300      	movs	r3, #0
 801178a:	f1a4 0904 	sub.w	r9, r4, #4
 801178e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011792:	f8cd b008 	str.w	fp, [sp, #8]
 8011796:	464c      	mov	r4, r9
 8011798:	461d      	mov	r5, r3
 801179a:	9903      	ldr	r1, [sp, #12]
 801179c:	e7d7      	b.n	801174e <__hexnan+0x2e>
 801179e:	2a29      	cmp	r2, #41	@ 0x29
 80117a0:	d157      	bne.n	8011852 <__hexnan+0x132>
 80117a2:	3102      	adds	r1, #2
 80117a4:	f8ca 1000 	str.w	r1, [sl]
 80117a8:	f1bb 0f00 	cmp.w	fp, #0
 80117ac:	d051      	beq.n	8011852 <__hexnan+0x132>
 80117ae:	454c      	cmp	r4, r9
 80117b0:	d206      	bcs.n	80117c0 <__hexnan+0xa0>
 80117b2:	2d07      	cmp	r5, #7
 80117b4:	dc04      	bgt.n	80117c0 <__hexnan+0xa0>
 80117b6:	462a      	mov	r2, r5
 80117b8:	4649      	mov	r1, r9
 80117ba:	4620      	mov	r0, r4
 80117bc:	f7ff ff8a 	bl	80116d4 <L_shift>
 80117c0:	4544      	cmp	r4, r8
 80117c2:	d936      	bls.n	8011832 <__hexnan+0x112>
 80117c4:	f1a8 0204 	sub.w	r2, r8, #4
 80117c8:	4623      	mov	r3, r4
 80117ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80117ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80117d2:	429f      	cmp	r7, r3
 80117d4:	d2f9      	bcs.n	80117ca <__hexnan+0xaa>
 80117d6:	1b3b      	subs	r3, r7, r4
 80117d8:	f023 0303 	bic.w	r3, r3, #3
 80117dc:	3304      	adds	r3, #4
 80117de:	3401      	adds	r4, #1
 80117e0:	3e03      	subs	r6, #3
 80117e2:	42b4      	cmp	r4, r6
 80117e4:	bf88      	it	hi
 80117e6:	2304      	movhi	r3, #4
 80117e8:	4443      	add	r3, r8
 80117ea:	2200      	movs	r2, #0
 80117ec:	f843 2b04 	str.w	r2, [r3], #4
 80117f0:	429f      	cmp	r7, r3
 80117f2:	d2fb      	bcs.n	80117ec <__hexnan+0xcc>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	b91b      	cbnz	r3, 8011800 <__hexnan+0xe0>
 80117f8:	4547      	cmp	r7, r8
 80117fa:	d128      	bne.n	801184e <__hexnan+0x12e>
 80117fc:	2301      	movs	r3, #1
 80117fe:	603b      	str	r3, [r7, #0]
 8011800:	2005      	movs	r0, #5
 8011802:	b007      	add	sp, #28
 8011804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011808:	3501      	adds	r5, #1
 801180a:	2d08      	cmp	r5, #8
 801180c:	f10b 0b01 	add.w	fp, fp, #1
 8011810:	dd06      	ble.n	8011820 <__hexnan+0x100>
 8011812:	4544      	cmp	r4, r8
 8011814:	d9c1      	bls.n	801179a <__hexnan+0x7a>
 8011816:	2300      	movs	r3, #0
 8011818:	f844 3c04 	str.w	r3, [r4, #-4]
 801181c:	2501      	movs	r5, #1
 801181e:	3c04      	subs	r4, #4
 8011820:	6822      	ldr	r2, [r4, #0]
 8011822:	f000 000f 	and.w	r0, r0, #15
 8011826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801182a:	6020      	str	r0, [r4, #0]
 801182c:	e7b5      	b.n	801179a <__hexnan+0x7a>
 801182e:	2508      	movs	r5, #8
 8011830:	e7b3      	b.n	801179a <__hexnan+0x7a>
 8011832:	9b01      	ldr	r3, [sp, #4]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d0dd      	beq.n	80117f4 <__hexnan+0xd4>
 8011838:	f1c3 0320 	rsb	r3, r3, #32
 801183c:	f04f 32ff 	mov.w	r2, #4294967295
 8011840:	40da      	lsrs	r2, r3
 8011842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011846:	4013      	ands	r3, r2
 8011848:	f846 3c04 	str.w	r3, [r6, #-4]
 801184c:	e7d2      	b.n	80117f4 <__hexnan+0xd4>
 801184e:	3f04      	subs	r7, #4
 8011850:	e7d0      	b.n	80117f4 <__hexnan+0xd4>
 8011852:	2004      	movs	r0, #4
 8011854:	e7d5      	b.n	8011802 <__hexnan+0xe2>

08011856 <__ascii_mbtowc>:
 8011856:	b082      	sub	sp, #8
 8011858:	b901      	cbnz	r1, 801185c <__ascii_mbtowc+0x6>
 801185a:	a901      	add	r1, sp, #4
 801185c:	b142      	cbz	r2, 8011870 <__ascii_mbtowc+0x1a>
 801185e:	b14b      	cbz	r3, 8011874 <__ascii_mbtowc+0x1e>
 8011860:	7813      	ldrb	r3, [r2, #0]
 8011862:	600b      	str	r3, [r1, #0]
 8011864:	7812      	ldrb	r2, [r2, #0]
 8011866:	1e10      	subs	r0, r2, #0
 8011868:	bf18      	it	ne
 801186a:	2001      	movne	r0, #1
 801186c:	b002      	add	sp, #8
 801186e:	4770      	bx	lr
 8011870:	4610      	mov	r0, r2
 8011872:	e7fb      	b.n	801186c <__ascii_mbtowc+0x16>
 8011874:	f06f 0001 	mvn.w	r0, #1
 8011878:	e7f8      	b.n	801186c <__ascii_mbtowc+0x16>
	...

0801187c <_Balloc>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	69c6      	ldr	r6, [r0, #28]
 8011880:	4604      	mov	r4, r0
 8011882:	460d      	mov	r5, r1
 8011884:	b976      	cbnz	r6, 80118a4 <_Balloc+0x28>
 8011886:	2010      	movs	r0, #16
 8011888:	f7fc fefa 	bl	800e680 <malloc>
 801188c:	4602      	mov	r2, r0
 801188e:	61e0      	str	r0, [r4, #28]
 8011890:	b920      	cbnz	r0, 801189c <_Balloc+0x20>
 8011892:	4b18      	ldr	r3, [pc, #96]	@ (80118f4 <_Balloc+0x78>)
 8011894:	4818      	ldr	r0, [pc, #96]	@ (80118f8 <_Balloc+0x7c>)
 8011896:	216b      	movs	r1, #107	@ 0x6b
 8011898:	f000 ff48 	bl	801272c <__assert_func>
 801189c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118a0:	6006      	str	r6, [r0, #0]
 80118a2:	60c6      	str	r6, [r0, #12]
 80118a4:	69e6      	ldr	r6, [r4, #28]
 80118a6:	68f3      	ldr	r3, [r6, #12]
 80118a8:	b183      	cbz	r3, 80118cc <_Balloc+0x50>
 80118aa:	69e3      	ldr	r3, [r4, #28]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118b2:	b9b8      	cbnz	r0, 80118e4 <_Balloc+0x68>
 80118b4:	2101      	movs	r1, #1
 80118b6:	fa01 f605 	lsl.w	r6, r1, r5
 80118ba:	1d72      	adds	r2, r6, #5
 80118bc:	0092      	lsls	r2, r2, #2
 80118be:	4620      	mov	r0, r4
 80118c0:	f000 ff52 	bl	8012768 <_calloc_r>
 80118c4:	b160      	cbz	r0, 80118e0 <_Balloc+0x64>
 80118c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80118ca:	e00e      	b.n	80118ea <_Balloc+0x6e>
 80118cc:	2221      	movs	r2, #33	@ 0x21
 80118ce:	2104      	movs	r1, #4
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 ff49 	bl	8012768 <_calloc_r>
 80118d6:	69e3      	ldr	r3, [r4, #28]
 80118d8:	60f0      	str	r0, [r6, #12]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1e4      	bne.n	80118aa <_Balloc+0x2e>
 80118e0:	2000      	movs	r0, #0
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	6802      	ldr	r2, [r0, #0]
 80118e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118ea:	2300      	movs	r3, #0
 80118ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80118f0:	e7f7      	b.n	80118e2 <_Balloc+0x66>
 80118f2:	bf00      	nop
 80118f4:	0801539e 	.word	0x0801539e
 80118f8:	0801547e 	.word	0x0801547e

080118fc <_Bfree>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	69c6      	ldr	r6, [r0, #28]
 8011900:	4605      	mov	r5, r0
 8011902:	460c      	mov	r4, r1
 8011904:	b976      	cbnz	r6, 8011924 <_Bfree+0x28>
 8011906:	2010      	movs	r0, #16
 8011908:	f7fc feba 	bl	800e680 <malloc>
 801190c:	4602      	mov	r2, r0
 801190e:	61e8      	str	r0, [r5, #28]
 8011910:	b920      	cbnz	r0, 801191c <_Bfree+0x20>
 8011912:	4b09      	ldr	r3, [pc, #36]	@ (8011938 <_Bfree+0x3c>)
 8011914:	4809      	ldr	r0, [pc, #36]	@ (801193c <_Bfree+0x40>)
 8011916:	218f      	movs	r1, #143	@ 0x8f
 8011918:	f000 ff08 	bl	801272c <__assert_func>
 801191c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011920:	6006      	str	r6, [r0, #0]
 8011922:	60c6      	str	r6, [r0, #12]
 8011924:	b13c      	cbz	r4, 8011936 <_Bfree+0x3a>
 8011926:	69eb      	ldr	r3, [r5, #28]
 8011928:	6862      	ldr	r2, [r4, #4]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011930:	6021      	str	r1, [r4, #0]
 8011932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	0801539e 	.word	0x0801539e
 801193c:	0801547e 	.word	0x0801547e

08011940 <__multadd>:
 8011940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011944:	690d      	ldr	r5, [r1, #16]
 8011946:	4607      	mov	r7, r0
 8011948:	460c      	mov	r4, r1
 801194a:	461e      	mov	r6, r3
 801194c:	f101 0c14 	add.w	ip, r1, #20
 8011950:	2000      	movs	r0, #0
 8011952:	f8dc 3000 	ldr.w	r3, [ip]
 8011956:	b299      	uxth	r1, r3
 8011958:	fb02 6101 	mla	r1, r2, r1, r6
 801195c:	0c1e      	lsrs	r6, r3, #16
 801195e:	0c0b      	lsrs	r3, r1, #16
 8011960:	fb02 3306 	mla	r3, r2, r6, r3
 8011964:	b289      	uxth	r1, r1
 8011966:	3001      	adds	r0, #1
 8011968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801196c:	4285      	cmp	r5, r0
 801196e:	f84c 1b04 	str.w	r1, [ip], #4
 8011972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011976:	dcec      	bgt.n	8011952 <__multadd+0x12>
 8011978:	b30e      	cbz	r6, 80119be <__multadd+0x7e>
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	42ab      	cmp	r3, r5
 801197e:	dc19      	bgt.n	80119b4 <__multadd+0x74>
 8011980:	6861      	ldr	r1, [r4, #4]
 8011982:	4638      	mov	r0, r7
 8011984:	3101      	adds	r1, #1
 8011986:	f7ff ff79 	bl	801187c <_Balloc>
 801198a:	4680      	mov	r8, r0
 801198c:	b928      	cbnz	r0, 801199a <__multadd+0x5a>
 801198e:	4602      	mov	r2, r0
 8011990:	4b0c      	ldr	r3, [pc, #48]	@ (80119c4 <__multadd+0x84>)
 8011992:	480d      	ldr	r0, [pc, #52]	@ (80119c8 <__multadd+0x88>)
 8011994:	21ba      	movs	r1, #186	@ 0xba
 8011996:	f000 fec9 	bl	801272c <__assert_func>
 801199a:	6922      	ldr	r2, [r4, #16]
 801199c:	3202      	adds	r2, #2
 801199e:	f104 010c 	add.w	r1, r4, #12
 80119a2:	0092      	lsls	r2, r2, #2
 80119a4:	300c      	adds	r0, #12
 80119a6:	f7fe fd68 	bl	801047a <memcpy>
 80119aa:	4621      	mov	r1, r4
 80119ac:	4638      	mov	r0, r7
 80119ae:	f7ff ffa5 	bl	80118fc <_Bfree>
 80119b2:	4644      	mov	r4, r8
 80119b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119b8:	3501      	adds	r5, #1
 80119ba:	615e      	str	r6, [r3, #20]
 80119bc:	6125      	str	r5, [r4, #16]
 80119be:	4620      	mov	r0, r4
 80119c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c4:	0801540d 	.word	0x0801540d
 80119c8:	0801547e 	.word	0x0801547e

080119cc <__s2b>:
 80119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d0:	460c      	mov	r4, r1
 80119d2:	4615      	mov	r5, r2
 80119d4:	461f      	mov	r7, r3
 80119d6:	2209      	movs	r2, #9
 80119d8:	3308      	adds	r3, #8
 80119da:	4606      	mov	r6, r0
 80119dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80119e0:	2100      	movs	r1, #0
 80119e2:	2201      	movs	r2, #1
 80119e4:	429a      	cmp	r2, r3
 80119e6:	db09      	blt.n	80119fc <__s2b+0x30>
 80119e8:	4630      	mov	r0, r6
 80119ea:	f7ff ff47 	bl	801187c <_Balloc>
 80119ee:	b940      	cbnz	r0, 8011a02 <__s2b+0x36>
 80119f0:	4602      	mov	r2, r0
 80119f2:	4b19      	ldr	r3, [pc, #100]	@ (8011a58 <__s2b+0x8c>)
 80119f4:	4819      	ldr	r0, [pc, #100]	@ (8011a5c <__s2b+0x90>)
 80119f6:	21d3      	movs	r1, #211	@ 0xd3
 80119f8:	f000 fe98 	bl	801272c <__assert_func>
 80119fc:	0052      	lsls	r2, r2, #1
 80119fe:	3101      	adds	r1, #1
 8011a00:	e7f0      	b.n	80119e4 <__s2b+0x18>
 8011a02:	9b08      	ldr	r3, [sp, #32]
 8011a04:	6143      	str	r3, [r0, #20]
 8011a06:	2d09      	cmp	r5, #9
 8011a08:	f04f 0301 	mov.w	r3, #1
 8011a0c:	6103      	str	r3, [r0, #16]
 8011a0e:	dd16      	ble.n	8011a3e <__s2b+0x72>
 8011a10:	f104 0909 	add.w	r9, r4, #9
 8011a14:	46c8      	mov	r8, r9
 8011a16:	442c      	add	r4, r5
 8011a18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a1c:	4601      	mov	r1, r0
 8011a1e:	3b30      	subs	r3, #48	@ 0x30
 8011a20:	220a      	movs	r2, #10
 8011a22:	4630      	mov	r0, r6
 8011a24:	f7ff ff8c 	bl	8011940 <__multadd>
 8011a28:	45a0      	cmp	r8, r4
 8011a2a:	d1f5      	bne.n	8011a18 <__s2b+0x4c>
 8011a2c:	f1a5 0408 	sub.w	r4, r5, #8
 8011a30:	444c      	add	r4, r9
 8011a32:	1b2d      	subs	r5, r5, r4
 8011a34:	1963      	adds	r3, r4, r5
 8011a36:	42bb      	cmp	r3, r7
 8011a38:	db04      	blt.n	8011a44 <__s2b+0x78>
 8011a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a3e:	340a      	adds	r4, #10
 8011a40:	2509      	movs	r5, #9
 8011a42:	e7f6      	b.n	8011a32 <__s2b+0x66>
 8011a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a48:	4601      	mov	r1, r0
 8011a4a:	3b30      	subs	r3, #48	@ 0x30
 8011a4c:	220a      	movs	r2, #10
 8011a4e:	4630      	mov	r0, r6
 8011a50:	f7ff ff76 	bl	8011940 <__multadd>
 8011a54:	e7ee      	b.n	8011a34 <__s2b+0x68>
 8011a56:	bf00      	nop
 8011a58:	0801540d 	.word	0x0801540d
 8011a5c:	0801547e 	.word	0x0801547e

08011a60 <__hi0bits>:
 8011a60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011a64:	4603      	mov	r3, r0
 8011a66:	bf36      	itet	cc
 8011a68:	0403      	lslcc	r3, r0, #16
 8011a6a:	2000      	movcs	r0, #0
 8011a6c:	2010      	movcc	r0, #16
 8011a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a72:	bf3c      	itt	cc
 8011a74:	021b      	lslcc	r3, r3, #8
 8011a76:	3008      	addcc	r0, #8
 8011a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a7c:	bf3c      	itt	cc
 8011a7e:	011b      	lslcc	r3, r3, #4
 8011a80:	3004      	addcc	r0, #4
 8011a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a86:	bf3c      	itt	cc
 8011a88:	009b      	lslcc	r3, r3, #2
 8011a8a:	3002      	addcc	r0, #2
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	db05      	blt.n	8011a9c <__hi0bits+0x3c>
 8011a90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011a94:	f100 0001 	add.w	r0, r0, #1
 8011a98:	bf08      	it	eq
 8011a9a:	2020      	moveq	r0, #32
 8011a9c:	4770      	bx	lr

08011a9e <__lo0bits>:
 8011a9e:	6803      	ldr	r3, [r0, #0]
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	f013 0007 	ands.w	r0, r3, #7
 8011aa6:	d00b      	beq.n	8011ac0 <__lo0bits+0x22>
 8011aa8:	07d9      	lsls	r1, r3, #31
 8011aaa:	d421      	bmi.n	8011af0 <__lo0bits+0x52>
 8011aac:	0798      	lsls	r0, r3, #30
 8011aae:	bf49      	itett	mi
 8011ab0:	085b      	lsrmi	r3, r3, #1
 8011ab2:	089b      	lsrpl	r3, r3, #2
 8011ab4:	2001      	movmi	r0, #1
 8011ab6:	6013      	strmi	r3, [r2, #0]
 8011ab8:	bf5c      	itt	pl
 8011aba:	6013      	strpl	r3, [r2, #0]
 8011abc:	2002      	movpl	r0, #2
 8011abe:	4770      	bx	lr
 8011ac0:	b299      	uxth	r1, r3
 8011ac2:	b909      	cbnz	r1, 8011ac8 <__lo0bits+0x2a>
 8011ac4:	0c1b      	lsrs	r3, r3, #16
 8011ac6:	2010      	movs	r0, #16
 8011ac8:	b2d9      	uxtb	r1, r3
 8011aca:	b909      	cbnz	r1, 8011ad0 <__lo0bits+0x32>
 8011acc:	3008      	adds	r0, #8
 8011ace:	0a1b      	lsrs	r3, r3, #8
 8011ad0:	0719      	lsls	r1, r3, #28
 8011ad2:	bf04      	itt	eq
 8011ad4:	091b      	lsreq	r3, r3, #4
 8011ad6:	3004      	addeq	r0, #4
 8011ad8:	0799      	lsls	r1, r3, #30
 8011ada:	bf04      	itt	eq
 8011adc:	089b      	lsreq	r3, r3, #2
 8011ade:	3002      	addeq	r0, #2
 8011ae0:	07d9      	lsls	r1, r3, #31
 8011ae2:	d403      	bmi.n	8011aec <__lo0bits+0x4e>
 8011ae4:	085b      	lsrs	r3, r3, #1
 8011ae6:	f100 0001 	add.w	r0, r0, #1
 8011aea:	d003      	beq.n	8011af4 <__lo0bits+0x56>
 8011aec:	6013      	str	r3, [r2, #0]
 8011aee:	4770      	bx	lr
 8011af0:	2000      	movs	r0, #0
 8011af2:	4770      	bx	lr
 8011af4:	2020      	movs	r0, #32
 8011af6:	4770      	bx	lr

08011af8 <__i2b>:
 8011af8:	b510      	push	{r4, lr}
 8011afa:	460c      	mov	r4, r1
 8011afc:	2101      	movs	r1, #1
 8011afe:	f7ff febd 	bl	801187c <_Balloc>
 8011b02:	4602      	mov	r2, r0
 8011b04:	b928      	cbnz	r0, 8011b12 <__i2b+0x1a>
 8011b06:	4b05      	ldr	r3, [pc, #20]	@ (8011b1c <__i2b+0x24>)
 8011b08:	4805      	ldr	r0, [pc, #20]	@ (8011b20 <__i2b+0x28>)
 8011b0a:	f240 1145 	movw	r1, #325	@ 0x145
 8011b0e:	f000 fe0d 	bl	801272c <__assert_func>
 8011b12:	2301      	movs	r3, #1
 8011b14:	6144      	str	r4, [r0, #20]
 8011b16:	6103      	str	r3, [r0, #16]
 8011b18:	bd10      	pop	{r4, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0801540d 	.word	0x0801540d
 8011b20:	0801547e 	.word	0x0801547e

08011b24 <__multiply>:
 8011b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b28:	4614      	mov	r4, r2
 8011b2a:	690a      	ldr	r2, [r1, #16]
 8011b2c:	6923      	ldr	r3, [r4, #16]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	bfa8      	it	ge
 8011b32:	4623      	movge	r3, r4
 8011b34:	460f      	mov	r7, r1
 8011b36:	bfa4      	itt	ge
 8011b38:	460c      	movge	r4, r1
 8011b3a:	461f      	movge	r7, r3
 8011b3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011b40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011b44:	68a3      	ldr	r3, [r4, #8]
 8011b46:	6861      	ldr	r1, [r4, #4]
 8011b48:	eb0a 0609 	add.w	r6, sl, r9
 8011b4c:	42b3      	cmp	r3, r6
 8011b4e:	b085      	sub	sp, #20
 8011b50:	bfb8      	it	lt
 8011b52:	3101      	addlt	r1, #1
 8011b54:	f7ff fe92 	bl	801187c <_Balloc>
 8011b58:	b930      	cbnz	r0, 8011b68 <__multiply+0x44>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	4b44      	ldr	r3, [pc, #272]	@ (8011c70 <__multiply+0x14c>)
 8011b5e:	4845      	ldr	r0, [pc, #276]	@ (8011c74 <__multiply+0x150>)
 8011b60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011b64:	f000 fde2 	bl	801272c <__assert_func>
 8011b68:	f100 0514 	add.w	r5, r0, #20
 8011b6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b70:	462b      	mov	r3, r5
 8011b72:	2200      	movs	r2, #0
 8011b74:	4543      	cmp	r3, r8
 8011b76:	d321      	bcc.n	8011bbc <__multiply+0x98>
 8011b78:	f107 0114 	add.w	r1, r7, #20
 8011b7c:	f104 0214 	add.w	r2, r4, #20
 8011b80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011b84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011b88:	9302      	str	r3, [sp, #8]
 8011b8a:	1b13      	subs	r3, r2, r4
 8011b8c:	3b15      	subs	r3, #21
 8011b8e:	f023 0303 	bic.w	r3, r3, #3
 8011b92:	3304      	adds	r3, #4
 8011b94:	f104 0715 	add.w	r7, r4, #21
 8011b98:	42ba      	cmp	r2, r7
 8011b9a:	bf38      	it	cc
 8011b9c:	2304      	movcc	r3, #4
 8011b9e:	9301      	str	r3, [sp, #4]
 8011ba0:	9b02      	ldr	r3, [sp, #8]
 8011ba2:	9103      	str	r1, [sp, #12]
 8011ba4:	428b      	cmp	r3, r1
 8011ba6:	d80c      	bhi.n	8011bc2 <__multiply+0x9e>
 8011ba8:	2e00      	cmp	r6, #0
 8011baa:	dd03      	ble.n	8011bb4 <__multiply+0x90>
 8011bac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d05b      	beq.n	8011c6c <__multiply+0x148>
 8011bb4:	6106      	str	r6, [r0, #16]
 8011bb6:	b005      	add	sp, #20
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	f843 2b04 	str.w	r2, [r3], #4
 8011bc0:	e7d8      	b.n	8011b74 <__multiply+0x50>
 8011bc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8011bc6:	f1ba 0f00 	cmp.w	sl, #0
 8011bca:	d024      	beq.n	8011c16 <__multiply+0xf2>
 8011bcc:	f104 0e14 	add.w	lr, r4, #20
 8011bd0:	46a9      	mov	r9, r5
 8011bd2:	f04f 0c00 	mov.w	ip, #0
 8011bd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011bda:	f8d9 3000 	ldr.w	r3, [r9]
 8011bde:	fa1f fb87 	uxth.w	fp, r7
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	fb0a 330b 	mla	r3, sl, fp, r3
 8011be8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011bec:	f8d9 7000 	ldr.w	r7, [r9]
 8011bf0:	4463      	add	r3, ip
 8011bf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011bf6:	fb0a c70b 	mla	r7, sl, fp, ip
 8011bfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c04:	4572      	cmp	r2, lr
 8011c06:	f849 3b04 	str.w	r3, [r9], #4
 8011c0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c0e:	d8e2      	bhi.n	8011bd6 <__multiply+0xb2>
 8011c10:	9b01      	ldr	r3, [sp, #4]
 8011c12:	f845 c003 	str.w	ip, [r5, r3]
 8011c16:	9b03      	ldr	r3, [sp, #12]
 8011c18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011c1c:	3104      	adds	r1, #4
 8011c1e:	f1b9 0f00 	cmp.w	r9, #0
 8011c22:	d021      	beq.n	8011c68 <__multiply+0x144>
 8011c24:	682b      	ldr	r3, [r5, #0]
 8011c26:	f104 0c14 	add.w	ip, r4, #20
 8011c2a:	46ae      	mov	lr, r5
 8011c2c:	f04f 0a00 	mov.w	sl, #0
 8011c30:	f8bc b000 	ldrh.w	fp, [ip]
 8011c34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011c38:	fb09 770b 	mla	r7, r9, fp, r7
 8011c3c:	4457      	add	r7, sl
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c44:	f84e 3b04 	str.w	r3, [lr], #4
 8011c48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011c4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c50:	f8be 3000 	ldrh.w	r3, [lr]
 8011c54:	fb09 330a 	mla	r3, r9, sl, r3
 8011c58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011c5c:	4562      	cmp	r2, ip
 8011c5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c62:	d8e5      	bhi.n	8011c30 <__multiply+0x10c>
 8011c64:	9f01      	ldr	r7, [sp, #4]
 8011c66:	51eb      	str	r3, [r5, r7]
 8011c68:	3504      	adds	r5, #4
 8011c6a:	e799      	b.n	8011ba0 <__multiply+0x7c>
 8011c6c:	3e01      	subs	r6, #1
 8011c6e:	e79b      	b.n	8011ba8 <__multiply+0x84>
 8011c70:	0801540d 	.word	0x0801540d
 8011c74:	0801547e 	.word	0x0801547e

08011c78 <__pow5mult>:
 8011c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c7c:	4615      	mov	r5, r2
 8011c7e:	f012 0203 	ands.w	r2, r2, #3
 8011c82:	4607      	mov	r7, r0
 8011c84:	460e      	mov	r6, r1
 8011c86:	d007      	beq.n	8011c98 <__pow5mult+0x20>
 8011c88:	4c25      	ldr	r4, [pc, #148]	@ (8011d20 <__pow5mult+0xa8>)
 8011c8a:	3a01      	subs	r2, #1
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c92:	f7ff fe55 	bl	8011940 <__multadd>
 8011c96:	4606      	mov	r6, r0
 8011c98:	10ad      	asrs	r5, r5, #2
 8011c9a:	d03d      	beq.n	8011d18 <__pow5mult+0xa0>
 8011c9c:	69fc      	ldr	r4, [r7, #28]
 8011c9e:	b97c      	cbnz	r4, 8011cc0 <__pow5mult+0x48>
 8011ca0:	2010      	movs	r0, #16
 8011ca2:	f7fc fced 	bl	800e680 <malloc>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	61f8      	str	r0, [r7, #28]
 8011caa:	b928      	cbnz	r0, 8011cb8 <__pow5mult+0x40>
 8011cac:	4b1d      	ldr	r3, [pc, #116]	@ (8011d24 <__pow5mult+0xac>)
 8011cae:	481e      	ldr	r0, [pc, #120]	@ (8011d28 <__pow5mult+0xb0>)
 8011cb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011cb4:	f000 fd3a 	bl	801272c <__assert_func>
 8011cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011cbc:	6004      	str	r4, [r0, #0]
 8011cbe:	60c4      	str	r4, [r0, #12]
 8011cc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011cc8:	b94c      	cbnz	r4, 8011cde <__pow5mult+0x66>
 8011cca:	f240 2171 	movw	r1, #625	@ 0x271
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f7ff ff12 	bl	8011af8 <__i2b>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cda:	4604      	mov	r4, r0
 8011cdc:	6003      	str	r3, [r0, #0]
 8011cde:	f04f 0900 	mov.w	r9, #0
 8011ce2:	07eb      	lsls	r3, r5, #31
 8011ce4:	d50a      	bpl.n	8011cfc <__pow5mult+0x84>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	4622      	mov	r2, r4
 8011cea:	4638      	mov	r0, r7
 8011cec:	f7ff ff1a 	bl	8011b24 <__multiply>
 8011cf0:	4631      	mov	r1, r6
 8011cf2:	4680      	mov	r8, r0
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	f7ff fe01 	bl	80118fc <_Bfree>
 8011cfa:	4646      	mov	r6, r8
 8011cfc:	106d      	asrs	r5, r5, #1
 8011cfe:	d00b      	beq.n	8011d18 <__pow5mult+0xa0>
 8011d00:	6820      	ldr	r0, [r4, #0]
 8011d02:	b938      	cbnz	r0, 8011d14 <__pow5mult+0x9c>
 8011d04:	4622      	mov	r2, r4
 8011d06:	4621      	mov	r1, r4
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff ff0b 	bl	8011b24 <__multiply>
 8011d0e:	6020      	str	r0, [r4, #0]
 8011d10:	f8c0 9000 	str.w	r9, [r0]
 8011d14:	4604      	mov	r4, r0
 8011d16:	e7e4      	b.n	8011ce2 <__pow5mult+0x6a>
 8011d18:	4630      	mov	r0, r6
 8011d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d1e:	bf00      	nop
 8011d20:	080154d8 	.word	0x080154d8
 8011d24:	0801539e 	.word	0x0801539e
 8011d28:	0801547e 	.word	0x0801547e

08011d2c <__lshift>:
 8011d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d30:	460c      	mov	r4, r1
 8011d32:	6849      	ldr	r1, [r1, #4]
 8011d34:	6923      	ldr	r3, [r4, #16]
 8011d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d3a:	68a3      	ldr	r3, [r4, #8]
 8011d3c:	4607      	mov	r7, r0
 8011d3e:	4691      	mov	r9, r2
 8011d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d44:	f108 0601 	add.w	r6, r8, #1
 8011d48:	42b3      	cmp	r3, r6
 8011d4a:	db0b      	blt.n	8011d64 <__lshift+0x38>
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	f7ff fd95 	bl	801187c <_Balloc>
 8011d52:	4605      	mov	r5, r0
 8011d54:	b948      	cbnz	r0, 8011d6a <__lshift+0x3e>
 8011d56:	4602      	mov	r2, r0
 8011d58:	4b28      	ldr	r3, [pc, #160]	@ (8011dfc <__lshift+0xd0>)
 8011d5a:	4829      	ldr	r0, [pc, #164]	@ (8011e00 <__lshift+0xd4>)
 8011d5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011d60:	f000 fce4 	bl	801272c <__assert_func>
 8011d64:	3101      	adds	r1, #1
 8011d66:	005b      	lsls	r3, r3, #1
 8011d68:	e7ee      	b.n	8011d48 <__lshift+0x1c>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f100 0114 	add.w	r1, r0, #20
 8011d70:	f100 0210 	add.w	r2, r0, #16
 8011d74:	4618      	mov	r0, r3
 8011d76:	4553      	cmp	r3, sl
 8011d78:	db33      	blt.n	8011de2 <__lshift+0xb6>
 8011d7a:	6920      	ldr	r0, [r4, #16]
 8011d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d80:	f104 0314 	add.w	r3, r4, #20
 8011d84:	f019 091f 	ands.w	r9, r9, #31
 8011d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d90:	d02b      	beq.n	8011dea <__lshift+0xbe>
 8011d92:	f1c9 0e20 	rsb	lr, r9, #32
 8011d96:	468a      	mov	sl, r1
 8011d98:	2200      	movs	r2, #0
 8011d9a:	6818      	ldr	r0, [r3, #0]
 8011d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8011da0:	4310      	orrs	r0, r2
 8011da2:	f84a 0b04 	str.w	r0, [sl], #4
 8011da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011daa:	459c      	cmp	ip, r3
 8011dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8011db0:	d8f3      	bhi.n	8011d9a <__lshift+0x6e>
 8011db2:	ebac 0304 	sub.w	r3, ip, r4
 8011db6:	3b15      	subs	r3, #21
 8011db8:	f023 0303 	bic.w	r3, r3, #3
 8011dbc:	3304      	adds	r3, #4
 8011dbe:	f104 0015 	add.w	r0, r4, #21
 8011dc2:	4584      	cmp	ip, r0
 8011dc4:	bf38      	it	cc
 8011dc6:	2304      	movcc	r3, #4
 8011dc8:	50ca      	str	r2, [r1, r3]
 8011dca:	b10a      	cbz	r2, 8011dd0 <__lshift+0xa4>
 8011dcc:	f108 0602 	add.w	r6, r8, #2
 8011dd0:	3e01      	subs	r6, #1
 8011dd2:	4638      	mov	r0, r7
 8011dd4:	612e      	str	r6, [r5, #16]
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	f7ff fd90 	bl	80118fc <_Bfree>
 8011ddc:	4628      	mov	r0, r5
 8011dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011de6:	3301      	adds	r3, #1
 8011de8:	e7c5      	b.n	8011d76 <__lshift+0x4a>
 8011dea:	3904      	subs	r1, #4
 8011dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011df4:	459c      	cmp	ip, r3
 8011df6:	d8f9      	bhi.n	8011dec <__lshift+0xc0>
 8011df8:	e7ea      	b.n	8011dd0 <__lshift+0xa4>
 8011dfa:	bf00      	nop
 8011dfc:	0801540d 	.word	0x0801540d
 8011e00:	0801547e 	.word	0x0801547e

08011e04 <__mcmp>:
 8011e04:	690a      	ldr	r2, [r1, #16]
 8011e06:	4603      	mov	r3, r0
 8011e08:	6900      	ldr	r0, [r0, #16]
 8011e0a:	1a80      	subs	r0, r0, r2
 8011e0c:	b530      	push	{r4, r5, lr}
 8011e0e:	d10e      	bne.n	8011e2e <__mcmp+0x2a>
 8011e10:	3314      	adds	r3, #20
 8011e12:	3114      	adds	r1, #20
 8011e14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011e18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011e1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011e20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011e24:	4295      	cmp	r5, r2
 8011e26:	d003      	beq.n	8011e30 <__mcmp+0x2c>
 8011e28:	d205      	bcs.n	8011e36 <__mcmp+0x32>
 8011e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e2e:	bd30      	pop	{r4, r5, pc}
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d3f3      	bcc.n	8011e1c <__mcmp+0x18>
 8011e34:	e7fb      	b.n	8011e2e <__mcmp+0x2a>
 8011e36:	2001      	movs	r0, #1
 8011e38:	e7f9      	b.n	8011e2e <__mcmp+0x2a>
	...

08011e3c <__mdiff>:
 8011e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e40:	4689      	mov	r9, r1
 8011e42:	4606      	mov	r6, r0
 8011e44:	4611      	mov	r1, r2
 8011e46:	4648      	mov	r0, r9
 8011e48:	4614      	mov	r4, r2
 8011e4a:	f7ff ffdb 	bl	8011e04 <__mcmp>
 8011e4e:	1e05      	subs	r5, r0, #0
 8011e50:	d112      	bne.n	8011e78 <__mdiff+0x3c>
 8011e52:	4629      	mov	r1, r5
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7ff fd11 	bl	801187c <_Balloc>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	b928      	cbnz	r0, 8011e6a <__mdiff+0x2e>
 8011e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8011f5c <__mdiff+0x120>)
 8011e60:	f240 2137 	movw	r1, #567	@ 0x237
 8011e64:	483e      	ldr	r0, [pc, #248]	@ (8011f60 <__mdiff+0x124>)
 8011e66:	f000 fc61 	bl	801272c <__assert_func>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e70:	4610      	mov	r0, r2
 8011e72:	b003      	add	sp, #12
 8011e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e78:	bfbc      	itt	lt
 8011e7a:	464b      	movlt	r3, r9
 8011e7c:	46a1      	movlt	r9, r4
 8011e7e:	4630      	mov	r0, r6
 8011e80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011e84:	bfba      	itte	lt
 8011e86:	461c      	movlt	r4, r3
 8011e88:	2501      	movlt	r5, #1
 8011e8a:	2500      	movge	r5, #0
 8011e8c:	f7ff fcf6 	bl	801187c <_Balloc>
 8011e90:	4602      	mov	r2, r0
 8011e92:	b918      	cbnz	r0, 8011e9c <__mdiff+0x60>
 8011e94:	4b31      	ldr	r3, [pc, #196]	@ (8011f5c <__mdiff+0x120>)
 8011e96:	f240 2145 	movw	r1, #581	@ 0x245
 8011e9a:	e7e3      	b.n	8011e64 <__mdiff+0x28>
 8011e9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ea0:	6926      	ldr	r6, [r4, #16]
 8011ea2:	60c5      	str	r5, [r0, #12]
 8011ea4:	f109 0310 	add.w	r3, r9, #16
 8011ea8:	f109 0514 	add.w	r5, r9, #20
 8011eac:	f104 0e14 	add.w	lr, r4, #20
 8011eb0:	f100 0b14 	add.w	fp, r0, #20
 8011eb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011eb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011ebc:	9301      	str	r3, [sp, #4]
 8011ebe:	46d9      	mov	r9, fp
 8011ec0:	f04f 0c00 	mov.w	ip, #0
 8011ec4:	9b01      	ldr	r3, [sp, #4]
 8011ec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011eca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	fa1f f38a 	uxth.w	r3, sl
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	b283      	uxth	r3, r0
 8011ed8:	1acb      	subs	r3, r1, r3
 8011eda:	0c00      	lsrs	r0, r0, #16
 8011edc:	4463      	add	r3, ip
 8011ede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011ee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011eec:	4576      	cmp	r6, lr
 8011eee:	f849 3b04 	str.w	r3, [r9], #4
 8011ef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ef6:	d8e5      	bhi.n	8011ec4 <__mdiff+0x88>
 8011ef8:	1b33      	subs	r3, r6, r4
 8011efa:	3b15      	subs	r3, #21
 8011efc:	f023 0303 	bic.w	r3, r3, #3
 8011f00:	3415      	adds	r4, #21
 8011f02:	3304      	adds	r3, #4
 8011f04:	42a6      	cmp	r6, r4
 8011f06:	bf38      	it	cc
 8011f08:	2304      	movcc	r3, #4
 8011f0a:	441d      	add	r5, r3
 8011f0c:	445b      	add	r3, fp
 8011f0e:	461e      	mov	r6, r3
 8011f10:	462c      	mov	r4, r5
 8011f12:	4544      	cmp	r4, r8
 8011f14:	d30e      	bcc.n	8011f34 <__mdiff+0xf8>
 8011f16:	f108 0103 	add.w	r1, r8, #3
 8011f1a:	1b49      	subs	r1, r1, r5
 8011f1c:	f021 0103 	bic.w	r1, r1, #3
 8011f20:	3d03      	subs	r5, #3
 8011f22:	45a8      	cmp	r8, r5
 8011f24:	bf38      	it	cc
 8011f26:	2100      	movcc	r1, #0
 8011f28:	440b      	add	r3, r1
 8011f2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f2e:	b191      	cbz	r1, 8011f56 <__mdiff+0x11a>
 8011f30:	6117      	str	r7, [r2, #16]
 8011f32:	e79d      	b.n	8011e70 <__mdiff+0x34>
 8011f34:	f854 1b04 	ldr.w	r1, [r4], #4
 8011f38:	46e6      	mov	lr, ip
 8011f3a:	0c08      	lsrs	r0, r1, #16
 8011f3c:	fa1c fc81 	uxtah	ip, ip, r1
 8011f40:	4471      	add	r1, lr
 8011f42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011f46:	b289      	uxth	r1, r1
 8011f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011f4c:	f846 1b04 	str.w	r1, [r6], #4
 8011f50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f54:	e7dd      	b.n	8011f12 <__mdiff+0xd6>
 8011f56:	3f01      	subs	r7, #1
 8011f58:	e7e7      	b.n	8011f2a <__mdiff+0xee>
 8011f5a:	bf00      	nop
 8011f5c:	0801540d 	.word	0x0801540d
 8011f60:	0801547e 	.word	0x0801547e

08011f64 <__ulp>:
 8011f64:	b082      	sub	sp, #8
 8011f66:	ed8d 0b00 	vstr	d0, [sp]
 8011f6a:	9a01      	ldr	r2, [sp, #4]
 8011f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8011fac <__ulp+0x48>)
 8011f6e:	4013      	ands	r3, r2
 8011f70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dc08      	bgt.n	8011f8a <__ulp+0x26>
 8011f78:	425b      	negs	r3, r3
 8011f7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011f7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011f82:	da04      	bge.n	8011f8e <__ulp+0x2a>
 8011f84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011f88:	4113      	asrs	r3, r2
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	e008      	b.n	8011fa0 <__ulp+0x3c>
 8011f8e:	f1a2 0314 	sub.w	r3, r2, #20
 8011f92:	2b1e      	cmp	r3, #30
 8011f94:	bfda      	itte	le
 8011f96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011f9a:	40da      	lsrle	r2, r3
 8011f9c:	2201      	movgt	r2, #1
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	ec41 0b10 	vmov	d0, r0, r1
 8011fa8:	b002      	add	sp, #8
 8011faa:	4770      	bx	lr
 8011fac:	7ff00000 	.word	0x7ff00000

08011fb0 <__b2d>:
 8011fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb4:	6906      	ldr	r6, [r0, #16]
 8011fb6:	f100 0814 	add.w	r8, r0, #20
 8011fba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011fbe:	1f37      	subs	r7, r6, #4
 8011fc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	f7ff fd4b 	bl	8011a60 <__hi0bits>
 8011fca:	f1c0 0320 	rsb	r3, r0, #32
 8011fce:	280a      	cmp	r0, #10
 8011fd0:	600b      	str	r3, [r1, #0]
 8011fd2:	491b      	ldr	r1, [pc, #108]	@ (8012040 <__b2d+0x90>)
 8011fd4:	dc15      	bgt.n	8012002 <__b2d+0x52>
 8011fd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8011fda:	fa22 f30c 	lsr.w	r3, r2, ip
 8011fde:	45b8      	cmp	r8, r7
 8011fe0:	ea43 0501 	orr.w	r5, r3, r1
 8011fe4:	bf34      	ite	cc
 8011fe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011fea:	2300      	movcs	r3, #0
 8011fec:	3015      	adds	r0, #21
 8011fee:	fa02 f000 	lsl.w	r0, r2, r0
 8011ff2:	fa23 f30c 	lsr.w	r3, r3, ip
 8011ff6:	4303      	orrs	r3, r0
 8011ff8:	461c      	mov	r4, r3
 8011ffa:	ec45 4b10 	vmov	d0, r4, r5
 8011ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012002:	45b8      	cmp	r8, r7
 8012004:	bf3a      	itte	cc
 8012006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801200a:	f1a6 0708 	subcc.w	r7, r6, #8
 801200e:	2300      	movcs	r3, #0
 8012010:	380b      	subs	r0, #11
 8012012:	d012      	beq.n	801203a <__b2d+0x8a>
 8012014:	f1c0 0120 	rsb	r1, r0, #32
 8012018:	fa23 f401 	lsr.w	r4, r3, r1
 801201c:	4082      	lsls	r2, r0
 801201e:	4322      	orrs	r2, r4
 8012020:	4547      	cmp	r7, r8
 8012022:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012026:	bf8c      	ite	hi
 8012028:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801202c:	2200      	movls	r2, #0
 801202e:	4083      	lsls	r3, r0
 8012030:	40ca      	lsrs	r2, r1
 8012032:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012036:	4313      	orrs	r3, r2
 8012038:	e7de      	b.n	8011ff8 <__b2d+0x48>
 801203a:	ea42 0501 	orr.w	r5, r2, r1
 801203e:	e7db      	b.n	8011ff8 <__b2d+0x48>
 8012040:	3ff00000 	.word	0x3ff00000

08012044 <__d2b>:
 8012044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012048:	460f      	mov	r7, r1
 801204a:	2101      	movs	r1, #1
 801204c:	ec59 8b10 	vmov	r8, r9, d0
 8012050:	4616      	mov	r6, r2
 8012052:	f7ff fc13 	bl	801187c <_Balloc>
 8012056:	4604      	mov	r4, r0
 8012058:	b930      	cbnz	r0, 8012068 <__d2b+0x24>
 801205a:	4602      	mov	r2, r0
 801205c:	4b23      	ldr	r3, [pc, #140]	@ (80120ec <__d2b+0xa8>)
 801205e:	4824      	ldr	r0, [pc, #144]	@ (80120f0 <__d2b+0xac>)
 8012060:	f240 310f 	movw	r1, #783	@ 0x30f
 8012064:	f000 fb62 	bl	801272c <__assert_func>
 8012068:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801206c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012070:	b10d      	cbz	r5, 8012076 <__d2b+0x32>
 8012072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012076:	9301      	str	r3, [sp, #4]
 8012078:	f1b8 0300 	subs.w	r3, r8, #0
 801207c:	d023      	beq.n	80120c6 <__d2b+0x82>
 801207e:	4668      	mov	r0, sp
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	f7ff fd0c 	bl	8011a9e <__lo0bits>
 8012086:	e9dd 1200 	ldrd	r1, r2, [sp]
 801208a:	b1d0      	cbz	r0, 80120c2 <__d2b+0x7e>
 801208c:	f1c0 0320 	rsb	r3, r0, #32
 8012090:	fa02 f303 	lsl.w	r3, r2, r3
 8012094:	430b      	orrs	r3, r1
 8012096:	40c2      	lsrs	r2, r0
 8012098:	6163      	str	r3, [r4, #20]
 801209a:	9201      	str	r2, [sp, #4]
 801209c:	9b01      	ldr	r3, [sp, #4]
 801209e:	61a3      	str	r3, [r4, #24]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	bf0c      	ite	eq
 80120a4:	2201      	moveq	r2, #1
 80120a6:	2202      	movne	r2, #2
 80120a8:	6122      	str	r2, [r4, #16]
 80120aa:	b1a5      	cbz	r5, 80120d6 <__d2b+0x92>
 80120ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80120b0:	4405      	add	r5, r0
 80120b2:	603d      	str	r5, [r7, #0]
 80120b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80120b8:	6030      	str	r0, [r6, #0]
 80120ba:	4620      	mov	r0, r4
 80120bc:	b003      	add	sp, #12
 80120be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120c2:	6161      	str	r1, [r4, #20]
 80120c4:	e7ea      	b.n	801209c <__d2b+0x58>
 80120c6:	a801      	add	r0, sp, #4
 80120c8:	f7ff fce9 	bl	8011a9e <__lo0bits>
 80120cc:	9b01      	ldr	r3, [sp, #4]
 80120ce:	6163      	str	r3, [r4, #20]
 80120d0:	3020      	adds	r0, #32
 80120d2:	2201      	movs	r2, #1
 80120d4:	e7e8      	b.n	80120a8 <__d2b+0x64>
 80120d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80120de:	6038      	str	r0, [r7, #0]
 80120e0:	6918      	ldr	r0, [r3, #16]
 80120e2:	f7ff fcbd 	bl	8011a60 <__hi0bits>
 80120e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120ea:	e7e5      	b.n	80120b8 <__d2b+0x74>
 80120ec:	0801540d 	.word	0x0801540d
 80120f0:	0801547e 	.word	0x0801547e

080120f4 <__ratio>:
 80120f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	b085      	sub	sp, #20
 80120fa:	e9cd 1000 	strd	r1, r0, [sp]
 80120fe:	a902      	add	r1, sp, #8
 8012100:	f7ff ff56 	bl	8011fb0 <__b2d>
 8012104:	9800      	ldr	r0, [sp, #0]
 8012106:	a903      	add	r1, sp, #12
 8012108:	ec55 4b10 	vmov	r4, r5, d0
 801210c:	f7ff ff50 	bl	8011fb0 <__b2d>
 8012110:	9b01      	ldr	r3, [sp, #4]
 8012112:	6919      	ldr	r1, [r3, #16]
 8012114:	9b00      	ldr	r3, [sp, #0]
 8012116:	691b      	ldr	r3, [r3, #16]
 8012118:	1ac9      	subs	r1, r1, r3
 801211a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801211e:	1a9b      	subs	r3, r3, r2
 8012120:	ec5b ab10 	vmov	sl, fp, d0
 8012124:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012128:	2b00      	cmp	r3, #0
 801212a:	bfce      	itee	gt
 801212c:	462a      	movgt	r2, r5
 801212e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012132:	465a      	movle	r2, fp
 8012134:	462f      	mov	r7, r5
 8012136:	46d9      	mov	r9, fp
 8012138:	bfcc      	ite	gt
 801213a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801213e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012142:	464b      	mov	r3, r9
 8012144:	4652      	mov	r2, sl
 8012146:	4620      	mov	r0, r4
 8012148:	4639      	mov	r1, r7
 801214a:	f7ee fb9f 	bl	800088c <__aeabi_ddiv>
 801214e:	ec41 0b10 	vmov	d0, r0, r1
 8012152:	b005      	add	sp, #20
 8012154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012158 <__copybits>:
 8012158:	3901      	subs	r1, #1
 801215a:	b570      	push	{r4, r5, r6, lr}
 801215c:	1149      	asrs	r1, r1, #5
 801215e:	6914      	ldr	r4, [r2, #16]
 8012160:	3101      	adds	r1, #1
 8012162:	f102 0314 	add.w	r3, r2, #20
 8012166:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801216a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801216e:	1f05      	subs	r5, r0, #4
 8012170:	42a3      	cmp	r3, r4
 8012172:	d30c      	bcc.n	801218e <__copybits+0x36>
 8012174:	1aa3      	subs	r3, r4, r2
 8012176:	3b11      	subs	r3, #17
 8012178:	f023 0303 	bic.w	r3, r3, #3
 801217c:	3211      	adds	r2, #17
 801217e:	42a2      	cmp	r2, r4
 8012180:	bf88      	it	hi
 8012182:	2300      	movhi	r3, #0
 8012184:	4418      	add	r0, r3
 8012186:	2300      	movs	r3, #0
 8012188:	4288      	cmp	r0, r1
 801218a:	d305      	bcc.n	8012198 <__copybits+0x40>
 801218c:	bd70      	pop	{r4, r5, r6, pc}
 801218e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012192:	f845 6f04 	str.w	r6, [r5, #4]!
 8012196:	e7eb      	b.n	8012170 <__copybits+0x18>
 8012198:	f840 3b04 	str.w	r3, [r0], #4
 801219c:	e7f4      	b.n	8012188 <__copybits+0x30>

0801219e <__any_on>:
 801219e:	f100 0214 	add.w	r2, r0, #20
 80121a2:	6900      	ldr	r0, [r0, #16]
 80121a4:	114b      	asrs	r3, r1, #5
 80121a6:	4298      	cmp	r0, r3
 80121a8:	b510      	push	{r4, lr}
 80121aa:	db11      	blt.n	80121d0 <__any_on+0x32>
 80121ac:	dd0a      	ble.n	80121c4 <__any_on+0x26>
 80121ae:	f011 011f 	ands.w	r1, r1, #31
 80121b2:	d007      	beq.n	80121c4 <__any_on+0x26>
 80121b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80121b8:	fa24 f001 	lsr.w	r0, r4, r1
 80121bc:	fa00 f101 	lsl.w	r1, r0, r1
 80121c0:	428c      	cmp	r4, r1
 80121c2:	d10b      	bne.n	80121dc <__any_on+0x3e>
 80121c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d803      	bhi.n	80121d4 <__any_on+0x36>
 80121cc:	2000      	movs	r0, #0
 80121ce:	bd10      	pop	{r4, pc}
 80121d0:	4603      	mov	r3, r0
 80121d2:	e7f7      	b.n	80121c4 <__any_on+0x26>
 80121d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80121d8:	2900      	cmp	r1, #0
 80121da:	d0f5      	beq.n	80121c8 <__any_on+0x2a>
 80121dc:	2001      	movs	r0, #1
 80121de:	e7f6      	b.n	80121ce <__any_on+0x30>

080121e0 <_strtol_l.constprop.0>:
 80121e0:	2b24      	cmp	r3, #36	@ 0x24
 80121e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121e6:	4686      	mov	lr, r0
 80121e8:	4690      	mov	r8, r2
 80121ea:	d801      	bhi.n	80121f0 <_strtol_l.constprop.0+0x10>
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d106      	bne.n	80121fe <_strtol_l.constprop.0+0x1e>
 80121f0:	f7fe f916 	bl	8010420 <__errno>
 80121f4:	2316      	movs	r3, #22
 80121f6:	6003      	str	r3, [r0, #0]
 80121f8:	2000      	movs	r0, #0
 80121fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fe:	4834      	ldr	r0, [pc, #208]	@ (80122d0 <_strtol_l.constprop.0+0xf0>)
 8012200:	460d      	mov	r5, r1
 8012202:	462a      	mov	r2, r5
 8012204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012208:	5d06      	ldrb	r6, [r0, r4]
 801220a:	f016 0608 	ands.w	r6, r6, #8
 801220e:	d1f8      	bne.n	8012202 <_strtol_l.constprop.0+0x22>
 8012210:	2c2d      	cmp	r4, #45	@ 0x2d
 8012212:	d12d      	bne.n	8012270 <_strtol_l.constprop.0+0x90>
 8012214:	782c      	ldrb	r4, [r5, #0]
 8012216:	2601      	movs	r6, #1
 8012218:	1c95      	adds	r5, r2, #2
 801221a:	f033 0210 	bics.w	r2, r3, #16
 801221e:	d109      	bne.n	8012234 <_strtol_l.constprop.0+0x54>
 8012220:	2c30      	cmp	r4, #48	@ 0x30
 8012222:	d12a      	bne.n	801227a <_strtol_l.constprop.0+0x9a>
 8012224:	782a      	ldrb	r2, [r5, #0]
 8012226:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801222a:	2a58      	cmp	r2, #88	@ 0x58
 801222c:	d125      	bne.n	801227a <_strtol_l.constprop.0+0x9a>
 801222e:	786c      	ldrb	r4, [r5, #1]
 8012230:	2310      	movs	r3, #16
 8012232:	3502      	adds	r5, #2
 8012234:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012238:	f10c 3cff 	add.w	ip, ip, #4294967295
 801223c:	2200      	movs	r2, #0
 801223e:	fbbc f9f3 	udiv	r9, ip, r3
 8012242:	4610      	mov	r0, r2
 8012244:	fb03 ca19 	mls	sl, r3, r9, ip
 8012248:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801224c:	2f09      	cmp	r7, #9
 801224e:	d81b      	bhi.n	8012288 <_strtol_l.constprop.0+0xa8>
 8012250:	463c      	mov	r4, r7
 8012252:	42a3      	cmp	r3, r4
 8012254:	dd27      	ble.n	80122a6 <_strtol_l.constprop.0+0xc6>
 8012256:	1c57      	adds	r7, r2, #1
 8012258:	d007      	beq.n	801226a <_strtol_l.constprop.0+0x8a>
 801225a:	4581      	cmp	r9, r0
 801225c:	d320      	bcc.n	80122a0 <_strtol_l.constprop.0+0xc0>
 801225e:	d101      	bne.n	8012264 <_strtol_l.constprop.0+0x84>
 8012260:	45a2      	cmp	sl, r4
 8012262:	db1d      	blt.n	80122a0 <_strtol_l.constprop.0+0xc0>
 8012264:	fb00 4003 	mla	r0, r0, r3, r4
 8012268:	2201      	movs	r2, #1
 801226a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801226e:	e7eb      	b.n	8012248 <_strtol_l.constprop.0+0x68>
 8012270:	2c2b      	cmp	r4, #43	@ 0x2b
 8012272:	bf04      	itt	eq
 8012274:	782c      	ldrbeq	r4, [r5, #0]
 8012276:	1c95      	addeq	r5, r2, #2
 8012278:	e7cf      	b.n	801221a <_strtol_l.constprop.0+0x3a>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d1da      	bne.n	8012234 <_strtol_l.constprop.0+0x54>
 801227e:	2c30      	cmp	r4, #48	@ 0x30
 8012280:	bf0c      	ite	eq
 8012282:	2308      	moveq	r3, #8
 8012284:	230a      	movne	r3, #10
 8012286:	e7d5      	b.n	8012234 <_strtol_l.constprop.0+0x54>
 8012288:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801228c:	2f19      	cmp	r7, #25
 801228e:	d801      	bhi.n	8012294 <_strtol_l.constprop.0+0xb4>
 8012290:	3c37      	subs	r4, #55	@ 0x37
 8012292:	e7de      	b.n	8012252 <_strtol_l.constprop.0+0x72>
 8012294:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012298:	2f19      	cmp	r7, #25
 801229a:	d804      	bhi.n	80122a6 <_strtol_l.constprop.0+0xc6>
 801229c:	3c57      	subs	r4, #87	@ 0x57
 801229e:	e7d8      	b.n	8012252 <_strtol_l.constprop.0+0x72>
 80122a0:	f04f 32ff 	mov.w	r2, #4294967295
 80122a4:	e7e1      	b.n	801226a <_strtol_l.constprop.0+0x8a>
 80122a6:	1c53      	adds	r3, r2, #1
 80122a8:	d108      	bne.n	80122bc <_strtol_l.constprop.0+0xdc>
 80122aa:	2322      	movs	r3, #34	@ 0x22
 80122ac:	f8ce 3000 	str.w	r3, [lr]
 80122b0:	4660      	mov	r0, ip
 80122b2:	f1b8 0f00 	cmp.w	r8, #0
 80122b6:	d0a0      	beq.n	80121fa <_strtol_l.constprop.0+0x1a>
 80122b8:	1e69      	subs	r1, r5, #1
 80122ba:	e006      	b.n	80122ca <_strtol_l.constprop.0+0xea>
 80122bc:	b106      	cbz	r6, 80122c0 <_strtol_l.constprop.0+0xe0>
 80122be:	4240      	negs	r0, r0
 80122c0:	f1b8 0f00 	cmp.w	r8, #0
 80122c4:	d099      	beq.n	80121fa <_strtol_l.constprop.0+0x1a>
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	d1f6      	bne.n	80122b8 <_strtol_l.constprop.0+0xd8>
 80122ca:	f8c8 1000 	str.w	r1, [r8]
 80122ce:	e794      	b.n	80121fa <_strtol_l.constprop.0+0x1a>
 80122d0:	080155d9 	.word	0x080155d9

080122d4 <_strtol_r>:
 80122d4:	f7ff bf84 	b.w	80121e0 <_strtol_l.constprop.0>

080122d8 <__ascii_wctomb>:
 80122d8:	4603      	mov	r3, r0
 80122da:	4608      	mov	r0, r1
 80122dc:	b141      	cbz	r1, 80122f0 <__ascii_wctomb+0x18>
 80122de:	2aff      	cmp	r2, #255	@ 0xff
 80122e0:	d904      	bls.n	80122ec <__ascii_wctomb+0x14>
 80122e2:	228a      	movs	r2, #138	@ 0x8a
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ea:	4770      	bx	lr
 80122ec:	700a      	strb	r2, [r1, #0]
 80122ee:	2001      	movs	r0, #1
 80122f0:	4770      	bx	lr

080122f2 <__ssputs_r>:
 80122f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f6:	688e      	ldr	r6, [r1, #8]
 80122f8:	461f      	mov	r7, r3
 80122fa:	42be      	cmp	r6, r7
 80122fc:	680b      	ldr	r3, [r1, #0]
 80122fe:	4682      	mov	sl, r0
 8012300:	460c      	mov	r4, r1
 8012302:	4690      	mov	r8, r2
 8012304:	d82d      	bhi.n	8012362 <__ssputs_r+0x70>
 8012306:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801230a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801230e:	d026      	beq.n	801235e <__ssputs_r+0x6c>
 8012310:	6965      	ldr	r5, [r4, #20]
 8012312:	6909      	ldr	r1, [r1, #16]
 8012314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012318:	eba3 0901 	sub.w	r9, r3, r1
 801231c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012320:	1c7b      	adds	r3, r7, #1
 8012322:	444b      	add	r3, r9
 8012324:	106d      	asrs	r5, r5, #1
 8012326:	429d      	cmp	r5, r3
 8012328:	bf38      	it	cc
 801232a:	461d      	movcc	r5, r3
 801232c:	0553      	lsls	r3, r2, #21
 801232e:	d527      	bpl.n	8012380 <__ssputs_r+0x8e>
 8012330:	4629      	mov	r1, r5
 8012332:	f7fc f9cf 	bl	800e6d4 <_malloc_r>
 8012336:	4606      	mov	r6, r0
 8012338:	b360      	cbz	r0, 8012394 <__ssputs_r+0xa2>
 801233a:	6921      	ldr	r1, [r4, #16]
 801233c:	464a      	mov	r2, r9
 801233e:	f7fe f89c 	bl	801047a <memcpy>
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801234c:	81a3      	strh	r3, [r4, #12]
 801234e:	6126      	str	r6, [r4, #16]
 8012350:	6165      	str	r5, [r4, #20]
 8012352:	444e      	add	r6, r9
 8012354:	eba5 0509 	sub.w	r5, r5, r9
 8012358:	6026      	str	r6, [r4, #0]
 801235a:	60a5      	str	r5, [r4, #8]
 801235c:	463e      	mov	r6, r7
 801235e:	42be      	cmp	r6, r7
 8012360:	d900      	bls.n	8012364 <__ssputs_r+0x72>
 8012362:	463e      	mov	r6, r7
 8012364:	6820      	ldr	r0, [r4, #0]
 8012366:	4632      	mov	r2, r6
 8012368:	4641      	mov	r1, r8
 801236a:	f000 f9c5 	bl	80126f8 <memmove>
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	1b9b      	subs	r3, r3, r6
 8012372:	60a3      	str	r3, [r4, #8]
 8012374:	6823      	ldr	r3, [r4, #0]
 8012376:	4433      	add	r3, r6
 8012378:	6023      	str	r3, [r4, #0]
 801237a:	2000      	movs	r0, #0
 801237c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012380:	462a      	mov	r2, r5
 8012382:	f000 fa05 	bl	8012790 <_realloc_r>
 8012386:	4606      	mov	r6, r0
 8012388:	2800      	cmp	r0, #0
 801238a:	d1e0      	bne.n	801234e <__ssputs_r+0x5c>
 801238c:	6921      	ldr	r1, [r4, #16]
 801238e:	4650      	mov	r0, sl
 8012390:	f7fe fede 	bl	8011150 <_free_r>
 8012394:	230c      	movs	r3, #12
 8012396:	f8ca 3000 	str.w	r3, [sl]
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123a0:	81a3      	strh	r3, [r4, #12]
 80123a2:	f04f 30ff 	mov.w	r0, #4294967295
 80123a6:	e7e9      	b.n	801237c <__ssputs_r+0x8a>

080123a8 <_svfiprintf_r>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	4698      	mov	r8, r3
 80123ae:	898b      	ldrh	r3, [r1, #12]
 80123b0:	061b      	lsls	r3, r3, #24
 80123b2:	b09d      	sub	sp, #116	@ 0x74
 80123b4:	4607      	mov	r7, r0
 80123b6:	460d      	mov	r5, r1
 80123b8:	4614      	mov	r4, r2
 80123ba:	d510      	bpl.n	80123de <_svfiprintf_r+0x36>
 80123bc:	690b      	ldr	r3, [r1, #16]
 80123be:	b973      	cbnz	r3, 80123de <_svfiprintf_r+0x36>
 80123c0:	2140      	movs	r1, #64	@ 0x40
 80123c2:	f7fc f987 	bl	800e6d4 <_malloc_r>
 80123c6:	6028      	str	r0, [r5, #0]
 80123c8:	6128      	str	r0, [r5, #16]
 80123ca:	b930      	cbnz	r0, 80123da <_svfiprintf_r+0x32>
 80123cc:	230c      	movs	r3, #12
 80123ce:	603b      	str	r3, [r7, #0]
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295
 80123d4:	b01d      	add	sp, #116	@ 0x74
 80123d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123da:	2340      	movs	r3, #64	@ 0x40
 80123dc:	616b      	str	r3, [r5, #20]
 80123de:	2300      	movs	r3, #0
 80123e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80123e2:	2320      	movs	r3, #32
 80123e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80123ec:	2330      	movs	r3, #48	@ 0x30
 80123ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801258c <_svfiprintf_r+0x1e4>
 80123f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123f6:	f04f 0901 	mov.w	r9, #1
 80123fa:	4623      	mov	r3, r4
 80123fc:	469a      	mov	sl, r3
 80123fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012402:	b10a      	cbz	r2, 8012408 <_svfiprintf_r+0x60>
 8012404:	2a25      	cmp	r2, #37	@ 0x25
 8012406:	d1f9      	bne.n	80123fc <_svfiprintf_r+0x54>
 8012408:	ebba 0b04 	subs.w	fp, sl, r4
 801240c:	d00b      	beq.n	8012426 <_svfiprintf_r+0x7e>
 801240e:	465b      	mov	r3, fp
 8012410:	4622      	mov	r2, r4
 8012412:	4629      	mov	r1, r5
 8012414:	4638      	mov	r0, r7
 8012416:	f7ff ff6c 	bl	80122f2 <__ssputs_r>
 801241a:	3001      	adds	r0, #1
 801241c:	f000 80a7 	beq.w	801256e <_svfiprintf_r+0x1c6>
 8012420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012422:	445a      	add	r2, fp
 8012424:	9209      	str	r2, [sp, #36]	@ 0x24
 8012426:	f89a 3000 	ldrb.w	r3, [sl]
 801242a:	2b00      	cmp	r3, #0
 801242c:	f000 809f 	beq.w	801256e <_svfiprintf_r+0x1c6>
 8012430:	2300      	movs	r3, #0
 8012432:	f04f 32ff 	mov.w	r2, #4294967295
 8012436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801243a:	f10a 0a01 	add.w	sl, sl, #1
 801243e:	9304      	str	r3, [sp, #16]
 8012440:	9307      	str	r3, [sp, #28]
 8012442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012446:	931a      	str	r3, [sp, #104]	@ 0x68
 8012448:	4654      	mov	r4, sl
 801244a:	2205      	movs	r2, #5
 801244c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012450:	484e      	ldr	r0, [pc, #312]	@ (801258c <_svfiprintf_r+0x1e4>)
 8012452:	f7ed fedd 	bl	8000210 <memchr>
 8012456:	9a04      	ldr	r2, [sp, #16]
 8012458:	b9d8      	cbnz	r0, 8012492 <_svfiprintf_r+0xea>
 801245a:	06d0      	lsls	r0, r2, #27
 801245c:	bf44      	itt	mi
 801245e:	2320      	movmi	r3, #32
 8012460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012464:	0711      	lsls	r1, r2, #28
 8012466:	bf44      	itt	mi
 8012468:	232b      	movmi	r3, #43	@ 0x2b
 801246a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801246e:	f89a 3000 	ldrb.w	r3, [sl]
 8012472:	2b2a      	cmp	r3, #42	@ 0x2a
 8012474:	d015      	beq.n	80124a2 <_svfiprintf_r+0xfa>
 8012476:	9a07      	ldr	r2, [sp, #28]
 8012478:	4654      	mov	r4, sl
 801247a:	2000      	movs	r0, #0
 801247c:	f04f 0c0a 	mov.w	ip, #10
 8012480:	4621      	mov	r1, r4
 8012482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012486:	3b30      	subs	r3, #48	@ 0x30
 8012488:	2b09      	cmp	r3, #9
 801248a:	d94b      	bls.n	8012524 <_svfiprintf_r+0x17c>
 801248c:	b1b0      	cbz	r0, 80124bc <_svfiprintf_r+0x114>
 801248e:	9207      	str	r2, [sp, #28]
 8012490:	e014      	b.n	80124bc <_svfiprintf_r+0x114>
 8012492:	eba0 0308 	sub.w	r3, r0, r8
 8012496:	fa09 f303 	lsl.w	r3, r9, r3
 801249a:	4313      	orrs	r3, r2
 801249c:	9304      	str	r3, [sp, #16]
 801249e:	46a2      	mov	sl, r4
 80124a0:	e7d2      	b.n	8012448 <_svfiprintf_r+0xa0>
 80124a2:	9b03      	ldr	r3, [sp, #12]
 80124a4:	1d19      	adds	r1, r3, #4
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	9103      	str	r1, [sp, #12]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	bfbb      	ittet	lt
 80124ae:	425b      	neglt	r3, r3
 80124b0:	f042 0202 	orrlt.w	r2, r2, #2
 80124b4:	9307      	strge	r3, [sp, #28]
 80124b6:	9307      	strlt	r3, [sp, #28]
 80124b8:	bfb8      	it	lt
 80124ba:	9204      	strlt	r2, [sp, #16]
 80124bc:	7823      	ldrb	r3, [r4, #0]
 80124be:	2b2e      	cmp	r3, #46	@ 0x2e
 80124c0:	d10a      	bne.n	80124d8 <_svfiprintf_r+0x130>
 80124c2:	7863      	ldrb	r3, [r4, #1]
 80124c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80124c6:	d132      	bne.n	801252e <_svfiprintf_r+0x186>
 80124c8:	9b03      	ldr	r3, [sp, #12]
 80124ca:	1d1a      	adds	r2, r3, #4
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	9203      	str	r2, [sp, #12]
 80124d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124d4:	3402      	adds	r4, #2
 80124d6:	9305      	str	r3, [sp, #20]
 80124d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801259c <_svfiprintf_r+0x1f4>
 80124dc:	7821      	ldrb	r1, [r4, #0]
 80124de:	2203      	movs	r2, #3
 80124e0:	4650      	mov	r0, sl
 80124e2:	f7ed fe95 	bl	8000210 <memchr>
 80124e6:	b138      	cbz	r0, 80124f8 <_svfiprintf_r+0x150>
 80124e8:	9b04      	ldr	r3, [sp, #16]
 80124ea:	eba0 000a 	sub.w	r0, r0, sl
 80124ee:	2240      	movs	r2, #64	@ 0x40
 80124f0:	4082      	lsls	r2, r0
 80124f2:	4313      	orrs	r3, r2
 80124f4:	3401      	adds	r4, #1
 80124f6:	9304      	str	r3, [sp, #16]
 80124f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124fc:	4824      	ldr	r0, [pc, #144]	@ (8012590 <_svfiprintf_r+0x1e8>)
 80124fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012502:	2206      	movs	r2, #6
 8012504:	f7ed fe84 	bl	8000210 <memchr>
 8012508:	2800      	cmp	r0, #0
 801250a:	d036      	beq.n	801257a <_svfiprintf_r+0x1d2>
 801250c:	4b21      	ldr	r3, [pc, #132]	@ (8012594 <_svfiprintf_r+0x1ec>)
 801250e:	bb1b      	cbnz	r3, 8012558 <_svfiprintf_r+0x1b0>
 8012510:	9b03      	ldr	r3, [sp, #12]
 8012512:	3307      	adds	r3, #7
 8012514:	f023 0307 	bic.w	r3, r3, #7
 8012518:	3308      	adds	r3, #8
 801251a:	9303      	str	r3, [sp, #12]
 801251c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801251e:	4433      	add	r3, r6
 8012520:	9309      	str	r3, [sp, #36]	@ 0x24
 8012522:	e76a      	b.n	80123fa <_svfiprintf_r+0x52>
 8012524:	fb0c 3202 	mla	r2, ip, r2, r3
 8012528:	460c      	mov	r4, r1
 801252a:	2001      	movs	r0, #1
 801252c:	e7a8      	b.n	8012480 <_svfiprintf_r+0xd8>
 801252e:	2300      	movs	r3, #0
 8012530:	3401      	adds	r4, #1
 8012532:	9305      	str	r3, [sp, #20]
 8012534:	4619      	mov	r1, r3
 8012536:	f04f 0c0a 	mov.w	ip, #10
 801253a:	4620      	mov	r0, r4
 801253c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012540:	3a30      	subs	r2, #48	@ 0x30
 8012542:	2a09      	cmp	r2, #9
 8012544:	d903      	bls.n	801254e <_svfiprintf_r+0x1a6>
 8012546:	2b00      	cmp	r3, #0
 8012548:	d0c6      	beq.n	80124d8 <_svfiprintf_r+0x130>
 801254a:	9105      	str	r1, [sp, #20]
 801254c:	e7c4      	b.n	80124d8 <_svfiprintf_r+0x130>
 801254e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012552:	4604      	mov	r4, r0
 8012554:	2301      	movs	r3, #1
 8012556:	e7f0      	b.n	801253a <_svfiprintf_r+0x192>
 8012558:	ab03      	add	r3, sp, #12
 801255a:	9300      	str	r3, [sp, #0]
 801255c:	462a      	mov	r2, r5
 801255e:	4b0e      	ldr	r3, [pc, #56]	@ (8012598 <_svfiprintf_r+0x1f0>)
 8012560:	a904      	add	r1, sp, #16
 8012562:	4638      	mov	r0, r7
 8012564:	f7fc fff6 	bl	800f554 <_printf_float>
 8012568:	1c42      	adds	r2, r0, #1
 801256a:	4606      	mov	r6, r0
 801256c:	d1d6      	bne.n	801251c <_svfiprintf_r+0x174>
 801256e:	89ab      	ldrh	r3, [r5, #12]
 8012570:	065b      	lsls	r3, r3, #25
 8012572:	f53f af2d 	bmi.w	80123d0 <_svfiprintf_r+0x28>
 8012576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012578:	e72c      	b.n	80123d4 <_svfiprintf_r+0x2c>
 801257a:	ab03      	add	r3, sp, #12
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	462a      	mov	r2, r5
 8012580:	4b05      	ldr	r3, [pc, #20]	@ (8012598 <_svfiprintf_r+0x1f0>)
 8012582:	a904      	add	r1, sp, #16
 8012584:	4638      	mov	r0, r7
 8012586:	f7fd fa7d 	bl	800fa84 <_printf_i>
 801258a:	e7ed      	b.n	8012568 <_svfiprintf_r+0x1c0>
 801258c:	080156d9 	.word	0x080156d9
 8012590:	080156e3 	.word	0x080156e3
 8012594:	0800f555 	.word	0x0800f555
 8012598:	080122f3 	.word	0x080122f3
 801259c:	080156df 	.word	0x080156df

080125a0 <__sflush_r>:
 80125a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125a8:	0716      	lsls	r6, r2, #28
 80125aa:	4605      	mov	r5, r0
 80125ac:	460c      	mov	r4, r1
 80125ae:	d454      	bmi.n	801265a <__sflush_r+0xba>
 80125b0:	684b      	ldr	r3, [r1, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	dc02      	bgt.n	80125bc <__sflush_r+0x1c>
 80125b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	dd48      	ble.n	801264e <__sflush_r+0xae>
 80125bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125be:	2e00      	cmp	r6, #0
 80125c0:	d045      	beq.n	801264e <__sflush_r+0xae>
 80125c2:	2300      	movs	r3, #0
 80125c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80125c8:	682f      	ldr	r7, [r5, #0]
 80125ca:	6a21      	ldr	r1, [r4, #32]
 80125cc:	602b      	str	r3, [r5, #0]
 80125ce:	d030      	beq.n	8012632 <__sflush_r+0x92>
 80125d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80125d2:	89a3      	ldrh	r3, [r4, #12]
 80125d4:	0759      	lsls	r1, r3, #29
 80125d6:	d505      	bpl.n	80125e4 <__sflush_r+0x44>
 80125d8:	6863      	ldr	r3, [r4, #4]
 80125da:	1ad2      	subs	r2, r2, r3
 80125dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80125de:	b10b      	cbz	r3, 80125e4 <__sflush_r+0x44>
 80125e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80125e2:	1ad2      	subs	r2, r2, r3
 80125e4:	2300      	movs	r3, #0
 80125e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125e8:	6a21      	ldr	r1, [r4, #32]
 80125ea:	4628      	mov	r0, r5
 80125ec:	47b0      	blx	r6
 80125ee:	1c43      	adds	r3, r0, #1
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	d106      	bne.n	8012602 <__sflush_r+0x62>
 80125f4:	6829      	ldr	r1, [r5, #0]
 80125f6:	291d      	cmp	r1, #29
 80125f8:	d82b      	bhi.n	8012652 <__sflush_r+0xb2>
 80125fa:	4a2a      	ldr	r2, [pc, #168]	@ (80126a4 <__sflush_r+0x104>)
 80125fc:	410a      	asrs	r2, r1
 80125fe:	07d6      	lsls	r6, r2, #31
 8012600:	d427      	bmi.n	8012652 <__sflush_r+0xb2>
 8012602:	2200      	movs	r2, #0
 8012604:	6062      	str	r2, [r4, #4]
 8012606:	04d9      	lsls	r1, r3, #19
 8012608:	6922      	ldr	r2, [r4, #16]
 801260a:	6022      	str	r2, [r4, #0]
 801260c:	d504      	bpl.n	8012618 <__sflush_r+0x78>
 801260e:	1c42      	adds	r2, r0, #1
 8012610:	d101      	bne.n	8012616 <__sflush_r+0x76>
 8012612:	682b      	ldr	r3, [r5, #0]
 8012614:	b903      	cbnz	r3, 8012618 <__sflush_r+0x78>
 8012616:	6560      	str	r0, [r4, #84]	@ 0x54
 8012618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801261a:	602f      	str	r7, [r5, #0]
 801261c:	b1b9      	cbz	r1, 801264e <__sflush_r+0xae>
 801261e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012622:	4299      	cmp	r1, r3
 8012624:	d002      	beq.n	801262c <__sflush_r+0x8c>
 8012626:	4628      	mov	r0, r5
 8012628:	f7fe fd92 	bl	8011150 <_free_r>
 801262c:	2300      	movs	r3, #0
 801262e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012630:	e00d      	b.n	801264e <__sflush_r+0xae>
 8012632:	2301      	movs	r3, #1
 8012634:	4628      	mov	r0, r5
 8012636:	47b0      	blx	r6
 8012638:	4602      	mov	r2, r0
 801263a:	1c50      	adds	r0, r2, #1
 801263c:	d1c9      	bne.n	80125d2 <__sflush_r+0x32>
 801263e:	682b      	ldr	r3, [r5, #0]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d0c6      	beq.n	80125d2 <__sflush_r+0x32>
 8012644:	2b1d      	cmp	r3, #29
 8012646:	d001      	beq.n	801264c <__sflush_r+0xac>
 8012648:	2b16      	cmp	r3, #22
 801264a:	d11e      	bne.n	801268a <__sflush_r+0xea>
 801264c:	602f      	str	r7, [r5, #0]
 801264e:	2000      	movs	r0, #0
 8012650:	e022      	b.n	8012698 <__sflush_r+0xf8>
 8012652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012656:	b21b      	sxth	r3, r3
 8012658:	e01b      	b.n	8012692 <__sflush_r+0xf2>
 801265a:	690f      	ldr	r7, [r1, #16]
 801265c:	2f00      	cmp	r7, #0
 801265e:	d0f6      	beq.n	801264e <__sflush_r+0xae>
 8012660:	0793      	lsls	r3, r2, #30
 8012662:	680e      	ldr	r6, [r1, #0]
 8012664:	bf08      	it	eq
 8012666:	694b      	ldreq	r3, [r1, #20]
 8012668:	600f      	str	r7, [r1, #0]
 801266a:	bf18      	it	ne
 801266c:	2300      	movne	r3, #0
 801266e:	eba6 0807 	sub.w	r8, r6, r7
 8012672:	608b      	str	r3, [r1, #8]
 8012674:	f1b8 0f00 	cmp.w	r8, #0
 8012678:	dde9      	ble.n	801264e <__sflush_r+0xae>
 801267a:	6a21      	ldr	r1, [r4, #32]
 801267c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801267e:	4643      	mov	r3, r8
 8012680:	463a      	mov	r2, r7
 8012682:	4628      	mov	r0, r5
 8012684:	47b0      	blx	r6
 8012686:	2800      	cmp	r0, #0
 8012688:	dc08      	bgt.n	801269c <__sflush_r+0xfc>
 801268a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801268e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012692:	81a3      	strh	r3, [r4, #12]
 8012694:	f04f 30ff 	mov.w	r0, #4294967295
 8012698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801269c:	4407      	add	r7, r0
 801269e:	eba8 0800 	sub.w	r8, r8, r0
 80126a2:	e7e7      	b.n	8012674 <__sflush_r+0xd4>
 80126a4:	dfbffffe 	.word	0xdfbffffe

080126a8 <_fflush_r>:
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	690b      	ldr	r3, [r1, #16]
 80126ac:	4605      	mov	r5, r0
 80126ae:	460c      	mov	r4, r1
 80126b0:	b913      	cbnz	r3, 80126b8 <_fflush_r+0x10>
 80126b2:	2500      	movs	r5, #0
 80126b4:	4628      	mov	r0, r5
 80126b6:	bd38      	pop	{r3, r4, r5, pc}
 80126b8:	b118      	cbz	r0, 80126c2 <_fflush_r+0x1a>
 80126ba:	6a03      	ldr	r3, [r0, #32]
 80126bc:	b90b      	cbnz	r3, 80126c2 <_fflush_r+0x1a>
 80126be:	f7fd fda1 	bl	8010204 <__sinit>
 80126c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d0f3      	beq.n	80126b2 <_fflush_r+0xa>
 80126ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80126cc:	07d0      	lsls	r0, r2, #31
 80126ce:	d404      	bmi.n	80126da <_fflush_r+0x32>
 80126d0:	0599      	lsls	r1, r3, #22
 80126d2:	d402      	bmi.n	80126da <_fflush_r+0x32>
 80126d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126d6:	f7fd fece 	bl	8010476 <__retarget_lock_acquire_recursive>
 80126da:	4628      	mov	r0, r5
 80126dc:	4621      	mov	r1, r4
 80126de:	f7ff ff5f 	bl	80125a0 <__sflush_r>
 80126e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80126e4:	07da      	lsls	r2, r3, #31
 80126e6:	4605      	mov	r5, r0
 80126e8:	d4e4      	bmi.n	80126b4 <_fflush_r+0xc>
 80126ea:	89a3      	ldrh	r3, [r4, #12]
 80126ec:	059b      	lsls	r3, r3, #22
 80126ee:	d4e1      	bmi.n	80126b4 <_fflush_r+0xc>
 80126f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126f2:	f7fd fec1 	bl	8010478 <__retarget_lock_release_recursive>
 80126f6:	e7dd      	b.n	80126b4 <_fflush_r+0xc>

080126f8 <memmove>:
 80126f8:	4288      	cmp	r0, r1
 80126fa:	b510      	push	{r4, lr}
 80126fc:	eb01 0402 	add.w	r4, r1, r2
 8012700:	d902      	bls.n	8012708 <memmove+0x10>
 8012702:	4284      	cmp	r4, r0
 8012704:	4623      	mov	r3, r4
 8012706:	d807      	bhi.n	8012718 <memmove+0x20>
 8012708:	1e43      	subs	r3, r0, #1
 801270a:	42a1      	cmp	r1, r4
 801270c:	d008      	beq.n	8012720 <memmove+0x28>
 801270e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012716:	e7f8      	b.n	801270a <memmove+0x12>
 8012718:	4402      	add	r2, r0
 801271a:	4601      	mov	r1, r0
 801271c:	428a      	cmp	r2, r1
 801271e:	d100      	bne.n	8012722 <memmove+0x2a>
 8012720:	bd10      	pop	{r4, pc}
 8012722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801272a:	e7f7      	b.n	801271c <memmove+0x24>

0801272c <__assert_func>:
 801272c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801272e:	4614      	mov	r4, r2
 8012730:	461a      	mov	r2, r3
 8012732:	4b09      	ldr	r3, [pc, #36]	@ (8012758 <__assert_func+0x2c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4605      	mov	r5, r0
 8012738:	68d8      	ldr	r0, [r3, #12]
 801273a:	b954      	cbnz	r4, 8012752 <__assert_func+0x26>
 801273c:	4b07      	ldr	r3, [pc, #28]	@ (801275c <__assert_func+0x30>)
 801273e:	461c      	mov	r4, r3
 8012740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012744:	9100      	str	r1, [sp, #0]
 8012746:	462b      	mov	r3, r5
 8012748:	4905      	ldr	r1, [pc, #20]	@ (8012760 <__assert_func+0x34>)
 801274a:	f000 f84f 	bl	80127ec <fiprintf>
 801274e:	f000 f85f 	bl	8012810 <abort>
 8012752:	4b04      	ldr	r3, [pc, #16]	@ (8012764 <__assert_func+0x38>)
 8012754:	e7f4      	b.n	8012740 <__assert_func+0x14>
 8012756:	bf00      	nop
 8012758:	2000029c 	.word	0x2000029c
 801275c:	08015725 	.word	0x08015725
 8012760:	080156f7 	.word	0x080156f7
 8012764:	080156ea 	.word	0x080156ea

08012768 <_calloc_r>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	fba1 5402 	umull	r5, r4, r1, r2
 801276e:	b93c      	cbnz	r4, 8012780 <_calloc_r+0x18>
 8012770:	4629      	mov	r1, r5
 8012772:	f7fb ffaf 	bl	800e6d4 <_malloc_r>
 8012776:	4606      	mov	r6, r0
 8012778:	b928      	cbnz	r0, 8012786 <_calloc_r+0x1e>
 801277a:	2600      	movs	r6, #0
 801277c:	4630      	mov	r0, r6
 801277e:	bd70      	pop	{r4, r5, r6, pc}
 8012780:	220c      	movs	r2, #12
 8012782:	6002      	str	r2, [r0, #0]
 8012784:	e7f9      	b.n	801277a <_calloc_r+0x12>
 8012786:	462a      	mov	r2, r5
 8012788:	4621      	mov	r1, r4
 801278a:	f7fd fdd4 	bl	8010336 <memset>
 801278e:	e7f5      	b.n	801277c <_calloc_r+0x14>

08012790 <_realloc_r>:
 8012790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012794:	4680      	mov	r8, r0
 8012796:	4615      	mov	r5, r2
 8012798:	460c      	mov	r4, r1
 801279a:	b921      	cbnz	r1, 80127a6 <_realloc_r+0x16>
 801279c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127a0:	4611      	mov	r1, r2
 80127a2:	f7fb bf97 	b.w	800e6d4 <_malloc_r>
 80127a6:	b92a      	cbnz	r2, 80127b4 <_realloc_r+0x24>
 80127a8:	f7fe fcd2 	bl	8011150 <_free_r>
 80127ac:	2400      	movs	r4, #0
 80127ae:	4620      	mov	r0, r4
 80127b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b4:	f000 f833 	bl	801281e <_malloc_usable_size_r>
 80127b8:	4285      	cmp	r5, r0
 80127ba:	4606      	mov	r6, r0
 80127bc:	d802      	bhi.n	80127c4 <_realloc_r+0x34>
 80127be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80127c2:	d8f4      	bhi.n	80127ae <_realloc_r+0x1e>
 80127c4:	4629      	mov	r1, r5
 80127c6:	4640      	mov	r0, r8
 80127c8:	f7fb ff84 	bl	800e6d4 <_malloc_r>
 80127cc:	4607      	mov	r7, r0
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0ec      	beq.n	80127ac <_realloc_r+0x1c>
 80127d2:	42b5      	cmp	r5, r6
 80127d4:	462a      	mov	r2, r5
 80127d6:	4621      	mov	r1, r4
 80127d8:	bf28      	it	cs
 80127da:	4632      	movcs	r2, r6
 80127dc:	f7fd fe4d 	bl	801047a <memcpy>
 80127e0:	4621      	mov	r1, r4
 80127e2:	4640      	mov	r0, r8
 80127e4:	f7fe fcb4 	bl	8011150 <_free_r>
 80127e8:	463c      	mov	r4, r7
 80127ea:	e7e0      	b.n	80127ae <_realloc_r+0x1e>

080127ec <fiprintf>:
 80127ec:	b40e      	push	{r1, r2, r3}
 80127ee:	b503      	push	{r0, r1, lr}
 80127f0:	4601      	mov	r1, r0
 80127f2:	ab03      	add	r3, sp, #12
 80127f4:	4805      	ldr	r0, [pc, #20]	@ (801280c <fiprintf+0x20>)
 80127f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80127fa:	6800      	ldr	r0, [r0, #0]
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	f000 f83f 	bl	8012880 <_vfiprintf_r>
 8012802:	b002      	add	sp, #8
 8012804:	f85d eb04 	ldr.w	lr, [sp], #4
 8012808:	b003      	add	sp, #12
 801280a:	4770      	bx	lr
 801280c:	2000029c 	.word	0x2000029c

08012810 <abort>:
 8012810:	b508      	push	{r3, lr}
 8012812:	2006      	movs	r0, #6
 8012814:	f000 fa08 	bl	8012c28 <raise>
 8012818:	2001      	movs	r0, #1
 801281a:	f7f1 fd19 	bl	8004250 <_exit>

0801281e <_malloc_usable_size_r>:
 801281e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012822:	1f18      	subs	r0, r3, #4
 8012824:	2b00      	cmp	r3, #0
 8012826:	bfbc      	itt	lt
 8012828:	580b      	ldrlt	r3, [r1, r0]
 801282a:	18c0      	addlt	r0, r0, r3
 801282c:	4770      	bx	lr

0801282e <__sfputc_r>:
 801282e:	6893      	ldr	r3, [r2, #8]
 8012830:	3b01      	subs	r3, #1
 8012832:	2b00      	cmp	r3, #0
 8012834:	b410      	push	{r4}
 8012836:	6093      	str	r3, [r2, #8]
 8012838:	da08      	bge.n	801284c <__sfputc_r+0x1e>
 801283a:	6994      	ldr	r4, [r2, #24]
 801283c:	42a3      	cmp	r3, r4
 801283e:	db01      	blt.n	8012844 <__sfputc_r+0x16>
 8012840:	290a      	cmp	r1, #10
 8012842:	d103      	bne.n	801284c <__sfputc_r+0x1e>
 8012844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012848:	f000 b932 	b.w	8012ab0 <__swbuf_r>
 801284c:	6813      	ldr	r3, [r2, #0]
 801284e:	1c58      	adds	r0, r3, #1
 8012850:	6010      	str	r0, [r2, #0]
 8012852:	7019      	strb	r1, [r3, #0]
 8012854:	4608      	mov	r0, r1
 8012856:	f85d 4b04 	ldr.w	r4, [sp], #4
 801285a:	4770      	bx	lr

0801285c <__sfputs_r>:
 801285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285e:	4606      	mov	r6, r0
 8012860:	460f      	mov	r7, r1
 8012862:	4614      	mov	r4, r2
 8012864:	18d5      	adds	r5, r2, r3
 8012866:	42ac      	cmp	r4, r5
 8012868:	d101      	bne.n	801286e <__sfputs_r+0x12>
 801286a:	2000      	movs	r0, #0
 801286c:	e007      	b.n	801287e <__sfputs_r+0x22>
 801286e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012872:	463a      	mov	r2, r7
 8012874:	4630      	mov	r0, r6
 8012876:	f7ff ffda 	bl	801282e <__sfputc_r>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	d1f3      	bne.n	8012866 <__sfputs_r+0xa>
 801287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012880 <_vfiprintf_r>:
 8012880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012884:	460d      	mov	r5, r1
 8012886:	b09d      	sub	sp, #116	@ 0x74
 8012888:	4614      	mov	r4, r2
 801288a:	4698      	mov	r8, r3
 801288c:	4606      	mov	r6, r0
 801288e:	b118      	cbz	r0, 8012898 <_vfiprintf_r+0x18>
 8012890:	6a03      	ldr	r3, [r0, #32]
 8012892:	b90b      	cbnz	r3, 8012898 <_vfiprintf_r+0x18>
 8012894:	f7fd fcb6 	bl	8010204 <__sinit>
 8012898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801289a:	07d9      	lsls	r1, r3, #31
 801289c:	d405      	bmi.n	80128aa <_vfiprintf_r+0x2a>
 801289e:	89ab      	ldrh	r3, [r5, #12]
 80128a0:	059a      	lsls	r2, r3, #22
 80128a2:	d402      	bmi.n	80128aa <_vfiprintf_r+0x2a>
 80128a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128a6:	f7fd fde6 	bl	8010476 <__retarget_lock_acquire_recursive>
 80128aa:	89ab      	ldrh	r3, [r5, #12]
 80128ac:	071b      	lsls	r3, r3, #28
 80128ae:	d501      	bpl.n	80128b4 <_vfiprintf_r+0x34>
 80128b0:	692b      	ldr	r3, [r5, #16]
 80128b2:	b99b      	cbnz	r3, 80128dc <_vfiprintf_r+0x5c>
 80128b4:	4629      	mov	r1, r5
 80128b6:	4630      	mov	r0, r6
 80128b8:	f000 f938 	bl	8012b2c <__swsetup_r>
 80128bc:	b170      	cbz	r0, 80128dc <_vfiprintf_r+0x5c>
 80128be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128c0:	07dc      	lsls	r4, r3, #31
 80128c2:	d504      	bpl.n	80128ce <_vfiprintf_r+0x4e>
 80128c4:	f04f 30ff 	mov.w	r0, #4294967295
 80128c8:	b01d      	add	sp, #116	@ 0x74
 80128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ce:	89ab      	ldrh	r3, [r5, #12]
 80128d0:	0598      	lsls	r0, r3, #22
 80128d2:	d4f7      	bmi.n	80128c4 <_vfiprintf_r+0x44>
 80128d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128d6:	f7fd fdcf 	bl	8010478 <__retarget_lock_release_recursive>
 80128da:	e7f3      	b.n	80128c4 <_vfiprintf_r+0x44>
 80128dc:	2300      	movs	r3, #0
 80128de:	9309      	str	r3, [sp, #36]	@ 0x24
 80128e0:	2320      	movs	r3, #32
 80128e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ea:	2330      	movs	r3, #48	@ 0x30
 80128ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012a9c <_vfiprintf_r+0x21c>
 80128f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128f4:	f04f 0901 	mov.w	r9, #1
 80128f8:	4623      	mov	r3, r4
 80128fa:	469a      	mov	sl, r3
 80128fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012900:	b10a      	cbz	r2, 8012906 <_vfiprintf_r+0x86>
 8012902:	2a25      	cmp	r2, #37	@ 0x25
 8012904:	d1f9      	bne.n	80128fa <_vfiprintf_r+0x7a>
 8012906:	ebba 0b04 	subs.w	fp, sl, r4
 801290a:	d00b      	beq.n	8012924 <_vfiprintf_r+0xa4>
 801290c:	465b      	mov	r3, fp
 801290e:	4622      	mov	r2, r4
 8012910:	4629      	mov	r1, r5
 8012912:	4630      	mov	r0, r6
 8012914:	f7ff ffa2 	bl	801285c <__sfputs_r>
 8012918:	3001      	adds	r0, #1
 801291a:	f000 80a7 	beq.w	8012a6c <_vfiprintf_r+0x1ec>
 801291e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012920:	445a      	add	r2, fp
 8012922:	9209      	str	r2, [sp, #36]	@ 0x24
 8012924:	f89a 3000 	ldrb.w	r3, [sl]
 8012928:	2b00      	cmp	r3, #0
 801292a:	f000 809f 	beq.w	8012a6c <_vfiprintf_r+0x1ec>
 801292e:	2300      	movs	r3, #0
 8012930:	f04f 32ff 	mov.w	r2, #4294967295
 8012934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012938:	f10a 0a01 	add.w	sl, sl, #1
 801293c:	9304      	str	r3, [sp, #16]
 801293e:	9307      	str	r3, [sp, #28]
 8012940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012944:	931a      	str	r3, [sp, #104]	@ 0x68
 8012946:	4654      	mov	r4, sl
 8012948:	2205      	movs	r2, #5
 801294a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801294e:	4853      	ldr	r0, [pc, #332]	@ (8012a9c <_vfiprintf_r+0x21c>)
 8012950:	f7ed fc5e 	bl	8000210 <memchr>
 8012954:	9a04      	ldr	r2, [sp, #16]
 8012956:	b9d8      	cbnz	r0, 8012990 <_vfiprintf_r+0x110>
 8012958:	06d1      	lsls	r1, r2, #27
 801295a:	bf44      	itt	mi
 801295c:	2320      	movmi	r3, #32
 801295e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012962:	0713      	lsls	r3, r2, #28
 8012964:	bf44      	itt	mi
 8012966:	232b      	movmi	r3, #43	@ 0x2b
 8012968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801296c:	f89a 3000 	ldrb.w	r3, [sl]
 8012970:	2b2a      	cmp	r3, #42	@ 0x2a
 8012972:	d015      	beq.n	80129a0 <_vfiprintf_r+0x120>
 8012974:	9a07      	ldr	r2, [sp, #28]
 8012976:	4654      	mov	r4, sl
 8012978:	2000      	movs	r0, #0
 801297a:	f04f 0c0a 	mov.w	ip, #10
 801297e:	4621      	mov	r1, r4
 8012980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012984:	3b30      	subs	r3, #48	@ 0x30
 8012986:	2b09      	cmp	r3, #9
 8012988:	d94b      	bls.n	8012a22 <_vfiprintf_r+0x1a2>
 801298a:	b1b0      	cbz	r0, 80129ba <_vfiprintf_r+0x13a>
 801298c:	9207      	str	r2, [sp, #28]
 801298e:	e014      	b.n	80129ba <_vfiprintf_r+0x13a>
 8012990:	eba0 0308 	sub.w	r3, r0, r8
 8012994:	fa09 f303 	lsl.w	r3, r9, r3
 8012998:	4313      	orrs	r3, r2
 801299a:	9304      	str	r3, [sp, #16]
 801299c:	46a2      	mov	sl, r4
 801299e:	e7d2      	b.n	8012946 <_vfiprintf_r+0xc6>
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	1d19      	adds	r1, r3, #4
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	9103      	str	r1, [sp, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	bfbb      	ittet	lt
 80129ac:	425b      	neglt	r3, r3
 80129ae:	f042 0202 	orrlt.w	r2, r2, #2
 80129b2:	9307      	strge	r3, [sp, #28]
 80129b4:	9307      	strlt	r3, [sp, #28]
 80129b6:	bfb8      	it	lt
 80129b8:	9204      	strlt	r2, [sp, #16]
 80129ba:	7823      	ldrb	r3, [r4, #0]
 80129bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80129be:	d10a      	bne.n	80129d6 <_vfiprintf_r+0x156>
 80129c0:	7863      	ldrb	r3, [r4, #1]
 80129c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80129c4:	d132      	bne.n	8012a2c <_vfiprintf_r+0x1ac>
 80129c6:	9b03      	ldr	r3, [sp, #12]
 80129c8:	1d1a      	adds	r2, r3, #4
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	9203      	str	r2, [sp, #12]
 80129ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129d2:	3402      	adds	r4, #2
 80129d4:	9305      	str	r3, [sp, #20]
 80129d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012aac <_vfiprintf_r+0x22c>
 80129da:	7821      	ldrb	r1, [r4, #0]
 80129dc:	2203      	movs	r2, #3
 80129de:	4650      	mov	r0, sl
 80129e0:	f7ed fc16 	bl	8000210 <memchr>
 80129e4:	b138      	cbz	r0, 80129f6 <_vfiprintf_r+0x176>
 80129e6:	9b04      	ldr	r3, [sp, #16]
 80129e8:	eba0 000a 	sub.w	r0, r0, sl
 80129ec:	2240      	movs	r2, #64	@ 0x40
 80129ee:	4082      	lsls	r2, r0
 80129f0:	4313      	orrs	r3, r2
 80129f2:	3401      	adds	r4, #1
 80129f4:	9304      	str	r3, [sp, #16]
 80129f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129fa:	4829      	ldr	r0, [pc, #164]	@ (8012aa0 <_vfiprintf_r+0x220>)
 80129fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a00:	2206      	movs	r2, #6
 8012a02:	f7ed fc05 	bl	8000210 <memchr>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d03f      	beq.n	8012a8a <_vfiprintf_r+0x20a>
 8012a0a:	4b26      	ldr	r3, [pc, #152]	@ (8012aa4 <_vfiprintf_r+0x224>)
 8012a0c:	bb1b      	cbnz	r3, 8012a56 <_vfiprintf_r+0x1d6>
 8012a0e:	9b03      	ldr	r3, [sp, #12]
 8012a10:	3307      	adds	r3, #7
 8012a12:	f023 0307 	bic.w	r3, r3, #7
 8012a16:	3308      	adds	r3, #8
 8012a18:	9303      	str	r3, [sp, #12]
 8012a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a1c:	443b      	add	r3, r7
 8012a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a20:	e76a      	b.n	80128f8 <_vfiprintf_r+0x78>
 8012a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a26:	460c      	mov	r4, r1
 8012a28:	2001      	movs	r0, #1
 8012a2a:	e7a8      	b.n	801297e <_vfiprintf_r+0xfe>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	3401      	adds	r4, #1
 8012a30:	9305      	str	r3, [sp, #20]
 8012a32:	4619      	mov	r1, r3
 8012a34:	f04f 0c0a 	mov.w	ip, #10
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a3e:	3a30      	subs	r2, #48	@ 0x30
 8012a40:	2a09      	cmp	r2, #9
 8012a42:	d903      	bls.n	8012a4c <_vfiprintf_r+0x1cc>
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d0c6      	beq.n	80129d6 <_vfiprintf_r+0x156>
 8012a48:	9105      	str	r1, [sp, #20]
 8012a4a:	e7c4      	b.n	80129d6 <_vfiprintf_r+0x156>
 8012a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a50:	4604      	mov	r4, r0
 8012a52:	2301      	movs	r3, #1
 8012a54:	e7f0      	b.n	8012a38 <_vfiprintf_r+0x1b8>
 8012a56:	ab03      	add	r3, sp, #12
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	462a      	mov	r2, r5
 8012a5c:	4b12      	ldr	r3, [pc, #72]	@ (8012aa8 <_vfiprintf_r+0x228>)
 8012a5e:	a904      	add	r1, sp, #16
 8012a60:	4630      	mov	r0, r6
 8012a62:	f7fc fd77 	bl	800f554 <_printf_float>
 8012a66:	4607      	mov	r7, r0
 8012a68:	1c78      	adds	r0, r7, #1
 8012a6a:	d1d6      	bne.n	8012a1a <_vfiprintf_r+0x19a>
 8012a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a6e:	07d9      	lsls	r1, r3, #31
 8012a70:	d405      	bmi.n	8012a7e <_vfiprintf_r+0x1fe>
 8012a72:	89ab      	ldrh	r3, [r5, #12]
 8012a74:	059a      	lsls	r2, r3, #22
 8012a76:	d402      	bmi.n	8012a7e <_vfiprintf_r+0x1fe>
 8012a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a7a:	f7fd fcfd 	bl	8010478 <__retarget_lock_release_recursive>
 8012a7e:	89ab      	ldrh	r3, [r5, #12]
 8012a80:	065b      	lsls	r3, r3, #25
 8012a82:	f53f af1f 	bmi.w	80128c4 <_vfiprintf_r+0x44>
 8012a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a88:	e71e      	b.n	80128c8 <_vfiprintf_r+0x48>
 8012a8a:	ab03      	add	r3, sp, #12
 8012a8c:	9300      	str	r3, [sp, #0]
 8012a8e:	462a      	mov	r2, r5
 8012a90:	4b05      	ldr	r3, [pc, #20]	@ (8012aa8 <_vfiprintf_r+0x228>)
 8012a92:	a904      	add	r1, sp, #16
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fc fff5 	bl	800fa84 <_printf_i>
 8012a9a:	e7e4      	b.n	8012a66 <_vfiprintf_r+0x1e6>
 8012a9c:	080156d9 	.word	0x080156d9
 8012aa0:	080156e3 	.word	0x080156e3
 8012aa4:	0800f555 	.word	0x0800f555
 8012aa8:	0801285d 	.word	0x0801285d
 8012aac:	080156df 	.word	0x080156df

08012ab0 <__swbuf_r>:
 8012ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab2:	460e      	mov	r6, r1
 8012ab4:	4614      	mov	r4, r2
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	b118      	cbz	r0, 8012ac2 <__swbuf_r+0x12>
 8012aba:	6a03      	ldr	r3, [r0, #32]
 8012abc:	b90b      	cbnz	r3, 8012ac2 <__swbuf_r+0x12>
 8012abe:	f7fd fba1 	bl	8010204 <__sinit>
 8012ac2:	69a3      	ldr	r3, [r4, #24]
 8012ac4:	60a3      	str	r3, [r4, #8]
 8012ac6:	89a3      	ldrh	r3, [r4, #12]
 8012ac8:	071a      	lsls	r2, r3, #28
 8012aca:	d501      	bpl.n	8012ad0 <__swbuf_r+0x20>
 8012acc:	6923      	ldr	r3, [r4, #16]
 8012ace:	b943      	cbnz	r3, 8012ae2 <__swbuf_r+0x32>
 8012ad0:	4621      	mov	r1, r4
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f000 f82a 	bl	8012b2c <__swsetup_r>
 8012ad8:	b118      	cbz	r0, 8012ae2 <__swbuf_r+0x32>
 8012ada:	f04f 37ff 	mov.w	r7, #4294967295
 8012ade:	4638      	mov	r0, r7
 8012ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae2:	6823      	ldr	r3, [r4, #0]
 8012ae4:	6922      	ldr	r2, [r4, #16]
 8012ae6:	1a98      	subs	r0, r3, r2
 8012ae8:	6963      	ldr	r3, [r4, #20]
 8012aea:	b2f6      	uxtb	r6, r6
 8012aec:	4283      	cmp	r3, r0
 8012aee:	4637      	mov	r7, r6
 8012af0:	dc05      	bgt.n	8012afe <__swbuf_r+0x4e>
 8012af2:	4621      	mov	r1, r4
 8012af4:	4628      	mov	r0, r5
 8012af6:	f7ff fdd7 	bl	80126a8 <_fflush_r>
 8012afa:	2800      	cmp	r0, #0
 8012afc:	d1ed      	bne.n	8012ada <__swbuf_r+0x2a>
 8012afe:	68a3      	ldr	r3, [r4, #8]
 8012b00:	3b01      	subs	r3, #1
 8012b02:	60a3      	str	r3, [r4, #8]
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	1c5a      	adds	r2, r3, #1
 8012b08:	6022      	str	r2, [r4, #0]
 8012b0a:	701e      	strb	r6, [r3, #0]
 8012b0c:	6962      	ldr	r2, [r4, #20]
 8012b0e:	1c43      	adds	r3, r0, #1
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d004      	beq.n	8012b1e <__swbuf_r+0x6e>
 8012b14:	89a3      	ldrh	r3, [r4, #12]
 8012b16:	07db      	lsls	r3, r3, #31
 8012b18:	d5e1      	bpl.n	8012ade <__swbuf_r+0x2e>
 8012b1a:	2e0a      	cmp	r6, #10
 8012b1c:	d1df      	bne.n	8012ade <__swbuf_r+0x2e>
 8012b1e:	4621      	mov	r1, r4
 8012b20:	4628      	mov	r0, r5
 8012b22:	f7ff fdc1 	bl	80126a8 <_fflush_r>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d0d9      	beq.n	8012ade <__swbuf_r+0x2e>
 8012b2a:	e7d6      	b.n	8012ada <__swbuf_r+0x2a>

08012b2c <__swsetup_r>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4b29      	ldr	r3, [pc, #164]	@ (8012bd4 <__swsetup_r+0xa8>)
 8012b30:	4605      	mov	r5, r0
 8012b32:	6818      	ldr	r0, [r3, #0]
 8012b34:	460c      	mov	r4, r1
 8012b36:	b118      	cbz	r0, 8012b40 <__swsetup_r+0x14>
 8012b38:	6a03      	ldr	r3, [r0, #32]
 8012b3a:	b90b      	cbnz	r3, 8012b40 <__swsetup_r+0x14>
 8012b3c:	f7fd fb62 	bl	8010204 <__sinit>
 8012b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b44:	0719      	lsls	r1, r3, #28
 8012b46:	d422      	bmi.n	8012b8e <__swsetup_r+0x62>
 8012b48:	06da      	lsls	r2, r3, #27
 8012b4a:	d407      	bmi.n	8012b5c <__swsetup_r+0x30>
 8012b4c:	2209      	movs	r2, #9
 8012b4e:	602a      	str	r2, [r5, #0]
 8012b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b54:	81a3      	strh	r3, [r4, #12]
 8012b56:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5a:	e033      	b.n	8012bc4 <__swsetup_r+0x98>
 8012b5c:	0758      	lsls	r0, r3, #29
 8012b5e:	d512      	bpl.n	8012b86 <__swsetup_r+0x5a>
 8012b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b62:	b141      	cbz	r1, 8012b76 <__swsetup_r+0x4a>
 8012b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b68:	4299      	cmp	r1, r3
 8012b6a:	d002      	beq.n	8012b72 <__swsetup_r+0x46>
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	f7fe faef 	bl	8011150 <_free_r>
 8012b72:	2300      	movs	r3, #0
 8012b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b76:	89a3      	ldrh	r3, [r4, #12]
 8012b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b7c:	81a3      	strh	r3, [r4, #12]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	6063      	str	r3, [r4, #4]
 8012b82:	6923      	ldr	r3, [r4, #16]
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	89a3      	ldrh	r3, [r4, #12]
 8012b88:	f043 0308 	orr.w	r3, r3, #8
 8012b8c:	81a3      	strh	r3, [r4, #12]
 8012b8e:	6923      	ldr	r3, [r4, #16]
 8012b90:	b94b      	cbnz	r3, 8012ba6 <__swsetup_r+0x7a>
 8012b92:	89a3      	ldrh	r3, [r4, #12]
 8012b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b9c:	d003      	beq.n	8012ba6 <__swsetup_r+0x7a>
 8012b9e:	4621      	mov	r1, r4
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f000 f883 	bl	8012cac <__smakebuf_r>
 8012ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012baa:	f013 0201 	ands.w	r2, r3, #1
 8012bae:	d00a      	beq.n	8012bc6 <__swsetup_r+0x9a>
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	60a2      	str	r2, [r4, #8]
 8012bb4:	6962      	ldr	r2, [r4, #20]
 8012bb6:	4252      	negs	r2, r2
 8012bb8:	61a2      	str	r2, [r4, #24]
 8012bba:	6922      	ldr	r2, [r4, #16]
 8012bbc:	b942      	cbnz	r2, 8012bd0 <__swsetup_r+0xa4>
 8012bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012bc2:	d1c5      	bne.n	8012b50 <__swsetup_r+0x24>
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	0799      	lsls	r1, r3, #30
 8012bc8:	bf58      	it	pl
 8012bca:	6962      	ldrpl	r2, [r4, #20]
 8012bcc:	60a2      	str	r2, [r4, #8]
 8012bce:	e7f4      	b.n	8012bba <__swsetup_r+0x8e>
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	e7f7      	b.n	8012bc4 <__swsetup_r+0x98>
 8012bd4:	2000029c 	.word	0x2000029c

08012bd8 <_raise_r>:
 8012bd8:	291f      	cmp	r1, #31
 8012bda:	b538      	push	{r3, r4, r5, lr}
 8012bdc:	4605      	mov	r5, r0
 8012bde:	460c      	mov	r4, r1
 8012be0:	d904      	bls.n	8012bec <_raise_r+0x14>
 8012be2:	2316      	movs	r3, #22
 8012be4:	6003      	str	r3, [r0, #0]
 8012be6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bea:	bd38      	pop	{r3, r4, r5, pc}
 8012bec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012bee:	b112      	cbz	r2, 8012bf6 <_raise_r+0x1e>
 8012bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bf4:	b94b      	cbnz	r3, 8012c0a <_raise_r+0x32>
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f000 f830 	bl	8012c5c <_getpid_r>
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	4601      	mov	r1, r0
 8012c00:	4628      	mov	r0, r5
 8012c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c06:	f000 b817 	b.w	8012c38 <_kill_r>
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d00a      	beq.n	8012c24 <_raise_r+0x4c>
 8012c0e:	1c59      	adds	r1, r3, #1
 8012c10:	d103      	bne.n	8012c1a <_raise_r+0x42>
 8012c12:	2316      	movs	r3, #22
 8012c14:	6003      	str	r3, [r0, #0]
 8012c16:	2001      	movs	r0, #1
 8012c18:	e7e7      	b.n	8012bea <_raise_r+0x12>
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012c20:	4620      	mov	r0, r4
 8012c22:	4798      	blx	r3
 8012c24:	2000      	movs	r0, #0
 8012c26:	e7e0      	b.n	8012bea <_raise_r+0x12>

08012c28 <raise>:
 8012c28:	4b02      	ldr	r3, [pc, #8]	@ (8012c34 <raise+0xc>)
 8012c2a:	4601      	mov	r1, r0
 8012c2c:	6818      	ldr	r0, [r3, #0]
 8012c2e:	f7ff bfd3 	b.w	8012bd8 <_raise_r>
 8012c32:	bf00      	nop
 8012c34:	2000029c 	.word	0x2000029c

08012c38 <_kill_r>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	4d07      	ldr	r5, [pc, #28]	@ (8012c58 <_kill_r+0x20>)
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	4604      	mov	r4, r0
 8012c40:	4608      	mov	r0, r1
 8012c42:	4611      	mov	r1, r2
 8012c44:	602b      	str	r3, [r5, #0]
 8012c46:	f7f1 faf3 	bl	8004230 <_kill>
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	d102      	bne.n	8012c54 <_kill_r+0x1c>
 8012c4e:	682b      	ldr	r3, [r5, #0]
 8012c50:	b103      	cbz	r3, 8012c54 <_kill_r+0x1c>
 8012c52:	6023      	str	r3, [r4, #0]
 8012c54:	bd38      	pop	{r3, r4, r5, pc}
 8012c56:	bf00      	nop
 8012c58:	20002728 	.word	0x20002728

08012c5c <_getpid_r>:
 8012c5c:	f7f1 bae0 	b.w	8004220 <_getpid>

08012c60 <__swhatbuf_r>:
 8012c60:	b570      	push	{r4, r5, r6, lr}
 8012c62:	460c      	mov	r4, r1
 8012c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c68:	2900      	cmp	r1, #0
 8012c6a:	b096      	sub	sp, #88	@ 0x58
 8012c6c:	4615      	mov	r5, r2
 8012c6e:	461e      	mov	r6, r3
 8012c70:	da0d      	bge.n	8012c8e <__swhatbuf_r+0x2e>
 8012c72:	89a3      	ldrh	r3, [r4, #12]
 8012c74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c78:	f04f 0100 	mov.w	r1, #0
 8012c7c:	bf14      	ite	ne
 8012c7e:	2340      	movne	r3, #64	@ 0x40
 8012c80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c84:	2000      	movs	r0, #0
 8012c86:	6031      	str	r1, [r6, #0]
 8012c88:	602b      	str	r3, [r5, #0]
 8012c8a:	b016      	add	sp, #88	@ 0x58
 8012c8c:	bd70      	pop	{r4, r5, r6, pc}
 8012c8e:	466a      	mov	r2, sp
 8012c90:	f000 f848 	bl	8012d24 <_fstat_r>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	dbec      	blt.n	8012c72 <__swhatbuf_r+0x12>
 8012c98:	9901      	ldr	r1, [sp, #4]
 8012c9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012ca2:	4259      	negs	r1, r3
 8012ca4:	4159      	adcs	r1, r3
 8012ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012caa:	e7eb      	b.n	8012c84 <__swhatbuf_r+0x24>

08012cac <__smakebuf_r>:
 8012cac:	898b      	ldrh	r3, [r1, #12]
 8012cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cb0:	079d      	lsls	r5, r3, #30
 8012cb2:	4606      	mov	r6, r0
 8012cb4:	460c      	mov	r4, r1
 8012cb6:	d507      	bpl.n	8012cc8 <__smakebuf_r+0x1c>
 8012cb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	6123      	str	r3, [r4, #16]
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	6163      	str	r3, [r4, #20]
 8012cc4:	b003      	add	sp, #12
 8012cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cc8:	ab01      	add	r3, sp, #4
 8012cca:	466a      	mov	r2, sp
 8012ccc:	f7ff ffc8 	bl	8012c60 <__swhatbuf_r>
 8012cd0:	9f00      	ldr	r7, [sp, #0]
 8012cd2:	4605      	mov	r5, r0
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f7fb fcfc 	bl	800e6d4 <_malloc_r>
 8012cdc:	b948      	cbnz	r0, 8012cf2 <__smakebuf_r+0x46>
 8012cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ce2:	059a      	lsls	r2, r3, #22
 8012ce4:	d4ee      	bmi.n	8012cc4 <__smakebuf_r+0x18>
 8012ce6:	f023 0303 	bic.w	r3, r3, #3
 8012cea:	f043 0302 	orr.w	r3, r3, #2
 8012cee:	81a3      	strh	r3, [r4, #12]
 8012cf0:	e7e2      	b.n	8012cb8 <__smakebuf_r+0xc>
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	6020      	str	r0, [r4, #0]
 8012cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cfa:	81a3      	strh	r3, [r4, #12]
 8012cfc:	9b01      	ldr	r3, [sp, #4]
 8012cfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d02:	b15b      	cbz	r3, 8012d1c <__smakebuf_r+0x70>
 8012d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f000 f81d 	bl	8012d48 <_isatty_r>
 8012d0e:	b128      	cbz	r0, 8012d1c <__smakebuf_r+0x70>
 8012d10:	89a3      	ldrh	r3, [r4, #12]
 8012d12:	f023 0303 	bic.w	r3, r3, #3
 8012d16:	f043 0301 	orr.w	r3, r3, #1
 8012d1a:	81a3      	strh	r3, [r4, #12]
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	431d      	orrs	r5, r3
 8012d20:	81a5      	strh	r5, [r4, #12]
 8012d22:	e7cf      	b.n	8012cc4 <__smakebuf_r+0x18>

08012d24 <_fstat_r>:
 8012d24:	b538      	push	{r3, r4, r5, lr}
 8012d26:	4d07      	ldr	r5, [pc, #28]	@ (8012d44 <_fstat_r+0x20>)
 8012d28:	2300      	movs	r3, #0
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	4608      	mov	r0, r1
 8012d2e:	4611      	mov	r1, r2
 8012d30:	602b      	str	r3, [r5, #0]
 8012d32:	f7f1 fadd 	bl	80042f0 <_fstat>
 8012d36:	1c43      	adds	r3, r0, #1
 8012d38:	d102      	bne.n	8012d40 <_fstat_r+0x1c>
 8012d3a:	682b      	ldr	r3, [r5, #0]
 8012d3c:	b103      	cbz	r3, 8012d40 <_fstat_r+0x1c>
 8012d3e:	6023      	str	r3, [r4, #0]
 8012d40:	bd38      	pop	{r3, r4, r5, pc}
 8012d42:	bf00      	nop
 8012d44:	20002728 	.word	0x20002728

08012d48 <_isatty_r>:
 8012d48:	b538      	push	{r3, r4, r5, lr}
 8012d4a:	4d06      	ldr	r5, [pc, #24]	@ (8012d64 <_isatty_r+0x1c>)
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	4604      	mov	r4, r0
 8012d50:	4608      	mov	r0, r1
 8012d52:	602b      	str	r3, [r5, #0]
 8012d54:	f7f1 fadc 	bl	8004310 <_isatty>
 8012d58:	1c43      	adds	r3, r0, #1
 8012d5a:	d102      	bne.n	8012d62 <_isatty_r+0x1a>
 8012d5c:	682b      	ldr	r3, [r5, #0]
 8012d5e:	b103      	cbz	r3, 8012d62 <_isatty_r+0x1a>
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	bd38      	pop	{r3, r4, r5, pc}
 8012d64:	20002728 	.word	0x20002728

08012d68 <atan2>:
 8012d68:	f000 bbb2 	b.w	80134d0 <__ieee754_atan2>

08012d6c <pow>:
 8012d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6e:	ed2d 8b02 	vpush	{d8}
 8012d72:	eeb0 8a40 	vmov.f32	s16, s0
 8012d76:	eef0 8a60 	vmov.f32	s17, s1
 8012d7a:	ec55 4b11 	vmov	r4, r5, d1
 8012d7e:	f000 fc6f 	bl	8013660 <__ieee754_pow>
 8012d82:	4622      	mov	r2, r4
 8012d84:	462b      	mov	r3, r5
 8012d86:	4620      	mov	r0, r4
 8012d88:	4629      	mov	r1, r5
 8012d8a:	ec57 6b10 	vmov	r6, r7, d0
 8012d8e:	f7ed feed 	bl	8000b6c <__aeabi_dcmpun>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d13b      	bne.n	8012e0e <pow+0xa2>
 8012d96:	ec51 0b18 	vmov	r0, r1, d8
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	f7ed feb3 	bl	8000b08 <__aeabi_dcmpeq>
 8012da2:	b1b8      	cbz	r0, 8012dd4 <pow+0x68>
 8012da4:	2200      	movs	r2, #0
 8012da6:	2300      	movs	r3, #0
 8012da8:	4620      	mov	r0, r4
 8012daa:	4629      	mov	r1, r5
 8012dac:	f7ed feac 	bl	8000b08 <__aeabi_dcmpeq>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d146      	bne.n	8012e42 <pow+0xd6>
 8012db4:	ec45 4b10 	vmov	d0, r4, r5
 8012db8:	f000 f91e 	bl	8012ff8 <finite>
 8012dbc:	b338      	cbz	r0, 8012e0e <pow+0xa2>
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	f7ed fea9 	bl	8000b1c <__aeabi_dcmplt>
 8012dca:	b300      	cbz	r0, 8012e0e <pow+0xa2>
 8012dcc:	f7fd fb28 	bl	8010420 <__errno>
 8012dd0:	2322      	movs	r3, #34	@ 0x22
 8012dd2:	e01b      	b.n	8012e0c <pow+0xa0>
 8012dd4:	ec47 6b10 	vmov	d0, r6, r7
 8012dd8:	f000 f90e 	bl	8012ff8 <finite>
 8012ddc:	b9e0      	cbnz	r0, 8012e18 <pow+0xac>
 8012dde:	eeb0 0a48 	vmov.f32	s0, s16
 8012de2:	eef0 0a68 	vmov.f32	s1, s17
 8012de6:	f000 f907 	bl	8012ff8 <finite>
 8012dea:	b1a8      	cbz	r0, 8012e18 <pow+0xac>
 8012dec:	ec45 4b10 	vmov	d0, r4, r5
 8012df0:	f000 f902 	bl	8012ff8 <finite>
 8012df4:	b180      	cbz	r0, 8012e18 <pow+0xac>
 8012df6:	4632      	mov	r2, r6
 8012df8:	463b      	mov	r3, r7
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	4639      	mov	r1, r7
 8012dfe:	f7ed feb5 	bl	8000b6c <__aeabi_dcmpun>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d0e2      	beq.n	8012dcc <pow+0x60>
 8012e06:	f7fd fb0b 	bl	8010420 <__errno>
 8012e0a:	2321      	movs	r3, #33	@ 0x21
 8012e0c:	6003      	str	r3, [r0, #0]
 8012e0e:	ecbd 8b02 	vpop	{d8}
 8012e12:	ec47 6b10 	vmov	d0, r6, r7
 8012e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e18:	2200      	movs	r2, #0
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	4639      	mov	r1, r7
 8012e20:	f7ed fe72 	bl	8000b08 <__aeabi_dcmpeq>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d0f2      	beq.n	8012e0e <pow+0xa2>
 8012e28:	eeb0 0a48 	vmov.f32	s0, s16
 8012e2c:	eef0 0a68 	vmov.f32	s1, s17
 8012e30:	f000 f8e2 	bl	8012ff8 <finite>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d0ea      	beq.n	8012e0e <pow+0xa2>
 8012e38:	ec45 4b10 	vmov	d0, r4, r5
 8012e3c:	f000 f8dc 	bl	8012ff8 <finite>
 8012e40:	e7c3      	b.n	8012dca <pow+0x5e>
 8012e42:	4f01      	ldr	r7, [pc, #4]	@ (8012e48 <pow+0xdc>)
 8012e44:	2600      	movs	r6, #0
 8012e46:	e7e2      	b.n	8012e0e <pow+0xa2>
 8012e48:	3ff00000 	.word	0x3ff00000

08012e4c <sqrt>:
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	ed2d 8b02 	vpush	{d8}
 8012e52:	ec55 4b10 	vmov	r4, r5, d0
 8012e56:	f000 f8db 	bl	8013010 <__ieee754_sqrt>
 8012e5a:	4622      	mov	r2, r4
 8012e5c:	462b      	mov	r3, r5
 8012e5e:	4620      	mov	r0, r4
 8012e60:	4629      	mov	r1, r5
 8012e62:	eeb0 8a40 	vmov.f32	s16, s0
 8012e66:	eef0 8a60 	vmov.f32	s17, s1
 8012e6a:	f7ed fe7f 	bl	8000b6c <__aeabi_dcmpun>
 8012e6e:	b990      	cbnz	r0, 8012e96 <sqrt+0x4a>
 8012e70:	2200      	movs	r2, #0
 8012e72:	2300      	movs	r3, #0
 8012e74:	4620      	mov	r0, r4
 8012e76:	4629      	mov	r1, r5
 8012e78:	f7ed fe50 	bl	8000b1c <__aeabi_dcmplt>
 8012e7c:	b158      	cbz	r0, 8012e96 <sqrt+0x4a>
 8012e7e:	f7fd facf 	bl	8010420 <__errno>
 8012e82:	2321      	movs	r3, #33	@ 0x21
 8012e84:	6003      	str	r3, [r0, #0]
 8012e86:	2200      	movs	r2, #0
 8012e88:	2300      	movs	r3, #0
 8012e8a:	4610      	mov	r0, r2
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	f7ed fcfd 	bl	800088c <__aeabi_ddiv>
 8012e92:	ec41 0b18 	vmov	d8, r0, r1
 8012e96:	eeb0 0a48 	vmov.f32	s0, s16
 8012e9a:	eef0 0a68 	vmov.f32	s1, s17
 8012e9e:	ecbd 8b02 	vpop	{d8}
 8012ea2:	bd38      	pop	{r3, r4, r5, pc}
 8012ea4:	0000      	movs	r0, r0
	...

08012ea8 <cos>:
 8012ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012eaa:	ec53 2b10 	vmov	r2, r3, d0
 8012eae:	4826      	ldr	r0, [pc, #152]	@ (8012f48 <cos+0xa0>)
 8012eb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012eb4:	4281      	cmp	r1, r0
 8012eb6:	d806      	bhi.n	8012ec6 <cos+0x1e>
 8012eb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012f40 <cos+0x98>
 8012ebc:	b005      	add	sp, #20
 8012ebe:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ec2:	f000 b981 	b.w	80131c8 <__kernel_cos>
 8012ec6:	4821      	ldr	r0, [pc, #132]	@ (8012f4c <cos+0xa4>)
 8012ec8:	4281      	cmp	r1, r0
 8012eca:	d908      	bls.n	8012ede <cos+0x36>
 8012ecc:	4610      	mov	r0, r2
 8012ece:	4619      	mov	r1, r3
 8012ed0:	f7ed f9fa 	bl	80002c8 <__aeabi_dsub>
 8012ed4:	ec41 0b10 	vmov	d0, r0, r1
 8012ed8:	b005      	add	sp, #20
 8012eda:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ede:	4668      	mov	r0, sp
 8012ee0:	f001 f902 	bl	80140e8 <__ieee754_rem_pio2>
 8012ee4:	f000 0003 	and.w	r0, r0, #3
 8012ee8:	2801      	cmp	r0, #1
 8012eea:	d00b      	beq.n	8012f04 <cos+0x5c>
 8012eec:	2802      	cmp	r0, #2
 8012eee:	d015      	beq.n	8012f1c <cos+0x74>
 8012ef0:	b9d8      	cbnz	r0, 8012f2a <cos+0x82>
 8012ef2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ef6:	ed9d 0b00 	vldr	d0, [sp]
 8012efa:	f000 f965 	bl	80131c8 <__kernel_cos>
 8012efe:	ec51 0b10 	vmov	r0, r1, d0
 8012f02:	e7e7      	b.n	8012ed4 <cos+0x2c>
 8012f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f08:	ed9d 0b00 	vldr	d0, [sp]
 8012f0c:	f000 fa24 	bl	8013358 <__kernel_sin>
 8012f10:	ec53 2b10 	vmov	r2, r3, d0
 8012f14:	4610      	mov	r0, r2
 8012f16:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012f1a:	e7db      	b.n	8012ed4 <cos+0x2c>
 8012f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f20:	ed9d 0b00 	vldr	d0, [sp]
 8012f24:	f000 f950 	bl	80131c8 <__kernel_cos>
 8012f28:	e7f2      	b.n	8012f10 <cos+0x68>
 8012f2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f2e:	ed9d 0b00 	vldr	d0, [sp]
 8012f32:	2001      	movs	r0, #1
 8012f34:	f000 fa10 	bl	8013358 <__kernel_sin>
 8012f38:	e7e1      	b.n	8012efe <cos+0x56>
 8012f3a:	bf00      	nop
 8012f3c:	f3af 8000 	nop.w
	...
 8012f48:	3fe921fb 	.word	0x3fe921fb
 8012f4c:	7fefffff 	.word	0x7fefffff

08012f50 <sin>:
 8012f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f52:	ec53 2b10 	vmov	r2, r3, d0
 8012f56:	4826      	ldr	r0, [pc, #152]	@ (8012ff0 <sin+0xa0>)
 8012f58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012f5c:	4281      	cmp	r1, r0
 8012f5e:	d807      	bhi.n	8012f70 <sin+0x20>
 8012f60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012fe8 <sin+0x98>
 8012f64:	2000      	movs	r0, #0
 8012f66:	b005      	add	sp, #20
 8012f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f6c:	f000 b9f4 	b.w	8013358 <__kernel_sin>
 8012f70:	4820      	ldr	r0, [pc, #128]	@ (8012ff4 <sin+0xa4>)
 8012f72:	4281      	cmp	r1, r0
 8012f74:	d908      	bls.n	8012f88 <sin+0x38>
 8012f76:	4610      	mov	r0, r2
 8012f78:	4619      	mov	r1, r3
 8012f7a:	f7ed f9a5 	bl	80002c8 <__aeabi_dsub>
 8012f7e:	ec41 0b10 	vmov	d0, r0, r1
 8012f82:	b005      	add	sp, #20
 8012f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f88:	4668      	mov	r0, sp
 8012f8a:	f001 f8ad 	bl	80140e8 <__ieee754_rem_pio2>
 8012f8e:	f000 0003 	and.w	r0, r0, #3
 8012f92:	2801      	cmp	r0, #1
 8012f94:	d00c      	beq.n	8012fb0 <sin+0x60>
 8012f96:	2802      	cmp	r0, #2
 8012f98:	d011      	beq.n	8012fbe <sin+0x6e>
 8012f9a:	b9e8      	cbnz	r0, 8012fd8 <sin+0x88>
 8012f9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fa0:	ed9d 0b00 	vldr	d0, [sp]
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	f000 f9d7 	bl	8013358 <__kernel_sin>
 8012faa:	ec51 0b10 	vmov	r0, r1, d0
 8012fae:	e7e6      	b.n	8012f7e <sin+0x2e>
 8012fb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fb4:	ed9d 0b00 	vldr	d0, [sp]
 8012fb8:	f000 f906 	bl	80131c8 <__kernel_cos>
 8012fbc:	e7f5      	b.n	8012faa <sin+0x5a>
 8012fbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fc2:	ed9d 0b00 	vldr	d0, [sp]
 8012fc6:	2001      	movs	r0, #1
 8012fc8:	f000 f9c6 	bl	8013358 <__kernel_sin>
 8012fcc:	ec53 2b10 	vmov	r2, r3, d0
 8012fd0:	4610      	mov	r0, r2
 8012fd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012fd6:	e7d2      	b.n	8012f7e <sin+0x2e>
 8012fd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fdc:	ed9d 0b00 	vldr	d0, [sp]
 8012fe0:	f000 f8f2 	bl	80131c8 <__kernel_cos>
 8012fe4:	e7f2      	b.n	8012fcc <sin+0x7c>
 8012fe6:	bf00      	nop
	...
 8012ff0:	3fe921fb 	.word	0x3fe921fb
 8012ff4:	7fefffff 	.word	0x7fefffff

08012ff8 <finite>:
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	ed8d 0b00 	vstr	d0, [sp]
 8012ffe:	9801      	ldr	r0, [sp, #4]
 8013000:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013004:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013008:	0fc0      	lsrs	r0, r0, #31
 801300a:	b002      	add	sp, #8
 801300c:	4770      	bx	lr
	...

08013010 <__ieee754_sqrt>:
 8013010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	4a68      	ldr	r2, [pc, #416]	@ (80131b8 <__ieee754_sqrt+0x1a8>)
 8013016:	ec55 4b10 	vmov	r4, r5, d0
 801301a:	43aa      	bics	r2, r5
 801301c:	462b      	mov	r3, r5
 801301e:	4621      	mov	r1, r4
 8013020:	d110      	bne.n	8013044 <__ieee754_sqrt+0x34>
 8013022:	4622      	mov	r2, r4
 8013024:	4620      	mov	r0, r4
 8013026:	4629      	mov	r1, r5
 8013028:	f7ed fb06 	bl	8000638 <__aeabi_dmul>
 801302c:	4602      	mov	r2, r0
 801302e:	460b      	mov	r3, r1
 8013030:	4620      	mov	r0, r4
 8013032:	4629      	mov	r1, r5
 8013034:	f7ed f94a 	bl	80002cc <__adddf3>
 8013038:	4604      	mov	r4, r0
 801303a:	460d      	mov	r5, r1
 801303c:	ec45 4b10 	vmov	d0, r4, r5
 8013040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013044:	2d00      	cmp	r5, #0
 8013046:	dc0e      	bgt.n	8013066 <__ieee754_sqrt+0x56>
 8013048:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801304c:	4322      	orrs	r2, r4
 801304e:	d0f5      	beq.n	801303c <__ieee754_sqrt+0x2c>
 8013050:	b19d      	cbz	r5, 801307a <__ieee754_sqrt+0x6a>
 8013052:	4622      	mov	r2, r4
 8013054:	4620      	mov	r0, r4
 8013056:	4629      	mov	r1, r5
 8013058:	f7ed f936 	bl	80002c8 <__aeabi_dsub>
 801305c:	4602      	mov	r2, r0
 801305e:	460b      	mov	r3, r1
 8013060:	f7ed fc14 	bl	800088c <__aeabi_ddiv>
 8013064:	e7e8      	b.n	8013038 <__ieee754_sqrt+0x28>
 8013066:	152a      	asrs	r2, r5, #20
 8013068:	d115      	bne.n	8013096 <__ieee754_sqrt+0x86>
 801306a:	2000      	movs	r0, #0
 801306c:	e009      	b.n	8013082 <__ieee754_sqrt+0x72>
 801306e:	0acb      	lsrs	r3, r1, #11
 8013070:	3a15      	subs	r2, #21
 8013072:	0549      	lsls	r1, r1, #21
 8013074:	2b00      	cmp	r3, #0
 8013076:	d0fa      	beq.n	801306e <__ieee754_sqrt+0x5e>
 8013078:	e7f7      	b.n	801306a <__ieee754_sqrt+0x5a>
 801307a:	462a      	mov	r2, r5
 801307c:	e7fa      	b.n	8013074 <__ieee754_sqrt+0x64>
 801307e:	005b      	lsls	r3, r3, #1
 8013080:	3001      	adds	r0, #1
 8013082:	02dc      	lsls	r4, r3, #11
 8013084:	d5fb      	bpl.n	801307e <__ieee754_sqrt+0x6e>
 8013086:	1e44      	subs	r4, r0, #1
 8013088:	1b12      	subs	r2, r2, r4
 801308a:	f1c0 0420 	rsb	r4, r0, #32
 801308e:	fa21 f404 	lsr.w	r4, r1, r4
 8013092:	4323      	orrs	r3, r4
 8013094:	4081      	lsls	r1, r0
 8013096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801309a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801309e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80130a2:	07d2      	lsls	r2, r2, #31
 80130a4:	bf5c      	itt	pl
 80130a6:	005b      	lslpl	r3, r3, #1
 80130a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80130ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130b0:	bf58      	it	pl
 80130b2:	0049      	lslpl	r1, r1, #1
 80130b4:	2600      	movs	r6, #0
 80130b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80130ba:	106d      	asrs	r5, r5, #1
 80130bc:	0049      	lsls	r1, r1, #1
 80130be:	2016      	movs	r0, #22
 80130c0:	4632      	mov	r2, r6
 80130c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80130c6:	1917      	adds	r7, r2, r4
 80130c8:	429f      	cmp	r7, r3
 80130ca:	bfde      	ittt	le
 80130cc:	193a      	addle	r2, r7, r4
 80130ce:	1bdb      	suble	r3, r3, r7
 80130d0:	1936      	addle	r6, r6, r4
 80130d2:	0fcf      	lsrs	r7, r1, #31
 80130d4:	3801      	subs	r0, #1
 80130d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80130da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80130de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80130e2:	d1f0      	bne.n	80130c6 <__ieee754_sqrt+0xb6>
 80130e4:	4604      	mov	r4, r0
 80130e6:	2720      	movs	r7, #32
 80130e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80130ec:	429a      	cmp	r2, r3
 80130ee:	eb00 0e0c 	add.w	lr, r0, ip
 80130f2:	db02      	blt.n	80130fa <__ieee754_sqrt+0xea>
 80130f4:	d113      	bne.n	801311e <__ieee754_sqrt+0x10e>
 80130f6:	458e      	cmp	lr, r1
 80130f8:	d811      	bhi.n	801311e <__ieee754_sqrt+0x10e>
 80130fa:	f1be 0f00 	cmp.w	lr, #0
 80130fe:	eb0e 000c 	add.w	r0, lr, ip
 8013102:	da42      	bge.n	801318a <__ieee754_sqrt+0x17a>
 8013104:	2800      	cmp	r0, #0
 8013106:	db40      	blt.n	801318a <__ieee754_sqrt+0x17a>
 8013108:	f102 0801 	add.w	r8, r2, #1
 801310c:	1a9b      	subs	r3, r3, r2
 801310e:	458e      	cmp	lr, r1
 8013110:	bf88      	it	hi
 8013112:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013116:	eba1 010e 	sub.w	r1, r1, lr
 801311a:	4464      	add	r4, ip
 801311c:	4642      	mov	r2, r8
 801311e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013122:	3f01      	subs	r7, #1
 8013124:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013128:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801312c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013130:	d1dc      	bne.n	80130ec <__ieee754_sqrt+0xdc>
 8013132:	4319      	orrs	r1, r3
 8013134:	d01b      	beq.n	801316e <__ieee754_sqrt+0x15e>
 8013136:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80131bc <__ieee754_sqrt+0x1ac>
 801313a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80131c0 <__ieee754_sqrt+0x1b0>
 801313e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013142:	e9db 2300 	ldrd	r2, r3, [fp]
 8013146:	f7ed f8bf 	bl	80002c8 <__aeabi_dsub>
 801314a:	e9da 8900 	ldrd	r8, r9, [sl]
 801314e:	4602      	mov	r2, r0
 8013150:	460b      	mov	r3, r1
 8013152:	4640      	mov	r0, r8
 8013154:	4649      	mov	r1, r9
 8013156:	f7ed fceb 	bl	8000b30 <__aeabi_dcmple>
 801315a:	b140      	cbz	r0, 801316e <__ieee754_sqrt+0x15e>
 801315c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013160:	e9da 0100 	ldrd	r0, r1, [sl]
 8013164:	e9db 2300 	ldrd	r2, r3, [fp]
 8013168:	d111      	bne.n	801318e <__ieee754_sqrt+0x17e>
 801316a:	3601      	adds	r6, #1
 801316c:	463c      	mov	r4, r7
 801316e:	1072      	asrs	r2, r6, #1
 8013170:	0863      	lsrs	r3, r4, #1
 8013172:	07f1      	lsls	r1, r6, #31
 8013174:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013178:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801317c:	bf48      	it	mi
 801317e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013182:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013186:	4618      	mov	r0, r3
 8013188:	e756      	b.n	8013038 <__ieee754_sqrt+0x28>
 801318a:	4690      	mov	r8, r2
 801318c:	e7be      	b.n	801310c <__ieee754_sqrt+0xfc>
 801318e:	f7ed f89d 	bl	80002cc <__adddf3>
 8013192:	e9da 8900 	ldrd	r8, r9, [sl]
 8013196:	4602      	mov	r2, r0
 8013198:	460b      	mov	r3, r1
 801319a:	4640      	mov	r0, r8
 801319c:	4649      	mov	r1, r9
 801319e:	f7ed fcbd 	bl	8000b1c <__aeabi_dcmplt>
 80131a2:	b120      	cbz	r0, 80131ae <__ieee754_sqrt+0x19e>
 80131a4:	1ca0      	adds	r0, r4, #2
 80131a6:	bf08      	it	eq
 80131a8:	3601      	addeq	r6, #1
 80131aa:	3402      	adds	r4, #2
 80131ac:	e7df      	b.n	801316e <__ieee754_sqrt+0x15e>
 80131ae:	1c63      	adds	r3, r4, #1
 80131b0:	f023 0401 	bic.w	r4, r3, #1
 80131b4:	e7db      	b.n	801316e <__ieee754_sqrt+0x15e>
 80131b6:	bf00      	nop
 80131b8:	7ff00000 	.word	0x7ff00000
 80131bc:	200002f8 	.word	0x200002f8
 80131c0:	200002f0 	.word	0x200002f0
 80131c4:	00000000 	.word	0x00000000

080131c8 <__kernel_cos>:
 80131c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	ec57 6b10 	vmov	r6, r7, d0
 80131d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80131d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80131d8:	ed8d 1b00 	vstr	d1, [sp]
 80131dc:	d206      	bcs.n	80131ec <__kernel_cos+0x24>
 80131de:	4630      	mov	r0, r6
 80131e0:	4639      	mov	r1, r7
 80131e2:	f7ed fcd9 	bl	8000b98 <__aeabi_d2iz>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	f000 8088 	beq.w	80132fc <__kernel_cos+0x134>
 80131ec:	4632      	mov	r2, r6
 80131ee:	463b      	mov	r3, r7
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed fa20 	bl	8000638 <__aeabi_dmul>
 80131f8:	4b51      	ldr	r3, [pc, #324]	@ (8013340 <__kernel_cos+0x178>)
 80131fa:	2200      	movs	r2, #0
 80131fc:	4604      	mov	r4, r0
 80131fe:	460d      	mov	r5, r1
 8013200:	f7ed fa1a 	bl	8000638 <__aeabi_dmul>
 8013204:	a340      	add	r3, pc, #256	@ (adr r3, 8013308 <__kernel_cos+0x140>)
 8013206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320a:	4682      	mov	sl, r0
 801320c:	468b      	mov	fp, r1
 801320e:	4620      	mov	r0, r4
 8013210:	4629      	mov	r1, r5
 8013212:	f7ed fa11 	bl	8000638 <__aeabi_dmul>
 8013216:	a33e      	add	r3, pc, #248	@ (adr r3, 8013310 <__kernel_cos+0x148>)
 8013218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321c:	f7ed f856 	bl	80002cc <__adddf3>
 8013220:	4622      	mov	r2, r4
 8013222:	462b      	mov	r3, r5
 8013224:	f7ed fa08 	bl	8000638 <__aeabi_dmul>
 8013228:	a33b      	add	r3, pc, #236	@ (adr r3, 8013318 <__kernel_cos+0x150>)
 801322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322e:	f7ed f84b 	bl	80002c8 <__aeabi_dsub>
 8013232:	4622      	mov	r2, r4
 8013234:	462b      	mov	r3, r5
 8013236:	f7ed f9ff 	bl	8000638 <__aeabi_dmul>
 801323a:	a339      	add	r3, pc, #228	@ (adr r3, 8013320 <__kernel_cos+0x158>)
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	f7ed f844 	bl	80002cc <__adddf3>
 8013244:	4622      	mov	r2, r4
 8013246:	462b      	mov	r3, r5
 8013248:	f7ed f9f6 	bl	8000638 <__aeabi_dmul>
 801324c:	a336      	add	r3, pc, #216	@ (adr r3, 8013328 <__kernel_cos+0x160>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	f7ed f839 	bl	80002c8 <__aeabi_dsub>
 8013256:	4622      	mov	r2, r4
 8013258:	462b      	mov	r3, r5
 801325a:	f7ed f9ed 	bl	8000638 <__aeabi_dmul>
 801325e:	a334      	add	r3, pc, #208	@ (adr r3, 8013330 <__kernel_cos+0x168>)
 8013260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013264:	f7ed f832 	bl	80002cc <__adddf3>
 8013268:	4622      	mov	r2, r4
 801326a:	462b      	mov	r3, r5
 801326c:	f7ed f9e4 	bl	8000638 <__aeabi_dmul>
 8013270:	4622      	mov	r2, r4
 8013272:	462b      	mov	r3, r5
 8013274:	f7ed f9e0 	bl	8000638 <__aeabi_dmul>
 8013278:	e9dd 2300 	ldrd	r2, r3, [sp]
 801327c:	4604      	mov	r4, r0
 801327e:	460d      	mov	r5, r1
 8013280:	4630      	mov	r0, r6
 8013282:	4639      	mov	r1, r7
 8013284:	f7ed f9d8 	bl	8000638 <__aeabi_dmul>
 8013288:	460b      	mov	r3, r1
 801328a:	4602      	mov	r2, r0
 801328c:	4629      	mov	r1, r5
 801328e:	4620      	mov	r0, r4
 8013290:	f7ed f81a 	bl	80002c8 <__aeabi_dsub>
 8013294:	4b2b      	ldr	r3, [pc, #172]	@ (8013344 <__kernel_cos+0x17c>)
 8013296:	4598      	cmp	r8, r3
 8013298:	4606      	mov	r6, r0
 801329a:	460f      	mov	r7, r1
 801329c:	d810      	bhi.n	80132c0 <__kernel_cos+0xf8>
 801329e:	4602      	mov	r2, r0
 80132a0:	460b      	mov	r3, r1
 80132a2:	4650      	mov	r0, sl
 80132a4:	4659      	mov	r1, fp
 80132a6:	f7ed f80f 	bl	80002c8 <__aeabi_dsub>
 80132aa:	460b      	mov	r3, r1
 80132ac:	4926      	ldr	r1, [pc, #152]	@ (8013348 <__kernel_cos+0x180>)
 80132ae:	4602      	mov	r2, r0
 80132b0:	2000      	movs	r0, #0
 80132b2:	f7ed f809 	bl	80002c8 <__aeabi_dsub>
 80132b6:	ec41 0b10 	vmov	d0, r0, r1
 80132ba:	b003      	add	sp, #12
 80132bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c0:	4b22      	ldr	r3, [pc, #136]	@ (801334c <__kernel_cos+0x184>)
 80132c2:	4921      	ldr	r1, [pc, #132]	@ (8013348 <__kernel_cos+0x180>)
 80132c4:	4598      	cmp	r8, r3
 80132c6:	bf8c      	ite	hi
 80132c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8013350 <__kernel_cos+0x188>)
 80132ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80132ce:	2400      	movs	r4, #0
 80132d0:	4622      	mov	r2, r4
 80132d2:	462b      	mov	r3, r5
 80132d4:	2000      	movs	r0, #0
 80132d6:	f7ec fff7 	bl	80002c8 <__aeabi_dsub>
 80132da:	4622      	mov	r2, r4
 80132dc:	4680      	mov	r8, r0
 80132de:	4689      	mov	r9, r1
 80132e0:	462b      	mov	r3, r5
 80132e2:	4650      	mov	r0, sl
 80132e4:	4659      	mov	r1, fp
 80132e6:	f7ec ffef 	bl	80002c8 <__aeabi_dsub>
 80132ea:	4632      	mov	r2, r6
 80132ec:	463b      	mov	r3, r7
 80132ee:	f7ec ffeb 	bl	80002c8 <__aeabi_dsub>
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	4640      	mov	r0, r8
 80132f8:	4649      	mov	r1, r9
 80132fa:	e7da      	b.n	80132b2 <__kernel_cos+0xea>
 80132fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013338 <__kernel_cos+0x170>
 8013300:	e7db      	b.n	80132ba <__kernel_cos+0xf2>
 8013302:	bf00      	nop
 8013304:	f3af 8000 	nop.w
 8013308:	be8838d4 	.word	0xbe8838d4
 801330c:	bda8fae9 	.word	0xbda8fae9
 8013310:	bdb4b1c4 	.word	0xbdb4b1c4
 8013314:	3e21ee9e 	.word	0x3e21ee9e
 8013318:	809c52ad 	.word	0x809c52ad
 801331c:	3e927e4f 	.word	0x3e927e4f
 8013320:	19cb1590 	.word	0x19cb1590
 8013324:	3efa01a0 	.word	0x3efa01a0
 8013328:	16c15177 	.word	0x16c15177
 801332c:	3f56c16c 	.word	0x3f56c16c
 8013330:	5555554c 	.word	0x5555554c
 8013334:	3fa55555 	.word	0x3fa55555
 8013338:	00000000 	.word	0x00000000
 801333c:	3ff00000 	.word	0x3ff00000
 8013340:	3fe00000 	.word	0x3fe00000
 8013344:	3fd33332 	.word	0x3fd33332
 8013348:	3ff00000 	.word	0x3ff00000
 801334c:	3fe90000 	.word	0x3fe90000
 8013350:	3fd20000 	.word	0x3fd20000
 8013354:	00000000 	.word	0x00000000

08013358 <__kernel_sin>:
 8013358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335c:	ec55 4b10 	vmov	r4, r5, d0
 8013360:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013364:	b085      	sub	sp, #20
 8013366:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801336a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801336e:	4680      	mov	r8, r0
 8013370:	d205      	bcs.n	801337e <__kernel_sin+0x26>
 8013372:	4620      	mov	r0, r4
 8013374:	4629      	mov	r1, r5
 8013376:	f7ed fc0f 	bl	8000b98 <__aeabi_d2iz>
 801337a:	2800      	cmp	r0, #0
 801337c:	d052      	beq.n	8013424 <__kernel_sin+0xcc>
 801337e:	4622      	mov	r2, r4
 8013380:	462b      	mov	r3, r5
 8013382:	4620      	mov	r0, r4
 8013384:	4629      	mov	r1, r5
 8013386:	f7ed f957 	bl	8000638 <__aeabi_dmul>
 801338a:	4682      	mov	sl, r0
 801338c:	468b      	mov	fp, r1
 801338e:	4602      	mov	r2, r0
 8013390:	460b      	mov	r3, r1
 8013392:	4620      	mov	r0, r4
 8013394:	4629      	mov	r1, r5
 8013396:	f7ed f94f 	bl	8000638 <__aeabi_dmul>
 801339a:	a342      	add	r3, pc, #264	@ (adr r3, 80134a4 <__kernel_sin+0x14c>)
 801339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a0:	e9cd 0100 	strd	r0, r1, [sp]
 80133a4:	4650      	mov	r0, sl
 80133a6:	4659      	mov	r1, fp
 80133a8:	f7ed f946 	bl	8000638 <__aeabi_dmul>
 80133ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80134ac <__kernel_sin+0x154>)
 80133ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b2:	f7ec ff89 	bl	80002c8 <__aeabi_dsub>
 80133b6:	4652      	mov	r2, sl
 80133b8:	465b      	mov	r3, fp
 80133ba:	f7ed f93d 	bl	8000638 <__aeabi_dmul>
 80133be:	a33d      	add	r3, pc, #244	@ (adr r3, 80134b4 <__kernel_sin+0x15c>)
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f7ec ff82 	bl	80002cc <__adddf3>
 80133c8:	4652      	mov	r2, sl
 80133ca:	465b      	mov	r3, fp
 80133cc:	f7ed f934 	bl	8000638 <__aeabi_dmul>
 80133d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80134bc <__kernel_sin+0x164>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ec ff77 	bl	80002c8 <__aeabi_dsub>
 80133da:	4652      	mov	r2, sl
 80133dc:	465b      	mov	r3, fp
 80133de:	f7ed f92b 	bl	8000638 <__aeabi_dmul>
 80133e2:	a338      	add	r3, pc, #224	@ (adr r3, 80134c4 <__kernel_sin+0x16c>)
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	f7ec ff70 	bl	80002cc <__adddf3>
 80133ec:	4606      	mov	r6, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	f1b8 0f00 	cmp.w	r8, #0
 80133f4:	d11b      	bne.n	801342e <__kernel_sin+0xd6>
 80133f6:	4602      	mov	r2, r0
 80133f8:	460b      	mov	r3, r1
 80133fa:	4650      	mov	r0, sl
 80133fc:	4659      	mov	r1, fp
 80133fe:	f7ed f91b 	bl	8000638 <__aeabi_dmul>
 8013402:	a325      	add	r3, pc, #148	@ (adr r3, 8013498 <__kernel_sin+0x140>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	f7ec ff5e 	bl	80002c8 <__aeabi_dsub>
 801340c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013410:	f7ed f912 	bl	8000638 <__aeabi_dmul>
 8013414:	4602      	mov	r2, r0
 8013416:	460b      	mov	r3, r1
 8013418:	4620      	mov	r0, r4
 801341a:	4629      	mov	r1, r5
 801341c:	f7ec ff56 	bl	80002cc <__adddf3>
 8013420:	4604      	mov	r4, r0
 8013422:	460d      	mov	r5, r1
 8013424:	ec45 4b10 	vmov	d0, r4, r5
 8013428:	b005      	add	sp, #20
 801342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013432:	4b1b      	ldr	r3, [pc, #108]	@ (80134a0 <__kernel_sin+0x148>)
 8013434:	2200      	movs	r2, #0
 8013436:	f7ed f8ff 	bl	8000638 <__aeabi_dmul>
 801343a:	4632      	mov	r2, r6
 801343c:	4680      	mov	r8, r0
 801343e:	4689      	mov	r9, r1
 8013440:	463b      	mov	r3, r7
 8013442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013446:	f7ed f8f7 	bl	8000638 <__aeabi_dmul>
 801344a:	4602      	mov	r2, r0
 801344c:	460b      	mov	r3, r1
 801344e:	4640      	mov	r0, r8
 8013450:	4649      	mov	r1, r9
 8013452:	f7ec ff39 	bl	80002c8 <__aeabi_dsub>
 8013456:	4652      	mov	r2, sl
 8013458:	465b      	mov	r3, fp
 801345a:	f7ed f8ed 	bl	8000638 <__aeabi_dmul>
 801345e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013462:	f7ec ff31 	bl	80002c8 <__aeabi_dsub>
 8013466:	a30c      	add	r3, pc, #48	@ (adr r3, 8013498 <__kernel_sin+0x140>)
 8013468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346c:	4606      	mov	r6, r0
 801346e:	460f      	mov	r7, r1
 8013470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013474:	f7ed f8e0 	bl	8000638 <__aeabi_dmul>
 8013478:	4602      	mov	r2, r0
 801347a:	460b      	mov	r3, r1
 801347c:	4630      	mov	r0, r6
 801347e:	4639      	mov	r1, r7
 8013480:	f7ec ff24 	bl	80002cc <__adddf3>
 8013484:	4602      	mov	r2, r0
 8013486:	460b      	mov	r3, r1
 8013488:	4620      	mov	r0, r4
 801348a:	4629      	mov	r1, r5
 801348c:	f7ec ff1c 	bl	80002c8 <__aeabi_dsub>
 8013490:	e7c6      	b.n	8013420 <__kernel_sin+0xc8>
 8013492:	bf00      	nop
 8013494:	f3af 8000 	nop.w
 8013498:	55555549 	.word	0x55555549
 801349c:	3fc55555 	.word	0x3fc55555
 80134a0:	3fe00000 	.word	0x3fe00000
 80134a4:	5acfd57c 	.word	0x5acfd57c
 80134a8:	3de5d93a 	.word	0x3de5d93a
 80134ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80134b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80134b4:	57b1fe7d 	.word	0x57b1fe7d
 80134b8:	3ec71de3 	.word	0x3ec71de3
 80134bc:	19c161d5 	.word	0x19c161d5
 80134c0:	3f2a01a0 	.word	0x3f2a01a0
 80134c4:	1110f8a6 	.word	0x1110f8a6
 80134c8:	3f811111 	.word	0x3f811111
 80134cc:	00000000 	.word	0x00000000

080134d0 <__ieee754_atan2>:
 80134d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d4:	ec57 6b11 	vmov	r6, r7, d1
 80134d8:	4273      	negs	r3, r6
 80134da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013658 <__ieee754_atan2+0x188>
 80134de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80134e2:	4333      	orrs	r3, r6
 80134e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80134e8:	4543      	cmp	r3, r8
 80134ea:	ec51 0b10 	vmov	r0, r1, d0
 80134ee:	4635      	mov	r5, r6
 80134f0:	d809      	bhi.n	8013506 <__ieee754_atan2+0x36>
 80134f2:	4244      	negs	r4, r0
 80134f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134f8:	4304      	orrs	r4, r0
 80134fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80134fe:	4544      	cmp	r4, r8
 8013500:	468e      	mov	lr, r1
 8013502:	4681      	mov	r9, r0
 8013504:	d907      	bls.n	8013516 <__ieee754_atan2+0x46>
 8013506:	4632      	mov	r2, r6
 8013508:	463b      	mov	r3, r7
 801350a:	f7ec fedf 	bl	80002cc <__adddf3>
 801350e:	ec41 0b10 	vmov	d0, r0, r1
 8013512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013516:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801351a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801351e:	4334      	orrs	r4, r6
 8013520:	d103      	bne.n	801352a <__ieee754_atan2+0x5a>
 8013522:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013526:	f000 bfdb 	b.w	80144e0 <atan>
 801352a:	17bc      	asrs	r4, r7, #30
 801352c:	f004 0402 	and.w	r4, r4, #2
 8013530:	ea53 0909 	orrs.w	r9, r3, r9
 8013534:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013538:	d107      	bne.n	801354a <__ieee754_atan2+0x7a>
 801353a:	2c02      	cmp	r4, #2
 801353c:	d05f      	beq.n	80135fe <__ieee754_atan2+0x12e>
 801353e:	2c03      	cmp	r4, #3
 8013540:	d1e5      	bne.n	801350e <__ieee754_atan2+0x3e>
 8013542:	a141      	add	r1, pc, #260	@ (adr r1, 8013648 <__ieee754_atan2+0x178>)
 8013544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013548:	e7e1      	b.n	801350e <__ieee754_atan2+0x3e>
 801354a:	4315      	orrs	r5, r2
 801354c:	d106      	bne.n	801355c <__ieee754_atan2+0x8c>
 801354e:	f1be 0f00 	cmp.w	lr, #0
 8013552:	da5f      	bge.n	8013614 <__ieee754_atan2+0x144>
 8013554:	a13e      	add	r1, pc, #248	@ (adr r1, 8013650 <__ieee754_atan2+0x180>)
 8013556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355a:	e7d8      	b.n	801350e <__ieee754_atan2+0x3e>
 801355c:	4542      	cmp	r2, r8
 801355e:	d10f      	bne.n	8013580 <__ieee754_atan2+0xb0>
 8013560:	4293      	cmp	r3, r2
 8013562:	f104 34ff 	add.w	r4, r4, #4294967295
 8013566:	d107      	bne.n	8013578 <__ieee754_atan2+0xa8>
 8013568:	2c02      	cmp	r4, #2
 801356a:	d84c      	bhi.n	8013606 <__ieee754_atan2+0x136>
 801356c:	4b34      	ldr	r3, [pc, #208]	@ (8013640 <__ieee754_atan2+0x170>)
 801356e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013576:	e7ca      	b.n	801350e <__ieee754_atan2+0x3e>
 8013578:	2c02      	cmp	r4, #2
 801357a:	d848      	bhi.n	801360e <__ieee754_atan2+0x13e>
 801357c:	4b31      	ldr	r3, [pc, #196]	@ (8013644 <__ieee754_atan2+0x174>)
 801357e:	e7f6      	b.n	801356e <__ieee754_atan2+0x9e>
 8013580:	4543      	cmp	r3, r8
 8013582:	d0e4      	beq.n	801354e <__ieee754_atan2+0x7e>
 8013584:	1a9b      	subs	r3, r3, r2
 8013586:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801358a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801358e:	da1e      	bge.n	80135ce <__ieee754_atan2+0xfe>
 8013590:	2f00      	cmp	r7, #0
 8013592:	da01      	bge.n	8013598 <__ieee754_atan2+0xc8>
 8013594:	323c      	adds	r2, #60	@ 0x3c
 8013596:	db1e      	blt.n	80135d6 <__ieee754_atan2+0x106>
 8013598:	4632      	mov	r2, r6
 801359a:	463b      	mov	r3, r7
 801359c:	f7ed f976 	bl	800088c <__aeabi_ddiv>
 80135a0:	ec41 0b10 	vmov	d0, r0, r1
 80135a4:	f001 f934 	bl	8014810 <fabs>
 80135a8:	f000 ff9a 	bl	80144e0 <atan>
 80135ac:	ec51 0b10 	vmov	r0, r1, d0
 80135b0:	2c01      	cmp	r4, #1
 80135b2:	d013      	beq.n	80135dc <__ieee754_atan2+0x10c>
 80135b4:	2c02      	cmp	r4, #2
 80135b6:	d015      	beq.n	80135e4 <__ieee754_atan2+0x114>
 80135b8:	2c00      	cmp	r4, #0
 80135ba:	d0a8      	beq.n	801350e <__ieee754_atan2+0x3e>
 80135bc:	a318      	add	r3, pc, #96	@ (adr r3, 8013620 <__ieee754_atan2+0x150>)
 80135be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c2:	f7ec fe81 	bl	80002c8 <__aeabi_dsub>
 80135c6:	a318      	add	r3, pc, #96	@ (adr r3, 8013628 <__ieee754_atan2+0x158>)
 80135c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135cc:	e014      	b.n	80135f8 <__ieee754_atan2+0x128>
 80135ce:	a118      	add	r1, pc, #96	@ (adr r1, 8013630 <__ieee754_atan2+0x160>)
 80135d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135d4:	e7ec      	b.n	80135b0 <__ieee754_atan2+0xe0>
 80135d6:	2000      	movs	r0, #0
 80135d8:	2100      	movs	r1, #0
 80135da:	e7e9      	b.n	80135b0 <__ieee754_atan2+0xe0>
 80135dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80135e0:	4619      	mov	r1, r3
 80135e2:	e794      	b.n	801350e <__ieee754_atan2+0x3e>
 80135e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013620 <__ieee754_atan2+0x150>)
 80135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ea:	f7ec fe6d 	bl	80002c8 <__aeabi_dsub>
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	a10d      	add	r1, pc, #52	@ (adr r1, 8013628 <__ieee754_atan2+0x158>)
 80135f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135f8:	f7ec fe66 	bl	80002c8 <__aeabi_dsub>
 80135fc:	e787      	b.n	801350e <__ieee754_atan2+0x3e>
 80135fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8013628 <__ieee754_atan2+0x158>)
 8013600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013604:	e783      	b.n	801350e <__ieee754_atan2+0x3e>
 8013606:	a10c      	add	r1, pc, #48	@ (adr r1, 8013638 <__ieee754_atan2+0x168>)
 8013608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801360c:	e77f      	b.n	801350e <__ieee754_atan2+0x3e>
 801360e:	2000      	movs	r0, #0
 8013610:	2100      	movs	r1, #0
 8013612:	e77c      	b.n	801350e <__ieee754_atan2+0x3e>
 8013614:	a106      	add	r1, pc, #24	@ (adr r1, 8013630 <__ieee754_atan2+0x160>)
 8013616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801361a:	e778      	b.n	801350e <__ieee754_atan2+0x3e>
 801361c:	f3af 8000 	nop.w
 8013620:	33145c07 	.word	0x33145c07
 8013624:	3ca1a626 	.word	0x3ca1a626
 8013628:	54442d18 	.word	0x54442d18
 801362c:	400921fb 	.word	0x400921fb
 8013630:	54442d18 	.word	0x54442d18
 8013634:	3ff921fb 	.word	0x3ff921fb
 8013638:	54442d18 	.word	0x54442d18
 801363c:	3fe921fb 	.word	0x3fe921fb
 8013640:	08015740 	.word	0x08015740
 8013644:	08015728 	.word	0x08015728
 8013648:	54442d18 	.word	0x54442d18
 801364c:	c00921fb 	.word	0xc00921fb
 8013650:	54442d18 	.word	0x54442d18
 8013654:	bff921fb 	.word	0xbff921fb
 8013658:	7ff00000 	.word	0x7ff00000
 801365c:	00000000 	.word	0x00000000

08013660 <__ieee754_pow>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	b091      	sub	sp, #68	@ 0x44
 8013666:	ed8d 1b00 	vstr	d1, [sp]
 801366a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801366e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013672:	ea5a 0001 	orrs.w	r0, sl, r1
 8013676:	ec57 6b10 	vmov	r6, r7, d0
 801367a:	d113      	bne.n	80136a4 <__ieee754_pow+0x44>
 801367c:	19b3      	adds	r3, r6, r6
 801367e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013682:	4152      	adcs	r2, r2
 8013684:	4298      	cmp	r0, r3
 8013686:	4b98      	ldr	r3, [pc, #608]	@ (80138e8 <__ieee754_pow+0x288>)
 8013688:	4193      	sbcs	r3, r2
 801368a:	f080 84ea 	bcs.w	8014062 <__ieee754_pow+0xa02>
 801368e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013692:	4630      	mov	r0, r6
 8013694:	4639      	mov	r1, r7
 8013696:	f7ec fe19 	bl	80002cc <__adddf3>
 801369a:	ec41 0b10 	vmov	d0, r0, r1
 801369e:	b011      	add	sp, #68	@ 0x44
 80136a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a4:	4a91      	ldr	r2, [pc, #580]	@ (80138ec <__ieee754_pow+0x28c>)
 80136a6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80136aa:	4590      	cmp	r8, r2
 80136ac:	463d      	mov	r5, r7
 80136ae:	4633      	mov	r3, r6
 80136b0:	d806      	bhi.n	80136c0 <__ieee754_pow+0x60>
 80136b2:	d101      	bne.n	80136b8 <__ieee754_pow+0x58>
 80136b4:	2e00      	cmp	r6, #0
 80136b6:	d1ea      	bne.n	801368e <__ieee754_pow+0x2e>
 80136b8:	4592      	cmp	sl, r2
 80136ba:	d801      	bhi.n	80136c0 <__ieee754_pow+0x60>
 80136bc:	d10e      	bne.n	80136dc <__ieee754_pow+0x7c>
 80136be:	b169      	cbz	r1, 80136dc <__ieee754_pow+0x7c>
 80136c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80136c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80136c8:	431d      	orrs	r5, r3
 80136ca:	d1e0      	bne.n	801368e <__ieee754_pow+0x2e>
 80136cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136d0:	18db      	adds	r3, r3, r3
 80136d2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80136d6:	4152      	adcs	r2, r2
 80136d8:	429d      	cmp	r5, r3
 80136da:	e7d4      	b.n	8013686 <__ieee754_pow+0x26>
 80136dc:	2d00      	cmp	r5, #0
 80136de:	46c3      	mov	fp, r8
 80136e0:	da3a      	bge.n	8013758 <__ieee754_pow+0xf8>
 80136e2:	4a83      	ldr	r2, [pc, #524]	@ (80138f0 <__ieee754_pow+0x290>)
 80136e4:	4592      	cmp	sl, r2
 80136e6:	d84d      	bhi.n	8013784 <__ieee754_pow+0x124>
 80136e8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80136ec:	4592      	cmp	sl, r2
 80136ee:	f240 84c7 	bls.w	8014080 <__ieee754_pow+0xa20>
 80136f2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80136f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80136fa:	2a14      	cmp	r2, #20
 80136fc:	dd0f      	ble.n	801371e <__ieee754_pow+0xbe>
 80136fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013702:	fa21 f402 	lsr.w	r4, r1, r2
 8013706:	fa04 f202 	lsl.w	r2, r4, r2
 801370a:	428a      	cmp	r2, r1
 801370c:	f040 84b8 	bne.w	8014080 <__ieee754_pow+0xa20>
 8013710:	f004 0401 	and.w	r4, r4, #1
 8013714:	f1c4 0402 	rsb	r4, r4, #2
 8013718:	2900      	cmp	r1, #0
 801371a:	d158      	bne.n	80137ce <__ieee754_pow+0x16e>
 801371c:	e00e      	b.n	801373c <__ieee754_pow+0xdc>
 801371e:	2900      	cmp	r1, #0
 8013720:	d154      	bne.n	80137cc <__ieee754_pow+0x16c>
 8013722:	f1c2 0214 	rsb	r2, r2, #20
 8013726:	fa4a f402 	asr.w	r4, sl, r2
 801372a:	fa04 f202 	lsl.w	r2, r4, r2
 801372e:	4552      	cmp	r2, sl
 8013730:	f040 84a3 	bne.w	801407a <__ieee754_pow+0xa1a>
 8013734:	f004 0401 	and.w	r4, r4, #1
 8013738:	f1c4 0402 	rsb	r4, r4, #2
 801373c:	4a6d      	ldr	r2, [pc, #436]	@ (80138f4 <__ieee754_pow+0x294>)
 801373e:	4592      	cmp	sl, r2
 8013740:	d12e      	bne.n	80137a0 <__ieee754_pow+0x140>
 8013742:	f1b9 0f00 	cmp.w	r9, #0
 8013746:	f280 8494 	bge.w	8014072 <__ieee754_pow+0xa12>
 801374a:	496a      	ldr	r1, [pc, #424]	@ (80138f4 <__ieee754_pow+0x294>)
 801374c:	4632      	mov	r2, r6
 801374e:	463b      	mov	r3, r7
 8013750:	2000      	movs	r0, #0
 8013752:	f7ed f89b 	bl	800088c <__aeabi_ddiv>
 8013756:	e7a0      	b.n	801369a <__ieee754_pow+0x3a>
 8013758:	2400      	movs	r4, #0
 801375a:	bbc1      	cbnz	r1, 80137ce <__ieee754_pow+0x16e>
 801375c:	4a63      	ldr	r2, [pc, #396]	@ (80138ec <__ieee754_pow+0x28c>)
 801375e:	4592      	cmp	sl, r2
 8013760:	d1ec      	bne.n	801373c <__ieee754_pow+0xdc>
 8013762:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013766:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801376a:	431a      	orrs	r2, r3
 801376c:	f000 8479 	beq.w	8014062 <__ieee754_pow+0xa02>
 8013770:	4b61      	ldr	r3, [pc, #388]	@ (80138f8 <__ieee754_pow+0x298>)
 8013772:	4598      	cmp	r8, r3
 8013774:	d908      	bls.n	8013788 <__ieee754_pow+0x128>
 8013776:	f1b9 0f00 	cmp.w	r9, #0
 801377a:	f2c0 8476 	blt.w	801406a <__ieee754_pow+0xa0a>
 801377e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013782:	e78a      	b.n	801369a <__ieee754_pow+0x3a>
 8013784:	2402      	movs	r4, #2
 8013786:	e7e8      	b.n	801375a <__ieee754_pow+0xfa>
 8013788:	f1b9 0f00 	cmp.w	r9, #0
 801378c:	f04f 0000 	mov.w	r0, #0
 8013790:	f04f 0100 	mov.w	r1, #0
 8013794:	da81      	bge.n	801369a <__ieee754_pow+0x3a>
 8013796:	e9dd 0300 	ldrd	r0, r3, [sp]
 801379a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801379e:	e77c      	b.n	801369a <__ieee754_pow+0x3a>
 80137a0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80137a4:	d106      	bne.n	80137b4 <__ieee754_pow+0x154>
 80137a6:	4632      	mov	r2, r6
 80137a8:	463b      	mov	r3, r7
 80137aa:	4630      	mov	r0, r6
 80137ac:	4639      	mov	r1, r7
 80137ae:	f7ec ff43 	bl	8000638 <__aeabi_dmul>
 80137b2:	e772      	b.n	801369a <__ieee754_pow+0x3a>
 80137b4:	4a51      	ldr	r2, [pc, #324]	@ (80138fc <__ieee754_pow+0x29c>)
 80137b6:	4591      	cmp	r9, r2
 80137b8:	d109      	bne.n	80137ce <__ieee754_pow+0x16e>
 80137ba:	2d00      	cmp	r5, #0
 80137bc:	db07      	blt.n	80137ce <__ieee754_pow+0x16e>
 80137be:	ec47 6b10 	vmov	d0, r6, r7
 80137c2:	b011      	add	sp, #68	@ 0x44
 80137c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c8:	f7ff bc22 	b.w	8013010 <__ieee754_sqrt>
 80137cc:	2400      	movs	r4, #0
 80137ce:	ec47 6b10 	vmov	d0, r6, r7
 80137d2:	9302      	str	r3, [sp, #8]
 80137d4:	f001 f81c 	bl	8014810 <fabs>
 80137d8:	9b02      	ldr	r3, [sp, #8]
 80137da:	ec51 0b10 	vmov	r0, r1, d0
 80137de:	bb53      	cbnz	r3, 8013836 <__ieee754_pow+0x1d6>
 80137e0:	4b44      	ldr	r3, [pc, #272]	@ (80138f4 <__ieee754_pow+0x294>)
 80137e2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d002      	beq.n	80137f0 <__ieee754_pow+0x190>
 80137ea:	f1b8 0f00 	cmp.w	r8, #0
 80137ee:	d122      	bne.n	8013836 <__ieee754_pow+0x1d6>
 80137f0:	f1b9 0f00 	cmp.w	r9, #0
 80137f4:	da05      	bge.n	8013802 <__ieee754_pow+0x1a2>
 80137f6:	4602      	mov	r2, r0
 80137f8:	460b      	mov	r3, r1
 80137fa:	2000      	movs	r0, #0
 80137fc:	493d      	ldr	r1, [pc, #244]	@ (80138f4 <__ieee754_pow+0x294>)
 80137fe:	f7ed f845 	bl	800088c <__aeabi_ddiv>
 8013802:	2d00      	cmp	r5, #0
 8013804:	f6bf af49 	bge.w	801369a <__ieee754_pow+0x3a>
 8013808:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801380c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013810:	ea58 0804 	orrs.w	r8, r8, r4
 8013814:	d108      	bne.n	8013828 <__ieee754_pow+0x1c8>
 8013816:	4602      	mov	r2, r0
 8013818:	460b      	mov	r3, r1
 801381a:	4610      	mov	r0, r2
 801381c:	4619      	mov	r1, r3
 801381e:	f7ec fd53 	bl	80002c8 <__aeabi_dsub>
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	e794      	b.n	8013752 <__ieee754_pow+0xf2>
 8013828:	2c01      	cmp	r4, #1
 801382a:	f47f af36 	bne.w	801369a <__ieee754_pow+0x3a>
 801382e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013832:	4619      	mov	r1, r3
 8013834:	e731      	b.n	801369a <__ieee754_pow+0x3a>
 8013836:	0feb      	lsrs	r3, r5, #31
 8013838:	3b01      	subs	r3, #1
 801383a:	ea53 0204 	orrs.w	r2, r3, r4
 801383e:	d102      	bne.n	8013846 <__ieee754_pow+0x1e6>
 8013840:	4632      	mov	r2, r6
 8013842:	463b      	mov	r3, r7
 8013844:	e7e9      	b.n	801381a <__ieee754_pow+0x1ba>
 8013846:	3c01      	subs	r4, #1
 8013848:	431c      	orrs	r4, r3
 801384a:	d016      	beq.n	801387a <__ieee754_pow+0x21a>
 801384c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80138d8 <__ieee754_pow+0x278>
 8013850:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013854:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013858:	f240 8112 	bls.w	8013a80 <__ieee754_pow+0x420>
 801385c:	4b28      	ldr	r3, [pc, #160]	@ (8013900 <__ieee754_pow+0x2a0>)
 801385e:	459a      	cmp	sl, r3
 8013860:	4b25      	ldr	r3, [pc, #148]	@ (80138f8 <__ieee754_pow+0x298>)
 8013862:	d916      	bls.n	8013892 <__ieee754_pow+0x232>
 8013864:	4598      	cmp	r8, r3
 8013866:	d80b      	bhi.n	8013880 <__ieee754_pow+0x220>
 8013868:	f1b9 0f00 	cmp.w	r9, #0
 801386c:	da0b      	bge.n	8013886 <__ieee754_pow+0x226>
 801386e:	2000      	movs	r0, #0
 8013870:	b011      	add	sp, #68	@ 0x44
 8013872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013876:	f001 b887 	b.w	8014988 <__math_oflow>
 801387a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80138e0 <__ieee754_pow+0x280>
 801387e:	e7e7      	b.n	8013850 <__ieee754_pow+0x1f0>
 8013880:	f1b9 0f00 	cmp.w	r9, #0
 8013884:	dcf3      	bgt.n	801386e <__ieee754_pow+0x20e>
 8013886:	2000      	movs	r0, #0
 8013888:	b011      	add	sp, #68	@ 0x44
 801388a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388e:	f001 b873 	b.w	8014978 <__math_uflow>
 8013892:	4598      	cmp	r8, r3
 8013894:	d20c      	bcs.n	80138b0 <__ieee754_pow+0x250>
 8013896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801389a:	2200      	movs	r2, #0
 801389c:	2300      	movs	r3, #0
 801389e:	f7ed f93d 	bl	8000b1c <__aeabi_dcmplt>
 80138a2:	3800      	subs	r0, #0
 80138a4:	bf18      	it	ne
 80138a6:	2001      	movne	r0, #1
 80138a8:	f1b9 0f00 	cmp.w	r9, #0
 80138ac:	daec      	bge.n	8013888 <__ieee754_pow+0x228>
 80138ae:	e7df      	b.n	8013870 <__ieee754_pow+0x210>
 80138b0:	4b10      	ldr	r3, [pc, #64]	@ (80138f4 <__ieee754_pow+0x294>)
 80138b2:	4598      	cmp	r8, r3
 80138b4:	f04f 0200 	mov.w	r2, #0
 80138b8:	d924      	bls.n	8013904 <__ieee754_pow+0x2a4>
 80138ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138be:	2300      	movs	r3, #0
 80138c0:	f7ed f92c 	bl	8000b1c <__aeabi_dcmplt>
 80138c4:	3800      	subs	r0, #0
 80138c6:	bf18      	it	ne
 80138c8:	2001      	movne	r0, #1
 80138ca:	f1b9 0f00 	cmp.w	r9, #0
 80138ce:	dccf      	bgt.n	8013870 <__ieee754_pow+0x210>
 80138d0:	e7da      	b.n	8013888 <__ieee754_pow+0x228>
 80138d2:	bf00      	nop
 80138d4:	f3af 8000 	nop.w
 80138d8:	00000000 	.word	0x00000000
 80138dc:	3ff00000 	.word	0x3ff00000
 80138e0:	00000000 	.word	0x00000000
 80138e4:	bff00000 	.word	0xbff00000
 80138e8:	fff00000 	.word	0xfff00000
 80138ec:	7ff00000 	.word	0x7ff00000
 80138f0:	433fffff 	.word	0x433fffff
 80138f4:	3ff00000 	.word	0x3ff00000
 80138f8:	3fefffff 	.word	0x3fefffff
 80138fc:	3fe00000 	.word	0x3fe00000
 8013900:	43f00000 	.word	0x43f00000
 8013904:	4b5a      	ldr	r3, [pc, #360]	@ (8013a70 <__ieee754_pow+0x410>)
 8013906:	f7ec fcdf 	bl	80002c8 <__aeabi_dsub>
 801390a:	a351      	add	r3, pc, #324	@ (adr r3, 8013a50 <__ieee754_pow+0x3f0>)
 801390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013910:	4604      	mov	r4, r0
 8013912:	460d      	mov	r5, r1
 8013914:	f7ec fe90 	bl	8000638 <__aeabi_dmul>
 8013918:	a34f      	add	r3, pc, #316	@ (adr r3, 8013a58 <__ieee754_pow+0x3f8>)
 801391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391e:	4606      	mov	r6, r0
 8013920:	460f      	mov	r7, r1
 8013922:	4620      	mov	r0, r4
 8013924:	4629      	mov	r1, r5
 8013926:	f7ec fe87 	bl	8000638 <__aeabi_dmul>
 801392a:	4b52      	ldr	r3, [pc, #328]	@ (8013a74 <__ieee754_pow+0x414>)
 801392c:	4682      	mov	sl, r0
 801392e:	468b      	mov	fp, r1
 8013930:	2200      	movs	r2, #0
 8013932:	4620      	mov	r0, r4
 8013934:	4629      	mov	r1, r5
 8013936:	f7ec fe7f 	bl	8000638 <__aeabi_dmul>
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	a148      	add	r1, pc, #288	@ (adr r1, 8013a60 <__ieee754_pow+0x400>)
 8013940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013944:	f7ec fcc0 	bl	80002c8 <__aeabi_dsub>
 8013948:	4622      	mov	r2, r4
 801394a:	462b      	mov	r3, r5
 801394c:	f7ec fe74 	bl	8000638 <__aeabi_dmul>
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	2000      	movs	r0, #0
 8013956:	4948      	ldr	r1, [pc, #288]	@ (8013a78 <__ieee754_pow+0x418>)
 8013958:	f7ec fcb6 	bl	80002c8 <__aeabi_dsub>
 801395c:	4622      	mov	r2, r4
 801395e:	4680      	mov	r8, r0
 8013960:	4689      	mov	r9, r1
 8013962:	462b      	mov	r3, r5
 8013964:	4620      	mov	r0, r4
 8013966:	4629      	mov	r1, r5
 8013968:	f7ec fe66 	bl	8000638 <__aeabi_dmul>
 801396c:	4602      	mov	r2, r0
 801396e:	460b      	mov	r3, r1
 8013970:	4640      	mov	r0, r8
 8013972:	4649      	mov	r1, r9
 8013974:	f7ec fe60 	bl	8000638 <__aeabi_dmul>
 8013978:	a33b      	add	r3, pc, #236	@ (adr r3, 8013a68 <__ieee754_pow+0x408>)
 801397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397e:	f7ec fe5b 	bl	8000638 <__aeabi_dmul>
 8013982:	4602      	mov	r2, r0
 8013984:	460b      	mov	r3, r1
 8013986:	4650      	mov	r0, sl
 8013988:	4659      	mov	r1, fp
 801398a:	f7ec fc9d 	bl	80002c8 <__aeabi_dsub>
 801398e:	4602      	mov	r2, r0
 8013990:	460b      	mov	r3, r1
 8013992:	4680      	mov	r8, r0
 8013994:	4689      	mov	r9, r1
 8013996:	4630      	mov	r0, r6
 8013998:	4639      	mov	r1, r7
 801399a:	f7ec fc97 	bl	80002cc <__adddf3>
 801399e:	2400      	movs	r4, #0
 80139a0:	4632      	mov	r2, r6
 80139a2:	463b      	mov	r3, r7
 80139a4:	4620      	mov	r0, r4
 80139a6:	460d      	mov	r5, r1
 80139a8:	f7ec fc8e 	bl	80002c8 <__aeabi_dsub>
 80139ac:	4602      	mov	r2, r0
 80139ae:	460b      	mov	r3, r1
 80139b0:	4640      	mov	r0, r8
 80139b2:	4649      	mov	r1, r9
 80139b4:	f7ec fc88 	bl	80002c8 <__aeabi_dsub>
 80139b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139c0:	2300      	movs	r3, #0
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80139c8:	4606      	mov	r6, r0
 80139ca:	460f      	mov	r7, r1
 80139cc:	4652      	mov	r2, sl
 80139ce:	465b      	mov	r3, fp
 80139d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139d4:	f7ec fc78 	bl	80002c8 <__aeabi_dsub>
 80139d8:	4622      	mov	r2, r4
 80139da:	462b      	mov	r3, r5
 80139dc:	f7ec fe2c 	bl	8000638 <__aeabi_dmul>
 80139e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139e4:	4680      	mov	r8, r0
 80139e6:	4689      	mov	r9, r1
 80139e8:	4630      	mov	r0, r6
 80139ea:	4639      	mov	r1, r7
 80139ec:	f7ec fe24 	bl	8000638 <__aeabi_dmul>
 80139f0:	4602      	mov	r2, r0
 80139f2:	460b      	mov	r3, r1
 80139f4:	4640      	mov	r0, r8
 80139f6:	4649      	mov	r1, r9
 80139f8:	f7ec fc68 	bl	80002cc <__adddf3>
 80139fc:	4652      	mov	r2, sl
 80139fe:	465b      	mov	r3, fp
 8013a00:	4606      	mov	r6, r0
 8013a02:	460f      	mov	r7, r1
 8013a04:	4620      	mov	r0, r4
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ec fe16 	bl	8000638 <__aeabi_dmul>
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	4602      	mov	r2, r0
 8013a10:	4680      	mov	r8, r0
 8013a12:	4689      	mov	r9, r1
 8013a14:	4630      	mov	r0, r6
 8013a16:	4639      	mov	r1, r7
 8013a18:	f7ec fc58 	bl	80002cc <__adddf3>
 8013a1c:	4b17      	ldr	r3, [pc, #92]	@ (8013a7c <__ieee754_pow+0x41c>)
 8013a1e:	4299      	cmp	r1, r3
 8013a20:	4604      	mov	r4, r0
 8013a22:	460d      	mov	r5, r1
 8013a24:	468a      	mov	sl, r1
 8013a26:	468b      	mov	fp, r1
 8013a28:	f340 82ef 	ble.w	801400a <__ieee754_pow+0x9aa>
 8013a2c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013a30:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013a34:	4303      	orrs	r3, r0
 8013a36:	f000 81e8 	beq.w	8013e0a <__ieee754_pow+0x7aa>
 8013a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	2300      	movs	r3, #0
 8013a42:	f7ed f86b 	bl	8000b1c <__aeabi_dcmplt>
 8013a46:	3800      	subs	r0, #0
 8013a48:	bf18      	it	ne
 8013a4a:	2001      	movne	r0, #1
 8013a4c:	e710      	b.n	8013870 <__ieee754_pow+0x210>
 8013a4e:	bf00      	nop
 8013a50:	60000000 	.word	0x60000000
 8013a54:	3ff71547 	.word	0x3ff71547
 8013a58:	f85ddf44 	.word	0xf85ddf44
 8013a5c:	3e54ae0b 	.word	0x3e54ae0b
 8013a60:	55555555 	.word	0x55555555
 8013a64:	3fd55555 	.word	0x3fd55555
 8013a68:	652b82fe 	.word	0x652b82fe
 8013a6c:	3ff71547 	.word	0x3ff71547
 8013a70:	3ff00000 	.word	0x3ff00000
 8013a74:	3fd00000 	.word	0x3fd00000
 8013a78:	3fe00000 	.word	0x3fe00000
 8013a7c:	408fffff 	.word	0x408fffff
 8013a80:	4bd5      	ldr	r3, [pc, #852]	@ (8013dd8 <__ieee754_pow+0x778>)
 8013a82:	402b      	ands	r3, r5
 8013a84:	2200      	movs	r2, #0
 8013a86:	b92b      	cbnz	r3, 8013a94 <__ieee754_pow+0x434>
 8013a88:	4bd4      	ldr	r3, [pc, #848]	@ (8013ddc <__ieee754_pow+0x77c>)
 8013a8a:	f7ec fdd5 	bl	8000638 <__aeabi_dmul>
 8013a8e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013a92:	468b      	mov	fp, r1
 8013a94:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013a98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013a9c:	4413      	add	r3, r2
 8013a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013aa0:	4bcf      	ldr	r3, [pc, #828]	@ (8013de0 <__ieee754_pow+0x780>)
 8013aa2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013aa6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013aaa:	459b      	cmp	fp, r3
 8013aac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013ab0:	dd08      	ble.n	8013ac4 <__ieee754_pow+0x464>
 8013ab2:	4bcc      	ldr	r3, [pc, #816]	@ (8013de4 <__ieee754_pow+0x784>)
 8013ab4:	459b      	cmp	fp, r3
 8013ab6:	f340 81a5 	ble.w	8013e04 <__ieee754_pow+0x7a4>
 8013aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013abc:	3301      	adds	r3, #1
 8013abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ac0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013ac4:	f04f 0a00 	mov.w	sl, #0
 8013ac8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ace:	4bc6      	ldr	r3, [pc, #792]	@ (8013de8 <__ieee754_pow+0x788>)
 8013ad0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013ad4:	ed93 7b00 	vldr	d7, [r3]
 8013ad8:	4629      	mov	r1, r5
 8013ada:	ec53 2b17 	vmov	r2, r3, d7
 8013ade:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ae2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ae6:	f7ec fbef 	bl	80002c8 <__aeabi_dsub>
 8013aea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013aee:	4606      	mov	r6, r0
 8013af0:	460f      	mov	r7, r1
 8013af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013af6:	f7ec fbe9 	bl	80002cc <__adddf3>
 8013afa:	4602      	mov	r2, r0
 8013afc:	460b      	mov	r3, r1
 8013afe:	2000      	movs	r0, #0
 8013b00:	49ba      	ldr	r1, [pc, #744]	@ (8013dec <__ieee754_pow+0x78c>)
 8013b02:	f7ec fec3 	bl	800088c <__aeabi_ddiv>
 8013b06:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	4630      	mov	r0, r6
 8013b10:	4639      	mov	r1, r7
 8013b12:	f7ec fd91 	bl	8000638 <__aeabi_dmul>
 8013b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b1a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013b1e:	106d      	asrs	r5, r5, #1
 8013b20:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013b24:	f04f 0b00 	mov.w	fp, #0
 8013b28:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013b2c:	4661      	mov	r1, ip
 8013b2e:	2200      	movs	r2, #0
 8013b30:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013b34:	4658      	mov	r0, fp
 8013b36:	46e1      	mov	r9, ip
 8013b38:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013b3c:	4614      	mov	r4, r2
 8013b3e:	461d      	mov	r5, r3
 8013b40:	f7ec fd7a 	bl	8000638 <__aeabi_dmul>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	4630      	mov	r0, r6
 8013b4a:	4639      	mov	r1, r7
 8013b4c:	f7ec fbbc 	bl	80002c8 <__aeabi_dsub>
 8013b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b54:	4606      	mov	r6, r0
 8013b56:	460f      	mov	r7, r1
 8013b58:	4620      	mov	r0, r4
 8013b5a:	4629      	mov	r1, r5
 8013b5c:	f7ec fbb4 	bl	80002c8 <__aeabi_dsub>
 8013b60:	4602      	mov	r2, r0
 8013b62:	460b      	mov	r3, r1
 8013b64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013b68:	f7ec fbae 	bl	80002c8 <__aeabi_dsub>
 8013b6c:	465a      	mov	r2, fp
 8013b6e:	464b      	mov	r3, r9
 8013b70:	f7ec fd62 	bl	8000638 <__aeabi_dmul>
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec fba4 	bl	80002c8 <__aeabi_dsub>
 8013b80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013b84:	f7ec fd58 	bl	8000638 <__aeabi_dmul>
 8013b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b90:	4610      	mov	r0, r2
 8013b92:	4619      	mov	r1, r3
 8013b94:	f7ec fd50 	bl	8000638 <__aeabi_dmul>
 8013b98:	a37d      	add	r3, pc, #500	@ (adr r3, 8013d90 <__ieee754_pow+0x730>)
 8013b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	460d      	mov	r5, r1
 8013ba2:	f7ec fd49 	bl	8000638 <__aeabi_dmul>
 8013ba6:	a37c      	add	r3, pc, #496	@ (adr r3, 8013d98 <__ieee754_pow+0x738>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	f7ec fb8e 	bl	80002cc <__adddf3>
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	462b      	mov	r3, r5
 8013bb4:	f7ec fd40 	bl	8000638 <__aeabi_dmul>
 8013bb8:	a379      	add	r3, pc, #484	@ (adr r3, 8013da0 <__ieee754_pow+0x740>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	f7ec fb85 	bl	80002cc <__adddf3>
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	f7ec fd37 	bl	8000638 <__aeabi_dmul>
 8013bca:	a377      	add	r3, pc, #476	@ (adr r3, 8013da8 <__ieee754_pow+0x748>)
 8013bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd0:	f7ec fb7c 	bl	80002cc <__adddf3>
 8013bd4:	4622      	mov	r2, r4
 8013bd6:	462b      	mov	r3, r5
 8013bd8:	f7ec fd2e 	bl	8000638 <__aeabi_dmul>
 8013bdc:	a374      	add	r3, pc, #464	@ (adr r3, 8013db0 <__ieee754_pow+0x750>)
 8013bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be2:	f7ec fb73 	bl	80002cc <__adddf3>
 8013be6:	4622      	mov	r2, r4
 8013be8:	462b      	mov	r3, r5
 8013bea:	f7ec fd25 	bl	8000638 <__aeabi_dmul>
 8013bee:	a372      	add	r3, pc, #456	@ (adr r3, 8013db8 <__ieee754_pow+0x758>)
 8013bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf4:	f7ec fb6a 	bl	80002cc <__adddf3>
 8013bf8:	4622      	mov	r2, r4
 8013bfa:	4606      	mov	r6, r0
 8013bfc:	460f      	mov	r7, r1
 8013bfe:	462b      	mov	r3, r5
 8013c00:	4620      	mov	r0, r4
 8013c02:	4629      	mov	r1, r5
 8013c04:	f7ec fd18 	bl	8000638 <__aeabi_dmul>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	460b      	mov	r3, r1
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	4639      	mov	r1, r7
 8013c10:	f7ec fd12 	bl	8000638 <__aeabi_dmul>
 8013c14:	465a      	mov	r2, fp
 8013c16:	4604      	mov	r4, r0
 8013c18:	460d      	mov	r5, r1
 8013c1a:	464b      	mov	r3, r9
 8013c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c20:	f7ec fb54 	bl	80002cc <__adddf3>
 8013c24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c28:	f7ec fd06 	bl	8000638 <__aeabi_dmul>
 8013c2c:	4622      	mov	r2, r4
 8013c2e:	462b      	mov	r3, r5
 8013c30:	f7ec fb4c 	bl	80002cc <__adddf3>
 8013c34:	465a      	mov	r2, fp
 8013c36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013c3a:	464b      	mov	r3, r9
 8013c3c:	4658      	mov	r0, fp
 8013c3e:	4649      	mov	r1, r9
 8013c40:	f7ec fcfa 	bl	8000638 <__aeabi_dmul>
 8013c44:	4b6a      	ldr	r3, [pc, #424]	@ (8013df0 <__ieee754_pow+0x790>)
 8013c46:	2200      	movs	r2, #0
 8013c48:	4606      	mov	r6, r0
 8013c4a:	460f      	mov	r7, r1
 8013c4c:	f7ec fb3e 	bl	80002cc <__adddf3>
 8013c50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c54:	f7ec fb3a 	bl	80002cc <__adddf3>
 8013c58:	46d8      	mov	r8, fp
 8013c5a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013c5e:	460d      	mov	r5, r1
 8013c60:	465a      	mov	r2, fp
 8013c62:	460b      	mov	r3, r1
 8013c64:	4640      	mov	r0, r8
 8013c66:	4649      	mov	r1, r9
 8013c68:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013c6c:	f7ec fce4 	bl	8000638 <__aeabi_dmul>
 8013c70:	465c      	mov	r4, fp
 8013c72:	4680      	mov	r8, r0
 8013c74:	4689      	mov	r9, r1
 8013c76:	4b5e      	ldr	r3, [pc, #376]	@ (8013df0 <__ieee754_pow+0x790>)
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	f7ec fb23 	bl	80002c8 <__aeabi_dsub>
 8013c82:	4632      	mov	r2, r6
 8013c84:	463b      	mov	r3, r7
 8013c86:	f7ec fb1f 	bl	80002c8 <__aeabi_dsub>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013c92:	f7ec fb19 	bl	80002c8 <__aeabi_dsub>
 8013c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c9a:	f7ec fccd 	bl	8000638 <__aeabi_dmul>
 8013c9e:	4622      	mov	r2, r4
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	460f      	mov	r7, r1
 8013ca4:	462b      	mov	r3, r5
 8013ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013caa:	f7ec fcc5 	bl	8000638 <__aeabi_dmul>
 8013cae:	4602      	mov	r2, r0
 8013cb0:	460b      	mov	r3, r1
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	f7ec fb09 	bl	80002cc <__adddf3>
 8013cba:	4606      	mov	r6, r0
 8013cbc:	460f      	mov	r7, r1
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	4640      	mov	r0, r8
 8013cc4:	4649      	mov	r1, r9
 8013cc6:	f7ec fb01 	bl	80002cc <__adddf3>
 8013cca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013cce:	a33c      	add	r3, pc, #240	@ (adr r3, 8013dc0 <__ieee754_pow+0x760>)
 8013cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd4:	4658      	mov	r0, fp
 8013cd6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013cda:	460d      	mov	r5, r1
 8013cdc:	f7ec fcac 	bl	8000638 <__aeabi_dmul>
 8013ce0:	465c      	mov	r4, fp
 8013ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ce6:	4642      	mov	r2, r8
 8013ce8:	464b      	mov	r3, r9
 8013cea:	4620      	mov	r0, r4
 8013cec:	4629      	mov	r1, r5
 8013cee:	f7ec faeb 	bl	80002c8 <__aeabi_dsub>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	f7ec fae5 	bl	80002c8 <__aeabi_dsub>
 8013cfe:	a332      	add	r3, pc, #200	@ (adr r3, 8013dc8 <__ieee754_pow+0x768>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	f7ec fc98 	bl	8000638 <__aeabi_dmul>
 8013d08:	a331      	add	r3, pc, #196	@ (adr r3, 8013dd0 <__ieee754_pow+0x770>)
 8013d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0e:	4606      	mov	r6, r0
 8013d10:	460f      	mov	r7, r1
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	f7ec fc8f 	bl	8000638 <__aeabi_dmul>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	4630      	mov	r0, r6
 8013d20:	4639      	mov	r1, r7
 8013d22:	f7ec fad3 	bl	80002cc <__adddf3>
 8013d26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d28:	4b32      	ldr	r3, [pc, #200]	@ (8013df4 <__ieee754_pow+0x794>)
 8013d2a:	4413      	add	r3, r2
 8013d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d30:	f7ec facc 	bl	80002cc <__adddf3>
 8013d34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013d3a:	f7ec fc13 	bl	8000564 <__aeabi_i2d>
 8013d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013d40:	4b2d      	ldr	r3, [pc, #180]	@ (8013df8 <__ieee754_pow+0x798>)
 8013d42:	4413      	add	r3, r2
 8013d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d48:	4606      	mov	r6, r0
 8013d4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d4e:	460f      	mov	r7, r1
 8013d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d54:	f7ec faba 	bl	80002cc <__adddf3>
 8013d58:	4642      	mov	r2, r8
 8013d5a:	464b      	mov	r3, r9
 8013d5c:	f7ec fab6 	bl	80002cc <__adddf3>
 8013d60:	4632      	mov	r2, r6
 8013d62:	463b      	mov	r3, r7
 8013d64:	f7ec fab2 	bl	80002cc <__adddf3>
 8013d68:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013d6c:	4632      	mov	r2, r6
 8013d6e:	463b      	mov	r3, r7
 8013d70:	4658      	mov	r0, fp
 8013d72:	460d      	mov	r5, r1
 8013d74:	f7ec faa8 	bl	80002c8 <__aeabi_dsub>
 8013d78:	4642      	mov	r2, r8
 8013d7a:	464b      	mov	r3, r9
 8013d7c:	f7ec faa4 	bl	80002c8 <__aeabi_dsub>
 8013d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d84:	f7ec faa0 	bl	80002c8 <__aeabi_dsub>
 8013d88:	465c      	mov	r4, fp
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	e036      	b.n	8013dfc <__ieee754_pow+0x79c>
 8013d8e:	bf00      	nop
 8013d90:	4a454eef 	.word	0x4a454eef
 8013d94:	3fca7e28 	.word	0x3fca7e28
 8013d98:	93c9db65 	.word	0x93c9db65
 8013d9c:	3fcd864a 	.word	0x3fcd864a
 8013da0:	a91d4101 	.word	0xa91d4101
 8013da4:	3fd17460 	.word	0x3fd17460
 8013da8:	518f264d 	.word	0x518f264d
 8013dac:	3fd55555 	.word	0x3fd55555
 8013db0:	db6fabff 	.word	0xdb6fabff
 8013db4:	3fdb6db6 	.word	0x3fdb6db6
 8013db8:	33333303 	.word	0x33333303
 8013dbc:	3fe33333 	.word	0x3fe33333
 8013dc0:	e0000000 	.word	0xe0000000
 8013dc4:	3feec709 	.word	0x3feec709
 8013dc8:	dc3a03fd 	.word	0xdc3a03fd
 8013dcc:	3feec709 	.word	0x3feec709
 8013dd0:	145b01f5 	.word	0x145b01f5
 8013dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8013dd8:	7ff00000 	.word	0x7ff00000
 8013ddc:	43400000 	.word	0x43400000
 8013de0:	0003988e 	.word	0x0003988e
 8013de4:	000bb679 	.word	0x000bb679
 8013de8:	08015778 	.word	0x08015778
 8013dec:	3ff00000 	.word	0x3ff00000
 8013df0:	40080000 	.word	0x40080000
 8013df4:	08015758 	.word	0x08015758
 8013df8:	08015768 	.word	0x08015768
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e02:	e5d7      	b.n	80139b4 <__ieee754_pow+0x354>
 8013e04:	f04f 0a01 	mov.w	sl, #1
 8013e08:	e65e      	b.n	8013ac8 <__ieee754_pow+0x468>
 8013e0a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80140dc <__ieee754_pow+0xa7c>)
 8013e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e10:	4630      	mov	r0, r6
 8013e12:	4639      	mov	r1, r7
 8013e14:	f7ec fa5a 	bl	80002cc <__adddf3>
 8013e18:	4642      	mov	r2, r8
 8013e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8013e1e:	464b      	mov	r3, r9
 8013e20:	4620      	mov	r0, r4
 8013e22:	4629      	mov	r1, r5
 8013e24:	f7ec fa50 	bl	80002c8 <__aeabi_dsub>
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e30:	f7ec fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8013e34:	2800      	cmp	r0, #0
 8013e36:	f47f ae00 	bne.w	8013a3a <__ieee754_pow+0x3da>
 8013e3a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013e3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013e42:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013e46:	fa43 fa0a 	asr.w	sl, r3, sl
 8013e4a:	44da      	add	sl, fp
 8013e4c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013e50:	489d      	ldr	r0, [pc, #628]	@ (80140c8 <__ieee754_pow+0xa68>)
 8013e52:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013e56:	4108      	asrs	r0, r1
 8013e58:	ea00 030a 	and.w	r3, r0, sl
 8013e5c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013e60:	f1c1 0114 	rsb	r1, r1, #20
 8013e64:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013e68:	fa4a fa01 	asr.w	sl, sl, r1
 8013e6c:	f1bb 0f00 	cmp.w	fp, #0
 8013e70:	4640      	mov	r0, r8
 8013e72:	4649      	mov	r1, r9
 8013e74:	f04f 0200 	mov.w	r2, #0
 8013e78:	bfb8      	it	lt
 8013e7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8013e7e:	f7ec fa23 	bl	80002c8 <__aeabi_dsub>
 8013e82:	4680      	mov	r8, r0
 8013e84:	4689      	mov	r9, r1
 8013e86:	4632      	mov	r2, r6
 8013e88:	463b      	mov	r3, r7
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	4649      	mov	r1, r9
 8013e8e:	f7ec fa1d 	bl	80002cc <__adddf3>
 8013e92:	2400      	movs	r4, #0
 8013e94:	a37c      	add	r3, pc, #496	@ (adr r3, 8014088 <__ieee754_pow+0xa28>)
 8013e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	460d      	mov	r5, r1
 8013e9e:	f7ec fbcb 	bl	8000638 <__aeabi_dmul>
 8013ea2:	4642      	mov	r2, r8
 8013ea4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ea8:	464b      	mov	r3, r9
 8013eaa:	4620      	mov	r0, r4
 8013eac:	4629      	mov	r1, r5
 8013eae:	f7ec fa0b 	bl	80002c8 <__aeabi_dsub>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	4639      	mov	r1, r7
 8013eba:	f7ec fa05 	bl	80002c8 <__aeabi_dsub>
 8013ebe:	a374      	add	r3, pc, #464	@ (adr r3, 8014090 <__ieee754_pow+0xa30>)
 8013ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec4:	f7ec fbb8 	bl	8000638 <__aeabi_dmul>
 8013ec8:	a373      	add	r3, pc, #460	@ (adr r3, 8014098 <__ieee754_pow+0xa38>)
 8013eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ece:	4680      	mov	r8, r0
 8013ed0:	4689      	mov	r9, r1
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	f7ec fbaf 	bl	8000638 <__aeabi_dmul>
 8013eda:	4602      	mov	r2, r0
 8013edc:	460b      	mov	r3, r1
 8013ede:	4640      	mov	r0, r8
 8013ee0:	4649      	mov	r1, r9
 8013ee2:	f7ec f9f3 	bl	80002cc <__adddf3>
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	460d      	mov	r5, r1
 8013eea:	4602      	mov	r2, r0
 8013eec:	460b      	mov	r3, r1
 8013eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ef2:	f7ec f9eb 	bl	80002cc <__adddf3>
 8013ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013efa:	4680      	mov	r8, r0
 8013efc:	4689      	mov	r9, r1
 8013efe:	f7ec f9e3 	bl	80002c8 <__aeabi_dsub>
 8013f02:	4602      	mov	r2, r0
 8013f04:	460b      	mov	r3, r1
 8013f06:	4620      	mov	r0, r4
 8013f08:	4629      	mov	r1, r5
 8013f0a:	f7ec f9dd 	bl	80002c8 <__aeabi_dsub>
 8013f0e:	4642      	mov	r2, r8
 8013f10:	4606      	mov	r6, r0
 8013f12:	460f      	mov	r7, r1
 8013f14:	464b      	mov	r3, r9
 8013f16:	4640      	mov	r0, r8
 8013f18:	4649      	mov	r1, r9
 8013f1a:	f7ec fb8d 	bl	8000638 <__aeabi_dmul>
 8013f1e:	a360      	add	r3, pc, #384	@ (adr r3, 80140a0 <__ieee754_pow+0xa40>)
 8013f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f24:	4604      	mov	r4, r0
 8013f26:	460d      	mov	r5, r1
 8013f28:	f7ec fb86 	bl	8000638 <__aeabi_dmul>
 8013f2c:	a35e      	add	r3, pc, #376	@ (adr r3, 80140a8 <__ieee754_pow+0xa48>)
 8013f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f32:	f7ec f9c9 	bl	80002c8 <__aeabi_dsub>
 8013f36:	4622      	mov	r2, r4
 8013f38:	462b      	mov	r3, r5
 8013f3a:	f7ec fb7d 	bl	8000638 <__aeabi_dmul>
 8013f3e:	a35c      	add	r3, pc, #368	@ (adr r3, 80140b0 <__ieee754_pow+0xa50>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	f7ec f9c2 	bl	80002cc <__adddf3>
 8013f48:	4622      	mov	r2, r4
 8013f4a:	462b      	mov	r3, r5
 8013f4c:	f7ec fb74 	bl	8000638 <__aeabi_dmul>
 8013f50:	a359      	add	r3, pc, #356	@ (adr r3, 80140b8 <__ieee754_pow+0xa58>)
 8013f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f56:	f7ec f9b7 	bl	80002c8 <__aeabi_dsub>
 8013f5a:	4622      	mov	r2, r4
 8013f5c:	462b      	mov	r3, r5
 8013f5e:	f7ec fb6b 	bl	8000638 <__aeabi_dmul>
 8013f62:	a357      	add	r3, pc, #348	@ (adr r3, 80140c0 <__ieee754_pow+0xa60>)
 8013f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f68:	f7ec f9b0 	bl	80002cc <__adddf3>
 8013f6c:	4622      	mov	r2, r4
 8013f6e:	462b      	mov	r3, r5
 8013f70:	f7ec fb62 	bl	8000638 <__aeabi_dmul>
 8013f74:	4602      	mov	r2, r0
 8013f76:	460b      	mov	r3, r1
 8013f78:	4640      	mov	r0, r8
 8013f7a:	4649      	mov	r1, r9
 8013f7c:	f7ec f9a4 	bl	80002c8 <__aeabi_dsub>
 8013f80:	4604      	mov	r4, r0
 8013f82:	460d      	mov	r5, r1
 8013f84:	4602      	mov	r2, r0
 8013f86:	460b      	mov	r3, r1
 8013f88:	4640      	mov	r0, r8
 8013f8a:	4649      	mov	r1, r9
 8013f8c:	f7ec fb54 	bl	8000638 <__aeabi_dmul>
 8013f90:	2200      	movs	r2, #0
 8013f92:	e9cd 0100 	strd	r0, r1, [sp]
 8013f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	4629      	mov	r1, r5
 8013f9e:	f7ec f993 	bl	80002c8 <__aeabi_dsub>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013faa:	f7ec fc6f 	bl	800088c <__aeabi_ddiv>
 8013fae:	4632      	mov	r2, r6
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	460d      	mov	r5, r1
 8013fb4:	463b      	mov	r3, r7
 8013fb6:	4640      	mov	r0, r8
 8013fb8:	4649      	mov	r1, r9
 8013fba:	f7ec fb3d 	bl	8000638 <__aeabi_dmul>
 8013fbe:	4632      	mov	r2, r6
 8013fc0:	463b      	mov	r3, r7
 8013fc2:	f7ec f983 	bl	80002cc <__adddf3>
 8013fc6:	4602      	mov	r2, r0
 8013fc8:	460b      	mov	r3, r1
 8013fca:	4620      	mov	r0, r4
 8013fcc:	4629      	mov	r1, r5
 8013fce:	f7ec f97b 	bl	80002c8 <__aeabi_dsub>
 8013fd2:	4642      	mov	r2, r8
 8013fd4:	464b      	mov	r3, r9
 8013fd6:	f7ec f977 	bl	80002c8 <__aeabi_dsub>
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4602      	mov	r2, r0
 8013fde:	493b      	ldr	r1, [pc, #236]	@ (80140cc <__ieee754_pow+0xa6c>)
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	f7ec f971 	bl	80002c8 <__aeabi_dsub>
 8013fe6:	ec41 0b10 	vmov	d0, r0, r1
 8013fea:	ee10 3a90 	vmov	r3, s1
 8013fee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013ff6:	da30      	bge.n	801405a <__ieee754_pow+0x9fa>
 8013ff8:	4650      	mov	r0, sl
 8013ffa:	f000 fc11 	bl	8014820 <scalbn>
 8013ffe:	ec51 0b10 	vmov	r0, r1, d0
 8014002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014006:	f7ff bbd2 	b.w	80137ae <__ieee754_pow+0x14e>
 801400a:	4c31      	ldr	r4, [pc, #196]	@ (80140d0 <__ieee754_pow+0xa70>)
 801400c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014010:	42a3      	cmp	r3, r4
 8014012:	d91a      	bls.n	801404a <__ieee754_pow+0x9ea>
 8014014:	4b2f      	ldr	r3, [pc, #188]	@ (80140d4 <__ieee754_pow+0xa74>)
 8014016:	440b      	add	r3, r1
 8014018:	4303      	orrs	r3, r0
 801401a:	d009      	beq.n	8014030 <__ieee754_pow+0x9d0>
 801401c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014020:	2200      	movs	r2, #0
 8014022:	2300      	movs	r3, #0
 8014024:	f7ec fd7a 	bl	8000b1c <__aeabi_dcmplt>
 8014028:	3800      	subs	r0, #0
 801402a:	bf18      	it	ne
 801402c:	2001      	movne	r0, #1
 801402e:	e42b      	b.n	8013888 <__ieee754_pow+0x228>
 8014030:	4642      	mov	r2, r8
 8014032:	464b      	mov	r3, r9
 8014034:	f7ec f948 	bl	80002c8 <__aeabi_dsub>
 8014038:	4632      	mov	r2, r6
 801403a:	463b      	mov	r3, r7
 801403c:	f7ec fd82 	bl	8000b44 <__aeabi_dcmpge>
 8014040:	2800      	cmp	r0, #0
 8014042:	d1eb      	bne.n	801401c <__ieee754_pow+0x9bc>
 8014044:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80140e4 <__ieee754_pow+0xa84>
 8014048:	e6f7      	b.n	8013e3a <__ieee754_pow+0x7da>
 801404a:	469a      	mov	sl, r3
 801404c:	4b22      	ldr	r3, [pc, #136]	@ (80140d8 <__ieee754_pow+0xa78>)
 801404e:	459a      	cmp	sl, r3
 8014050:	f63f aef3 	bhi.w	8013e3a <__ieee754_pow+0x7da>
 8014054:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014058:	e715      	b.n	8013e86 <__ieee754_pow+0x826>
 801405a:	ec51 0b10 	vmov	r0, r1, d0
 801405e:	4619      	mov	r1, r3
 8014060:	e7cf      	b.n	8014002 <__ieee754_pow+0x9a2>
 8014062:	491a      	ldr	r1, [pc, #104]	@ (80140cc <__ieee754_pow+0xa6c>)
 8014064:	2000      	movs	r0, #0
 8014066:	f7ff bb18 	b.w	801369a <__ieee754_pow+0x3a>
 801406a:	2000      	movs	r0, #0
 801406c:	2100      	movs	r1, #0
 801406e:	f7ff bb14 	b.w	801369a <__ieee754_pow+0x3a>
 8014072:	4630      	mov	r0, r6
 8014074:	4639      	mov	r1, r7
 8014076:	f7ff bb10 	b.w	801369a <__ieee754_pow+0x3a>
 801407a:	460c      	mov	r4, r1
 801407c:	f7ff bb5e 	b.w	801373c <__ieee754_pow+0xdc>
 8014080:	2400      	movs	r4, #0
 8014082:	f7ff bb49 	b.w	8013718 <__ieee754_pow+0xb8>
 8014086:	bf00      	nop
 8014088:	00000000 	.word	0x00000000
 801408c:	3fe62e43 	.word	0x3fe62e43
 8014090:	fefa39ef 	.word	0xfefa39ef
 8014094:	3fe62e42 	.word	0x3fe62e42
 8014098:	0ca86c39 	.word	0x0ca86c39
 801409c:	be205c61 	.word	0xbe205c61
 80140a0:	72bea4d0 	.word	0x72bea4d0
 80140a4:	3e663769 	.word	0x3e663769
 80140a8:	c5d26bf1 	.word	0xc5d26bf1
 80140ac:	3ebbbd41 	.word	0x3ebbbd41
 80140b0:	af25de2c 	.word	0xaf25de2c
 80140b4:	3f11566a 	.word	0x3f11566a
 80140b8:	16bebd93 	.word	0x16bebd93
 80140bc:	3f66c16c 	.word	0x3f66c16c
 80140c0:	5555553e 	.word	0x5555553e
 80140c4:	3fc55555 	.word	0x3fc55555
 80140c8:	fff00000 	.word	0xfff00000
 80140cc:	3ff00000 	.word	0x3ff00000
 80140d0:	4090cbff 	.word	0x4090cbff
 80140d4:	3f6f3400 	.word	0x3f6f3400
 80140d8:	3fe00000 	.word	0x3fe00000
 80140dc:	652b82fe 	.word	0x652b82fe
 80140e0:	3c971547 	.word	0x3c971547
 80140e4:	4090cc00 	.word	0x4090cc00

080140e8 <__ieee754_rem_pio2>:
 80140e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ec:	ec57 6b10 	vmov	r6, r7, d0
 80140f0:	4bc5      	ldr	r3, [pc, #788]	@ (8014408 <__ieee754_rem_pio2+0x320>)
 80140f2:	b08d      	sub	sp, #52	@ 0x34
 80140f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80140f8:	4598      	cmp	r8, r3
 80140fa:	4604      	mov	r4, r0
 80140fc:	9704      	str	r7, [sp, #16]
 80140fe:	d807      	bhi.n	8014110 <__ieee754_rem_pio2+0x28>
 8014100:	2200      	movs	r2, #0
 8014102:	2300      	movs	r3, #0
 8014104:	ed80 0b00 	vstr	d0, [r0]
 8014108:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801410c:	2500      	movs	r5, #0
 801410e:	e028      	b.n	8014162 <__ieee754_rem_pio2+0x7a>
 8014110:	4bbe      	ldr	r3, [pc, #760]	@ (801440c <__ieee754_rem_pio2+0x324>)
 8014112:	4598      	cmp	r8, r3
 8014114:	d878      	bhi.n	8014208 <__ieee754_rem_pio2+0x120>
 8014116:	9b04      	ldr	r3, [sp, #16]
 8014118:	4dbd      	ldr	r5, [pc, #756]	@ (8014410 <__ieee754_rem_pio2+0x328>)
 801411a:	2b00      	cmp	r3, #0
 801411c:	4630      	mov	r0, r6
 801411e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80143d0 <__ieee754_rem_pio2+0x2e8>)
 8014120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014124:	4639      	mov	r1, r7
 8014126:	dd38      	ble.n	801419a <__ieee754_rem_pio2+0xb2>
 8014128:	f7ec f8ce 	bl	80002c8 <__aeabi_dsub>
 801412c:	45a8      	cmp	r8, r5
 801412e:	4606      	mov	r6, r0
 8014130:	460f      	mov	r7, r1
 8014132:	d01a      	beq.n	801416a <__ieee754_rem_pio2+0x82>
 8014134:	a3a8      	add	r3, pc, #672	@ (adr r3, 80143d8 <__ieee754_rem_pio2+0x2f0>)
 8014136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413a:	f7ec f8c5 	bl	80002c8 <__aeabi_dsub>
 801413e:	4602      	mov	r2, r0
 8014140:	460b      	mov	r3, r1
 8014142:	4680      	mov	r8, r0
 8014144:	4689      	mov	r9, r1
 8014146:	4630      	mov	r0, r6
 8014148:	4639      	mov	r1, r7
 801414a:	f7ec f8bd 	bl	80002c8 <__aeabi_dsub>
 801414e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80143d8 <__ieee754_rem_pio2+0x2f0>)
 8014150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014154:	f7ec f8b8 	bl	80002c8 <__aeabi_dsub>
 8014158:	e9c4 8900 	strd	r8, r9, [r4]
 801415c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014160:	2501      	movs	r5, #1
 8014162:	4628      	mov	r0, r5
 8014164:	b00d      	add	sp, #52	@ 0x34
 8014166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416a:	a39d      	add	r3, pc, #628	@ (adr r3, 80143e0 <__ieee754_rem_pio2+0x2f8>)
 801416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014170:	f7ec f8aa 	bl	80002c8 <__aeabi_dsub>
 8014174:	a39c      	add	r3, pc, #624	@ (adr r3, 80143e8 <__ieee754_rem_pio2+0x300>)
 8014176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417a:	4606      	mov	r6, r0
 801417c:	460f      	mov	r7, r1
 801417e:	f7ec f8a3 	bl	80002c8 <__aeabi_dsub>
 8014182:	4602      	mov	r2, r0
 8014184:	460b      	mov	r3, r1
 8014186:	4680      	mov	r8, r0
 8014188:	4689      	mov	r9, r1
 801418a:	4630      	mov	r0, r6
 801418c:	4639      	mov	r1, r7
 801418e:	f7ec f89b 	bl	80002c8 <__aeabi_dsub>
 8014192:	a395      	add	r3, pc, #596	@ (adr r3, 80143e8 <__ieee754_rem_pio2+0x300>)
 8014194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014198:	e7dc      	b.n	8014154 <__ieee754_rem_pio2+0x6c>
 801419a:	f7ec f897 	bl	80002cc <__adddf3>
 801419e:	45a8      	cmp	r8, r5
 80141a0:	4606      	mov	r6, r0
 80141a2:	460f      	mov	r7, r1
 80141a4:	d018      	beq.n	80141d8 <__ieee754_rem_pio2+0xf0>
 80141a6:	a38c      	add	r3, pc, #560	@ (adr r3, 80143d8 <__ieee754_rem_pio2+0x2f0>)
 80141a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ac:	f7ec f88e 	bl	80002cc <__adddf3>
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	4680      	mov	r8, r0
 80141b6:	4689      	mov	r9, r1
 80141b8:	4630      	mov	r0, r6
 80141ba:	4639      	mov	r1, r7
 80141bc:	f7ec f884 	bl	80002c8 <__aeabi_dsub>
 80141c0:	a385      	add	r3, pc, #532	@ (adr r3, 80143d8 <__ieee754_rem_pio2+0x2f0>)
 80141c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c6:	f7ec f881 	bl	80002cc <__adddf3>
 80141ca:	f04f 35ff 	mov.w	r5, #4294967295
 80141ce:	e9c4 8900 	strd	r8, r9, [r4]
 80141d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80141d6:	e7c4      	b.n	8014162 <__ieee754_rem_pio2+0x7a>
 80141d8:	a381      	add	r3, pc, #516	@ (adr r3, 80143e0 <__ieee754_rem_pio2+0x2f8>)
 80141da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141de:	f7ec f875 	bl	80002cc <__adddf3>
 80141e2:	a381      	add	r3, pc, #516	@ (adr r3, 80143e8 <__ieee754_rem_pio2+0x300>)
 80141e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e8:	4606      	mov	r6, r0
 80141ea:	460f      	mov	r7, r1
 80141ec:	f7ec f86e 	bl	80002cc <__adddf3>
 80141f0:	4602      	mov	r2, r0
 80141f2:	460b      	mov	r3, r1
 80141f4:	4680      	mov	r8, r0
 80141f6:	4689      	mov	r9, r1
 80141f8:	4630      	mov	r0, r6
 80141fa:	4639      	mov	r1, r7
 80141fc:	f7ec f864 	bl	80002c8 <__aeabi_dsub>
 8014200:	a379      	add	r3, pc, #484	@ (adr r3, 80143e8 <__ieee754_rem_pio2+0x300>)
 8014202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014206:	e7de      	b.n	80141c6 <__ieee754_rem_pio2+0xde>
 8014208:	4b82      	ldr	r3, [pc, #520]	@ (8014414 <__ieee754_rem_pio2+0x32c>)
 801420a:	4598      	cmp	r8, r3
 801420c:	f200 80d1 	bhi.w	80143b2 <__ieee754_rem_pio2+0x2ca>
 8014210:	f000 fafe 	bl	8014810 <fabs>
 8014214:	ec57 6b10 	vmov	r6, r7, d0
 8014218:	a375      	add	r3, pc, #468	@ (adr r3, 80143f0 <__ieee754_rem_pio2+0x308>)
 801421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421e:	4630      	mov	r0, r6
 8014220:	4639      	mov	r1, r7
 8014222:	f7ec fa09 	bl	8000638 <__aeabi_dmul>
 8014226:	4b7c      	ldr	r3, [pc, #496]	@ (8014418 <__ieee754_rem_pio2+0x330>)
 8014228:	2200      	movs	r2, #0
 801422a:	f7ec f84f 	bl	80002cc <__adddf3>
 801422e:	f7ec fcb3 	bl	8000b98 <__aeabi_d2iz>
 8014232:	4605      	mov	r5, r0
 8014234:	f7ec f996 	bl	8000564 <__aeabi_i2d>
 8014238:	4602      	mov	r2, r0
 801423a:	460b      	mov	r3, r1
 801423c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014240:	a363      	add	r3, pc, #396	@ (adr r3, 80143d0 <__ieee754_rem_pio2+0x2e8>)
 8014242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014246:	f7ec f9f7 	bl	8000638 <__aeabi_dmul>
 801424a:	4602      	mov	r2, r0
 801424c:	460b      	mov	r3, r1
 801424e:	4630      	mov	r0, r6
 8014250:	4639      	mov	r1, r7
 8014252:	f7ec f839 	bl	80002c8 <__aeabi_dsub>
 8014256:	a360      	add	r3, pc, #384	@ (adr r3, 80143d8 <__ieee754_rem_pio2+0x2f0>)
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	4682      	mov	sl, r0
 801425e:	468b      	mov	fp, r1
 8014260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014264:	f7ec f9e8 	bl	8000638 <__aeabi_dmul>
 8014268:	2d1f      	cmp	r5, #31
 801426a:	4606      	mov	r6, r0
 801426c:	460f      	mov	r7, r1
 801426e:	dc0c      	bgt.n	801428a <__ieee754_rem_pio2+0x1a2>
 8014270:	4b6a      	ldr	r3, [pc, #424]	@ (801441c <__ieee754_rem_pio2+0x334>)
 8014272:	1e6a      	subs	r2, r5, #1
 8014274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014278:	4543      	cmp	r3, r8
 801427a:	d006      	beq.n	801428a <__ieee754_rem_pio2+0x1a2>
 801427c:	4632      	mov	r2, r6
 801427e:	463b      	mov	r3, r7
 8014280:	4650      	mov	r0, sl
 8014282:	4659      	mov	r1, fp
 8014284:	f7ec f820 	bl	80002c8 <__aeabi_dsub>
 8014288:	e00e      	b.n	80142a8 <__ieee754_rem_pio2+0x1c0>
 801428a:	463b      	mov	r3, r7
 801428c:	4632      	mov	r2, r6
 801428e:	4650      	mov	r0, sl
 8014290:	4659      	mov	r1, fp
 8014292:	f7ec f819 	bl	80002c8 <__aeabi_dsub>
 8014296:	ea4f 5328 	mov.w	r3, r8, asr #20
 801429a:	9305      	str	r3, [sp, #20]
 801429c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80142a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80142a4:	2b10      	cmp	r3, #16
 80142a6:	dc02      	bgt.n	80142ae <__ieee754_rem_pio2+0x1c6>
 80142a8:	e9c4 0100 	strd	r0, r1, [r4]
 80142ac:	e039      	b.n	8014322 <__ieee754_rem_pio2+0x23a>
 80142ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80143e0 <__ieee754_rem_pio2+0x2f8>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142b8:	f7ec f9be 	bl	8000638 <__aeabi_dmul>
 80142bc:	4606      	mov	r6, r0
 80142be:	460f      	mov	r7, r1
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	4650      	mov	r0, sl
 80142c6:	4659      	mov	r1, fp
 80142c8:	f7eb fffe 	bl	80002c8 <__aeabi_dsub>
 80142cc:	4602      	mov	r2, r0
 80142ce:	460b      	mov	r3, r1
 80142d0:	4680      	mov	r8, r0
 80142d2:	4689      	mov	r9, r1
 80142d4:	4650      	mov	r0, sl
 80142d6:	4659      	mov	r1, fp
 80142d8:	f7eb fff6 	bl	80002c8 <__aeabi_dsub>
 80142dc:	4632      	mov	r2, r6
 80142de:	463b      	mov	r3, r7
 80142e0:	f7eb fff2 	bl	80002c8 <__aeabi_dsub>
 80142e4:	a340      	add	r3, pc, #256	@ (adr r3, 80143e8 <__ieee754_rem_pio2+0x300>)
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142f2:	f7ec f9a1 	bl	8000638 <__aeabi_dmul>
 80142f6:	4632      	mov	r2, r6
 80142f8:	463b      	mov	r3, r7
 80142fa:	f7eb ffe5 	bl	80002c8 <__aeabi_dsub>
 80142fe:	4602      	mov	r2, r0
 8014300:	460b      	mov	r3, r1
 8014302:	4606      	mov	r6, r0
 8014304:	460f      	mov	r7, r1
 8014306:	4640      	mov	r0, r8
 8014308:	4649      	mov	r1, r9
 801430a:	f7eb ffdd 	bl	80002c8 <__aeabi_dsub>
 801430e:	9a05      	ldr	r2, [sp, #20]
 8014310:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	2b31      	cmp	r3, #49	@ 0x31
 8014318:	dc20      	bgt.n	801435c <__ieee754_rem_pio2+0x274>
 801431a:	e9c4 0100 	strd	r0, r1, [r4]
 801431e:	46c2      	mov	sl, r8
 8014320:	46cb      	mov	fp, r9
 8014322:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014326:	4650      	mov	r0, sl
 8014328:	4642      	mov	r2, r8
 801432a:	464b      	mov	r3, r9
 801432c:	4659      	mov	r1, fp
 801432e:	f7eb ffcb 	bl	80002c8 <__aeabi_dsub>
 8014332:	463b      	mov	r3, r7
 8014334:	4632      	mov	r2, r6
 8014336:	f7eb ffc7 	bl	80002c8 <__aeabi_dsub>
 801433a:	9b04      	ldr	r3, [sp, #16]
 801433c:	2b00      	cmp	r3, #0
 801433e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014342:	f6bf af0e 	bge.w	8014162 <__ieee754_rem_pio2+0x7a>
 8014346:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801434a:	6063      	str	r3, [r4, #4]
 801434c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014350:	f8c4 8000 	str.w	r8, [r4]
 8014354:	60a0      	str	r0, [r4, #8]
 8014356:	60e3      	str	r3, [r4, #12]
 8014358:	426d      	negs	r5, r5
 801435a:	e702      	b.n	8014162 <__ieee754_rem_pio2+0x7a>
 801435c:	a326      	add	r3, pc, #152	@ (adr r3, 80143f8 <__ieee754_rem_pio2+0x310>)
 801435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014366:	f7ec f967 	bl	8000638 <__aeabi_dmul>
 801436a:	4606      	mov	r6, r0
 801436c:	460f      	mov	r7, r1
 801436e:	4602      	mov	r2, r0
 8014370:	460b      	mov	r3, r1
 8014372:	4640      	mov	r0, r8
 8014374:	4649      	mov	r1, r9
 8014376:	f7eb ffa7 	bl	80002c8 <__aeabi_dsub>
 801437a:	4602      	mov	r2, r0
 801437c:	460b      	mov	r3, r1
 801437e:	4682      	mov	sl, r0
 8014380:	468b      	mov	fp, r1
 8014382:	4640      	mov	r0, r8
 8014384:	4649      	mov	r1, r9
 8014386:	f7eb ff9f 	bl	80002c8 <__aeabi_dsub>
 801438a:	4632      	mov	r2, r6
 801438c:	463b      	mov	r3, r7
 801438e:	f7eb ff9b 	bl	80002c8 <__aeabi_dsub>
 8014392:	a31b      	add	r3, pc, #108	@ (adr r3, 8014400 <__ieee754_rem_pio2+0x318>)
 8014394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014398:	4606      	mov	r6, r0
 801439a:	460f      	mov	r7, r1
 801439c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143a0:	f7ec f94a 	bl	8000638 <__aeabi_dmul>
 80143a4:	4632      	mov	r2, r6
 80143a6:	463b      	mov	r3, r7
 80143a8:	f7eb ff8e 	bl	80002c8 <__aeabi_dsub>
 80143ac:	4606      	mov	r6, r0
 80143ae:	460f      	mov	r7, r1
 80143b0:	e764      	b.n	801427c <__ieee754_rem_pio2+0x194>
 80143b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014420 <__ieee754_rem_pio2+0x338>)
 80143b4:	4598      	cmp	r8, r3
 80143b6:	d935      	bls.n	8014424 <__ieee754_rem_pio2+0x33c>
 80143b8:	4632      	mov	r2, r6
 80143ba:	463b      	mov	r3, r7
 80143bc:	4630      	mov	r0, r6
 80143be:	4639      	mov	r1, r7
 80143c0:	f7eb ff82 	bl	80002c8 <__aeabi_dsub>
 80143c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143c8:	e9c4 0100 	strd	r0, r1, [r4]
 80143cc:	e69e      	b.n	801410c <__ieee754_rem_pio2+0x24>
 80143ce:	bf00      	nop
 80143d0:	54400000 	.word	0x54400000
 80143d4:	3ff921fb 	.word	0x3ff921fb
 80143d8:	1a626331 	.word	0x1a626331
 80143dc:	3dd0b461 	.word	0x3dd0b461
 80143e0:	1a600000 	.word	0x1a600000
 80143e4:	3dd0b461 	.word	0x3dd0b461
 80143e8:	2e037073 	.word	0x2e037073
 80143ec:	3ba3198a 	.word	0x3ba3198a
 80143f0:	6dc9c883 	.word	0x6dc9c883
 80143f4:	3fe45f30 	.word	0x3fe45f30
 80143f8:	2e000000 	.word	0x2e000000
 80143fc:	3ba3198a 	.word	0x3ba3198a
 8014400:	252049c1 	.word	0x252049c1
 8014404:	397b839a 	.word	0x397b839a
 8014408:	3fe921fb 	.word	0x3fe921fb
 801440c:	4002d97b 	.word	0x4002d97b
 8014410:	3ff921fb 	.word	0x3ff921fb
 8014414:	413921fb 	.word	0x413921fb
 8014418:	3fe00000 	.word	0x3fe00000
 801441c:	08015788 	.word	0x08015788
 8014420:	7fefffff 	.word	0x7fefffff
 8014424:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014428:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801442c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014430:	4630      	mov	r0, r6
 8014432:	460f      	mov	r7, r1
 8014434:	f7ec fbb0 	bl	8000b98 <__aeabi_d2iz>
 8014438:	f7ec f894 	bl	8000564 <__aeabi_i2d>
 801443c:	4602      	mov	r2, r0
 801443e:	460b      	mov	r3, r1
 8014440:	4630      	mov	r0, r6
 8014442:	4639      	mov	r1, r7
 8014444:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014448:	f7eb ff3e 	bl	80002c8 <__aeabi_dsub>
 801444c:	4b22      	ldr	r3, [pc, #136]	@ (80144d8 <__ieee754_rem_pio2+0x3f0>)
 801444e:	2200      	movs	r2, #0
 8014450:	f7ec f8f2 	bl	8000638 <__aeabi_dmul>
 8014454:	460f      	mov	r7, r1
 8014456:	4606      	mov	r6, r0
 8014458:	f7ec fb9e 	bl	8000b98 <__aeabi_d2iz>
 801445c:	f7ec f882 	bl	8000564 <__aeabi_i2d>
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	4630      	mov	r0, r6
 8014466:	4639      	mov	r1, r7
 8014468:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801446c:	f7eb ff2c 	bl	80002c8 <__aeabi_dsub>
 8014470:	4b19      	ldr	r3, [pc, #100]	@ (80144d8 <__ieee754_rem_pio2+0x3f0>)
 8014472:	2200      	movs	r2, #0
 8014474:	f7ec f8e0 	bl	8000638 <__aeabi_dmul>
 8014478:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801447c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014480:	f04f 0803 	mov.w	r8, #3
 8014484:	2600      	movs	r6, #0
 8014486:	2700      	movs	r7, #0
 8014488:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801448c:	4632      	mov	r2, r6
 801448e:	463b      	mov	r3, r7
 8014490:	46c2      	mov	sl, r8
 8014492:	f108 38ff 	add.w	r8, r8, #4294967295
 8014496:	f7ec fb37 	bl	8000b08 <__aeabi_dcmpeq>
 801449a:	2800      	cmp	r0, #0
 801449c:	d1f4      	bne.n	8014488 <__ieee754_rem_pio2+0x3a0>
 801449e:	4b0f      	ldr	r3, [pc, #60]	@ (80144dc <__ieee754_rem_pio2+0x3f4>)
 80144a0:	9301      	str	r3, [sp, #4]
 80144a2:	2302      	movs	r3, #2
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	462a      	mov	r2, r5
 80144a8:	4653      	mov	r3, sl
 80144aa:	4621      	mov	r1, r4
 80144ac:	a806      	add	r0, sp, #24
 80144ae:	f000 fa73 	bl	8014998 <__kernel_rem_pio2>
 80144b2:	9b04      	ldr	r3, [sp, #16]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	4605      	mov	r5, r0
 80144b8:	f6bf ae53 	bge.w	8014162 <__ieee754_rem_pio2+0x7a>
 80144bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80144c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144c4:	e9c4 2300 	strd	r2, r3, [r4]
 80144c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80144cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80144d4:	e740      	b.n	8014358 <__ieee754_rem_pio2+0x270>
 80144d6:	bf00      	nop
 80144d8:	41700000 	.word	0x41700000
 80144dc:	08015808 	.word	0x08015808

080144e0 <atan>:
 80144e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	ec55 4b10 	vmov	r4, r5, d0
 80144e8:	4bbf      	ldr	r3, [pc, #764]	@ (80147e8 <atan+0x308>)
 80144ea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80144ee:	429e      	cmp	r6, r3
 80144f0:	46ab      	mov	fp, r5
 80144f2:	d918      	bls.n	8014526 <atan+0x46>
 80144f4:	4bbd      	ldr	r3, [pc, #756]	@ (80147ec <atan+0x30c>)
 80144f6:	429e      	cmp	r6, r3
 80144f8:	d801      	bhi.n	80144fe <atan+0x1e>
 80144fa:	d109      	bne.n	8014510 <atan+0x30>
 80144fc:	b144      	cbz	r4, 8014510 <atan+0x30>
 80144fe:	4622      	mov	r2, r4
 8014500:	462b      	mov	r3, r5
 8014502:	4620      	mov	r0, r4
 8014504:	4629      	mov	r1, r5
 8014506:	f7eb fee1 	bl	80002cc <__adddf3>
 801450a:	4604      	mov	r4, r0
 801450c:	460d      	mov	r5, r1
 801450e:	e006      	b.n	801451e <atan+0x3e>
 8014510:	f1bb 0f00 	cmp.w	fp, #0
 8014514:	f340 812b 	ble.w	801476e <atan+0x28e>
 8014518:	a597      	add	r5, pc, #604	@ (adr r5, 8014778 <atan+0x298>)
 801451a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801451e:	ec45 4b10 	vmov	d0, r4, r5
 8014522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014526:	4bb2      	ldr	r3, [pc, #712]	@ (80147f0 <atan+0x310>)
 8014528:	429e      	cmp	r6, r3
 801452a:	d813      	bhi.n	8014554 <atan+0x74>
 801452c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014530:	429e      	cmp	r6, r3
 8014532:	d80c      	bhi.n	801454e <atan+0x6e>
 8014534:	a392      	add	r3, pc, #584	@ (adr r3, 8014780 <atan+0x2a0>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	4620      	mov	r0, r4
 801453c:	4629      	mov	r1, r5
 801453e:	f7eb fec5 	bl	80002cc <__adddf3>
 8014542:	4bac      	ldr	r3, [pc, #688]	@ (80147f4 <atan+0x314>)
 8014544:	2200      	movs	r2, #0
 8014546:	f7ec fb07 	bl	8000b58 <__aeabi_dcmpgt>
 801454a:	2800      	cmp	r0, #0
 801454c:	d1e7      	bne.n	801451e <atan+0x3e>
 801454e:	f04f 3aff 	mov.w	sl, #4294967295
 8014552:	e029      	b.n	80145a8 <atan+0xc8>
 8014554:	f000 f95c 	bl	8014810 <fabs>
 8014558:	4ba7      	ldr	r3, [pc, #668]	@ (80147f8 <atan+0x318>)
 801455a:	429e      	cmp	r6, r3
 801455c:	ec55 4b10 	vmov	r4, r5, d0
 8014560:	f200 80bc 	bhi.w	80146dc <atan+0x1fc>
 8014564:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014568:	429e      	cmp	r6, r3
 801456a:	f200 809e 	bhi.w	80146aa <atan+0x1ca>
 801456e:	4622      	mov	r2, r4
 8014570:	462b      	mov	r3, r5
 8014572:	4620      	mov	r0, r4
 8014574:	4629      	mov	r1, r5
 8014576:	f7eb fea9 	bl	80002cc <__adddf3>
 801457a:	4b9e      	ldr	r3, [pc, #632]	@ (80147f4 <atan+0x314>)
 801457c:	2200      	movs	r2, #0
 801457e:	f7eb fea3 	bl	80002c8 <__aeabi_dsub>
 8014582:	2200      	movs	r2, #0
 8014584:	4606      	mov	r6, r0
 8014586:	460f      	mov	r7, r1
 8014588:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801458c:	4620      	mov	r0, r4
 801458e:	4629      	mov	r1, r5
 8014590:	f7eb fe9c 	bl	80002cc <__adddf3>
 8014594:	4602      	mov	r2, r0
 8014596:	460b      	mov	r3, r1
 8014598:	4630      	mov	r0, r6
 801459a:	4639      	mov	r1, r7
 801459c:	f7ec f976 	bl	800088c <__aeabi_ddiv>
 80145a0:	f04f 0a00 	mov.w	sl, #0
 80145a4:	4604      	mov	r4, r0
 80145a6:	460d      	mov	r5, r1
 80145a8:	4622      	mov	r2, r4
 80145aa:	462b      	mov	r3, r5
 80145ac:	4620      	mov	r0, r4
 80145ae:	4629      	mov	r1, r5
 80145b0:	f7ec f842 	bl	8000638 <__aeabi_dmul>
 80145b4:	4602      	mov	r2, r0
 80145b6:	460b      	mov	r3, r1
 80145b8:	4680      	mov	r8, r0
 80145ba:	4689      	mov	r9, r1
 80145bc:	f7ec f83c 	bl	8000638 <__aeabi_dmul>
 80145c0:	a371      	add	r3, pc, #452	@ (adr r3, 8014788 <atan+0x2a8>)
 80145c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c6:	4606      	mov	r6, r0
 80145c8:	460f      	mov	r7, r1
 80145ca:	f7ec f835 	bl	8000638 <__aeabi_dmul>
 80145ce:	a370      	add	r3, pc, #448	@ (adr r3, 8014790 <atan+0x2b0>)
 80145d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d4:	f7eb fe7a 	bl	80002cc <__adddf3>
 80145d8:	4632      	mov	r2, r6
 80145da:	463b      	mov	r3, r7
 80145dc:	f7ec f82c 	bl	8000638 <__aeabi_dmul>
 80145e0:	a36d      	add	r3, pc, #436	@ (adr r3, 8014798 <atan+0x2b8>)
 80145e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e6:	f7eb fe71 	bl	80002cc <__adddf3>
 80145ea:	4632      	mov	r2, r6
 80145ec:	463b      	mov	r3, r7
 80145ee:	f7ec f823 	bl	8000638 <__aeabi_dmul>
 80145f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80147a0 <atan+0x2c0>)
 80145f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f8:	f7eb fe68 	bl	80002cc <__adddf3>
 80145fc:	4632      	mov	r2, r6
 80145fe:	463b      	mov	r3, r7
 8014600:	f7ec f81a 	bl	8000638 <__aeabi_dmul>
 8014604:	a368      	add	r3, pc, #416	@ (adr r3, 80147a8 <atan+0x2c8>)
 8014606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460a:	f7eb fe5f 	bl	80002cc <__adddf3>
 801460e:	4632      	mov	r2, r6
 8014610:	463b      	mov	r3, r7
 8014612:	f7ec f811 	bl	8000638 <__aeabi_dmul>
 8014616:	a366      	add	r3, pc, #408	@ (adr r3, 80147b0 <atan+0x2d0>)
 8014618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461c:	f7eb fe56 	bl	80002cc <__adddf3>
 8014620:	4642      	mov	r2, r8
 8014622:	464b      	mov	r3, r9
 8014624:	f7ec f808 	bl	8000638 <__aeabi_dmul>
 8014628:	a363      	add	r3, pc, #396	@ (adr r3, 80147b8 <atan+0x2d8>)
 801462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462e:	4680      	mov	r8, r0
 8014630:	4689      	mov	r9, r1
 8014632:	4630      	mov	r0, r6
 8014634:	4639      	mov	r1, r7
 8014636:	f7eb ffff 	bl	8000638 <__aeabi_dmul>
 801463a:	a361      	add	r3, pc, #388	@ (adr r3, 80147c0 <atan+0x2e0>)
 801463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014640:	f7eb fe42 	bl	80002c8 <__aeabi_dsub>
 8014644:	4632      	mov	r2, r6
 8014646:	463b      	mov	r3, r7
 8014648:	f7eb fff6 	bl	8000638 <__aeabi_dmul>
 801464c:	a35e      	add	r3, pc, #376	@ (adr r3, 80147c8 <atan+0x2e8>)
 801464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014652:	f7eb fe39 	bl	80002c8 <__aeabi_dsub>
 8014656:	4632      	mov	r2, r6
 8014658:	463b      	mov	r3, r7
 801465a:	f7eb ffed 	bl	8000638 <__aeabi_dmul>
 801465e:	a35c      	add	r3, pc, #368	@ (adr r3, 80147d0 <atan+0x2f0>)
 8014660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014664:	f7eb fe30 	bl	80002c8 <__aeabi_dsub>
 8014668:	4632      	mov	r2, r6
 801466a:	463b      	mov	r3, r7
 801466c:	f7eb ffe4 	bl	8000638 <__aeabi_dmul>
 8014670:	a359      	add	r3, pc, #356	@ (adr r3, 80147d8 <atan+0x2f8>)
 8014672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014676:	f7eb fe27 	bl	80002c8 <__aeabi_dsub>
 801467a:	4632      	mov	r2, r6
 801467c:	463b      	mov	r3, r7
 801467e:	f7eb ffdb 	bl	8000638 <__aeabi_dmul>
 8014682:	4602      	mov	r2, r0
 8014684:	460b      	mov	r3, r1
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7eb fe1f 	bl	80002cc <__adddf3>
 801468e:	4622      	mov	r2, r4
 8014690:	462b      	mov	r3, r5
 8014692:	f7eb ffd1 	bl	8000638 <__aeabi_dmul>
 8014696:	f1ba 3fff 	cmp.w	sl, #4294967295
 801469a:	4602      	mov	r2, r0
 801469c:	460b      	mov	r3, r1
 801469e:	d148      	bne.n	8014732 <atan+0x252>
 80146a0:	4620      	mov	r0, r4
 80146a2:	4629      	mov	r1, r5
 80146a4:	f7eb fe10 	bl	80002c8 <__aeabi_dsub>
 80146a8:	e72f      	b.n	801450a <atan+0x2a>
 80146aa:	4b52      	ldr	r3, [pc, #328]	@ (80147f4 <atan+0x314>)
 80146ac:	2200      	movs	r2, #0
 80146ae:	4620      	mov	r0, r4
 80146b0:	4629      	mov	r1, r5
 80146b2:	f7eb fe09 	bl	80002c8 <__aeabi_dsub>
 80146b6:	4b4f      	ldr	r3, [pc, #316]	@ (80147f4 <atan+0x314>)
 80146b8:	4606      	mov	r6, r0
 80146ba:	460f      	mov	r7, r1
 80146bc:	2200      	movs	r2, #0
 80146be:	4620      	mov	r0, r4
 80146c0:	4629      	mov	r1, r5
 80146c2:	f7eb fe03 	bl	80002cc <__adddf3>
 80146c6:	4602      	mov	r2, r0
 80146c8:	460b      	mov	r3, r1
 80146ca:	4630      	mov	r0, r6
 80146cc:	4639      	mov	r1, r7
 80146ce:	f7ec f8dd 	bl	800088c <__aeabi_ddiv>
 80146d2:	f04f 0a01 	mov.w	sl, #1
 80146d6:	4604      	mov	r4, r0
 80146d8:	460d      	mov	r5, r1
 80146da:	e765      	b.n	80145a8 <atan+0xc8>
 80146dc:	4b47      	ldr	r3, [pc, #284]	@ (80147fc <atan+0x31c>)
 80146de:	429e      	cmp	r6, r3
 80146e0:	d21c      	bcs.n	801471c <atan+0x23c>
 80146e2:	4b47      	ldr	r3, [pc, #284]	@ (8014800 <atan+0x320>)
 80146e4:	2200      	movs	r2, #0
 80146e6:	4620      	mov	r0, r4
 80146e8:	4629      	mov	r1, r5
 80146ea:	f7eb fded 	bl	80002c8 <__aeabi_dsub>
 80146ee:	4b44      	ldr	r3, [pc, #272]	@ (8014800 <atan+0x320>)
 80146f0:	4606      	mov	r6, r0
 80146f2:	460f      	mov	r7, r1
 80146f4:	2200      	movs	r2, #0
 80146f6:	4620      	mov	r0, r4
 80146f8:	4629      	mov	r1, r5
 80146fa:	f7eb ff9d 	bl	8000638 <__aeabi_dmul>
 80146fe:	4b3d      	ldr	r3, [pc, #244]	@ (80147f4 <atan+0x314>)
 8014700:	2200      	movs	r2, #0
 8014702:	f7eb fde3 	bl	80002cc <__adddf3>
 8014706:	4602      	mov	r2, r0
 8014708:	460b      	mov	r3, r1
 801470a:	4630      	mov	r0, r6
 801470c:	4639      	mov	r1, r7
 801470e:	f7ec f8bd 	bl	800088c <__aeabi_ddiv>
 8014712:	f04f 0a02 	mov.w	sl, #2
 8014716:	4604      	mov	r4, r0
 8014718:	460d      	mov	r5, r1
 801471a:	e745      	b.n	80145a8 <atan+0xc8>
 801471c:	4622      	mov	r2, r4
 801471e:	462b      	mov	r3, r5
 8014720:	4938      	ldr	r1, [pc, #224]	@ (8014804 <atan+0x324>)
 8014722:	2000      	movs	r0, #0
 8014724:	f7ec f8b2 	bl	800088c <__aeabi_ddiv>
 8014728:	f04f 0a03 	mov.w	sl, #3
 801472c:	4604      	mov	r4, r0
 801472e:	460d      	mov	r5, r1
 8014730:	e73a      	b.n	80145a8 <atan+0xc8>
 8014732:	4b35      	ldr	r3, [pc, #212]	@ (8014808 <atan+0x328>)
 8014734:	4e35      	ldr	r6, [pc, #212]	@ (801480c <atan+0x32c>)
 8014736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	f7eb fdc3 	bl	80002c8 <__aeabi_dsub>
 8014742:	4622      	mov	r2, r4
 8014744:	462b      	mov	r3, r5
 8014746:	f7eb fdbf 	bl	80002c8 <__aeabi_dsub>
 801474a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801474e:	4602      	mov	r2, r0
 8014750:	460b      	mov	r3, r1
 8014752:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014756:	f7eb fdb7 	bl	80002c8 <__aeabi_dsub>
 801475a:	f1bb 0f00 	cmp.w	fp, #0
 801475e:	4604      	mov	r4, r0
 8014760:	460d      	mov	r5, r1
 8014762:	f6bf aedc 	bge.w	801451e <atan+0x3e>
 8014766:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801476a:	461d      	mov	r5, r3
 801476c:	e6d7      	b.n	801451e <atan+0x3e>
 801476e:	a51c      	add	r5, pc, #112	@ (adr r5, 80147e0 <atan+0x300>)
 8014770:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014774:	e6d3      	b.n	801451e <atan+0x3e>
 8014776:	bf00      	nop
 8014778:	54442d18 	.word	0x54442d18
 801477c:	3ff921fb 	.word	0x3ff921fb
 8014780:	8800759c 	.word	0x8800759c
 8014784:	7e37e43c 	.word	0x7e37e43c
 8014788:	e322da11 	.word	0xe322da11
 801478c:	3f90ad3a 	.word	0x3f90ad3a
 8014790:	24760deb 	.word	0x24760deb
 8014794:	3fa97b4b 	.word	0x3fa97b4b
 8014798:	a0d03d51 	.word	0xa0d03d51
 801479c:	3fb10d66 	.word	0x3fb10d66
 80147a0:	c54c206e 	.word	0xc54c206e
 80147a4:	3fb745cd 	.word	0x3fb745cd
 80147a8:	920083ff 	.word	0x920083ff
 80147ac:	3fc24924 	.word	0x3fc24924
 80147b0:	5555550d 	.word	0x5555550d
 80147b4:	3fd55555 	.word	0x3fd55555
 80147b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80147bc:	bfa2b444 	.word	0xbfa2b444
 80147c0:	52defd9a 	.word	0x52defd9a
 80147c4:	3fadde2d 	.word	0x3fadde2d
 80147c8:	af749a6d 	.word	0xaf749a6d
 80147cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80147d0:	fe231671 	.word	0xfe231671
 80147d4:	3fbc71c6 	.word	0x3fbc71c6
 80147d8:	9998ebc4 	.word	0x9998ebc4
 80147dc:	3fc99999 	.word	0x3fc99999
 80147e0:	54442d18 	.word	0x54442d18
 80147e4:	bff921fb 	.word	0xbff921fb
 80147e8:	440fffff 	.word	0x440fffff
 80147ec:	7ff00000 	.word	0x7ff00000
 80147f0:	3fdbffff 	.word	0x3fdbffff
 80147f4:	3ff00000 	.word	0x3ff00000
 80147f8:	3ff2ffff 	.word	0x3ff2ffff
 80147fc:	40038000 	.word	0x40038000
 8014800:	3ff80000 	.word	0x3ff80000
 8014804:	bff00000 	.word	0xbff00000
 8014808:	08015910 	.word	0x08015910
 801480c:	08015930 	.word	0x08015930

08014810 <fabs>:
 8014810:	ec51 0b10 	vmov	r0, r1, d0
 8014814:	4602      	mov	r2, r0
 8014816:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801481a:	ec43 2b10 	vmov	d0, r2, r3
 801481e:	4770      	bx	lr

08014820 <scalbn>:
 8014820:	b570      	push	{r4, r5, r6, lr}
 8014822:	ec55 4b10 	vmov	r4, r5, d0
 8014826:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801482a:	4606      	mov	r6, r0
 801482c:	462b      	mov	r3, r5
 801482e:	b991      	cbnz	r1, 8014856 <scalbn+0x36>
 8014830:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014834:	4323      	orrs	r3, r4
 8014836:	d03d      	beq.n	80148b4 <scalbn+0x94>
 8014838:	4b35      	ldr	r3, [pc, #212]	@ (8014910 <scalbn+0xf0>)
 801483a:	4620      	mov	r0, r4
 801483c:	4629      	mov	r1, r5
 801483e:	2200      	movs	r2, #0
 8014840:	f7eb fefa 	bl	8000638 <__aeabi_dmul>
 8014844:	4b33      	ldr	r3, [pc, #204]	@ (8014914 <scalbn+0xf4>)
 8014846:	429e      	cmp	r6, r3
 8014848:	4604      	mov	r4, r0
 801484a:	460d      	mov	r5, r1
 801484c:	da0f      	bge.n	801486e <scalbn+0x4e>
 801484e:	a328      	add	r3, pc, #160	@ (adr r3, 80148f0 <scalbn+0xd0>)
 8014850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014854:	e01e      	b.n	8014894 <scalbn+0x74>
 8014856:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801485a:	4291      	cmp	r1, r2
 801485c:	d10b      	bne.n	8014876 <scalbn+0x56>
 801485e:	4622      	mov	r2, r4
 8014860:	4620      	mov	r0, r4
 8014862:	4629      	mov	r1, r5
 8014864:	f7eb fd32 	bl	80002cc <__adddf3>
 8014868:	4604      	mov	r4, r0
 801486a:	460d      	mov	r5, r1
 801486c:	e022      	b.n	80148b4 <scalbn+0x94>
 801486e:	460b      	mov	r3, r1
 8014870:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014874:	3936      	subs	r1, #54	@ 0x36
 8014876:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801487a:	4296      	cmp	r6, r2
 801487c:	dd0d      	ble.n	801489a <scalbn+0x7a>
 801487e:	2d00      	cmp	r5, #0
 8014880:	a11d      	add	r1, pc, #116	@ (adr r1, 80148f8 <scalbn+0xd8>)
 8014882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014886:	da02      	bge.n	801488e <scalbn+0x6e>
 8014888:	a11d      	add	r1, pc, #116	@ (adr r1, 8014900 <scalbn+0xe0>)
 801488a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801488e:	a31a      	add	r3, pc, #104	@ (adr r3, 80148f8 <scalbn+0xd8>)
 8014890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014894:	f7eb fed0 	bl	8000638 <__aeabi_dmul>
 8014898:	e7e6      	b.n	8014868 <scalbn+0x48>
 801489a:	1872      	adds	r2, r6, r1
 801489c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80148a0:	428a      	cmp	r2, r1
 80148a2:	dcec      	bgt.n	801487e <scalbn+0x5e>
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	dd08      	ble.n	80148ba <scalbn+0x9a>
 80148a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80148ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80148b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80148b4:	ec45 4b10 	vmov	d0, r4, r5
 80148b8:	bd70      	pop	{r4, r5, r6, pc}
 80148ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80148be:	da08      	bge.n	80148d2 <scalbn+0xb2>
 80148c0:	2d00      	cmp	r5, #0
 80148c2:	a10b      	add	r1, pc, #44	@ (adr r1, 80148f0 <scalbn+0xd0>)
 80148c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148c8:	dac1      	bge.n	801484e <scalbn+0x2e>
 80148ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8014908 <scalbn+0xe8>)
 80148cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148d0:	e7bd      	b.n	801484e <scalbn+0x2e>
 80148d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80148d6:	3236      	adds	r2, #54	@ 0x36
 80148d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80148dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80148e0:	4620      	mov	r0, r4
 80148e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014918 <scalbn+0xf8>)
 80148e4:	4629      	mov	r1, r5
 80148e6:	2200      	movs	r2, #0
 80148e8:	e7d4      	b.n	8014894 <scalbn+0x74>
 80148ea:	bf00      	nop
 80148ec:	f3af 8000 	nop.w
 80148f0:	c2f8f359 	.word	0xc2f8f359
 80148f4:	01a56e1f 	.word	0x01a56e1f
 80148f8:	8800759c 	.word	0x8800759c
 80148fc:	7e37e43c 	.word	0x7e37e43c
 8014900:	8800759c 	.word	0x8800759c
 8014904:	fe37e43c 	.word	0xfe37e43c
 8014908:	c2f8f359 	.word	0xc2f8f359
 801490c:	81a56e1f 	.word	0x81a56e1f
 8014910:	43500000 	.word	0x43500000
 8014914:	ffff3cb0 	.word	0xffff3cb0
 8014918:	3c900000 	.word	0x3c900000

0801491c <with_errno>:
 801491c:	b510      	push	{r4, lr}
 801491e:	ed2d 8b02 	vpush	{d8}
 8014922:	eeb0 8a40 	vmov.f32	s16, s0
 8014926:	eef0 8a60 	vmov.f32	s17, s1
 801492a:	4604      	mov	r4, r0
 801492c:	f7fb fd78 	bl	8010420 <__errno>
 8014930:	eeb0 0a48 	vmov.f32	s0, s16
 8014934:	eef0 0a68 	vmov.f32	s1, s17
 8014938:	ecbd 8b02 	vpop	{d8}
 801493c:	6004      	str	r4, [r0, #0]
 801493e:	bd10      	pop	{r4, pc}

08014940 <xflow>:
 8014940:	4603      	mov	r3, r0
 8014942:	b507      	push	{r0, r1, r2, lr}
 8014944:	ec51 0b10 	vmov	r0, r1, d0
 8014948:	b183      	cbz	r3, 801496c <xflow+0x2c>
 801494a:	4602      	mov	r2, r0
 801494c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014950:	e9cd 2300 	strd	r2, r3, [sp]
 8014954:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014958:	f7eb fe6e 	bl	8000638 <__aeabi_dmul>
 801495c:	ec41 0b10 	vmov	d0, r0, r1
 8014960:	2022      	movs	r0, #34	@ 0x22
 8014962:	b003      	add	sp, #12
 8014964:	f85d eb04 	ldr.w	lr, [sp], #4
 8014968:	f7ff bfd8 	b.w	801491c <with_errno>
 801496c:	4602      	mov	r2, r0
 801496e:	460b      	mov	r3, r1
 8014970:	e7ee      	b.n	8014950 <xflow+0x10>
 8014972:	0000      	movs	r0, r0
 8014974:	0000      	movs	r0, r0
	...

08014978 <__math_uflow>:
 8014978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014980 <__math_uflow+0x8>
 801497c:	f7ff bfe0 	b.w	8014940 <xflow>
 8014980:	00000000 	.word	0x00000000
 8014984:	10000000 	.word	0x10000000

08014988 <__math_oflow>:
 8014988:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014990 <__math_oflow+0x8>
 801498c:	f7ff bfd8 	b.w	8014940 <xflow>
 8014990:	00000000 	.word	0x00000000
 8014994:	70000000 	.word	0x70000000

08014998 <__kernel_rem_pio2>:
 8014998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499c:	ed2d 8b02 	vpush	{d8}
 80149a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80149a4:	f112 0f14 	cmn.w	r2, #20
 80149a8:	9306      	str	r3, [sp, #24]
 80149aa:	9104      	str	r1, [sp, #16]
 80149ac:	4bbe      	ldr	r3, [pc, #760]	@ (8014ca8 <__kernel_rem_pio2+0x310>)
 80149ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80149b0:	9008      	str	r0, [sp, #32]
 80149b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149b6:	9300      	str	r3, [sp, #0]
 80149b8:	9b06      	ldr	r3, [sp, #24]
 80149ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80149be:	bfa8      	it	ge
 80149c0:	1ed4      	subge	r4, r2, #3
 80149c2:	9305      	str	r3, [sp, #20]
 80149c4:	bfb2      	itee	lt
 80149c6:	2400      	movlt	r4, #0
 80149c8:	2318      	movge	r3, #24
 80149ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80149ce:	f06f 0317 	mvn.w	r3, #23
 80149d2:	fb04 3303 	mla	r3, r4, r3, r3
 80149d6:	eb03 0b02 	add.w	fp, r3, r2
 80149da:	9b00      	ldr	r3, [sp, #0]
 80149dc:	9a05      	ldr	r2, [sp, #20]
 80149de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8014c98 <__kernel_rem_pio2+0x300>
 80149e2:	eb03 0802 	add.w	r8, r3, r2
 80149e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80149e8:	1aa7      	subs	r7, r4, r2
 80149ea:	ae20      	add	r6, sp, #128	@ 0x80
 80149ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80149f0:	2500      	movs	r5, #0
 80149f2:	4545      	cmp	r5, r8
 80149f4:	dd13      	ble.n	8014a1e <__kernel_rem_pio2+0x86>
 80149f6:	9b06      	ldr	r3, [sp, #24]
 80149f8:	aa20      	add	r2, sp, #128	@ 0x80
 80149fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80149fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014a02:	f04f 0800 	mov.w	r8, #0
 8014a06:	9b00      	ldr	r3, [sp, #0]
 8014a08:	4598      	cmp	r8, r3
 8014a0a:	dc31      	bgt.n	8014a70 <__kernel_rem_pio2+0xd8>
 8014a0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8014c98 <__kernel_rem_pio2+0x300>
 8014a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014a14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a18:	462f      	mov	r7, r5
 8014a1a:	2600      	movs	r6, #0
 8014a1c:	e01b      	b.n	8014a56 <__kernel_rem_pio2+0xbe>
 8014a1e:	42ef      	cmn	r7, r5
 8014a20:	d407      	bmi.n	8014a32 <__kernel_rem_pio2+0x9a>
 8014a22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014a26:	f7eb fd9d 	bl	8000564 <__aeabi_i2d>
 8014a2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014a2e:	3501      	adds	r5, #1
 8014a30:	e7df      	b.n	80149f2 <__kernel_rem_pio2+0x5a>
 8014a32:	ec51 0b18 	vmov	r0, r1, d8
 8014a36:	e7f8      	b.n	8014a2a <__kernel_rem_pio2+0x92>
 8014a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014a40:	f7eb fdfa 	bl	8000638 <__aeabi_dmul>
 8014a44:	4602      	mov	r2, r0
 8014a46:	460b      	mov	r3, r1
 8014a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a4c:	f7eb fc3e 	bl	80002cc <__adddf3>
 8014a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a54:	3601      	adds	r6, #1
 8014a56:	9b05      	ldr	r3, [sp, #20]
 8014a58:	429e      	cmp	r6, r3
 8014a5a:	f1a7 0708 	sub.w	r7, r7, #8
 8014a5e:	ddeb      	ble.n	8014a38 <__kernel_rem_pio2+0xa0>
 8014a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a64:	f108 0801 	add.w	r8, r8, #1
 8014a68:	ecaa 7b02 	vstmia	sl!, {d7}
 8014a6c:	3508      	adds	r5, #8
 8014a6e:	e7ca      	b.n	8014a06 <__kernel_rem_pio2+0x6e>
 8014a70:	9b00      	ldr	r3, [sp, #0]
 8014a72:	f8dd 8000 	ldr.w	r8, [sp]
 8014a76:	aa0c      	add	r2, sp, #48	@ 0x30
 8014a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014a80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a8c:	ab98      	add	r3, sp, #608	@ 0x260
 8014a8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014a92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8014a9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014a9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014aa2:	46a1      	mov	r9, r4
 8014aa4:	46c2      	mov	sl, r8
 8014aa6:	f1ba 0f00 	cmp.w	sl, #0
 8014aaa:	f1a5 0508 	sub.w	r5, r5, #8
 8014aae:	dc77      	bgt.n	8014ba0 <__kernel_rem_pio2+0x208>
 8014ab0:	4658      	mov	r0, fp
 8014ab2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014ab6:	f7ff feb3 	bl	8014820 <scalbn>
 8014aba:	ec57 6b10 	vmov	r6, r7, d0
 8014abe:	2200      	movs	r2, #0
 8014ac0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	4639      	mov	r1, r7
 8014ac8:	f7eb fdb6 	bl	8000638 <__aeabi_dmul>
 8014acc:	ec41 0b10 	vmov	d0, r0, r1
 8014ad0:	f000 faba 	bl	8015048 <floor>
 8014ad4:	4b75      	ldr	r3, [pc, #468]	@ (8014cac <__kernel_rem_pio2+0x314>)
 8014ad6:	ec51 0b10 	vmov	r0, r1, d0
 8014ada:	2200      	movs	r2, #0
 8014adc:	f7eb fdac 	bl	8000638 <__aeabi_dmul>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	f7eb fbee 	bl	80002c8 <__aeabi_dsub>
 8014aec:	460f      	mov	r7, r1
 8014aee:	4606      	mov	r6, r0
 8014af0:	f7ec f852 	bl	8000b98 <__aeabi_d2iz>
 8014af4:	9002      	str	r0, [sp, #8]
 8014af6:	f7eb fd35 	bl	8000564 <__aeabi_i2d>
 8014afa:	4602      	mov	r2, r0
 8014afc:	460b      	mov	r3, r1
 8014afe:	4630      	mov	r0, r6
 8014b00:	4639      	mov	r1, r7
 8014b02:	f7eb fbe1 	bl	80002c8 <__aeabi_dsub>
 8014b06:	f1bb 0f00 	cmp.w	fp, #0
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	460f      	mov	r7, r1
 8014b0e:	dd6c      	ble.n	8014bea <__kernel_rem_pio2+0x252>
 8014b10:	f108 31ff 	add.w	r1, r8, #4294967295
 8014b14:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b16:	9d02      	ldr	r5, [sp, #8]
 8014b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b1c:	f1cb 0018 	rsb	r0, fp, #24
 8014b20:	fa43 f200 	asr.w	r2, r3, r0
 8014b24:	4415      	add	r5, r2
 8014b26:	4082      	lsls	r2, r0
 8014b28:	1a9b      	subs	r3, r3, r2
 8014b2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8014b2c:	9502      	str	r5, [sp, #8]
 8014b2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014b32:	f1cb 0217 	rsb	r2, fp, #23
 8014b36:	fa43 f902 	asr.w	r9, r3, r2
 8014b3a:	f1b9 0f00 	cmp.w	r9, #0
 8014b3e:	dd64      	ble.n	8014c0a <__kernel_rem_pio2+0x272>
 8014b40:	9b02      	ldr	r3, [sp, #8]
 8014b42:	2200      	movs	r2, #0
 8014b44:	3301      	adds	r3, #1
 8014b46:	9302      	str	r3, [sp, #8]
 8014b48:	4615      	mov	r5, r2
 8014b4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014b4e:	4590      	cmp	r8, r2
 8014b50:	f300 80b8 	bgt.w	8014cc4 <__kernel_rem_pio2+0x32c>
 8014b54:	f1bb 0f00 	cmp.w	fp, #0
 8014b58:	dd07      	ble.n	8014b6a <__kernel_rem_pio2+0x1d2>
 8014b5a:	f1bb 0f01 	cmp.w	fp, #1
 8014b5e:	f000 80bf 	beq.w	8014ce0 <__kernel_rem_pio2+0x348>
 8014b62:	f1bb 0f02 	cmp.w	fp, #2
 8014b66:	f000 80c6 	beq.w	8014cf6 <__kernel_rem_pio2+0x35e>
 8014b6a:	f1b9 0f02 	cmp.w	r9, #2
 8014b6e:	d14c      	bne.n	8014c0a <__kernel_rem_pio2+0x272>
 8014b70:	4632      	mov	r2, r6
 8014b72:	463b      	mov	r3, r7
 8014b74:	494e      	ldr	r1, [pc, #312]	@ (8014cb0 <__kernel_rem_pio2+0x318>)
 8014b76:	2000      	movs	r0, #0
 8014b78:	f7eb fba6 	bl	80002c8 <__aeabi_dsub>
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	460f      	mov	r7, r1
 8014b80:	2d00      	cmp	r5, #0
 8014b82:	d042      	beq.n	8014c0a <__kernel_rem_pio2+0x272>
 8014b84:	4658      	mov	r0, fp
 8014b86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8014ca0 <__kernel_rem_pio2+0x308>
 8014b8a:	f7ff fe49 	bl	8014820 <scalbn>
 8014b8e:	4630      	mov	r0, r6
 8014b90:	4639      	mov	r1, r7
 8014b92:	ec53 2b10 	vmov	r2, r3, d0
 8014b96:	f7eb fb97 	bl	80002c8 <__aeabi_dsub>
 8014b9a:	4606      	mov	r6, r0
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	e034      	b.n	8014c0a <__kernel_rem_pio2+0x272>
 8014ba0:	4b44      	ldr	r3, [pc, #272]	@ (8014cb4 <__kernel_rem_pio2+0x31c>)
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ba8:	f7eb fd46 	bl	8000638 <__aeabi_dmul>
 8014bac:	f7eb fff4 	bl	8000b98 <__aeabi_d2iz>
 8014bb0:	f7eb fcd8 	bl	8000564 <__aeabi_i2d>
 8014bb4:	4b40      	ldr	r3, [pc, #256]	@ (8014cb8 <__kernel_rem_pio2+0x320>)
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	4606      	mov	r6, r0
 8014bba:	460f      	mov	r7, r1
 8014bbc:	f7eb fd3c 	bl	8000638 <__aeabi_dmul>
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bc8:	f7eb fb7e 	bl	80002c8 <__aeabi_dsub>
 8014bcc:	f7eb ffe4 	bl	8000b98 <__aeabi_d2iz>
 8014bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014bd4:	f849 0b04 	str.w	r0, [r9], #4
 8014bd8:	4639      	mov	r1, r7
 8014bda:	4630      	mov	r0, r6
 8014bdc:	f7eb fb76 	bl	80002cc <__adddf3>
 8014be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014be8:	e75d      	b.n	8014aa6 <__kernel_rem_pio2+0x10e>
 8014bea:	d107      	bne.n	8014bfc <__kernel_rem_pio2+0x264>
 8014bec:	f108 33ff 	add.w	r3, r8, #4294967295
 8014bf0:	aa0c      	add	r2, sp, #48	@ 0x30
 8014bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bf6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014bfa:	e79e      	b.n	8014b3a <__kernel_rem_pio2+0x1a2>
 8014bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8014cbc <__kernel_rem_pio2+0x324>)
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f7eb ffa0 	bl	8000b44 <__aeabi_dcmpge>
 8014c04:	2800      	cmp	r0, #0
 8014c06:	d143      	bne.n	8014c90 <__kernel_rem_pio2+0x2f8>
 8014c08:	4681      	mov	r9, r0
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	4630      	mov	r0, r6
 8014c10:	4639      	mov	r1, r7
 8014c12:	f7eb ff79 	bl	8000b08 <__aeabi_dcmpeq>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f000 80bf 	beq.w	8014d9a <__kernel_rem_pio2+0x402>
 8014c1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014c20:	2200      	movs	r2, #0
 8014c22:	9900      	ldr	r1, [sp, #0]
 8014c24:	428b      	cmp	r3, r1
 8014c26:	da6e      	bge.n	8014d06 <__kernel_rem_pio2+0x36e>
 8014c28:	2a00      	cmp	r2, #0
 8014c2a:	f000 8089 	beq.w	8014d40 <__kernel_rem_pio2+0x3a8>
 8014c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c32:	ab0c      	add	r3, sp, #48	@ 0x30
 8014c34:	f1ab 0b18 	sub.w	fp, fp, #24
 8014c38:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d0f6      	beq.n	8014c2e <__kernel_rem_pio2+0x296>
 8014c40:	4658      	mov	r0, fp
 8014c42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8014ca0 <__kernel_rem_pio2+0x308>
 8014c46:	f7ff fdeb 	bl	8014820 <scalbn>
 8014c4a:	f108 0301 	add.w	r3, r8, #1
 8014c4e:	00da      	lsls	r2, r3, #3
 8014c50:	9205      	str	r2, [sp, #20]
 8014c52:	ec55 4b10 	vmov	r4, r5, d0
 8014c56:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014c58:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8014cb4 <__kernel_rem_pio2+0x31c>
 8014c5c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014c60:	4646      	mov	r6, r8
 8014c62:	f04f 0a00 	mov.w	sl, #0
 8014c66:	2e00      	cmp	r6, #0
 8014c68:	f280 80cf 	bge.w	8014e0a <__kernel_rem_pio2+0x472>
 8014c6c:	4644      	mov	r4, r8
 8014c6e:	2c00      	cmp	r4, #0
 8014c70:	f2c0 80fd 	blt.w	8014e6e <__kernel_rem_pio2+0x4d6>
 8014c74:	4b12      	ldr	r3, [pc, #72]	@ (8014cc0 <__kernel_rem_pio2+0x328>)
 8014c76:	461f      	mov	r7, r3
 8014c78:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014c7e:	9306      	str	r3, [sp, #24]
 8014c80:	f04f 0a00 	mov.w	sl, #0
 8014c84:	f04f 0b00 	mov.w	fp, #0
 8014c88:	2600      	movs	r6, #0
 8014c8a:	eba8 0504 	sub.w	r5, r8, r4
 8014c8e:	e0e2      	b.n	8014e56 <__kernel_rem_pio2+0x4be>
 8014c90:	f04f 0902 	mov.w	r9, #2
 8014c94:	e754      	b.n	8014b40 <__kernel_rem_pio2+0x1a8>
 8014c96:	bf00      	nop
	...
 8014ca4:	3ff00000 	.word	0x3ff00000
 8014ca8:	08015990 	.word	0x08015990
 8014cac:	40200000 	.word	0x40200000
 8014cb0:	3ff00000 	.word	0x3ff00000
 8014cb4:	3e700000 	.word	0x3e700000
 8014cb8:	41700000 	.word	0x41700000
 8014cbc:	3fe00000 	.word	0x3fe00000
 8014cc0:	08015950 	.word	0x08015950
 8014cc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8014cc8:	b945      	cbnz	r5, 8014cdc <__kernel_rem_pio2+0x344>
 8014cca:	b123      	cbz	r3, 8014cd6 <__kernel_rem_pio2+0x33e>
 8014ccc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014cd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	3201      	adds	r2, #1
 8014cd8:	461d      	mov	r5, r3
 8014cda:	e738      	b.n	8014b4e <__kernel_rem_pio2+0x1b6>
 8014cdc:	1acb      	subs	r3, r1, r3
 8014cde:	e7f7      	b.n	8014cd0 <__kernel_rem_pio2+0x338>
 8014ce0:	f108 32ff 	add.w	r2, r8, #4294967295
 8014ce4:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014cee:	a90c      	add	r1, sp, #48	@ 0x30
 8014cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014cf4:	e739      	b.n	8014b6a <__kernel_rem_pio2+0x1d2>
 8014cf6:	f108 32ff 	add.w	r2, r8, #4294967295
 8014cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8014cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014d04:	e7f3      	b.n	8014cee <__kernel_rem_pio2+0x356>
 8014d06:	a90c      	add	r1, sp, #48	@ 0x30
 8014d08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014d0c:	3b01      	subs	r3, #1
 8014d0e:	430a      	orrs	r2, r1
 8014d10:	e787      	b.n	8014c22 <__kernel_rem_pio2+0x28a>
 8014d12:	3401      	adds	r4, #1
 8014d14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	d0fa      	beq.n	8014d12 <__kernel_rem_pio2+0x37a>
 8014d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014d1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014d22:	eb0d 0503 	add.w	r5, sp, r3
 8014d26:	9b06      	ldr	r3, [sp, #24]
 8014d28:	aa20      	add	r2, sp, #128	@ 0x80
 8014d2a:	4443      	add	r3, r8
 8014d2c:	f108 0701 	add.w	r7, r8, #1
 8014d30:	3d98      	subs	r5, #152	@ 0x98
 8014d32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014d36:	4444      	add	r4, r8
 8014d38:	42bc      	cmp	r4, r7
 8014d3a:	da04      	bge.n	8014d46 <__kernel_rem_pio2+0x3ae>
 8014d3c:	46a0      	mov	r8, r4
 8014d3e:	e6a2      	b.n	8014a86 <__kernel_rem_pio2+0xee>
 8014d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d42:	2401      	movs	r4, #1
 8014d44:	e7e6      	b.n	8014d14 <__kernel_rem_pio2+0x37c>
 8014d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014d4c:	f7eb fc0a 	bl	8000564 <__aeabi_i2d>
 8014d50:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015018 <__kernel_rem_pio2+0x680>
 8014d54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014d58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014d60:	46b2      	mov	sl, r6
 8014d62:	f04f 0800 	mov.w	r8, #0
 8014d66:	9b05      	ldr	r3, [sp, #20]
 8014d68:	4598      	cmp	r8, r3
 8014d6a:	dd05      	ble.n	8014d78 <__kernel_rem_pio2+0x3e0>
 8014d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d70:	3701      	adds	r7, #1
 8014d72:	eca5 7b02 	vstmia	r5!, {d7}
 8014d76:	e7df      	b.n	8014d38 <__kernel_rem_pio2+0x3a0>
 8014d78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014d7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014d80:	f7eb fc5a 	bl	8000638 <__aeabi_dmul>
 8014d84:	4602      	mov	r2, r0
 8014d86:	460b      	mov	r3, r1
 8014d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d8c:	f7eb fa9e 	bl	80002cc <__adddf3>
 8014d90:	f108 0801 	add.w	r8, r8, #1
 8014d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d98:	e7e5      	b.n	8014d66 <__kernel_rem_pio2+0x3ce>
 8014d9a:	f1cb 0000 	rsb	r0, fp, #0
 8014d9e:	ec47 6b10 	vmov	d0, r6, r7
 8014da2:	f7ff fd3d 	bl	8014820 <scalbn>
 8014da6:	ec55 4b10 	vmov	r4, r5, d0
 8014daa:	4b9d      	ldr	r3, [pc, #628]	@ (8015020 <__kernel_rem_pio2+0x688>)
 8014dac:	2200      	movs	r2, #0
 8014dae:	4620      	mov	r0, r4
 8014db0:	4629      	mov	r1, r5
 8014db2:	f7eb fec7 	bl	8000b44 <__aeabi_dcmpge>
 8014db6:	b300      	cbz	r0, 8014dfa <__kernel_rem_pio2+0x462>
 8014db8:	4b9a      	ldr	r3, [pc, #616]	@ (8015024 <__kernel_rem_pio2+0x68c>)
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	f7eb fc3a 	bl	8000638 <__aeabi_dmul>
 8014dc4:	f7eb fee8 	bl	8000b98 <__aeabi_d2iz>
 8014dc8:	4606      	mov	r6, r0
 8014dca:	f7eb fbcb 	bl	8000564 <__aeabi_i2d>
 8014dce:	4b94      	ldr	r3, [pc, #592]	@ (8015020 <__kernel_rem_pio2+0x688>)
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f7eb fc31 	bl	8000638 <__aeabi_dmul>
 8014dd6:	460b      	mov	r3, r1
 8014dd8:	4602      	mov	r2, r0
 8014dda:	4629      	mov	r1, r5
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f7eb fa73 	bl	80002c8 <__aeabi_dsub>
 8014de2:	f7eb fed9 	bl	8000b98 <__aeabi_d2iz>
 8014de6:	ab0c      	add	r3, sp, #48	@ 0x30
 8014de8:	f10b 0b18 	add.w	fp, fp, #24
 8014dec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014df0:	f108 0801 	add.w	r8, r8, #1
 8014df4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014df8:	e722      	b.n	8014c40 <__kernel_rem_pio2+0x2a8>
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	4629      	mov	r1, r5
 8014dfe:	f7eb fecb 	bl	8000b98 <__aeabi_d2iz>
 8014e02:	ab0c      	add	r3, sp, #48	@ 0x30
 8014e04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014e08:	e71a      	b.n	8014c40 <__kernel_rem_pio2+0x2a8>
 8014e0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014e0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e10:	f7eb fba8 	bl	8000564 <__aeabi_i2d>
 8014e14:	4622      	mov	r2, r4
 8014e16:	462b      	mov	r3, r5
 8014e18:	f7eb fc0e 	bl	8000638 <__aeabi_dmul>
 8014e1c:	4652      	mov	r2, sl
 8014e1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014e22:	465b      	mov	r3, fp
 8014e24:	4620      	mov	r0, r4
 8014e26:	4629      	mov	r1, r5
 8014e28:	f7eb fc06 	bl	8000638 <__aeabi_dmul>
 8014e2c:	3e01      	subs	r6, #1
 8014e2e:	4604      	mov	r4, r0
 8014e30:	460d      	mov	r5, r1
 8014e32:	e718      	b.n	8014c66 <__kernel_rem_pio2+0x2ce>
 8014e34:	9906      	ldr	r1, [sp, #24]
 8014e36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014e3a:	9106      	str	r1, [sp, #24]
 8014e3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014e40:	f7eb fbfa 	bl	8000638 <__aeabi_dmul>
 8014e44:	4602      	mov	r2, r0
 8014e46:	460b      	mov	r3, r1
 8014e48:	4650      	mov	r0, sl
 8014e4a:	4659      	mov	r1, fp
 8014e4c:	f7eb fa3e 	bl	80002cc <__adddf3>
 8014e50:	3601      	adds	r6, #1
 8014e52:	4682      	mov	sl, r0
 8014e54:	468b      	mov	fp, r1
 8014e56:	9b00      	ldr	r3, [sp, #0]
 8014e58:	429e      	cmp	r6, r3
 8014e5a:	dc01      	bgt.n	8014e60 <__kernel_rem_pio2+0x4c8>
 8014e5c:	42b5      	cmp	r5, r6
 8014e5e:	dae9      	bge.n	8014e34 <__kernel_rem_pio2+0x49c>
 8014e60:	ab48      	add	r3, sp, #288	@ 0x120
 8014e62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014e66:	e9c5 ab00 	strd	sl, fp, [r5]
 8014e6a:	3c01      	subs	r4, #1
 8014e6c:	e6ff      	b.n	8014c6e <__kernel_rem_pio2+0x2d6>
 8014e6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014e70:	2b02      	cmp	r3, #2
 8014e72:	dc0b      	bgt.n	8014e8c <__kernel_rem_pio2+0x4f4>
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	dc39      	bgt.n	8014eec <__kernel_rem_pio2+0x554>
 8014e78:	d05d      	beq.n	8014f36 <__kernel_rem_pio2+0x59e>
 8014e7a:	9b02      	ldr	r3, [sp, #8]
 8014e7c:	f003 0007 	and.w	r0, r3, #7
 8014e80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014e84:	ecbd 8b02 	vpop	{d8}
 8014e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014e8e:	2b03      	cmp	r3, #3
 8014e90:	d1f3      	bne.n	8014e7a <__kernel_rem_pio2+0x4e2>
 8014e92:	9b05      	ldr	r3, [sp, #20]
 8014e94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014e98:	eb0d 0403 	add.w	r4, sp, r3
 8014e9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014ea0:	4625      	mov	r5, r4
 8014ea2:	46c2      	mov	sl, r8
 8014ea4:	f1ba 0f00 	cmp.w	sl, #0
 8014ea8:	f1a5 0508 	sub.w	r5, r5, #8
 8014eac:	dc6b      	bgt.n	8014f86 <__kernel_rem_pio2+0x5ee>
 8014eae:	4645      	mov	r5, r8
 8014eb0:	2d01      	cmp	r5, #1
 8014eb2:	f1a4 0408 	sub.w	r4, r4, #8
 8014eb6:	f300 8087 	bgt.w	8014fc8 <__kernel_rem_pio2+0x630>
 8014eba:	9c05      	ldr	r4, [sp, #20]
 8014ebc:	ab48      	add	r3, sp, #288	@ 0x120
 8014ebe:	441c      	add	r4, r3
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	f1b8 0f01 	cmp.w	r8, #1
 8014ec8:	f300 809c 	bgt.w	8015004 <__kernel_rem_pio2+0x66c>
 8014ecc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014ed0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8014ed4:	f1b9 0f00 	cmp.w	r9, #0
 8014ed8:	f040 80a6 	bne.w	8015028 <__kernel_rem_pio2+0x690>
 8014edc:	9b04      	ldr	r3, [sp, #16]
 8014ede:	e9c3 7800 	strd	r7, r8, [r3]
 8014ee2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014ee6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014eea:	e7c6      	b.n	8014e7a <__kernel_rem_pio2+0x4e2>
 8014eec:	9d05      	ldr	r5, [sp, #20]
 8014eee:	ab48      	add	r3, sp, #288	@ 0x120
 8014ef0:	441d      	add	r5, r3
 8014ef2:	4644      	mov	r4, r8
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	2c00      	cmp	r4, #0
 8014efa:	da35      	bge.n	8014f68 <__kernel_rem_pio2+0x5d0>
 8014efc:	f1b9 0f00 	cmp.w	r9, #0
 8014f00:	d038      	beq.n	8014f74 <__kernel_rem_pio2+0x5dc>
 8014f02:	4602      	mov	r2, r0
 8014f04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014f08:	9c04      	ldr	r4, [sp, #16]
 8014f0a:	e9c4 2300 	strd	r2, r3, [r4]
 8014f0e:	4602      	mov	r2, r0
 8014f10:	460b      	mov	r3, r1
 8014f12:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8014f16:	f7eb f9d7 	bl	80002c8 <__aeabi_dsub>
 8014f1a:	ad4a      	add	r5, sp, #296	@ 0x128
 8014f1c:	2401      	movs	r4, #1
 8014f1e:	45a0      	cmp	r8, r4
 8014f20:	da2b      	bge.n	8014f7a <__kernel_rem_pio2+0x5e2>
 8014f22:	f1b9 0f00 	cmp.w	r9, #0
 8014f26:	d002      	beq.n	8014f2e <__kernel_rem_pio2+0x596>
 8014f28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	9b04      	ldr	r3, [sp, #16]
 8014f30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014f34:	e7a1      	b.n	8014e7a <__kernel_rem_pio2+0x4e2>
 8014f36:	9c05      	ldr	r4, [sp, #20]
 8014f38:	ab48      	add	r3, sp, #288	@ 0x120
 8014f3a:	441c      	add	r4, r3
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	2100      	movs	r1, #0
 8014f40:	f1b8 0f00 	cmp.w	r8, #0
 8014f44:	da09      	bge.n	8014f5a <__kernel_rem_pio2+0x5c2>
 8014f46:	f1b9 0f00 	cmp.w	r9, #0
 8014f4a:	d002      	beq.n	8014f52 <__kernel_rem_pio2+0x5ba>
 8014f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014f50:	4619      	mov	r1, r3
 8014f52:	9b04      	ldr	r3, [sp, #16]
 8014f54:	e9c3 0100 	strd	r0, r1, [r3]
 8014f58:	e78f      	b.n	8014e7a <__kernel_rem_pio2+0x4e2>
 8014f5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014f5e:	f7eb f9b5 	bl	80002cc <__adddf3>
 8014f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f66:	e7eb      	b.n	8014f40 <__kernel_rem_pio2+0x5a8>
 8014f68:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014f6c:	f7eb f9ae 	bl	80002cc <__adddf3>
 8014f70:	3c01      	subs	r4, #1
 8014f72:	e7c1      	b.n	8014ef8 <__kernel_rem_pio2+0x560>
 8014f74:	4602      	mov	r2, r0
 8014f76:	460b      	mov	r3, r1
 8014f78:	e7c6      	b.n	8014f08 <__kernel_rem_pio2+0x570>
 8014f7a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014f7e:	f7eb f9a5 	bl	80002cc <__adddf3>
 8014f82:	3401      	adds	r4, #1
 8014f84:	e7cb      	b.n	8014f1e <__kernel_rem_pio2+0x586>
 8014f86:	ed95 7b00 	vldr	d7, [r5]
 8014f8a:	ed8d 7b00 	vstr	d7, [sp]
 8014f8e:	ed95 7b02 	vldr	d7, [r5, #8]
 8014f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f96:	ec53 2b17 	vmov	r2, r3, d7
 8014f9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f9e:	f7eb f995 	bl	80002cc <__adddf3>
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	4606      	mov	r6, r0
 8014fa8:	460f      	mov	r7, r1
 8014faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fae:	f7eb f98b 	bl	80002c8 <__aeabi_dsub>
 8014fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fb6:	f7eb f989 	bl	80002cc <__adddf3>
 8014fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014fbe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014fc2:	e9c5 6700 	strd	r6, r7, [r5]
 8014fc6:	e76d      	b.n	8014ea4 <__kernel_rem_pio2+0x50c>
 8014fc8:	ed94 7b00 	vldr	d7, [r4]
 8014fcc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014fd0:	ec51 0b17 	vmov	r0, r1, d7
 8014fd4:	4652      	mov	r2, sl
 8014fd6:	465b      	mov	r3, fp
 8014fd8:	ed8d 7b00 	vstr	d7, [sp]
 8014fdc:	f7eb f976 	bl	80002cc <__adddf3>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	460f      	mov	r7, r1
 8014fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fec:	f7eb f96c 	bl	80002c8 <__aeabi_dsub>
 8014ff0:	4652      	mov	r2, sl
 8014ff2:	465b      	mov	r3, fp
 8014ff4:	f7eb f96a 	bl	80002cc <__adddf3>
 8014ff8:	3d01      	subs	r5, #1
 8014ffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ffe:	e9c4 6700 	strd	r6, r7, [r4]
 8015002:	e755      	b.n	8014eb0 <__kernel_rem_pio2+0x518>
 8015004:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015008:	f7eb f960 	bl	80002cc <__adddf3>
 801500c:	f108 38ff 	add.w	r8, r8, #4294967295
 8015010:	e758      	b.n	8014ec4 <__kernel_rem_pio2+0x52c>
 8015012:	bf00      	nop
 8015014:	f3af 8000 	nop.w
	...
 8015020:	41700000 	.word	0x41700000
 8015024:	3e700000 	.word	0x3e700000
 8015028:	9b04      	ldr	r3, [sp, #16]
 801502a:	9a04      	ldr	r2, [sp, #16]
 801502c:	601f      	str	r7, [r3, #0]
 801502e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8015032:	605c      	str	r4, [r3, #4]
 8015034:	609d      	str	r5, [r3, #8]
 8015036:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801503a:	60d3      	str	r3, [r2, #12]
 801503c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015040:	6110      	str	r0, [r2, #16]
 8015042:	6153      	str	r3, [r2, #20]
 8015044:	e719      	b.n	8014e7a <__kernel_rem_pio2+0x4e2>
 8015046:	bf00      	nop

08015048 <floor>:
 8015048:	ec51 0b10 	vmov	r0, r1, d0
 801504c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015054:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8015058:	2e13      	cmp	r6, #19
 801505a:	460c      	mov	r4, r1
 801505c:	4605      	mov	r5, r0
 801505e:	4680      	mov	r8, r0
 8015060:	dc34      	bgt.n	80150cc <floor+0x84>
 8015062:	2e00      	cmp	r6, #0
 8015064:	da17      	bge.n	8015096 <floor+0x4e>
 8015066:	a332      	add	r3, pc, #200	@ (adr r3, 8015130 <floor+0xe8>)
 8015068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506c:	f7eb f92e 	bl	80002cc <__adddf3>
 8015070:	2200      	movs	r2, #0
 8015072:	2300      	movs	r3, #0
 8015074:	f7eb fd70 	bl	8000b58 <__aeabi_dcmpgt>
 8015078:	b150      	cbz	r0, 8015090 <floor+0x48>
 801507a:	2c00      	cmp	r4, #0
 801507c:	da55      	bge.n	801512a <floor+0xe2>
 801507e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8015082:	432c      	orrs	r4, r5
 8015084:	2500      	movs	r5, #0
 8015086:	42ac      	cmp	r4, r5
 8015088:	4c2b      	ldr	r4, [pc, #172]	@ (8015138 <floor+0xf0>)
 801508a:	bf08      	it	eq
 801508c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8015090:	4621      	mov	r1, r4
 8015092:	4628      	mov	r0, r5
 8015094:	e023      	b.n	80150de <floor+0x96>
 8015096:	4f29      	ldr	r7, [pc, #164]	@ (801513c <floor+0xf4>)
 8015098:	4137      	asrs	r7, r6
 801509a:	ea01 0307 	and.w	r3, r1, r7
 801509e:	4303      	orrs	r3, r0
 80150a0:	d01d      	beq.n	80150de <floor+0x96>
 80150a2:	a323      	add	r3, pc, #140	@ (adr r3, 8015130 <floor+0xe8>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f910 	bl	80002cc <__adddf3>
 80150ac:	2200      	movs	r2, #0
 80150ae:	2300      	movs	r3, #0
 80150b0:	f7eb fd52 	bl	8000b58 <__aeabi_dcmpgt>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	d0eb      	beq.n	8015090 <floor+0x48>
 80150b8:	2c00      	cmp	r4, #0
 80150ba:	bfbe      	ittt	lt
 80150bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80150c0:	4133      	asrlt	r3, r6
 80150c2:	18e4      	addlt	r4, r4, r3
 80150c4:	ea24 0407 	bic.w	r4, r4, r7
 80150c8:	2500      	movs	r5, #0
 80150ca:	e7e1      	b.n	8015090 <floor+0x48>
 80150cc:	2e33      	cmp	r6, #51	@ 0x33
 80150ce:	dd0a      	ble.n	80150e6 <floor+0x9e>
 80150d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80150d4:	d103      	bne.n	80150de <floor+0x96>
 80150d6:	4602      	mov	r2, r0
 80150d8:	460b      	mov	r3, r1
 80150da:	f7eb f8f7 	bl	80002cc <__adddf3>
 80150de:	ec41 0b10 	vmov	d0, r0, r1
 80150e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80150ea:	f04f 37ff 	mov.w	r7, #4294967295
 80150ee:	40df      	lsrs	r7, r3
 80150f0:	4207      	tst	r7, r0
 80150f2:	d0f4      	beq.n	80150de <floor+0x96>
 80150f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8015130 <floor+0xe8>)
 80150f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fa:	f7eb f8e7 	bl	80002cc <__adddf3>
 80150fe:	2200      	movs	r2, #0
 8015100:	2300      	movs	r3, #0
 8015102:	f7eb fd29 	bl	8000b58 <__aeabi_dcmpgt>
 8015106:	2800      	cmp	r0, #0
 8015108:	d0c2      	beq.n	8015090 <floor+0x48>
 801510a:	2c00      	cmp	r4, #0
 801510c:	da0a      	bge.n	8015124 <floor+0xdc>
 801510e:	2e14      	cmp	r6, #20
 8015110:	d101      	bne.n	8015116 <floor+0xce>
 8015112:	3401      	adds	r4, #1
 8015114:	e006      	b.n	8015124 <floor+0xdc>
 8015116:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801511a:	2301      	movs	r3, #1
 801511c:	40b3      	lsls	r3, r6
 801511e:	441d      	add	r5, r3
 8015120:	4545      	cmp	r5, r8
 8015122:	d3f6      	bcc.n	8015112 <floor+0xca>
 8015124:	ea25 0507 	bic.w	r5, r5, r7
 8015128:	e7b2      	b.n	8015090 <floor+0x48>
 801512a:	2500      	movs	r5, #0
 801512c:	462c      	mov	r4, r5
 801512e:	e7af      	b.n	8015090 <floor+0x48>
 8015130:	8800759c 	.word	0x8800759c
 8015134:	7e37e43c 	.word	0x7e37e43c
 8015138:	bff00000 	.word	0xbff00000
 801513c:	000fffff 	.word	0x000fffff

08015140 <_init>:
 8015140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015142:	bf00      	nop
 8015144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015146:	bc08      	pop	{r3}
 8015148:	469e      	mov	lr, r3
 801514a:	4770      	bx	lr

0801514c <_fini>:
 801514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514e:	bf00      	nop
 8015150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015152:	bc08      	pop	{r3}
 8015154:	469e      	mov	lr, r3
 8015156:	4770      	bx	lr
